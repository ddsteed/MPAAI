(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    339645,       8720]
NotebookOptionsPosition[    273127,       7401]
NotebookOutlinePosition[    273593,       7418]
CellTagsIndexPosition[    273550,       7415]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 StyleBox["Leonid Shifrin",
  FontFamily->"FZLanTingHei-DB-GBK",
  FontSize->12,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.8488288700694285, 0.3848325322346838, 0.1479972533760586]],
 StyleBox["\[LineSeparator]",
  FontSize->12,
  FontColor->RGBColor[1, 0.5, 0]],
 StyleBox["\n",
  FontSize->12,
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0.5, 0]],
 StyleBox["Mathematica programming: an advanced introduction                  \
           ",
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox[ButtonBox["<",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{"."}, "MPAAI-5-Functions-on-lists.nb", 
     CharacterEncoding -> "UTF-8"], None},
  ButtonNote->"./MPAAI-5-Functions-on-lists.nb"],
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox[" ",
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox[ButtonBox[">",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-7-Appendices.nb", CharacterEncoding -> 
     "UTF-8"], None},
  ButtonNote->"/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-7-Appendices.nb"],
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox["    ",
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox[ButtonBox["\[CapitalXi]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "contents.nb", CharacterEncoding -> "UTF-8"], None},
  
  ButtonNote->"/Users/fengh/Documents/RDS/EDITED/MPAAI/contents.nb"],
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox["\[LineSeparator]\[LineSeparator]",
  FontSize->12,
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0.5, 0]],
 StyleBox["Edited by Hao Feng",
  FontFamily->"Futura",
  FontSize->12,
  FontWeight->"Medium",
  FontSlant->"Italic",
  FontColor->RGBColor[
   0.8488288700694285, 0.3848325322346838, 0.1479972533760586]]
}], "Text",
 CellMargins->{{66, -45}, {4, 12}},
 CellChangeTimes->{{3.9397640484222183`*^9, 3.939764052679113*^9}, 
   3.9397641564677134`*^9, 3.939764214184162*^9, {3.939774845841297*^9, 
   3.9397748486786137`*^9}, 3.9397769383984737`*^9, 3.939777524212697*^9, {
   3.939777679887363*^9, 3.9397776986053457`*^9}, 3.939777748637487*^9, 
   3.939777854556375*^9, {3.939778004745451*^9, 3.939778004752576*^9}, {
   3.939778088573533*^9, 3.9397780885805683`*^9}, {3.939778858197637*^9, 
   3.9397788582043877`*^9}, {3.939784110406054*^9, 3.939784119539812*^9}, {
   3.940301635922283*^9, 3.9403016359303217`*^9}, {3.940303312321795*^9, 
   3.940303312329103*^9}, {3.9407413803642397`*^9, 3.940741384517211*^9}},
 LineSpacing->{0.6999999999999997, 3},
 Background->RGBColor[
  0.13066300450141147`, 0.12460517280842298`, 0.4353551537346456],
 CellID->912160115,ExpressionUUID->"8f0ad322-7839-4f6c-add5-ef923908f86c"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 StyleBox[" | ", "SectionBar"],
 "Writing efficient programs: some techniques and applications"
}], "Section",
 CellChangeTimes->{
  3.652728456208679*^9, 3.652728527108994*^9, {3.939778595549326*^9, 
   3.939778611587611*^9}},
 CounterAssignments->{{"Section", 5}},
 CellID->1010546796,ExpressionUUID->"5d1b78af-ff2c-48d5-855c-33a18e4746f5"],

Cell[CellGroupData[{

Cell["Introduction", "Subsection",
 CellChangeTimes->{3.940276461636517*^9},
 CellID->1959319896,ExpressionUUID->"b7d92196-4a2f-403a-876f-eed5c087fb20"],

Cell["\<\
This last chapter of this part serves to illustrate the relative efficiency \
of different programming styles in Mathematica on several non - trivial \
applications. This chapter is somewhat different from the previous ones in \
style - it is somewhat less pedagogical - I don\[CloseCurlyQuote]t explain \
every line of code in such detail as before (I assume that the interested \
reader who made it that far will be able to understand the workings of the
code using my rather brief explanations as hints). But it shows real \
problems, wins and trade-offs that one deals with in more serious Mathematica \
programming. Also, some of the techniques discussed here are rather general \
and may be used in many other situations. Finally, the problems I discuss may \
be of interest by themselves.\
\>", "Text",
 CellChangeTimes->{{3.9402764688548117`*^9, 3.940276482061111*^9}},
 CellID->1000423627,ExpressionUUID->"3f0a6e16-1e9c-4326-90ff-b92ab307d12e"],

Cell["\<\
However, there is a lot more to performance tuning in Mathematica than what \
is discussed in this chapter. I will have more to say about it in other parts \
of the tutorial. Excellent treatment of performance-tuning techniques is \
given in the book of David Wagner.\
\>", "Text",
 CellChangeTimes->{{3.9402764688548117`*^9, 3.9402764849839478`*^9}},
 CellID->569325140,ExpressionUUID->"489343ef-f1dd-4e71-a49c-b2ed719646e2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Case study I: checking if a square matrix is diagonal", "Subsection",
 CellChangeTimes->{3.940276494022537*^9},
 CellID->108855381,ExpressionUUID->"bc29bc97-055f-4804-9b8f-0188ba0d09dd"],

Cell["The problem", "ItemNumbered",
 CellChangeTimes->{3.940276500249695*^9},
 CellID->2023804870,ExpressionUUID->"910cab5d-c202-467a-8dd4-6f841b446756"],

Cell["\<\
The formulation of the problem is extremely simple: given a square matrix of \
some size, return True if all the off-diagonal elements are zero and False \
otherwise.\
\>", "Text",
 CellChangeTimes->{{3.940276506517868*^9, 3.940276507720283*^9}, {
  3.940644986365862*^9, 3.940644987048807*^9}},
 CellID->94965257,ExpressionUUID->"348deed2-1133-4a4a-b5a8-2687facd79dc"],

Cell["The test matrices", "ItemNumbered",
 CellChangeTimes->{3.940276513073311*^9},
 CellID->1838734200,ExpressionUUID->"161c2f91-0a3c-4812-859f-1859d7cd0627"],

Cell["\<\
Here we will introduce relatively large test matrices : a random matrix which \
is almost certainly not diagonal, and an identity matrix of the same size, \
which is of course diagonal. All our implementations of DiagonalQ will be \
tested on these matrices.\
\>", "Text",
 CellChangeTimes->{{3.9402765190418987`*^9, 3.940276522032642*^9}},
 CellID->1316019070,ExpressionUUID->"b88e5878-7564-43bc-bd2d-a28d101a7deb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"testmatr", "=", 
   RowBox[{"Array", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Random", "[", "]"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{"400", ",", "400"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testiden", "=", 
   RowBox[{"IdentityMatrix", "[", "400", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940276526294354*^9, 3.940276545569004*^9}},
 CellLabel->"In[566]:=",
 CellID->1399417905,ExpressionUUID->"b8defe13-fa06-4821-b893-09428f3fbe27"],

Cell["Procedural implementation", "ItemNumbered",
 CellChangeTimes->{3.940276551523696*^9},
 CellID->242044473,ExpressionUUID->"5c2d58d6-6afb-424f-a32b-676ec3fd570b"],

Cell["The procedural implementation is straightforward", "Text",
 CellChangeTimes->{3.940276556936109*^9},
 CellID->707430293,ExpressionUUID->"329957fb-b89e-4ce5-afbe-f426ee5a3dc0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "diagonalQProc", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"diagonalQProc", "[", 
     RowBox[{"m_", "?", "MatrixQ"}], "]"}], "/;", 
    RowBox[{"Equal", "@@", 
     RowBox[{"Dimensions", "[", "m", "]"}]}]}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"len", "=", 
        RowBox[{"Length", "[", "m", "]"}]}], ",", "i", ",", "j"}], "}"}], ",", 
     RowBox[{
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "<", 
         RowBox[{"+", "len"}]}], ",", 
        RowBox[{"i", "++"}], ",", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"j", "=", "1"}], ",", 
          RowBox[{"j", "<=", "len"}], ",", 
          RowBox[{"j", "++"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"i", "==", "j"}], ",", 
            RowBox[{"Continue", "[", "]"}], ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"m", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", "j"}], "]"}], "]"}], "!=", "0"}], ",", 
              RowBox[{"Return", "[", "False", "]"}]}], "]"}]}], "]"}]}], 
         "]"}]}], "]"}], ";", 
      RowBox[{"Return", "[", "True", "]"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940276564727409*^9, 3.940276655828638*^9}},
 CellLabel->"In[568]:=",
 CellID->14371005,ExpressionUUID->"49957905-122f-491a-b02c-2dfdd1ee62d2"],

Cell["We can now test the performance of this implementation :", "Text",
 CellChangeTimes->{3.940276665980146*^9},
 CellID->1495119065,ExpressionUUID->"1619288f-6566-43fa-a060-784ae01cb3ed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"diagonalQProc", "[", "testmatr", "]"}], "//", "Timing"}]], "Input",\

 CellChangeTimes->{{3.9402766700209846`*^9, 3.940276675753086*^9}},
 CellLabel->"In[570]:=",
 CellID->1762609047,ExpressionUUID->"4c5b1d3f-c551-4760-b6c0-49fadfda4b6a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000072`", ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.940276676071535*^9},
 CellLabel->"Out[570]=",
 CellID->571718778,ExpressionUUID->"8ed7ef43-aed8-4bae-8945-f01fc3f69609"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"diagonalQProc", "[", "testiden", "]"}], "//", "Timing"}]], "Input",\

 CellChangeTimes->{{3.940276677477283*^9, 3.940276682924757*^9}},
 CellLabel->"In[571]:=",
 CellID->943540150,ExpressionUUID->"ffb8bb34-4ee4-430d-9f7c-186a92cd705a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.150611`", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.940276683432599*^9},
 CellLabel->"Out[571]=",
 CellID->1720056267,ExpressionUUID->"fbc95bde-3798-45ce-830d-a250db11534e"]
}, Open  ]],

Cell["\<\
We see that it is very good on the matrix which is essentially non-diagonal, \
since with procedural approach we have the greatest flexibility to stop at \
any moment when the condition is violated. However, it is completely \
unsatisfactory for diagonal matrices, and we expect it to be also not great \
for very sparse matrices close to diagonal. Can we find a better all-around \
solution?\
\>", "Text",
 CellChangeTimes->{{3.940276693802948*^9, 3.94027669933123*^9}, {
  3.9406450101671963`*^9, 3.9406450108686247`*^9}},
 CellID->21131561,ExpressionUUID->"c1d39276-a9f2-4cb0-9d69-268803855d2b"],

Cell["Functional implementations", "ItemNumbered",
 CellChangeTimes->{3.940277336565713*^9},
 CellID->516251667,ExpressionUUID->"4c69c28f-dd1d-4d1f-b2df-4a5440527dc8"],

Cell["\<\
This is an implementation based on MapIndexed (taken with a minor \
modification from the book of David Wagner. To avoid misunderstanding, let me \
add that he was not really interested in performance aspects in this example) \
:\
\>", "Text",
 CellChangeTimes->{{3.940277373071031*^9, 3.9402773760760727`*^9}},
 CellID->1168453781,ExpressionUUID->"a7cc2704-5254-4b41-b706-c07f947b3301"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "diagnolQ", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"diagnolQ", "[", 
     RowBox[{"m_", "?", "MatrixQ"}], "]"}], "/;", 
    RowBox[{"Equal", "@@", 
     RowBox[{"Dimensions", "[", "m", "]"}]}]}], ":=", 
   RowBox[{"And", "@@", 
    RowBox[{"Flatten", "[", 
     RowBox[{"MapIndexed", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"#1", "==", "0"}], "||", 
         RowBox[{"Equal", "@@", "#2"}]}], "&"}], ",", "m", ",", 
       RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940277377756988*^9, 3.940277416889806*^9}},
 CellLabel->"In[572]:=",
 CellID->1722503338,ExpressionUUID->"dd1e0c02-475b-4f7d-97f6-6a1ca3362ac0"],

Cell["\<\
Be sure to understand this code - it is a good warm-up. We now check the \
timing :\
\>", "Text",
 CellChangeTimes->{3.940277425784037*^9},
 CellID->952415852,ExpressionUUID->"4803784b-ff4d-474d-8c25-5fce242c08e4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"diagnolQ", "[", "testmatr", "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.94027742893677*^9, 3.9402774341765203`*^9}},
 CellLabel->"In[574]:=",
 CellID->1212403070,ExpressionUUID->"84d99791-211f-485c-902e-a8cf2d1fcb99"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.163059`", ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.9402774347001534`*^9},
 CellLabel->"Out[574]=",
 CellID->1391677876,ExpressionUUID->"435c001c-30d8-49a8-80a3-96209155392a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"diagnolQ", "[", "testiden", "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940277436480835*^9, 3.940277442757729*^9}},
 CellLabel->"In[575]:=",
 CellID->1324609961,ExpressionUUID->"334fb5c3-b873-4420-99c9-95be995892e0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.096622`", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.940277443214858*^9},
 CellLabel->"Out[575]=",
 CellID->1795408283,ExpressionUUID->"594c44c3-972c-4143-9db2-37f72afdac0e"]
}, Open  ]],

Cell["\<\
We see that in general, it is even worse than the procedural version, because \
it is never fast. This is of course because MapIndexed traverses the entire \
matrix in any case, even when the result has already been established.\
\>", "Text",
 CellChangeTimes->{{3.940277459828492*^9, 3.940277466996457*^9}},
 CellID->930760198,ExpressionUUID->"93e7e528-0428-4218-bec4-2f9693d91c4e"],

Cell["\<\
We can try to cure it by inserting Throw and Catch, so that the process stops \
right after the condition is first violated:\
\>", "Text",
 CellChangeTimes->{{3.940277459828492*^9, 3.940277468954348*^9}},
 CellID->819616407,ExpressionUUID->"967a1809-cd20-4558-9448-0a95c3433b4a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "diagnolQNew", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"diagnolQNew", "[", 
     RowBox[{"m_", "?", "MatrixQ"}], "]"}], "/;", 
    RowBox[{"Equal", "@@", 
     RowBox[{"Dimensions", "[", "m", "]"}]}]}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"#", "===", "False"}], ",", "#", ",", "True"}], "]"}], "&"}], 
    "[", 
    RowBox[{"Catch", "[", 
     RowBox[{"MapIndexed", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Not", "[", 
           RowBox[{
            RowBox[{"#1", "==", "0"}], "||", 
            RowBox[{"Equal", "@@", "#2"}]}], "]"}], ",", 
          RowBox[{"Throw", "[", "False", "]"}]}], "]"}], "&"}], ",", "m", ",", 
       RowBox[{"{", "2", "}"}]}], "]"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9402774718092117`*^9, 3.940277531792091*^9}, {
  3.940277596684443*^9, 3.9402776278379593`*^9}},
 CellLabel->"In[580]:=",
 CellID->617552918,ExpressionUUID->"5f7ca1e2-5a36-4cab-aceb-44770fba0131"],

Cell["\<\
This helps somewhat in the first case, but even here not that much:\
\>", "Text",
 CellChangeTimes->{3.940277540951961*^9},
 CellID->1064051784,ExpressionUUID->"3db18147-c863-494e-bcd2-fcb2d727fddd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"diagnolQNew", "[", "testmatr", "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.9402775447982283`*^9, 3.940277549824316*^9}},
 CellLabel->"In[582]:=",
 CellID->294527570,ExpressionUUID->"ab6bbc66-8eb8-4184-aa3f-a0034b159744"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.040412`", ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.940277550342579*^9, 3.9402776314602747`*^9},
 CellLabel->"Out[582]=",
 CellID->347358835,ExpressionUUID->"16961559-235d-48ef-b789-1d5794b1913d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"diagnolQNew", "[", "testiden", "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940277554803771*^9, 3.940277562937212*^9}},
 CellLabel->"In[583]:=",
 CellID->2024654646,ExpressionUUID->"9ded3635-f603-4cd8-b128-bfd9c75c2e32"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.127515`", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.940277563397138*^9, 3.940277634025063*^9},
 CellLabel->"Out[583]=",
 CellID->1840301802,ExpressionUUID->"1cf40e3e-7aa9-4220-af78-3c7af33bf4a8"]
}, Open  ]],

Cell["Implementations based on structural operations", "ItemNumbered",
 CellChangeTimes->{3.9402776477395773`*^9},
 CellID->1892902120,ExpressionUUID->"582957bd-1a8e-45af-884a-9168b85961e5"],

Cell["\<\
Now we will go a long way in trying to use certain functions optimized in \
Mathematica. The two main ideas will be to flatten the matrix and work with a \
flat list, and to vectorize our problem and use highly optimized vectorized \
operations.\
\>", "Text",
 CellChangeTimes->{{3.940283545832095*^9, 3.9402835514345627`*^9}},
 CellID->1183184182,ExpressionUUID->"3fce76d2-90df-45fd-ac0e-cc9781f88206"],

Cell["\<\
The following implementation is a first step in this direction.\
\>", "Text",
 CellChangeTimes->{{3.940283545832095*^9, 3.940283549632452*^9}},
 CellID->2134421011,ExpressionUUID->"6eeb3dec-86f5-444b-8403-1cd4f49eb954"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "diagnolQ1", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"diagnolQ1", "[", 
     RowBox[{"m_", "?", "MatrixQ"}], "]"}], "/;", 
    RowBox[{"Equal", "@@", 
     RowBox[{"Dimensions", "[", "m", "]"}]}]}], ":=", 
   RowBox[{
    RowBox[{"Total", "[", 
     RowBox[{"Abs", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"MapIndexed", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Delete", "[", 
           RowBox[{"#1", ",", 
            RowBox[{"First", "[", "#2", "]"}]}], "]"}], "&"}], ",", "m"}], 
        "]"}], "]"}], "]"}], "]"}], "===", "0"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940283553022634*^9, 3.940283597962146*^9}},
 CellLabel->"In[584]:=",
 CellID->591270972,ExpressionUUID->"7650b531-f8a9-406a-af86-b783ef8d4e1c"],

Cell[TextData[{
 "What happens here is that we use MapIndexed on level 1 to go through matrix \
rows and delete ",
 StyleBox["n",
  FontSlant->"Italic"],
 "-th element (the diagonal one) from each row. We then flatten the resulting \
matrix and sum all elements. If the matrix is diagonal, the sum should be \
zero."
}], "Text",
 CellChangeTimes->{{3.940283608981632*^9, 3.940283615258746*^9}},
 CellID->2065715614,ExpressionUUID->"eaa12320-8d53-4d85-98ac-4ce0f80259ce"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"diagnolQ1", "[", "testmatr", "]"}], "//", 
  "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"diagnolQ1", "[", "testiden", "]"}], "//", "Timing"}]}], "Input",
 CellChangeTimes->{{3.940283623870598*^9, 3.940283642582664*^9}},
 CellLabel->"In[586]:=",
 CellID->57276738,ExpressionUUID->"8ca394ab-2c8a-4018-9d13-66a0b0c7f4a6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.019604`", ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.940283642944192*^9},
 CellLabel->"Out[586]=",
 CellID->1077156471,ExpressionUUID->"3259a8da-ebea-4936-8af6-72716ae1d2c9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.007662`", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.9402836429605217`*^9},
 CellLabel->"Out[587]=",
 CellID->481663887,ExpressionUUID->"048d44a7-9169-499d-99cd-79fcc4359895"]
}, Open  ]],

Cell["The results are certainly better than before.", "Text",
 CellChangeTimes->{{3.940283661766013*^9, 3.94028366368326*^9}},
 CellID->880780872,ExpressionUUID->"bcc96fca-0f6c-4c6b-88a0-eea35270e2c7"],

Cell["\<\
The limitation of the approach based on summing all the elements is that the \
matrix elements can not be lists of different lengths.\
\>", "Text",
 CellChangeTimes->{{3.940283661766013*^9, 3.9402836677174597`*^9}},
 CellID->1225745698,ExpressionUUID->"1f23d26c-2362-42c6-a0a6-c9ad09c09cbc"],

Cell["\<\
This is the next logical step: instead of deleting diagonal elements from \
each row, we rotate each row so that the main diagonal becomes the first \
column, or the first row of the transposed matrix. Taking Rest of this \
matrix, flattening it and summing all the elements, we have to get zero if \
the matrix is diagonal.\
\>", "Text",
 CellChangeTimes->{{3.940283661766013*^9, 3.9402836707858467`*^9}},
 CellID->198213662,ExpressionUUID->"01416f04-6587-4f54-a0ee-503f93261cfc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "diagnolQ2", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"diagnolQ2", "[", 
     RowBox[{"m_", "?", "MatrixQ"}], "]"}], "/;", 
    RowBox[{"Equal", "@@", 
     RowBox[{"Dimensions", "[", "m", "]"}]}]}], ":=", 
   RowBox[{
    RowBox[{"Total", "[", 
     RowBox[{"Abs", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Rest", "[", 
        RowBox[{"Transpose", "[", 
         RowBox[{"MapIndexed", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"RotateLeft", "[", 
             RowBox[{"#1", ",", 
              RowBox[{
               RowBox[{"#2", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "-", "1"}]}], "]"}], "&"}], 
           ",", "m"}], "]"}], "]"}], "]"}], "]"}], "]"}], "]"}], "===", 
    "0"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9402836792637463`*^9, 3.9402837167932863`*^9}},
 CellLabel->"In[590]:=",
 CellID->2016417167,ExpressionUUID->"edc36498-4d52-46a7-b654-448124cd9e12"],

Cell["We now check the performance :", "Text",
 CellChangeTimes->{3.940283723803842*^9},
 CellID->29844051,ExpressionUUID->"f593e105-1d97-4756-b190-0264004c1843"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"diagnolQ2", "[", "testmatr", "]"}], "//", 
  "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"diagnolQ2", "[", "testiden", "]"}], "//", "Timing"}]}], "Input",
 CellChangeTimes->{{3.94028373168575*^9, 3.94028373490902*^9}},
 CellLabel->"In[592]:=",
 CellID->1225275406,ExpressionUUID->"d5b6e3db-4f94-49bf-a597-1758be486aea"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.01428`", ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.940283735441019*^9},
 CellLabel->"Out[592]=",
 CellID->1499439679,ExpressionUUID->"9707a216-c2c8-4d1f-9581-4095ddd22818"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.016207`", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.940283735459117*^9},
 CellLabel->"Out[593]=",
 CellID->362087408,ExpressionUUID->"1cb773a9-9bd8-439a-930e-0b2f2fdca8cf"]
}, Open  ]],

Cell["\<\
It is roughly the same as in our previous attempt. Can we get better?\
\>", "Text",
 CellChangeTimes->{{3.9402837486909943`*^9, 3.9402837506358967`*^9}},
 CellID->1911213261,ExpressionUUID->"5d5e78cd-a7d5-4017-b2b6-4673bd365be8"],

Cell["\<\
Here we will delete the diagonal elements using MapThread, and then flatten \
the resulting matrix and compare it to a flat array of zeros of an \
appropriate length, which in this approach we have to generate :\
\>", "Text",
 CellChangeTimes->{{3.9402837486909943`*^9, 3.940283752433667*^9}},
 CellID->1849681636,ExpressionUUID->"bc7592bd-e7b6-43d1-84ee-073e531c7703"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "diagnolQNew1", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"diagnolQNew1", "[", 
    RowBox[{"m_", "?", "MatrixQ"}], "]"}], "/;", 
   RowBox[{"Equal", "@@", 
    RowBox[{"Dimensions", "[", "m", "]"}]}]}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"len", "=", 
      RowBox[{"Length", "[", "m", "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{"MapThread", "[", 
       RowBox[{"Delete", ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", 
          RowBox[{"Range", "[", "len", "]"}]}], "}"}]}], "]"}], "]"}], "===", 
     
     RowBox[{"Array", "[", 
      RowBox[{
       RowBox[{"0", "&"}], ",", 
       RowBox[{"{", 
        RowBox[{"len", "*", 
         RowBox[{"(", 
          RowBox[{"len", "-", "1"}], ")"}]}], "}"}]}], "]"}]}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.940283768993232*^9, 3.940283832954138*^9}},
 CellLabel->"In[602]:=",
 CellID->361793307,ExpressionUUID->"baacbc27-fbb5-49b8-8733-cb867f35beb7"],

Cell["The performance of this version", "Text",
 CellChangeTimes->{3.940283813884162*^9},
 CellID->1667754933,ExpressionUUID->"1443dbe5-4226-4693-8b1d-d7614f580463"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"diagnolQNew1", "[", "testmatr", "]"}], "//", 
  "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"diagnolQNew1", "[", "testiden", "]"}], "//", "Timing"}]}], "Input",\

 CellChangeTimes->{{3.940283820016267*^9, 3.940283824058814*^9}},
 CellLabel->"In[604]:=",
 CellID->1000598287,ExpressionUUID->"7df977c8-ae4f-4a0e-ae28-868a2810c5d0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.034674`", ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{{3.940283824512734*^9, 3.940283835391807*^9}, 
   3.940283878588943*^9},
 CellLabel->"Out[604]=",
 CellID->1099145471,ExpressionUUID->"da40436b-bd94-4158-82a6-c81b8bfa9956"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.03311`", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{{3.940283824512734*^9, 3.940283835391807*^9}, 
   3.9402838786050243`*^9},
 CellLabel->"Out[605]=",
 CellID->683599603,ExpressionUUID->"3811c05f-7937-43d7-aea2-091d015ca776"]
}, Open  ]],

Cell["is certainly better than before.", "Text",
 CellChangeTimes->{{3.940283896160043*^9, 3.9402838979969587`*^9}},
 CellID->221016171,ExpressionUUID->"c8b4d3fa-795d-44af-9e56-a33c09941242"],

Cell["\<\
Now we will develop the above idea further. Let us combine the two \
approaches: we will delete a diagonal element from the row, but then compare \
the resulting vector to a vector of zeros, using the high-performance Equal \
operator which is vectorized. We want to be able to stop after the first \
comparison yields False. As a first version, we may use Scan with a Return \
statement:\
\>", "Text",
 CellChangeTimes->{{3.940283896160043*^9, 3.9402839082384253`*^9}},
 CellID->212101718,ExpressionUUID->"6beb0b96-cbe0-43df-ad7e-c80e2039a36d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "diagnolQNew20", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"diagnolQNew20", "[", 
     RowBox[{"m_", "?", "MatrixQ"}], "]"}], "/;", 
    RowBox[{"Equal", "@@", 
     RowBox[{"Dimensions", "[", "m", "]"}]}]}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"len", "=", 
        RowBox[{"Length", "[", "m", "]"}]}], ",", "zeroarr"}], "}"}], ",", 
     RowBox[{
      RowBox[{"zeroarr", "=", 
       RowBox[{"Array", "[", 
        RowBox[{
         RowBox[{"0", "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"len", "-", "1"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"Scan", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Delete", "@@", "#"}], "!=", "zeroarr"}], ",", 
           RowBox[{"Returan", "[", "False", "]"}]}], "]"}], "&"}], ",", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{"m", ",", 
           RowBox[{"Range", "[", "len", "]"}]}], "}"}], "]"}]}], "]"}], ";", 
      RowBox[{"Return", "[", "True", "]"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.94028391898139*^9, 3.940283993650339*^9}},
 CellLabel->"In[606]:=",
 CellID->886161025,ExpressionUUID->"6e75c08d-26c9-47c4-840b-436f2b28a006"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940283996336197*^9, 3.9402839976698627`*^9}},
 CellID->1175403448,ExpressionUUID->"bd351113-e72f-474b-a0fc-b083abfa48dd"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"diagnolQNew20", "[", "testmatr", "]"}], "//", 
  "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"diagnolQNew20", "[", "testiden", "]"}], "//", "Timing"}]}], "Input",\

 CellChangeTimes->{{3.9402840061288424`*^9, 3.940284009007492*^9}},
 CellLabel->"In[608]:=",
 CellID->1524614588,ExpressionUUID->"4b4e5531-0f93-484f-9ac6-d1c38447a7d3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.001882`", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.940284009390263*^9},
 CellLabel->"Out[608]=",
 CellID->1866906653,ExpressionUUID->"451df778-e481-4a35-b221-c9939c6268b0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.001516`", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.940284009408146*^9},
 CellLabel->"Out[609]=",
 CellID->216550654,ExpressionUUID->"217cb0b1-a476-43a2-83f5-c0d2333e02d0"]
}, Open  ]],

Cell["\<\
Similar functionality can be achieved with the use Fold in combination with \
Catch and Throw. This version seems a bit faster than the previous.\
\>", "Text",
 CellChangeTimes->{{3.940284018866659*^9, 3.9402840203199472`*^9}},
 CellID->103328528,ExpressionUUID->"86869cbb-5f46-48ef-a02c-10678c5a7ce7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "diagnolQNew21", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"diagnolQNew21", "[", 
     RowBox[{"m_", "?", "MatrixQ"}], "]"}], "/;", 
    RowBox[{"Equal", "@@", 
     RowBox[{"Dimensions", "[", "m", "]"}]}]}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"len", "=", 
        RowBox[{"Length", "[", "m", "]"}]}], ",", "zeroarr"}], "}"}], ",", 
     RowBox[{
      RowBox[{"zeroarr", "=", 
       RowBox[{"Array", "[", 
        RowBox[{
         RowBox[{"0", "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"len", "-", "1"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"Catch", "[", 
       RowBox[{"Fold", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Delete", "@@", "#2"}], "!=", "zeroarr"}], ",", 
            RowBox[{"Throw", "[", "False", "]"}], ",", "True"}], "]"}], "&"}],
          ",", "False", ",", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{"m", ",", 
            RowBox[{"Range", "[", "len", "]"}]}], "}"}], "]"}]}], "]"}], 
       "]"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940284027249112*^9, 3.940284070150449*^9}},
 CellLabel->"In[610]:=",
 CellID->54136390,ExpressionUUID->"7d6d454f-6a4e-44c8-9b8f-a6daef017d9f"],

Cell["\<\
hat we have done in both cases is to first prepare a list of rows (the \
original matrix) supplied by the index of the diagonal element in every row, \
and then feed it to Scan or Fold. Let us check now :\
\>", "Text",
 CellChangeTimes->{{3.940284088185981*^9, 3.9402840897020817`*^9}},
 CellID->440310792,ExpressionUUID->"f8660dce-46bf-4516-af1f-ac9c914dd687"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"diagnolQNew21", "[", "testmatr", "]"}], "//", 
  "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"diagnolQNew21", "[", "testiden", "]"}], "//", "Timing"}]}], "Input",\

 CellChangeTimes->{{3.940284095801248*^9, 3.940284098484449*^9}},
 CellLabel->"In[612]:=",
 CellID->1450079179,ExpressionUUID->"aaeccdd0-e124-4321-9da7-dee21d0abbed"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000724`", ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.940284098896763*^9},
 CellLabel->"Out[612]=",
 CellID->1016200839,ExpressionUUID->"16ffce05-685c-4b3b-ae6e-6c3b24f81e85"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00163`", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.9402840989149303`*^9},
 CellLabel->"Out[613]=",
 CellID->350056482,ExpressionUUID->"192071bc-ec5a-4878-a067-66e312ba3d16"]
}, Open  ]],

Cell["\<\
This is a quantum improvement. I have to say that this is more or less as \
good as it gets in terms of speed, and perhaps the best solution overall (see \
the comments below).\
\>", "Text",
 CellChangeTimes->{{3.940284111362574*^9, 3.940284118574994*^9}},
 CellID->789110233,ExpressionUUID->"164a3bb0-1bbc-4563-843f-5f4ba4857a10"],

Cell["\<\
As the next step, let us first flatten the matrix, and create a list of \
positions of diagonal elements in the new flat list that our matrix became. \
Then, we use Delete to delete all these elements at once, and compare the \
resulting array to an array of zeros of an appropriate length :\
\>", "Text",
 CellChangeTimes->{{3.940284111362574*^9, 3.940284115870386*^9}},
 CellID->1161466078,ExpressionUUID->"662f056b-ef47-44ad-bb11-352e36f566ff"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "diagnolQNew3", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"diagnolQNew3", "[", 
     RowBox[{"m_", "?", "MatrixQ"}], "]"}], "/;", 
    RowBox[{"Equal", "@@", 
     RowBox[{"Dimensions", "[", "m", "]"}]}]}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"len", "=", 
       RowBox[{"Length", "[", "m", "]"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"Delete", "[", 
       RowBox[{
        RowBox[{"Flatten", "[", "m", "]"}], ",", 
        RowBox[{"List", "/@", 
         RowBox[{"Plus", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"0", ",", 
              RowBox[{"len", "-", "1"}]}], "]"}], "*", 
            RowBox[{"(", 
             RowBox[{"len", "+", "1"}], ")"}]}], ",", "1"}], "]"}]}]}], "]"}],
       "===", 
      RowBox[{"Array", "[", 
       RowBox[{
        RowBox[{"0", "&"}], ",", 
        RowBox[{"{", 
         RowBox[{"len", "*", 
          RowBox[{"(", 
           RowBox[{"len", "-", "1"}], ")"}]}], "}"}]}], "]"}]}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940284130631796*^9, 3.940284185520431*^9}},
 CellLabel->"In[614]:=",
 CellID->134021716,ExpressionUUID->"a1e51ff9-bae0-4365-a112-c35ff34a6a77"],

Cell["The performance here,", "Text",
 CellChangeTimes->{3.940284192727338*^9},
 CellID->1824970010,ExpressionUUID->"4757ca13-47f7-4f72-b2cd-853adae83eb8"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"diagnolQNew3", "[", "testmatr", "]"}], "//", 
  "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"diagnolQNew3", "[", "testiden", "]"}], "//", "Timing"}]}], "Input",\

 CellChangeTimes->{{3.9402841987773457`*^9, 3.940284201172077*^9}},
 CellLabel->"In[616]:=",
 CellID->1909511616,ExpressionUUID->"f0459103-0137-4153-8300-23a94cd95dcb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.024822`", ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.9402842016176167`*^9},
 CellLabel->"Out[616]=",
 CellID->1922046012,ExpressionUUID->"4c4c7e4d-e22f-4341-aac1-f4983d176438"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.026798`", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.9402842016356688`*^9},
 CellLabel->"Out[617]=",
 CellID->1378305510,ExpressionUUID->"2cc629b3-5231-4a4b-b7b8-0e0fe248d70f"]
}, Open  ]],

Cell["\<\
is not bad, but slightly worse than in our version with Fold, Catch and \
Throw. Can we use the same idea, but make it faster?\
\>", "Text",
 CellChangeTimes->{{3.9402842123909283`*^9, 3.940284223636765*^9}},
 CellID->188546317,ExpressionUUID->"24d77820-9575-437c-881d-04650d831712"],

Cell["\<\
This is our last attempt. It is almost the same as before, but we don\
\[CloseCurlyQuote] t generate the list of zeros. Rather, we sum all the \
elements (absolute values) and compare to zero.\
\>", "Text",
 CellChangeTimes->{{3.9402842123909283`*^9, 3.940284221772353*^9}},
 CellID->928419710,ExpressionUUID->"35bb2240-5c6e-4b37-b12c-931876f72b52"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "diagnolQNew4", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"diagnolQNew4", "[", 
     RowBox[{"m_", "?", "MatrixQ"}], "]"}], "/;", 
    RowBox[{"Equal", "@@", 
     RowBox[{"Dimensions", "[", "m", "]"}]}]}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"len", "=", 
        RowBox[{"Length", "[", "m", "]"}]}], ",", "poslist"}], "}"}], ",", 
     RowBox[{
      RowBox[{"poslist", "=", 
       RowBox[{"List", "/@", 
        RowBox[{"Plus", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Range", "[", 
            RowBox[{"0", ",", 
             RowBox[{"len", "-", "1"}]}], "]"}], "*", 
           RowBox[{"(", 
            RowBox[{"len", "+", "1"}], ")"}]}], ",", "1"}], "]"}]}]}], ";", 
      RowBox[{
       RowBox[{"Total", "[", 
        RowBox[{"Abs", "[", 
         RowBox[{"Delete", "[", 
          RowBox[{
           RowBox[{"Flatten", "[", "m", "]"}], ",", "poslist"}], "]"}], "]"}],
         "]"}], "===", "0"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940284233274995*^9, 3.940284294164855*^9}},
 CellLabel->"In[622]:=",
 CellID->333886868,ExpressionUUID->"4882bb7e-dc7f-48b6-a97b-9c3d661c668f"],

Cell["The performance now :", "Text",
 CellChangeTimes->{3.940284276154862*^9},
 CellID->980039122,ExpressionUUID->"c8146e29-9bd5-4b17-8df0-49096a59c61b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"diagnolQNew4", "[", "testmatr", "]"}], "//", 
  "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"diagnolQNew4", "[", "testiden", "]"}], "//", "Timing"}]}], "Input",\

 CellChangeTimes->{{3.9402842819652157`*^9, 3.940284284352869*^9}},
 CellLabel->"In[624]:=",
 CellID->317950964,ExpressionUUID->"ee985f97-9c65-4970-ad37-e3d8e7685838"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.003101`", ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{{3.9402842847897*^9, 3.9402842981955957`*^9}},
 CellLabel->"Out[624]=",
 CellID->2027040801,ExpressionUUID->"e4eff240-a6f0-4324-ba9e-7a8b8a733d01"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.004617`", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{{3.9402842847897*^9, 3.940284298213788*^9}},
 CellLabel->"Out[625]=",
 CellID->794166399,ExpressionUUID->"d2312c5f-120e-411c-a638-f22ea0010dc8"]
}, Open  ]],

Cell["\<\
The reason that this solution is faster than the previous one is that we need \
neither to generate a large array (of zeros), nor to compare it with our \
array. In fact, this solution (when applicable) beats all our previous ones, \
including the one with Fold, Catch and Throw (although not by a wide margin). \
Given the size of the matrices used, and the timing, this solution is \
acceptable.\
\>", "Text",
 CellChangeTimes->{{3.940284310683913*^9, 3.9402843205522213`*^9}},
 CellID->943801888,ExpressionUUID->"32227e19-fc7f-4fca-b861-de68c9331df8"],

Cell[TextData[{
 "There is one problem with this solution however - it may not work well on \
matrices of lists of different size, since Total can not add lists of \
different lengths, similarly to the situation with Plus and Subtract \
operations in the case study of section ",
 ButtonBox["5.3.2.3",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-5-Functions-on-lists.nb", CharacterEncoding -> 
     "UTF-8"], "5.3.2.3"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-5-Functions-on-lists.nb"],
 ". We can not however solve this problem similarly to that case, without a \
loss in efficiency. This is because a lot of it has to do with our use of \
Total instead of Apply[Plus,...]."
}], "Text",
 CellChangeTimes->{{3.940284310683913*^9, 3.940284331339492*^9}, {
  3.940284379531864*^9, 3.940284379539647*^9}},
 CellID->969364365,ExpressionUUID->"14333894-1906-49ce-b27f-e0d19f4219ca"],

Cell["\<\
Thus, our best solutions are: <diagonalQNew4> for matrices whose elements are \
not lists of different lengths, and <diagonalQNew20> or <diagonalQNew21> in \
general case. Since their performance is almost the same, one will be safer \
picking the latter ones, which are cleaner in some sense.\
\>", "Text",
 CellChangeTimes->{{3.940284310683913*^9, 3.9402843347083483`*^9}},
 CellID->1124044582,ExpressionUUID->"03e97e98-db76-4589-a7e6-59c53cac228f"],

Cell["Conclusions", "ItemNumbered",
 CellChangeTimes->{3.9402843883502283`*^9},
 CellID->244108529,ExpressionUUID->"28f266a8-2b9c-4469-9ff3-e0be89ee594a"],

Cell["\<\
I used this problem to illustrate several points already discussed in the \
text . In total, we have considered 10 different implementations, and the \
efficiency of the best and the worst one are several hundred times different. \
In implementing the solutions, we have used different programming styles and \
techniques . We have seen that just simply using functional programming \
instead of procedural helped us very little in this case - in fact, it made \
things worse . However, when we managed to combine functional programming \
with the heavily optimized vectorized operations such as vector comparisons, \
flattening the list structure or vector elements summing, the performance \
started to improve. The final solutions that we obtained are perhaps not as \
fast as the procedural one for the very dense non-diagonal matrices, but are \
more balanced and much better all-around. These final solutions are good \
enough to build any other application upon  them and be sure that they will \
not be the cause of performance loss, (almost) like built - in functions. \
\>", "Text",
 CellChangeTimes->{{3.940284394321909*^9, 3.940284446113472*^9}, {
  3.940740309062463*^9, 3.940740416188118*^9}},
 CellID->1038281133,ExpressionUUID->"fea4d3c2-51f2-4665-a506-250d72b4ab08"],

Cell["\<\
The question is of course how \"accidental\" are these solutions: was it more \
a matter of luck or guess to obtain them, or were we \"doomed\" to get them \
at the end. My point is that it has nothing to do with luck. Admittedly, it \
takes some experience to make right guesses for the directions in which it is \
most promising to go, and also when it is the end and we have to stop because \
we won' t do better. But the principles are always the same - try to work \
with as much data at once as possible, and prefer structural operations to \
anything else.\
\>", "Text",
 CellChangeTimes->{{3.940284394321909*^9, 3.940284432413905*^9}, {
  3.940740416207168*^9, 3.9407404162597237`*^9}, {3.9407404620977383`*^9, 
  3.9407404853399353`*^9}},
 CellID->190382796,ExpressionUUID->"2ea8dcb1-3fee-403b-99cb-0b99ecae10d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Case study II: extracting matrix diagonals", "Subsection",
 CellChangeTimes->{3.9402844626501827`*^9},
 CellID->584781191,ExpressionUUID->"77db5185-0713-422c-a707-aa2848732f66"],

Cell["The problem", "ItemNumbered",
 CellChangeTimes->{3.9402844761217813`*^9},
 CellID->1532308465,ExpressionUUID->"e93cc18e-c694-408b-a555-2d284fca0179"],

Cell["\<\
Consider the following problem: we need to extract from the matrix some or \
all of its diagonals, either right diagonals (going from top left to bottom \
right), or left diagonals (going from bottom left to top right). We should \
provide a list of matrix element positions, and our function has to extract \
all right or left (or both) diagonals which pass through these elements. And \
of course, we would like to do it as efficiently as possible.\
\>", "Text",
 CellChangeTimes->{{3.940284484655855*^9, 3.940284491351534*^9}},
 CellID->884476431,ExpressionUUID->"242e2f33-a9b5-484e-ba87-536279859202"],

Cell["Test matrices", "ItemNumbered",
 CellChangeTimes->{3.940284500339373*^9},
 CellID->1503335422,ExpressionUUID->"91868b5d-fa33-4459-b613-a42b67e8f607"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"testmatr", "=", 
    RowBox[{"Array", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "15"}], "}"}], "]"}], "&"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "6"}], "}"}]}], "]"}]}], ")"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.9402845019447117`*^9, 3.940284528799058*^9}},
 CellLabel->"In[626]:=",
 CellID->1948876291,ExpressionUUID->"eee87ce2-f9f9-4b03-abc2-b20049a0e86a"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"11", "14", "8", "3", "14", "7"},
     {"12", "15", "1", "9", "15", "14"},
     {"14", "9", "12", "5", "15", "5"},
     {"9", "4", "13", "15", "1", "13"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.940284529103084*^9},
 CellLabel->"Out[626]//MatrixForm=",
 CellID->502255041,ExpressionUUID->"3ec57dc5-a020-42ad-96e6-07b4b341f9f7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"powertestmatr", "=", 
   RowBox[{"Array", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"RandomInteger", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "50"}], "}"}], "]"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{"500", ",", "500"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.940284531570919*^9, 3.940284548247198*^9}},
 CellLabel->"In[627]:=",
 CellID->1386492739,ExpressionUUID->"c0d64e03-8a14-43fe-a77e-fa52f5c37638"],

Cell["Extract-based implementation", "ItemNumbered",
 CellChangeTimes->{
  3.940284556872752*^9, {3.940740789081212*^9, 3.940740790020792*^9}},
 CellID->1799713437,ExpressionUUID->"60ee8c09-37d1-4c86-a434-0aa409269478"],

Cell["The implementation", "SubitemNumbered",
 CellChangeTimes->{3.940284564062949*^9},
 CellID->476567664,ExpressionUUID->"2706bd1b-13fd-495c-a97a-4c78c3bac8fe"],

Cell["\<\
The idea of this implementation is to generate a list of positions for \
elements on each diagonal that we need to extract. Then, we can use the \
built-in Extract, which may accept a list of positions of elements to be \
extracted.\
\>", "Text",
 CellChangeTimes->{{3.94028456972829*^9, 3.94028457565963*^9}, {
  3.940740824727708*^9, 3.940740825426066*^9}},
 CellID->1706209185,ExpressionUUID->"18c10f69-eb7a-4e44-a8de-c25f7bb44b0c"],

Cell["\<\
Since we define a diagonal by any element through which it passes, we will \
need a number of auxiliary functions.\
\>", "Text",
 CellChangeTimes->{{3.94028456972829*^9, 3.940284578834096*^9}},
 CellID->2018030659,ExpressionUUID->"263cc4ea-4610-4bd0-9d89-ca8c2eb3acee"],

Cell["\<\
First, we will need a function which takes matrix dimensions and an address \
of a single element <elem> in question, and determines the address of the \
\[OpenCurlyDoubleQuote]starting\[CloseCurlyDoubleQuote] element of (say, \
right) diagonal which passes through <elem>. This is done by the following \
code:\
\>", "Text",
 CellChangeTimes->{{3.94028456972829*^9, 3.9402845831643543`*^9}, {
   3.940301525656979*^9, 3.940301525682152*^9}, 3.940740416277267*^9, 
   3.9407404621198387`*^9, {3.940740959946916*^9, 3.940740959968609*^9}},
 CellID->2095762153,ExpressionUUID->"c03ff0bf-7077-4d47-8602-6951281d8d3d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "diagRightStart", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"diagRightStart", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"r_Integer", "?", "Positive"}], ",", 
         RowBox[{"c_Integer", "?", "Positive"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"rows_Integer", "?", "Positive"}], ",", 
         RowBox[{"columns_Integer", "?", "Positive"}]}], "}"}]}], "]"}], "/;", 
     RowBox[{
      RowBox[{"r", "<=", "rows"}], "&&", 
      RowBox[{"c", "<=", "columns"}]}]}], ":=", 
    RowBox[{"Switch", "[", 
     RowBox[{
      RowBox[{"r", "-", "c"}], ",", 
      RowBox[{"_", "?", "Positive"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "+", 
         RowBox[{"(", 
          RowBox[{"r", "-", "c"}], ")"}]}], ",", "1"}], "}"}], ",", 
      RowBox[{"_", "?", "Negative"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", 
        RowBox[{"1", "+", "c", "-", "r"}]}], "}"}], ",", "0", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"diagRightStart", "[", "x__", "]"}], ":=", 
   RowBox[{"{", "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940284586420889*^9, 3.940284673571733*^9}},
 CellLabel->"In[4]:=",
 CellID->2047887885,ExpressionUUID->"b309a479-c5f5-426e-89aa-130fb55f59b1"],

Cell["\<\
Here, <r> and <c> represent a row and column of the element in question, \
while <rows> and <columns> represent matrix dimensions. For example:\
\>", "Text",
 CellChangeTimes->{{3.940284681094265*^9, 3.9402846838463182`*^9}, {
   3.940301525703951*^9, 3.940301525767324*^9}, 3.940740462139009*^9, {
   3.940740959987403*^9, 3.9407409600392017`*^9}},
 CellID->2033621358,ExpressionUUID->"69829000-4a39-463c-94b0-3e897b5dee5e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"diagRightStart", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.94028468671609*^9, 3.940284691554207*^9}},
 CellLabel->"In[631]:=",
 CellID->932632847,ExpressionUUID->"2e5e6e2a-5143-4d92-bdf4-22e0f7e3885f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.9402846923927107`*^9},
 CellLabel->"Out[631]=",
 CellID->283785028,ExpressionUUID->"89e6b99b-50a3-4be3-bda1-9fbd8ba1f614"]
}, Open  ]],

Cell["\<\
Next we will need a function which generalizes the above to a list of \
elements (positions). Basically, it has to Map the previous function on a \
list of element positions. Here is the code:\
\>", "Text",
 CellChangeTimes->{{3.940284755840217*^9, 3.940284757359069*^9}, 
   3.9407404621567163`*^9},
 CellID->760326767,ExpressionUUID->"18f9e499-f8f0-43e1-a483-2f491ddc9870"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "startRightDiagPositions", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"startRightDiagPositions", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"rows_Integer", "?", "Positive"}], ",", 
       RowBox[{"columns_Integer", "?", "Positive"}]}], "}"}], ",", 
     RowBox[{"{", "elements__List", "}"}]}], "]"}], ":=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"diagRightStart", "[", 
         RowBox[{"#", ",", 
          RowBox[{"{", 
           RowBox[{"rows", ",", "columns"}], "}"}]}], "]"}], "&"}], ",", 
       RowBox[{"{", "elements", "}"}]}], "]"}], ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.94028477425908*^9, 3.9402848375233917`*^9}},
 CellLabel->"In[632]:=",
 CellID->423536436,ExpressionUUID->"4b4ac532-6101-459d-8d6d-0388dcd20a69"],

Cell["For example:", "Text",
 CellChangeTimes->{{3.9402848401159983`*^9, 3.94028484188946*^9}},
 CellID->1551046384,ExpressionUUID->"52af4148-472f-4e5d-8583-8e6bfa464d3a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"startRightDiagPositions", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9402848429248877`*^9, 3.9402848563603983`*^9}},
 CellLabel->"In[634]:=",
 CellID->637445793,ExpressionUUID->"310c7b0f-00cc-4c09-83dc-74d5bf36e0d7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940284856969987*^9},
 CellLabel->"Out[634]=",
 CellID->878443412,ExpressionUUID->"a0c9172b-b8f3-4b08-8eb5-f5089c66c1c0"]
}, Open  ]],

Cell["\<\
We see that elements with indices out of range, are ignored (if this is not \
the desired behavior, this can be easily changed). At the same time, for \
several elements on a same diagonal, its starting address is repeated as many \
times as is the number of elements on this diagonal among the input elements \
(in other words, we do not eliminate multiple references to the same \
diagonal, and in general it may be extracted more than once).\
\>", "Text",
 CellChangeTimes->{{3.940284868963942*^9, 3.940284877456134*^9}},
 CellID->48352359,ExpressionUUID->"1bd1a39a-0232-4a69-925e-6cee9a39e0d0"],

Cell["\<\
We may need eventually to extract all right or all left diagonals (or may be, \
both). The two auxiliary functions below provide the \
\[OpenCurlyDoubleQuote]starting\[CloseCurlyDoubleQuote] addresses of elements \
for these diagonals - we will use this later.\
\>", "Text",
 CellChangeTimes->{{3.940284868963942*^9, 3.940284881234477*^9}},
 CellID->369839750,ExpressionUUID->"8ccf72c3-691a-49b2-a24e-bc56559b6a9b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "allRightDiagStartPositions", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allRightDiagStartPositions", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"rows_Integer", "?", "Positive"}], ",", 
      RowBox[{"columns_Integer", "?", "Positive"}]}], "}"}], "]"}], ":=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"Thread", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"rows", ",", "2", ",", 
          RowBox[{"-", "1"}]}], "]"}], ",", "1"}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], "}"}], ",", 
     RowBox[{"Thread", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"2", ",", "columns"}], "]"}]}], "}"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940284890086664*^9, 3.940284942087783*^9}},
 CellLabel->"In[635]:=",
 CellID->986297449,ExpressionUUID->"90735023-ff14-4635-b5d6-165146071a45"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "allLeftDiagStartPositions", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"allLeftDiagStartPositions", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"rows_Integer", "?", "Positive"}], ",", 
      RowBox[{"columns_Integer", "?", "Positive"}]}], "}"}], "]"}], ":=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"Thread", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Range", "[", "rows", "]"}], ",", "1"}], "}"}], "]"}], ",", 
     RowBox[{"Thread", "[", 
      RowBox[{"{", 
       RowBox[{"rows", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"2", ",", "columns"}], "]"}]}], "}"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940284946371366*^9, 3.940284993210599*^9}},
 CellLabel->"In[637]:=",
 CellID->2088272396,ExpressionUUID->"a629fa86-33ab-452b-8592-4739d2be0238"],

Cell["For example:", "Text",
 CellChangeTimes->{{3.940284996282321*^9, 3.940284998610897*^9}},
 CellID->1080074603,ExpressionUUID->"142df520-e028-42e6-9d94-b622df22c7e0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"allRightDiagStartPositions", "[", 
  RowBox[{"{", 
   RowBox[{"5", ",", "7"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.940285000486421*^9, 3.94028500466757*^9}},
 CellLabel->"In[639]:=",
 CellID->1204570793,ExpressionUUID->"8f93e891-1ec4-4774-907f-ac287008d5ba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "7"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940285005382904*^9},
 CellLabel->"Out[639]=",
 CellID->2014318372,ExpressionUUID->"a1a930db-9c0d-4cc7-8eb6-31db5490b7cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"allLeftDiagStartPositions", "[", 
  RowBox[{"{", 
   RowBox[{"5", ",", "7"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.940285011720793*^9, 3.940285015019434*^9}},
 CellLabel->"In[640]:=",
 CellID->685086362,ExpressionUUID->"57e53467-df58-46a5-8699-723b322160bb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "7"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402850156819887`*^9},
 CellLabel->"Out[640]=",
 CellID->864755520,ExpressionUUID->"4e62b275-b117-4d40-a6bc-b72ae0c4e8ff"]
}, Open  ]],

Cell["\<\
Once the \[OpenCurlyDoubleQuote]starting\[CloseCurlyDoubleQuote] positions of \
the diagonals are calculated, we need to generate full lists of positions of \
diagonal elements, to be used in Extract. The following function will do it \
for a single right diagonal (we don\[CloseCurlyQuote]t need a separate one \
for the left diagonal, as we will see):\
\>", "Text",
 CellChangeTimes->{{3.9402850576253567`*^9, 3.940285060814927*^9}},
 CellID->1424577508,ExpressionUUID->"495f8ca4-9f10-404e-9958-fcd4bf07de27"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "rightDiagPositions", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"rightDiagPositions", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", 
        RowBox[{"col_Integer", "?", "Positive"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"rows_Integer", "?", "Positive"}], ",", 
        RowBox[{"columns_Integer", "?", "Positive"}]}], "}"}]}], "]"}], ":=", 
    
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"len", "=", 
        RowBox[{"Min", "[", 
         RowBox[{"rows", ",", 
          RowBox[{"columns", "-", "col", "+", "1"}]}], "]"}]}], "}"}], ",", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Range", "[", "len", "]"}], ",", 
         RowBox[{"Range", "[", 
          RowBox[{"col", ",", 
           RowBox[{"col", "+", "len", "-", "1"}]}], "]"}]}], "}"}], "]"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"rightDiagPositions", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"row_Integer", "?", "Positive"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"rows_Integer", "?", "Positive"}], ",", 
       RowBox[{"columns_Integer", "?", "Positive"}]}], "}"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"len", "=", 
       RowBox[{"Min", "[", 
        RowBox[{"columns", ",", 
         RowBox[{"rows", "-", "row", "+", "1"}]}], "]"}]}], "}"}], ",", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"row", ",", 
          RowBox[{"row", "+", "len", "-", "1"}]}], "]"}], ",", 
        RowBox[{"Range", "[", "len", "]"}]}], "}"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.9402850726955976`*^9, 3.940285188553*^9}},
 CellLabel->"In[641]:=",
 CellID->2103199597,ExpressionUUID->"9f1b554c-4bf1-4fcf-945d-feb291b3afce"],

Cell["\<\
It uses the fact that the right diagonal always starts with an element either \
in the first row or in the first column (or both, for {1, 1} element). For \
example:\
\>", "Text",
 CellChangeTimes->{{3.940285200098336*^9, 3.940285201512825*^9}, 
   3.9407404621740637`*^9},
 CellID->1574276907,ExpressionUUID->"ded779d9-d058-4822-bdff-c8d1f35d66b6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rightDiagPositions", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "6"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940285202807332*^9, 3.9402852078118153`*^9}},
 CellLabel->"In[644]:=",
 CellID->1155207388,ExpressionUUID->"9a0df597-0469-4945-b024-0485744690b1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.94028520874811*^9},
 CellLabel->"Out[644]=",
 CellID->1755250652,ExpressionUUID->"74d2e256-ffb0-4c93-84cd-16980babe1ec"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rightDiagPositions", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "6"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940285212705902*^9, 3.940285218539212*^9}},
 CellLabel->"In[645]:=",
 CellID->860991512,ExpressionUUID->"4b90fefe-80c9-4ce6-b894-d42b5f4a454d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940285219062994*^9},
 CellLabel->"Out[645]=",
 CellID->1997649708,ExpressionUUID->"604a0e1a-6a9d-4ccf-aeb6-ed2e14a89560"]
}, Open  ]],

Cell["\<\
Now we are ready to write our main function. It will take a matrix and a list \
of elements, process the element positions by the above auxiliary functions, \
generate position lists for elements of the diagonals, and then Map Extract \
on these position lists to extract the diagonals:\
\>", "Text",
 CellChangeTimes->{{3.940285229468006*^9, 3.9402852325074177`*^9}, 
   3.940740462192328*^9},
 CellID->739305158,ExpressionUUID->"b46a0d7e-b712-4c53-b5b4-1382dfca7789"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getSomeRightMatrixDiagonals", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getSomeRightMatrixDiagonals", "[", 
    RowBox[{
     RowBox[{"matr_", "?", "MatrixQ"}], ",", 
     RowBox[{"els", ":", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"{", "elements__List", "}"}], "|", "All"}], ")"}]}]}], "]"}], 
   ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dims", "=", 
       RowBox[{"Dimensions", "[", "matr", "]"}]}], "}"}], ",", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "poslist", "}"}], ",", 
       RowBox[{
        RowBox[{"poslist", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"els", "===", "All"}], ",", 
           RowBox[{"allRightDiagStartPositions", "[", "dims", "]"}], ",", 
           RowBox[{"startRightDiagPositions", "[", 
            RowBox[{"dims", ",", 
             RowBox[{"{", "elements", "}"}]}], "]"}]}], "]"}]}], ";", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Extract", "[", 
            RowBox[{"matr", ",", 
             RowBox[{"rightDiagPositions", "[", 
              RowBox[{"#", ",", "dims"}], "]"}]}], "]"}], "&"}], ",", 
          "poslist"}], "]"}]}]}], "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940285235942677*^9, 3.9402853222056017`*^9}, {
   3.940285470621983*^9, 3.940285470977106*^9}, 3.940285504983013*^9, 
   3.940293003036508*^9},
 CellLabel->"In[657]:=",
 CellID->533405988,ExpressionUUID->"3e78adf3-1c87-486b-8f9c-ce811acdb587"],

Cell["\<\
Notice the alternative pattern and named pattern used to incorporate the case \
where we need all of the diagonals. The symbol <All> is a system symbol used \
in such cases as ours, so we don\[CloseCurlyQuote] t need to invent a new \
one. Notice that when we use All, a list of elements is generated by one of \
our auxiliary functions <allRightDiagStartPositions>, discussed earlier. \
Examples:\
\>", "Text",
 CellChangeTimes->{{3.940285329654455*^9, 3.94028533441611*^9}, 
   3.940301525789954*^9, 3.940740960056539*^9},
 CellID->1870790414,ExpressionUUID->"ab8c44d7-23a2-442f-b58f-12a3bcd947c2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testmatr", "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.940285337284597*^9, 3.940285341938567*^9}},
 CellLabel->"In[648]:=",
 CellID->1382868540,ExpressionUUID->"98203061-af6a-47c5-94db-3a101c93fc20"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"11", "14", "8", "3", "14", "7"},
     {"12", "15", "1", "9", "15", "14"},
     {"14", "9", "12", "5", "15", "5"},
     {"9", "4", "13", "15", "1", "13"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.940285342220895*^9},
 CellLabel->"Out[648]//MatrixForm=",
 CellID->1130559047,ExpressionUUID->"fe23e0aa-4bae-40a3-8dff-6f7fd7b09288"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getSomeRightMatrixDiagonals", "[", 
  RowBox[{"testmatr", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "3"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9402853437335873`*^9, 3.9402854570727997`*^9}, {
  3.940285782596941*^9, 3.940285796883569*^9}},
 CellLabel->"In[659]:=",
 CellID->875370011,ExpressionUUID->"8882f904-b633-442a-bb95-2ffd040d92d7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"11", ",", "15", ",", "12", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "9", ",", "15", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "15", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "15", ",", "12", ",", "15"}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{{3.940285458069748*^9, 3.940285473762084*^9}, 
   3.940285508267955*^9, 3.940285798355133*^9, 3.940293007830909*^9},
 CellLabel->"Out[659]=",
 CellID->1645756655,ExpressionUUID->"1b8b8e3a-7bd6-4c44-933d-3e980b1ebd57"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getSomeRightMatrixDiagonals", "[", 
  RowBox[{"testmatr", ",", "All"}], "]"}]], "Input",
 CellChangeTimes->{{3.9402930194142303`*^9, 3.940293020465528*^9}},
 CellLabel->"In[660]:=",
 CellID->642727225,ExpressionUUID->"fd277d7b-a7bf-4b22-adfa-4bc3bbbc9593"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "9", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "9", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "15", ",", "12", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "1", ",", "5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "9", ",", "15", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "15", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "14"}], "}"}], ",", 
   RowBox[{"{", "7", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940293020696308*^9},
 CellLabel->"Out[660]=",
 CellID->1338280305,ExpressionUUID->"7936daf7-d2f3-4602-9a99-e05339986cd7"]
}, Open  ]],

Cell["\<\
Notice that if there is more than one element belonging to the same diagonal, \
this diagonal is extracted more than once. If this is not the desired \
behavior, one can introduce an option which will control it, by effectively \
applying something like UnsortedUnion to the list of diagonal starting \
positions. This is left as an exercise to the reader.\
\>", "Text",
 CellChangeTimes->{{3.9402930300866632`*^9, 3.940293036075693*^9}},
 CellID->2100164350,ExpressionUUID->"a07da7e7-fac2-47cb-a3fe-a1c828d158fe"],

Cell["\<\
We only solved a problem for right diagonals. For the left diagonals, we in \
fact don\[CloseCurlyQuote] t need to solve it again, if we realize that by \
reversing the order of rows in our matrix, and manipulating the positions of \
the elements in the element list accordingly, we can use our right - diagonal \
solution. Here is the code:\
\>", "Text",
 CellChangeTimes->{{3.9402930300866632`*^9, 3.940293039349658*^9}, 
   3.940740462210692*^9},
 CellID->909360441,ExpressionUUID->"57c72bb9-b86e-4172-af9f-e2ec258e597a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getSomeLeftMatrixDiagnoals", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getSomeLeftMatrixDiagnoals", "[", 
    RowBox[{
     RowBox[{"matr_", "?", "MatrixQ"}], ",", 
     RowBox[{"els", ":", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"{", "elements__List", "}"}], "|", "All"}], ")"}]}]}], "]"}], 
   ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rows", ",", "columns", ",", "elems"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"rows", ",", "columns"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "matr", "]"}]}], ";", 
      RowBox[{"elems", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"els", "===", "All"}], ",", 
         RowBox[{"allLeftDiagStartPositions", "[", 
          RowBox[{"{", 
           RowBox[{"rows", ",", "columns"}], "}"}], "]"}], ",", 
         RowBox[{"{", "elements", "}"}]}], "]"}]}], ";", 
      RowBox[{"getSomeRightMatrixDiagonals", "[", 
       RowBox[{
        RowBox[{"Reverse", "[", "matr", "]"}], ",", 
        RowBox[{"Transpose", "[", 
         RowBox[{"MapAt", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"rows", "+", "1", "-", "#"}], "&"}], ",", 
           RowBox[{"Transpose", "[", "elems", "]"}], ",", "1"}], "]"}], 
         "]"}]}], "]"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940293041874621*^9, 3.940293133730145*^9}},
 CellLabel->"In[661]:=",
 CellID->357202218,ExpressionUUID->"6a3b6378-d1e9-4f4e-a606-b8cb590bcf46"],

Cell["\<\
The double Transpose on the element position list is needed to do the \
transformation only on the row-component of each element\[CloseCurlyQuote] s \
position. As before, if we use <All> rather than provide an explicit element \
list, a list of elements for all the left diagonals is generated. Examples:\
\>", "Text",
 CellChangeTimes->{{3.9402931411500874`*^9, 3.940293145731752*^9}, {
  3.940745002482726*^9, 3.940745003149975*^9}},
 CellID->1274744311,ExpressionUUID->"ed1c5725-69b3-47d8-9c3f-293d2b08bdae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getSomeLeftMatrixDiagnoals", "[", 
  RowBox[{"testmatr", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "1"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9402931470990973`*^9, 3.9402931616621304`*^9}},
 CellLabel->"In[663]:=",
 CellID->877926676,ExpressionUUID->"825eb4e1-04b1-4d2f-a1e3-bc831f462733"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "11", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "15", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "9", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "15", ",", "8"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940293162449215*^9},
 CellLabel->"Out[663]=",
 CellID->986329548,ExpressionUUID->"6c2e8d08-3d5f-4686-8420-cd85c4921418"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getSomeLeftMatrixDiagnoals", "[", 
  RowBox[{"testmatr", ",", "All"}], "]"}]], "Input",
 CellChangeTimes->{{3.940293165008621*^9, 3.9402931709730043`*^9}},
 CellLabel->"In[664]:=",
 CellID->266650723,ExpressionUUID->"db4354ab-e3bd-4ea7-b6e4-f79fa3ea7a62"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "11", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "15", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "9", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "12", ",", "9", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"13", ",", "5", ",", "15", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "15", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", "13", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940293171223358*^9},
 CellLabel->"Out[664]=",
 CellID->1391325198,ExpressionUUID->"b751cece-7a61-45df-af2a-bde55bf3bf5b"]
}, Open  ]],

Cell["\<\
Finally, we may get both right and left diagonals passing through each of the \
elements from our element list. This is done by the following code:\
\>", "Text",
 CellChangeTimes->{{3.940293180682357*^9, 3.940293182044839*^9}, 
   3.940740462228244*^9},
 CellID->754438472,ExpressionUUID->"041ec3f3-ddcc-4224-b10e-33f3ee6044b8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getSomeMatrixDiagonals", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getSomeMatrixDiagonals", "[", 
    RowBox[{
     RowBox[{"matr_", "?", "MatrixQ"}], ",", 
     RowBox[{"els", ":", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"{", "elements__List", "}"}], "|", "All"}], ")"}]}]}], "]"}], 
   ":=", 
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"getSomeLeftMatrixDiagnoals", "[", 
       RowBox[{"matr", ",", "els"}], "]"}], ",", 
      RowBox[{"getSomeRightMatrixDiagonals", "[", 
       RowBox[{"matr", ",", "els"}], "]"}]}], "}"}], "]"}]}], ";"}]}], "Input",\

 CellChangeTimes->{{3.94029318471795*^9, 3.940293233464305*^9}},
 CellLabel->"In[665]:=",
 CellID->1528769028,ExpressionUUID->"d7f1e5c6-632f-4f18-b142-b411770ad8b7"],

Cell["\<\
The use of Transpose ensures that the diagonals are grouped in pairs, \
according to the elements. Examples:\
\>", "Text",
 CellChangeTimes->{3.9402932398182077`*^9},
 CellID->3123283,ExpressionUUID->"5031dcec-6636-4b38-b1a9-56bb37f46c89"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getSomeMatrixDiagonals", "[", 
  RowBox[{"testmatr", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "1"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940293242557822*^9, 3.940293258633089*^9}},
 CellLabel->"In[667]:=",
 CellID->1583909104,ExpressionUUID->"39274697-231f-4ce5-9764-11f8cb69e453"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "11", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "15", ",", "12", ",", "15"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"14", ",", "15", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "9", ",", "15", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "9", ",", "1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "15", ",", "5"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"14", ",", "15", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "4"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940293259057889*^9},
 CellLabel->"Out[667]=",
 CellID->1375462375,ExpressionUUID->"0949cb58-d6a3-4b8e-acbe-6010b32f4679"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getSomeMatrixDiagonals", "[", 
  RowBox[{"testmatr", ",", "All"}], "]"}]], "Input",
 CellChangeTimes->{{3.940293262192073*^9, 3.940293270440795*^9}},
 CellLabel->"In[668]:=",
 CellID->1034327509,ExpressionUUID->"4b98ca5f-69d8-4631-95c4-983a00f2fed2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "11", "}"}], ",", 
     RowBox[{"{", "9", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"12", ",", "14"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"14", ",", "15", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"12", ",", "9", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "9", ",", "1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "15", ",", "12", ",", "15"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "12", ",", "9", ",", "14"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "1", ",", "5", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"13", ",", "5", ",", "15", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "9", ",", "15", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"15", ",", "15", ",", "14"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "15", ",", "5"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "14"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "13", "}"}], ",", 
     RowBox[{"{", "7", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.94029327066043*^9},
 CellLabel->"Out[668]=",
 CellID->800417439,ExpressionUUID->"7e6f90fe-2618-4fb9-b3a7-00c335eca7c4"]
}, Open  ]],

Cell["\<\
In the case when we use <All>, the grouping of diagonals does not have a \
direct meaning. If we Transpose the result in this case, we will get a list \
of two sublists, containing left and right diagonals in the right order.\
\>", "Text",
 CellChangeTimes->{{3.940293277603077*^9, 3.940293280182063*^9}},
 CellID->778332465,ExpressionUUID->"68303708-c478-4568-80f2-d4385a91aede"],

Cell["Performance tests", "SubitemNumbered",
 CellChangeTimes->{3.9402932947188787`*^9},
 CellID->2128541601,ExpressionUUID->"4c0815cc-61b6-4f4b-b7f2-ed52d4c18e2c"],

Cell["\<\
This measures time needed to extract all left, all right, and left + right \
matrix diagonals.\
\>", "Text",
 CellChangeTimes->{3.940293301963867*^9},
 CellID->1616096281,ExpressionUUID->"9615ac8d-142f-47df-8fb2-f9921b2e607e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getSomeRightMatrixDiagonals", "[", 
    RowBox[{"powertestmatr", ",", "All"}], "]"}], "//", "Short"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940293303771936*^9, 3.94029333684385*^9}},
 CellLabel->"In[671]:=",
 CellID->492067659,ExpressionUUID->"03bb3ade-9407-447f-9b6c-a837d1605430"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.012488`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "1", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "39"}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "995", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"50", ",", "9"}], "}"}], ",", 
      RowBox[{"{", "44", "}"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{{3.94029331521342*^9, 3.940293337412994*^9}},
 CellLabel->"Out[671]=",
 CellID->705483355,ExpressionUUID->"ab7f4879-9535-40a2-a27b-e2d050916027"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getSomeLeftMatrixDiagnoals", "[", 
    RowBox[{"powertestmatr", ",", "All"}], "]"}], "//", "Short"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.94029332063575*^9, 3.940293331479216*^9}},
 CellLabel->"In[670]:=",
 CellID->1420852270,ExpressionUUID->"3e28b664-83dd-49cd-8ece-228ee310342e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.016827`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "33", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"43", ",", "34"}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "995", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"27", ",", "32"}], "}"}], ",", 
      RowBox[{"{", "6", "}"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940293331940023*^9},
 CellLabel->"Out[670]=",
 CellID->619734695,ExpressionUUID->"b0de74c7-bfdf-4a03-84ff-ecdff57ca0b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getSomeMatrixDiagonals", "[", 
    RowBox[{"powertestmatr", ",", "All"}], "]"}], "//", "Short"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940293342131146*^9, 3.9402933536018972`*^9}},
 CellLabel->"In[672]:=",
 CellID->101762264,ExpressionUUID->"170e544f-bf3e-425f-acb2-73396a953c3e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.032083`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "33", "}"}], ",", 
        RowBox[{"{", "1", "}"}]}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "997", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "6", "}"}], ",", 
        RowBox[{"{", "44", "}"}]}], "}"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940293354259959*^9},
 CellLabel->"Out[672]=",
 CellID->1359976015,ExpressionUUID->"29472e66-c51d-4091-b448-db12a222dc4e"]
}, Open  ]],

Cell["The timings are not bad for this matrix size (500 x 500)", "Text",
 CellChangeTimes->{{3.940293363284463*^9, 3.940293366047118*^9}},
 CellID->984322342,ExpressionUUID->"b20ab214-d39c-4cd8-b265-20aad4e1a187"],

Cell["\<\
If we need just some diagonals, then the time needed will of course be much \
less. Here we extract 3 left and 3 right diagonals, passing through the \
elements with the positions below:\
\>", "Text",
 CellChangeTimes->{{3.940293363284463*^9, 3.940293368004038*^9}},
 CellID->796028566,ExpressionUUID->"553bfab5-6c14-4816-a714-76831539b5ab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getSomeMatrixDiagonals", "[", 
    RowBox[{"powertestmatr", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "7"}], "}"}]}], "}"}]}], "]"}], "//", "Short"}], "//",
   "Timing"}]], "Input",
 CellChangeTimes->{{3.940293369720759*^9, 3.940293389846592*^9}},
 CellLabel->"In[673]:=",
 CellID->190868931,ExpressionUUID->"6947c225-3aeb-45c7-a762-63ebb9de248e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000525`", ",", 
   TagBox[
    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940293390146347*^9},
 CellLabel->"Out[673]=",
 CellID->930725372,ExpressionUUID->"6ade43c8-8537-4eaf-b2b4-c1aa7b3e3f75"]
}, Open  ]],

Cell["Procedural implementation", "ItemNumbered",
 CellChangeTimes->{3.940293553082246*^9},
 CellID->179721409,ExpressionUUID->"1d7c6ccd-f0a8-4d20-9ded-ad1d1c314ff3"],

Cell["The implementation", "SubitemNumbered",
 CellChangeTimes->{3.940293558727117*^9},
 CellID->1215713381,ExpressionUUID->"4c5de15d-1dee-4ef5-aa7a-ece49bec6b68"],

Cell["\<\
In fact, the only place where the procedural implementation will be different \
is the extraction of diagonals proper. It will use several of the auxiliary \
functions that we have developed for the Extract-based version. The idea will \
be to first process a list of element positions to get a list of starting \
positions for the diagonals, and then extract the diagonals. In a procedural \
version, first we have to write a function which extracts a single diagonal:\
\>", "Text",
 CellChangeTimes->{{3.940293564885833*^9, 3.940293574780526*^9}},
 CellID->1335376909,ExpressionUUID->"4128a92b-5871-4af2-a98e-9e52c7b80682"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "extractSingleRightDiagProc", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"extractSingleRightDiagProc", "[", 
    RowBox[{
     RowBox[{"matr_", "?", "MatrixQ"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"row_Integer", "?", "Positive"}], ",", 
       RowBox[{"col_Integer", "?", "Positive"}]}], "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "rows", ",", "columns", ",", "i", ",", "j", ",", "k", ",", "startpos", 
       ",", "result"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"rows", ",", "columns"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "matr", "]"}]}], ";", 
      RowBox[{"result", "=", 
       RowBox[{"Array", "[", 
        RowBox[{
         RowBox[{"0", "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"Max", "[", 
           RowBox[{"rows", ",", "columns"}], "]"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"startpos", "=", 
           RowBox[{"diagRightStart", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"row", ",", "col"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"rows", ",", "columns"}], "}"}]}], "]"}]}], "]"}], "!=",
          "List"}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"{", "}"}], "]"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", "j"}], "}"}], "=", "startpos"}]}], "]"}], ";", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"k", "=", "0"}], ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"i", "+", "k"}], "<=", "rows"}], ")"}], "&&", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"j", "+", "k"}], "<=", "columns"}], ")"}]}], ",", 
        RowBox[{"k", "++"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"result", "[", 
           RowBox[{"[", 
            RowBox[{"k", "+", "1"}], "]"}], "]"}], "=", 
          RowBox[{"matr", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"i", "+", "k"}], ",", 
             RowBox[{"j", "+", "k"}]}], "]"}], "]"}]}], ";"}]}], "]"}], ";", 
      RowBox[{"result", "=", 
       RowBox[{"Take", "[", 
        RowBox[{"result", ",", "k"}], "]"}]}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940293578565481*^9, 3.94029371982836*^9}},
 CellLabel->"In[674]:=",
 CellID->936217721,ExpressionUUID->"378e247d-cbce-4d41-8279-9b99b498ae7a"],

Cell["For example:", "Text",
 CellChangeTimes->{{3.940293721746855*^9, 3.940293723629964*^9}},
 CellID->1091835804,ExpressionUUID->"9494ad19-7cd8-4493-9efd-55165d381e01"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testmatr", "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.940293724420813*^9, 3.940293727874814*^9}},
 CellLabel->"In[676]:=",
 CellID->790447139,ExpressionUUID->"2790e7da-b5d5-4a41-a285-6787ba89339f"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"11", "14", "8", "3", "14", "7"},
     {"12", "15", "1", "9", "15", "14"},
     {"14", "9", "12", "5", "15", "5"},
     {"9", "4", "13", "15", "1", "13"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.9402937281774282`*^9},
 CellLabel->"Out[676]//MatrixForm=",
 CellID->1042535283,ExpressionUUID->"d9072d06-8ac6-4673-8972-d010b26b7641"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"extractSingleRightDiagProc", "[", 
  RowBox[{"testmatr", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940293730899157*^9, 3.940293740075899*^9}},
 CellLabel->"In[677]:=",
 CellID->609896957,ExpressionUUID->"1e661da4-14b0-425d-bf8c-a119f28b5e06"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"11", ",", "15", ",", "12", ",", "15"}], "}"}]], "Output",
 CellChangeTimes->{3.9402937409138927`*^9},
 CellLabel->"Out[677]=",
 CellID->11885955,ExpressionUUID->"1689f7b4-8f09-4f2e-8eae-8d06ec05b14c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"extractSingleRightDiagProc", "[", 
  RowBox[{"testmatr", ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940293748537455*^9, 3.9402937488393*^9}},
 CellLabel->"In[678]:=",
 CellID->51266514,ExpressionUUID->"c6dbec97-ffde-415d-b99d-3d1ba910d303"],

Cell[BoxData[
 RowBox[{"{", "9", "}"}]], "Output",
 CellChangeTimes->{3.940293749158156*^9},
 CellLabel->"Out[678]=",
 CellID->410851530,ExpressionUUID->"a035f829-717f-4cd2-b1f0-ec2f822a6308"]
}, Open  ]],

Cell["\<\
Now we have to write a function which will extract many or all of the \
diagonals:\
\>", "Text",
 CellChangeTimes->{3.9402937696650248`*^9},
 CellID->935123864,ExpressionUUID->"56a93266-a7ac-4721-a965-946e8048e9ac"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "extractSomeRightDiagsProc", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"extractSomeRightDiagsProc", "[", 
    RowBox[{
     RowBox[{"matr_", "?", "MatrixQ"}], ",", 
     RowBox[{"els", ":", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"{", "elements__List", "}"}], "|", "All"}], ")"}]}]}], "]"}], 
   ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dims", "=", 
       RowBox[{"Dimensions", "[", "matr", "]"}]}], "}"}], ",", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"poslist", ",", "i", ",", "len", ",", "result"}], "}"}], ",", 
       
       RowBox[{
        RowBox[{"poslist", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"els", "===", "All"}], ",", 
           RowBox[{"allRightDiagStartPositions", "[", "dims", "]"}], ",", 
           RowBox[{"startRightDiagPositions", "[", 
            RowBox[{"dims", ",", 
             RowBox[{"{", "elements", "}"}]}], "]"}]}], "]"}]}], ";", 
        RowBox[{"len", "=", 
         RowBox[{"Length", "[", "poslist", "]"}]}], ";", 
        RowBox[{"result", "=", 
         RowBox[{"Table", "[", 
          RowBox[{"0", ",", 
           RowBox[{"{", "len", "}"}]}], "]"}]}], ";", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"i", "=", "1"}], ",", 
          RowBox[{"i", "<=", "len"}], ",", 
          RowBox[{"i", "++"}], ",", 
          RowBox[{
           RowBox[{"result", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", 
           RowBox[{"extractSingleRightDiagProc", "[", 
            RowBox[{"matr", ",", 
             RowBox[{"poslist", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}]}], "]"}], ";", 
        "result"}]}], "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940293771866743*^9, 3.9402938843803587`*^9}},
 CellLabel->"In[679]:=",
 CellID->1525681908,ExpressionUUID->"fdef9e70-8e0d-4cc3-bba1-bbcae5976aef"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.9402938874866123`*^9, 3.940293889047411*^9}},
 CellID->930592443,ExpressionUUID->"eb4708e2-9cab-4dc2-a5c3-aff3886bdaaa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"extractSomeRightDiagsProc", "[", 
  RowBox[{"testmatr", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "3"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940293890055511*^9, 3.94029391361731*^9}},
 CellLabel->"In[681]:=",
 CellID->401286575,ExpressionUUID->"edff60b4-6e8b-4440-a2bb-ad87ac334502"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"11", ",", "15", ",", "12", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "9", ",", "15", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "15", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "15", ",", "12", ",", "15"}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{3.940293913976837*^9},
 CellLabel->"Out[681]=",
 CellID->184583225,ExpressionUUID->"3f552ed0-78d5-4a01-a96e-e2940ae3295a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"extractSomeRightDiagsProc", "[", 
  RowBox[{"testmatr", ",", "All"}], "]"}]], "Input",
 CellChangeTimes->{{3.9402939218677998`*^9, 3.940293926528747*^9}},
 CellLabel->"In[682]:=",
 CellID->311025182,ExpressionUUID->"53980524-49ea-426f-8423-4dea02b3fe01"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "9", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "9", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "15", ",", "12", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "1", ",", "5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "9", ",", "15", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "15", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "14"}], "}"}], ",", 
   RowBox[{"{", "7", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402939267518063`*^9},
 CellLabel->"Out[682]=",
 CellID->240868114,ExpressionUUID->"d0b73871-5fbe-4065-b12b-0446daecc9c6"]
}, Open  ]],

Cell["\<\
The functions to extract left diagonals and all diagonals are exactly the \
same as before, modulo changing the name of the function which extracts right \
diagonals from <getSomeRightMatrixDiagonals> to <extractSomeRightDiagsProc>.\
\>", "Text",
 CellChangeTimes->{{3.940293934762409*^9, 3.940293939548905*^9}, {
   3.940301525811776*^9, 3.940301525832787*^9}, 3.940740416304124*^9, {
   3.9407409600738697`*^9, 3.940740960090877*^9}},
 CellID->1901553806,ExpressionUUID->"f166ee11-f175-4545-b1b7-796f1137a3f4"],

Cell[CellGroupData[{

Cell["Performance tests", "SubitemNumbered",
 CellChangeTimes->{3.940293949067741*^9},
 CellID->545077966,ExpressionUUID->"8555f17d-e220-4d31-8fa8-b9276827ff3a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"extractSomeRightDiagsProc", "[", 
    RowBox[{"powertestmatr", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "10"}], "}"}]}], "}"}]}], "]"}], "//", "Short"}], "//",
   "Timing"}]], "Input",
 CellChangeTimes->{{3.9402939506830606`*^9, 3.9402939691682043`*^9}},
 CellLabel->"In[683]:=",
 CellID->28381084,ExpressionUUID->"126eae9e-7e75-46fe-9b33-6317606c6688"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.006423`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.9402939695588627`*^9},
 CellLabel->"Out[683]=",
 CellID->599635825,ExpressionUUID->"ebec9fcc-d390-4e49-9dce-00bdad4b1a13"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"extractSomeRightDiagsProc", "[", 
    RowBox[{"powertestmatr", ",", "All"}], "]"}], "//", "Short"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940293980365367*^9, 3.940293983948318*^9}},
 CellLabel->"In[684]:=",
 CellID->520284500,ExpressionUUID->"394c4253-44c2-4637-996e-d1e0aeea5c4e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.433809`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "1", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "39"}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "995", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"50", ",", "9"}], "}"}], ",", 
      RowBox[{"{", "44", "}"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940293984916772*^9},
 CellLabel->"Out[684]=",
 CellID->1169965501,ExpressionUUID->"4e020864-05db-472d-a8c9-a57d3aa184f5"]
}, Open  ]]
}, Open  ]],

Cell["\<\
As we can see, the procedural version is hopelessly slow, even though we did \
not use Append and Prepend in list accumulation, and in fact used the same \
auxiliary functions for the preliminary steps. Thus, the comparison is rather \
\[OpenCurlyDoubleQuote]clean\[CloseCurlyDoubleQuote] and fair. For the \
present example, the difference in performance is about 100 times! And pretty \
much this difference remains even when I only have to extract a few \
diagonals. Had I replaced all the code in those auxiliary functions also by \
its purely procedural version, the difference would have been even more \
dramatic.\
\>", "Text",
 CellChangeTimes->{{3.9402940001326838`*^9, 3.940294008627572*^9}},
 CellID->281098254,ExpressionUUID->"54ff9ec7-b09d-49fb-871d-cf7a371bb442"],

Cell["\<\
I replaced all the code in those auxiliary functions also by its purely \
procedural version, the difference would have been even more dramatic.\
\>", "Text",
 CellChangeTimes->{{3.9402940191953907`*^9, 3.9402940235510063`*^9}},
 CellID->1509510104,ExpressionUUID->"8fde50d4-66ac-474f-8467-b0b21ba612c7"],

Cell["\<\
The fastest version for all diagonal extraction, based on structural \
operations\
\>", "ItemNumbered",
 CellChangeTimes->{3.9402940392819223`*^9},
 CellID->558175756,ExpressionUUID->"184658b0-8f42-4d61-a250-885f420449bc"],

Cell["Developing a solution", "SubitemNumbered",
 CellChangeTimes->{3.9402940458522673`*^9},
 CellID->1051360996,ExpressionUUID->"66b20838-e84e-4ee1-8ee8-e61ca6e413b7"],

Cell["\<\
While the above Extract - based implementation is our best all - round one, \
we could win another factor of 1.5~2 in performance in extracting all matrix \
diagonals (or, all left, all right ones) by using the structural operations. \
Let me briefly demonstrate how such code may be developed.\
\>", "Text",
 CellChangeTimes->{{3.9402940541370296`*^9, 3.940294057260584*^9}},
 CellID->728812256,ExpressionUUID->"9a352475-f9d4-489d-b5d3-9d1efcbf16b4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testmatr", "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.940294060064706*^9, 3.940294063847782*^9}},
 CellLabel->"In[685]:=",
 CellID->338889718,ExpressionUUID->"be0ba1c7-97e5-4209-a9c5-822b5baa63f2"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"11", "14", "8", "3", "14", "7"},
     {"12", "15", "1", "9", "15", "14"},
     {"14", "9", "12", "5", "15", "5"},
     {"9", "4", "13", "15", "1", "13"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.940294064541627*^9},
 CellLabel->"Out[685]//MatrixForm=",
 CellID->1086219411,ExpressionUUID->"e3bef626-e7b2-40d8-9ce5-511564571591"]
}, Open  ]],

Cell["We first find number of rows and columns:", "Text",
 CellChangeTimes->{3.9402940717083473`*^9, 3.9407404622457027`*^9},
 CellID->331157530,ExpressionUUID->"7c5a4f72-6f08-48ea-bc42-4f51764ea1d1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"testrows", ",", "testcolumns"}], "}"}], "=", 
  RowBox[{"Dimensions", "[", "testmatr", "]"}]}]], "Input",
 CellChangeTimes->{{3.940294073590618*^9, 3.9402940891107187`*^9}},
 CellLabel->"In[686]:=",
 CellID->328482066,ExpressionUUID->"3e836bd7-3650-4dfd-a142-be016a73170c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "6"}], "}"}]], "Output",
 CellChangeTimes->{3.9402940895888433`*^9},
 CellLabel->"Out[686]=",
 CellID->1213161759,ExpressionUUID->"8c592e5f-8764-4eca-9cff-cc36eceae545"]
}, Open  ]],

Cell[TextData[{
 "We will now use RotateLeft and MapThread to rotate individual rows \
differently (similar to one of the examples on MapThread, section ",
 ButtonBox["5.3.2.4.5",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-5-Functions-on-lists.nb", CharacterEncoding -> 
     "UTF-8"], "5.3.2.4.5"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-5-Functions-on-lists.nb"],
 "):"
}], "Text",
 CellChangeTimes->{{3.940294096962558*^9, 3.940294098716441*^9}, {
   3.940294138186036*^9, 3.940294138195568*^9}, 3.9407404622635117`*^9},
 CellID->1399938895,ExpressionUUID->"be5e3fc9-a829-45cd-af10-a06ea73133fb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step1", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"MapThread", "[", 
    RowBox[{"RotateLeft", ",", 
     RowBox[{"{", 
      RowBox[{"testmatr", ",", 
       RowBox[{"Range", "[", 
        RowBox[{"0", ",", 
         RowBox[{"testrows", "-", "1"}]}], "]"}]}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.940294143390875*^9, 3.940294161269981*^9}},
 CellLabel->"In[687]:=",
 CellID->1172382736,ExpressionUUID->"d3e68bac-1030-4772-9a34-21211a5b4414"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"11", ",", "15", ",", "12", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "1", ",", "5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "9", ",", "15", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "15", ",", "5", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "14", ",", "14", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "12", ",", "9", ",", "13"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940294162158539*^9},
 CellLabel->"Out[687]=",
 CellID->1234764814,ExpressionUUID->"dec18c40-93a7-4dec-94f1-b64a25137c3f"]
}, Open  ]],

Cell["\<\
If you look carefully at the sublists, you will see that they either \
represent full left diagonals (this will be so for the first (columns - rows \
+ 1) sublist), or they represent 2 right diagonals glued together. We have \
then to \[OpenCurlyDoubleQuote]unglue\[CloseCurlyDoubleQuote] them. This is \
how it is done:\
\>", "Text",
 CellChangeTimes->{{3.9402941685630503`*^9, 3.940294172145187*^9}},
 CellID->1736307034,ExpressionUUID->"b364f43e-5b69-488d-bdbb-423cc1c85827"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step2", "=", 
  RowBox[{"MapThread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Drop", "[", 
        RowBox[{"#1", "-", "#2"}], "]"}], ",", 
       RowBox[{"Take", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"-", "#2"}]}], "]"}]}], "}"}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{"step1", ",", 
      RowBox[{"PadLeft", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", 
          RowBox[{"testrows", "-", "1"}]}], "]"}], ",", "testcolumns"}], 
       "]"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940294176536418*^9, 3.940294212907362*^9}},
 CellLabel->"In[688]:=",
 CellID->816859623,ExpressionUUID->"477a569a-755a-427d-a59a-7cbb4f3ab94c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"11", ",", "15", ",", "12", ",", "15"}], "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"14", ",", "1", ",", "5", ",", "1"}], "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8", ",", "9", ",", "15", ",", "13"}], "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "14", ",", "4", ",", "8"}], "}"}], ",", 
     RowBox[{"{", "9", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"12", ",", "12", ",", "12", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "9", ",", "6", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"12", ",", "9", ",", "13"}], "}"}]}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{3.940294213797093*^9},
 CellLabel->"Out[688]=",
 CellID->1945330018,ExpressionUUID->"1561018f-9c92-423b-bdab-42410bbe871d"]
}, Open  ]],

Cell["\<\
We have used PadLeft to account for the first several diagonals which are \
complete. In this case, we use MapThread in a similar spirit as before, but \
this time with a {Drop[#1, -#2], Take[#1, -#2]} & function. Now, we have in \
principle already obtained all right diagonals, but they are grouped \
unnaturally - they are not in any simple logical order. We have to reorder \
them. This turns out to be easy to do:\
\>", "Text",
 CellChangeTimes->{{3.940294223618101*^9, 3.940294230313258*^9}, {
  3.940745067883885*^9, 3.940745068224759*^9}},
 CellID->230488104,ExpressionUUID->"104ff0fb-afac-472a-bc74-a539f5c59fc1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step3", "=", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{"Reverse", "[", 
     RowBox[{"Transpose", "[", "step2", "]"}], "]"}], ",", "1"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.940294231948958*^9, 3.940294242719721*^9}},
 CellLabel->"In[689]:=",
 CellID->247267499,ExpressionUUID->"6f5debb0-d3f5-4d1c-bf41-83f24d429ba5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "9", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "9", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "15", ",", "12", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "1", ",", "5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "9", ",", "15", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "14", ",", "4", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "12", ",", "12", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "9", ",", "6", ",", "10"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940294243120709*^9},
 CellLabel->"Out[689]=",
 CellID->372654453,ExpressionUUID->"d78722b1-9129-4160-a2b2-bc97bc1f1ad2"]
}, Open  ]],

Cell["\<\
We now just have to delete the empty lists from the beginning. We know \
precisely how many there are: (columns - rows + 1) of them, since they result \
from the complete diagonals. We have then to Drop them:\
\>", "Text",
 CellChangeTimes->{{3.940294251679401*^9, 3.94029425340088*^9}, 
   3.940740462281114*^9},
 CellID->1141076919,ExpressionUUID->"d29731c9-fed6-4c21-8617-c06d96fba43d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"Drop", "[", 
   RowBox[{"step3", ",", 
    RowBox[{"testcolumns", "-", "testrows", "+", "1"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9402942553504057`*^9, 3.940294265970234*^9}},
 CellLabel->"In[690]:=",
 CellID->1558135261,ExpressionUUID->"69cb60a3-5a91-4b16-8189-338166febbde"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "9", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "9", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "15", ",", "12", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "1", ",", "5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "9", ",", "15", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "14", ",", "4", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "12", ",", "12", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "9", ",", "6", ",", "10"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940294266322352*^9},
 CellLabel->"Out[690]=",
 CellID->741811586,ExpressionUUID->"d785e84d-594f-40f5-bc9e-fb03208caa64"]
}, Open  ]],

Cell["\<\
These are the diagonals in the correct order - starting from the smallest \
(bottom-left) to larger ones and again smaller (top-right). We can now \
combine the steps into a function:\
\>", "Text",
 CellChangeTimes->{{3.940294274603881*^9, 3.9402942841203136`*^9}},
 CellID->1484755067,ExpressionUUID->"db92ed74-a4ae-40f9-8826-90b0fee7cf8c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "matrixRightDiagonals", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"matrixRightDiagonals", "[", 
     RowBox[{"matr_", "?", "MatrixQ"}], "]"}], "/;", 
    RowBox[{"NonPositive", "[", 
     RowBox[{"Subtract", "@@", 
      RowBox[{"Dimensions", "[", "matr", "]"}]}], "]"}]}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rows", ",", "columns"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"rows", ",", "columns"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "matr", "]"}]}], ";", 
      RowBox[{"Drop", "[", 
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"Reverse", "[", 
           RowBox[{"Transpose", "[", 
            RowBox[{"MapThread", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Drop", "[", 
                  RowBox[{"#1", ",", 
                   RowBox[{"-", "#2"}]}], "]"}], ",", 
                 RowBox[{"Take", "[", 
                  RowBox[{"#1", ",", 
                   RowBox[{"-", "#2"}]}], "]"}]}], "}"}], "&"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Transpose", "[", 
                 RowBox[{"MapThread", "[", 
                  RowBox[{"RotateLeft", ",", 
                   RowBox[{"{", 
                    RowBox[{"matr", ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"rows", "-", "1"}]}], "]"}]}], "}"}]}], "]"}], 
                 "]"}], ",", 
                RowBox[{"PadLeft", "[", 
                 RowBox[{
                  RowBox[{"Range", "[", 
                   RowBox[{"0", ",", 
                    RowBox[{"rows", "-", "1"}]}], "]"}], ",", "columns"}], 
                 "]"}]}], "}"}]}], "]"}], "]"}], "]"}], ",", "1"}], "]"}], 
        ",", 
        RowBox[{"columns", "-", "rows", "+", "1"}]}], "]"}]}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940294311960456*^9, 3.94029443071714*^9}},
 CellLabel->"In[691]:=",
 CellID->643232844,ExpressionUUID->"793d93b7-7a15-4067-b5bc-00ca432fa9b7"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940294433293799*^9, 3.940294434090457*^9}},
 CellID->54710577,ExpressionUUID->"41691c83-6ddf-4fb6-ad15-2a42b369f59c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"matrixRightDiagonals", "[", "testmatr", "]"}]], "Input",
 CellChangeTimes->{{3.9402944362225437`*^9, 3.9402944402402267`*^9}},
 CellLabel->"In[693]:=",
 CellID->2018997387,ExpressionUUID->"37f85961-6458-4a69-bc9f-6e24cd253f31"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "9", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "9", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "15", ",", "12", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "1", ",", "5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "9", ",", "15", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "15", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "14"}], "}"}], ",", 
   RowBox[{"{", "7", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940294440590684*^9},
 CellLabel->"Out[693]=",
 CellID->1814507924,ExpressionUUID->"6fd5db38-535e-4cef-8283-bb4c7661dec5"]
}, Open  ]],

Cell["\<\
For matrices with the number of rows larger than the number of columns, it is \
enough to consider the Transposed matrix and then reverse the resulting list \
of diagonals:\
\>", "Text",
 CellChangeTimes->{{3.940294448202516*^9, 3.940294464062997*^9}, 
   3.940740462298456*^9},
 CellID->19407621,ExpressionUUID->"032ed7e1-ab45-4fa5-9ceb-ac7a3555f1ca"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"matrixRightDiagonals", "[", 
     RowBox[{"matr_", "?", "MatrixQ"}], "]"}], "/;", 
    RowBox[{"Positive", "[", 
     RowBox[{"Subtract", "@@", 
      RowBox[{"Dimensions", "[", "matr", "]"}]}], "]"}]}], ":=", 
   RowBox[{"Reverse", "[", 
    RowBox[{"matrixRightDiagonals", "[", 
     RowBox[{"Transpose", "[", "matr", "]"}], "]"}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.940294468531425*^9, 3.940294498076366*^9}},
 CellLabel->"In[694]:=",
 CellID->1543491186,ExpressionUUID->"30c58958-bf39-43e5-99c4-bfa54ffe15ac"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940294500805662*^9, 3.940294501587075*^9}},
 CellID->1175917676,ExpressionUUID->"e3579169-827f-48ff-9648-02d608c0d493"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", "testmatr", "]"}], "//", "MatrixForm"}]], "Input",\

 CellChangeTimes->{{3.940294507752038*^9, 3.940294514850974*^9}},
 CellLabel->"In[695]:=",
 CellID->1509782903,ExpressionUUID->"21a3c8c9-3187-49ca-bd16-285c8f28cb2a"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"11", "12", "14", "9"},
     {"14", "15", "9", "4"},
     {"8", "1", "12", "13"},
     {"3", "9", "5", "15"},
     {"14", "15", "15", "1"},
     {"7", "14", "5", "13"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.94029451520256*^9},
 CellLabel->"Out[695]//MatrixForm=",
 CellID->1070067326,ExpressionUUID->"24248b16-a356-4238-933b-ab1e1f6b1970"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"matrixRightDiagonals", "[", 
  RowBox[{"Transpose", "[", "testmatr", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.940294516688657*^9, 3.940294523314033*^9}},
 CellLabel->"In[696]:=",
 CellID->486002191,ExpressionUUID->"004e5bbd-e8ee-4079-95e6-f73672139014"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "7", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "15", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "9", ",", "15", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "1", ",", "5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "15", ",", "12", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "9", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "4"}], "}"}], ",", 
   RowBox[{"{", "9", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940294523594727*^9},
 CellLabel->"Out[696]=",
 CellID->875808823,ExpressionUUID->"bf5c3633-894a-4335-8d69-9208cdf190aa"]
}, Open  ]],

Cell["\<\
For the left diagonals, as we already saw, it is enough to reverse the matrix \
and then consider the right diagonals once again:\
\>", "Text",
 CellChangeTimes->{{3.940294531050783*^9, 3.940294532768733*^9}, 
   3.940740462315696*^9},
 CellID->1410189518,ExpressionUUID->"339ebc51-5269-4601-9b0d-4767b66f0757"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "matrixLeftDiagonals", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"matrixLeftDiagonals", "[", 
    RowBox[{"matr_", "?", "MatrixQ"}], "]"}], ":=", 
   RowBox[{"matrixRightDiagonals", "[", 
    RowBox[{"Reverse", "[", "matr", "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940294534124022*^9, 3.940294558809464*^9}},
 CellLabel->"In[697]:=",
 CellID->224301679,ExpressionUUID->"0e966d81-564a-40c0-9fc6-c723d1587f16"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940294560369315*^9, 3.940294561165105*^9}},
 CellID->22405320,ExpressionUUID->"c36118e3-5dd9-44dc-9211-b84fabd41ed2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testmatr", "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.940294565291472*^9, 3.940294570203189*^9}},
 CellLabel->"In[699]:=",
 CellID->1646744358,ExpressionUUID->"f9cae2ec-0445-4219-b0d5-fd76109db9a2"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"11", "14", "8", "3", "14", "7"},
     {"12", "15", "1", "9", "15", "14"},
     {"14", "9", "12", "5", "15", "5"},
     {"9", "4", "13", "15", "1", "13"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.94029457040853*^9},
 CellLabel->"Out[699]//MatrixForm=",
 CellID->1327712761,ExpressionUUID->"76e79ab1-3bed-405e-a4d7-3ccf6b36e088"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"matrixLeftDiagonals", "[", "testmatr", "]"}]], "Input",
 CellChangeTimes->{{3.940294573064837*^9, 3.940294576497815*^9}},
 CellLabel->"In[700]:=",
 CellID->1871309336,ExpressionUUID->"4cf55c4e-9081-4a09-a350-a42768a744b4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "11", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "15", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "9", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "12", ",", "9", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"13", ",", "5", ",", "15", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "15", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", "13", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940294576788787*^9},
 CellLabel->"Out[700]=",
 CellID->1561621455,ExpressionUUID->"2bb4ed1e-07a2-4e43-bdc0-07b055acac2e"]
}, Open  ]],

Cell["\<\
Finally, the function for all the diagonals is written straightforwardly:\
\>", "Text",
 CellChangeTimes->{3.940294592460101*^9, 3.940740462332913*^9},
 CellID->231097191,ExpressionUUID->"7885ee45-bc47-4b4d-b3b4-dab24b53eb40"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getAllMatrixDiagonals", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getAllMatrixDiagonals", "[", 
    RowBox[{"matr_", "?", "MatrixQ"}], "]"}], ":=", 
   RowBox[{"Through", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"matrixRightDiagonals", ",", "matrixLeftDiagonals"}], "}"}], 
     "[", "matr", "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940294594315242*^9, 3.9402946279477673`*^9}},
 CellLabel->"In[701]:=",
 CellID->752132148,ExpressionUUID->"afb688e2-3f9b-462d-9f0a-8553a77a36e5"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940294629674798*^9, 3.940294630513139*^9}},
 CellID->1758261316,ExpressionUUID->"2ac7cb95-054d-4c5e-9680-5cb770de9042"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getAllMatrixDiagonals", "[", "testmatr", "]"}]], "Input",
 CellChangeTimes->{{3.940294631682774*^9, 3.940294636602919*^9}},
 CellLabel->"In[703]:=",
 CellID->979369091,ExpressionUUID->"751cd42a-6356-46a8-81e4-f8e290654af3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "9", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"12", ",", "9", ",", "13"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "15", ",", "12", ",", "15"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "1", ",", "5", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "9", ",", "15", ",", "13"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "15", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "14"}], "}"}], ",", 
     RowBox[{"{", "7", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "11", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"12", ",", "14"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "15", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "9", ",", "1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "12", ",", "9", ",", "14"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "5", ",", "15", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"15", ",", "15", ",", "14"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "5"}], "}"}], ",", 
     RowBox[{"{", "13", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402946369264803`*^9},
 CellLabel->"Out[703]=",
 CellID->448692343,ExpressionUUID->"4d042737-94e4-4cd7-a909-68f5eadbd47f"]
}, Open  ]],

Cell["Performance tests", "SubitemNumbered",
 CellChangeTimes->{3.940294646157507*^9},
 CellID->60351730,ExpressionUUID->"472286e4-e984-4a68-b2db-e9c7614617ad"],

Cell["\<\
We can now test the performance of new functions on our power example:\
\>", "Text",
 CellChangeTimes->{3.940294651321316*^9, 3.940740462350131*^9},
 CellID->719244726,ExpressionUUID->"6c4be2b6-018a-4951-b1dd-e18c2efb64fe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"matrixRightDiagonals", "[", "powertestmatr", "]"}], "//", 
   "Short"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.9402946528481894`*^9, 3.9402946658876543`*^9}},
 CellLabel->"In[704]:=",
 CellID->841121354,ExpressionUUID->"bf22bcce-e14d-461b-b866-8ecd3dbb3634"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.014918`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "1", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "39"}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "995", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"50", ",", "9"}], "}"}], ",", 
      RowBox[{"{", "44", "}"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940294666312787*^9},
 CellLabel->"Out[704]=",
 CellID->243763419,ExpressionUUID->"fffe2753-5cea-496f-99bd-01849c8dfe2b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"matrixLeftDiagonals", "[", "powertestmatr", "]"}], "//", 
   "Short"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940294670607717*^9, 3.940294677946192*^9}},
 CellLabel->"In[705]:=",
 CellID->2073343631,ExpressionUUID->"419965af-9ca5-4166-bfe5-853892cabcf8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.018641`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "33", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"43", ",", "34"}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "995", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"27", ",", "32"}], "}"}], ",", 
      RowBox[{"{", "6", "}"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940294678483762*^9},
 CellLabel->"Out[705]=",
 CellID->1826414498,ExpressionUUID->"bf8a1424-e860-4162-a400-9864404517bd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getAllMatrixDiagonals", "[", "powertestmatr", "]"}], "//", 
   "Short"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940294680551859*^9, 3.9402946888808203`*^9}},
 CellLabel->"In[706]:=",
 CellID->643238621,ExpressionUUID->"25d012b8-dbf2-4b2e-bde3-8bca3bc450e0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.029775`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "1", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "39"}], "}"}], ",", 
        RowBox[{"\[LeftSkeleton]", "995", "\[RightSkeleton]"}], ",", 
        RowBox[{"{", 
         RowBox[{"50", ",", "9"}], "}"}], ",", 
        RowBox[{"{", "44", "}"}]}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940294689447391*^9},
 CellLabel->"Out[706]=",
 CellID->1550188005,ExpressionUUID->"2828ce89-595f-40e2-8299-6ed8a588cb8d"]
}, Open  ]],

Cell["\<\
We see that we get a factor of 1.5-2 performance gain with respect to the \
Extract - based implementation, but of course the present one is only limited \
to the case when we need all the diagonals. And because it performs certain \
operations such as RotateLeft on the entire matrix, we can not hope for an \
easy optimization of the present solution to the case of just a few matrix \
diagonals.\
\>", "Text",
 CellChangeTimes->{{3.940294697913192*^9, 3.940294702872056*^9}},
 CellID->2146192286,ExpressionUUID->"1433ffba-54d7-4f5a-894e-d719d1dc242e"],

Cell["Conclusions", "ItemNumbered",
 CellChangeTimes->{3.940294713072831*^9},
 CellID->1622477367,ExpressionUUID->"680d216c-3a5b-4f5f-a799-56277b9f8cc1"],

Cell["\<\
The problem in question is a good playground to see how different programming \
styles and techniques compare to each other in terms of speed, flexibility \
etc. We have seen that the implementation based on functional programming and \
Extract operator is a very fast, good all-round solution. We also saw that \
the procedural solution is hopelessly slow, even though we were always \
careful to pre-allocate the result and
not use Append etc. Finally, we have seen that in case when we need all the \
diagonals, there exists another solution based on structural operations, \
which is even faster than the Extract-based one, but limited to the case of \
all diagonals only.\
\>", "Text",
 CellChangeTimes->{{3.940294719742867*^9, 3.94029473526267*^9}},
 CellID->229757563,ExpressionUUID->"2f9a9913-512d-4cb9-858f-b92f7aa83e07"],

Cell["\<\
Another part of this problem which can be a good exercise and also would add \
a practical value to it, is to efficiently modify or replace given matrix \
diagonals, not just extract them. It should be possible to tackle it by a \
similar method, using ReplacePart rather than Extract (however, let us keep \
in mind that ReplacePart has efficiency issues for large number of \
simultaneous replacements).\
\>", "Text",
 CellChangeTimes->{{3.940294719742867*^9, 3.94029474028339*^9}},
 CellID->1560893219,ExpressionUUID->"d9967588-5ce1-4b0e-ad60-cba915addafb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Case study III: generating complex random Wishart matrices", \
"Subsection",
 CellChangeTimes->{3.940294755215858*^9},
 CellID->1908754514,ExpressionUUID->"1b6b00e8-d0ad-4bb4-8ff0-312fd67c2382"],

Cell["The problem", "ItemNumbered",
 CellChangeTimes->{3.9402947622663527`*^9},
 CellID->1326397912,ExpressionUUID->"c0a2bce6-4254-4e13-96c0-de3758fc8d7e"],

Cell["\<\
Here we will consider a problem of generation of complex random Wishart \
matrices with the normally distributed complex entries. Wishart matrices are \
block matrices of the form\
\>", "Text",
 CellChangeTimes->{{3.940294768027731*^9, 3.940294769368676*^9}},
 CellID->1889451124,ExpressionUUID->"e478348d-e62b-466b-9994-cbdd66a9a5fa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "W"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"WH", ",", "0"}], "}"}]}], "}"}], "//", "MatrixForm"}]], "Input",\

 CellChangeTimes->{{3.940294771973634*^9, 3.940294778401236*^9}},
 CellLabel->"In[707]:=",
 CellID->613127063,ExpressionUUID->"f3cb17e1-e23c-4e1f-8aa5-cef51912771c"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "W"},
     {"WH", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.940294778705331*^9},
 CellLabel->"Out[707]//MatrixForm=",
 CellID->1705755950,ExpressionUUID->"e87bee26-6b3d-41b4-8b4a-32d83db3d7a1"]
}, Open  ]],

Cell["\<\
where W is n x m complex matrix and WH is its Hermitian conjugate. Thus, the \
total matrix is (m + n) x (m + n). Random complex Wishart matrices with \
uncorrelated (other than due to WH being Hermitian conjugate of W) normally \
distributed entries of W, form the so-called chiral ensembles and are used, \
in particular, for the low-energy description of Quantum ChromoDynamics. Of \
main interest usually are the
eigenvalue correlations, but here we will just consider a way to generate \
these matrices.\
\>", "Text",
 CellChangeTimes->{{3.940294794438657*^9, 3.940294803850697*^9}, {
  3.940745956243752*^9, 3.940745974613693*^9}},
 CellID->1881047847,ExpressionUUID->"9ab637f3-6aa0-4316-86b8-947796d92ff6"],

Cell["Preliminaries", "ItemNumbered",
 CellChangeTimes->{3.94029481384674*^9},
 CellID->158757856,ExpressionUUID->"1c4de60a-ab3d-4cd0-b0d3-6cee9b6c0e5f"],

Cell["\<\
We will need to load a package \
Statistics\[OpenCurlyQuote]ContinuousDistributions:\
\>", "Text",
 CellChangeTimes->{3.9402948211512814`*^9, 3.94074046236736*^9},
 CellID->1068596218,ExpressionUUID->"19d7741f-aef7-4c8f-bec0-aa70823e1b58"],

Cell["The way to generate the gaussian numbers is as follows:", "Text",
 CellChangeTimes->{3.940294904285725*^9, 3.9407404623845263`*^9},
 CellID->1877317241,ExpressionUUID->"6a5aa6ba-37de-4b5b-8bc6-f466bbc7d2dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomReal", "[", 
  RowBox[{
   RowBox[{"NormalDistribution", "[", 
    RowBox[{"0", ",", "1"}], "]"}], ",", 
   RowBox[{"{", "10", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9402949059337063`*^9, 3.940294920037833*^9}, {
  3.9402953169860067`*^9, 3.94029531754204*^9}},
 CellLabel->"In[721]:=",
 CellID->1125649430,ExpressionUUID->"60b16108-42ca-4036-b549-a9d11ffdb008"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "1.966508186277399`"}], ",", 
   RowBox[{"-", "0.017311588740848628`"}], ",", "1.245183711016861`", ",", 
   "0.5826040594567372`", ",", "1.3038269508894995`", ",", 
   "0.5132055698033352`", ",", "1.4469869000432751`", ",", 
   "0.11987357714908359`", ",", "1.7924285821725818`", ",", 
   RowBox[{"-", "0.1714377208296922`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940294920486705*^9, 3.9402953179689617`*^9},
 CellLabel->"Out[721]=",
 CellID->1401200308,ExpressionUUID->"d92fea8e-c346-4b36-8420-7413a6fce03b"]
}, Open  ]],

Cell["\<\
Here we have generated 10 random numbers with zero mean and unit variance.\
\>", "Text",
 CellChangeTimes->{3.9402953355214863`*^9},
 CellID->692240463,ExpressionUUID->"8a6f4a04-f45e-4358-9c0e-86345c410f6a"],

Cell["Procedural implementation", "ItemNumbered",
 CellChangeTimes->{3.940295343454413*^9},
 CellID->1566545842,ExpressionUUID->"616fcff7-3351-49ae-bbe4-3692b4b929d3"],

Cell["\<\
Here is the straightforward procedural implementation. This function \
generates a single Wishart matrix of specified dimensions, mean and variance \
of the elements distribution.\
\>", "Text",
 CellChangeTimes->{{3.9402953487985277`*^9, 3.940295350034313*^9}},
 CellID->786454274,ExpressionUUID->"71ad58e7-5059-4768-8f6f-ad60d60ecf56"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "buildMatrixProc", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"buildMatrixProc", "[", 
    RowBox[{"m_Integer", ",", "n_Integer", ",", 
     RowBox[{"mu_", "?", "NumericQ"}], ",", 
     RowBox[{"sigma_", "?", "NumericQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"source", ",", "nums", ",", "i", ",", "j", ",", 
       RowBox[{"k", "=", "1"}], ",", 
       RowBox[{"result", "=", 
        RowBox[{"Array", "[", 
         RowBox[{
          RowBox[{"0", "&"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"m", "+", "n"}], ",", 
            RowBox[{"m", "+", "n"}]}], "}"}]}], "]"}]}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"source", "=", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"NormalDistribution", "[", 
          RowBox[{"mu", ",", "sigma"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", "m", " ", "n"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"nums", "=", 
       RowBox[{
        RowBox[{"Take", "[", 
         RowBox[{"source", ",", 
          RowBox[{"n", " ", "m"}]}], "]"}], "+", 
        RowBox[{"I", "*", 
         RowBox[{"Drop", "[", 
          RowBox[{"source", ",", 
           RowBox[{"m", " ", "n"}]}], "]"}]}]}]}], ";", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "<=", "n"}], ",", 
        RowBox[{"i", "++"}], ",", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"j", "=", 
           RowBox[{"n", "+", "1"}]}], ",", 
          RowBox[{"j", "<=", 
           RowBox[{"n", "+", "m"}]}], ",", 
          RowBox[{"j", "++"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"result", "[", 
             RowBox[{"[", 
              RowBox[{"j", ",", "i"}], "]"}], "]"}], "=", 
            RowBox[{"Conjugate", "[", 
             RowBox[{
              RowBox[{"result", "[", 
               RowBox[{"[", 
                RowBox[{"i", ",", "j"}], "]"}], "]"}], "=", 
              RowBox[{"nums", "[", 
               RowBox[{"[", 
                RowBox[{"k", "++"}], "]"}], "]"}]}], "]"}]}], ";"}]}], 
         "]"}]}], "]"}], ";", "result"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9402953534693604`*^9, 3.940295476904035*^9}},
 CellLabel->"In[722]:=",
 CellID->209231357,ExpressionUUID->"7a2f6e03-f715-4951-a8eb-e4e054a79da4"],

Cell["\<\
It does it by preallocating a matrix of (n + m) x (n + m) zeros, generating \
n*m complex numbers and then using a nested loop to insert these numbers (or \
complex conjugate) into the place where W (WH) should be. For example:\
\>", "Text",
 CellChangeTimes->{{3.940295484599318*^9, 3.94029548714428*^9}, 
   3.9407404624017963`*^9},
 CellID->28882382,ExpressionUUID->"f434173f-4dae-418d-9c33-cb3e2af0d9aa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"buildMatrixProc", "[", 
  RowBox[{"1", ",", "2", ",", "0", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.940295492580677*^9, 3.940295498920463*^9}},
 CellLabel->"In[724]:=",
 CellID->675519880,ExpressionUUID->"f6aeb5cc-dba4-43c7-a3db-7dfc848bcf04"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     RowBox[{
      RowBox[{"-", "0.26226993619652744`"}], "+", 
      RowBox[{"0.6207577571376147`", " ", "\[ImaginaryI]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     RowBox[{
      RowBox[{"-", "1.5778222379116025`"}], "-", 
      RowBox[{"1.8902679490760608`", " ", "\[ImaginaryI]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "0.26226993619652744`"}], "-", 
      RowBox[{"0.6207577571376147`", " ", "\[ImaginaryI]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "1.5778222379116025`"}], "+", 
      RowBox[{"1.8902679490760608`", " ", "\[ImaginaryI]"}]}], ",", "0"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940295499344194*^9},
 CellLabel->"Out[724]=",
 CellID->456692691,ExpressionUUID->"06c6a5d7-3df4-4450-b838-28e05d92a480"]
}, Open  ]],

Cell["\<\
Let us see how long it will take to produce 1000 matrices with n = m = 10 \
(that is, 20 x 20 matrices):\
\>", "Text",
 CellChangeTimes->{3.9402955075569344`*^9, 3.940740462419035*^9},
 CellID->94065372,ExpressionUUID->"f5aafd76-8f69-41eb-bd6f-50caeaa9312e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"buildMatrixProc", "[", 
      RowBox[{"10", ",", "10", ",", "0", ",", "1"}], "]"}], ",", 
     RowBox[{"{", "1000", "}"}]}], "]"}], ";"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940295509468217*^9, 3.94029552116158*^9}},
 CellLabel->"In[725]:=",
 CellID->2091099578,ExpressionUUID->"ab44e003-55c2-422c-80d6-623651bc7385"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.229983`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940295521661911*^9},
 CellLabel->"Out[725]=",
 CellID->1013141260,ExpressionUUID->"6414a9b9-e265-479b-bdc9-5dae9e9d85bb"]
}, Open  ]],

Cell["Functional implementation", "ItemNumbered",
 CellChangeTimes->{3.940295530132642*^9},
 CellID->467319757,ExpressionUUID->"e8631408-207a-4011-991c-6b33bbeb4caf"],

Cell["\<\
Let us try to improve performance by creating blocks W and WH with the use of \
Partition command, and then just joining 4 blocks: 2 blocks of zeros, W and \
WH.\
\>", "Text",
 CellChangeTimes->{{3.9402960836881227`*^9, 3.940296087671372*^9}, 
   3.940740462436222*^9},
 CellID->895458820,ExpressionUUID->"f40d65db-b249-4b3c-8641-abe8b135f6ca"],

Cell["\<\
We will need an auxiliary function to join 4 submatrices into a matrix. For \
example, for the blocks:\
\>", "Text",
 CellChangeTimes->{{3.9402960836881227`*^9, 3.940296085359276*^9}, 
   3.9407404624535007`*^9},
 CellID->1986457225,ExpressionUUID->"e9e98b04-9025-4c38-a3e6-09f5caded5b7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "/@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"5", ",", "6"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"7", ",", "8"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"9", ",", "10"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"11", ",", "12"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"13", ",", "14"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"15", ",", "16"}], "}"}]}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.9402960896952667`*^9, 3.9402961162133207`*^9}},
 CellLabel->"In[726]:=",
 CellID->1420681321,ExpressionUUID->"fac4982b-4d53-4fb1-b7f6-f162a781362d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"1", "2"},
       {"3", "4"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"5", "6"},
       {"7", "8"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"9", "10"},
       {"11", "12"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"13", "14"},
       {"15", "16"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{3.9402961178463097`*^9},
 CellLabel->"Out[726]=",
 CellID->1695950174,ExpressionUUID->"d9c0f15d-91aa-4afb-9d8a-278bca99ff7a"]
}, Open  ]],

Cell["We have to get", "Text",
 CellChangeTimes->{3.940296125429124*^9},
 CellID->2127442684,ExpressionUUID->"1dd112c6-3c63-496d-a250-218191bb50fe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Partition", "[", 
   RowBox[{
    RowBox[{"Range", "[", "16", "]"}], ",", "4"}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.940296144893758*^9, 3.9402961623238077`*^9}},
 CellLabel->"In[729]:=",
 CellID->117512381,ExpressionUUID->"994256c6-a51c-4ac4-9edd-2391bdcfcc50"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2", "3", "4"},
     {"5", "6", "7", "8"},
     {"9", "10", "11", "12"},
     {"13", "14", "15", "16"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.9402961507464657`*^9, 3.940296162559936*^9}},
 CellLabel->"Out[729]//MatrixForm=",
 CellID->275296807,ExpressionUUID->"c7978f25-1b47-43d1-a18f-aafef6c24d99"]
}, Open  ]],

Cell["Here is the code:", "Text",
 CellChangeTimes->{3.9402961758458233`*^9, 3.94074046247073*^9},
 CellID->1233659611,ExpressionUUID->"0b852dd9-88d0-4497-ac13-92402742e693"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "join4Blocks", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"join4Blocks", "[", 
    RowBox[{
    "matrA_List", ",", "matrB_List", ",", "matrC_List", ",", "matrD_List"}], 
    "]"}], ":=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Join", "@@@", 
         RowBox[{"Transpose", "[", "#", "]"}]}], "&"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"matrA", ",", "matrB"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"matrC", ",", "matrD"}], "}"}]}], "}"}]}], "]"}], ",", 
     "1"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940296178973317*^9, 3.940296227680285*^9}},
 CellLabel->"In[733]:=",
 CellID->1186482307,ExpressionUUID->"04f7c6f3-eed5-4388-a17f-d99fcbc3b136"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.94029622961316*^9, 3.9402962307260838`*^9}},
 CellID->1863425471,ExpressionUUID->"f67bc23b-d61e-413f-a5aa-217acd5185ff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"join4Blocks", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "12"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"13", ",", "14"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"15", ",", "16"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940296363462223*^9, 3.940296377812826*^9}},
 CellLabel->"In[737]:=",
 CellID->1125764614,ExpressionUUID->"bf48c446-1a32-449b-859d-3c37a784a2c1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "5", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "7", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "13", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "12", ",", "15", ",", "16"}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{3.940296378304103*^9},
 CellLabel->"Out[737]=",
 CellID->501587164,ExpressionUUID->"b7887263-e74a-46d3-a04c-909d5dc362c0"]
}, Open  ]],

Cell["\<\
I leave it as an exercise to the reader to figure out how this function works.\
\>", "Text",
 CellChangeTimes->{{3.9402963884739857`*^9, 3.940296390265623*^9}},
 CellID->1349677391,ExpressionUUID->"5d9be516-2e65-4c50-a415-ffaf10bbe828"],

Cell["\<\
Now, we are ready to write our functional version for Wishart matrices \
generation:\
\>", "Text",
 CellChangeTimes->{3.9402963884739857`*^9, 3.940740462487952*^9},
 CellID->1902470450,ExpressionUUID->"2036b19e-2000-4394-ac5a-9ffe4ff123b6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "buildWishartMatrix", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"buildWishartMatrix", "[", 
    RowBox[{"n_Integer", ",", "m_Integer", ",", 
     RowBox[{"mu_", "?", "NumericQ"}], ",", 
     RowBox[{"sigma_", "?", "NumericQ"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"source", "=", 
        RowBox[{"RandomReal", "[", 
         RowBox[{
          RowBox[{"NormalDistribution", "[", 
           RowBox[{"mu", ",", "sigma"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", "m", " ", "n"}], "}"}]}], "]"}]}], ",", "wmatrix", 
       ",", "nums"}], "}"}], ",", 
     RowBox[{
      RowBox[{"nums", "=", 
       RowBox[{
        RowBox[{"Take", "[", 
         RowBox[{"source", ",", 
          RowBox[{"n", " ", "m"}]}], "]"}], "+", 
        RowBox[{"I", "*", 
         RowBox[{"Drop", "[", 
          RowBox[{"source", ",", 
           RowBox[{"m", " ", "n"}]}], "]"}]}]}]}], ";", 
      RowBox[{"wmatrix", "=", 
       RowBox[{"Partition", "[", 
        RowBox[{"nums", ",", "m"}], "]"}]}], ";", 
      RowBox[{"join4Blocks", "[", 
       RowBox[{
        RowBox[{"Array", "[", 
         RowBox[{
          RowBox[{"0", "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"n", ",", "n"}], "}"}]}], "]"}], ",", "wmatrix", ",", 
        RowBox[{"Conjugate", "[", 
         RowBox[{"Transpose", "[", "wmatrix", "]"}], "]"}], ",", 
        RowBox[{"Array", "[", 
         RowBox[{
          RowBox[{"0", "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"m", ",", "m"}], "}"}]}], "]"}]}], "]"}]}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940296394435059*^9, 3.9402965254306793`*^9}},
 CellLabel->"In[738]:=",
 CellID->1600381893,ExpressionUUID->"c23344d2-d110-46fd-923a-bb1bfc75ad36"],

Cell["\<\
Its first part is the same as before. Then instead of using loops we use \
Partition to create the W matrix, and then use the joining function above, to \
build the Wishart matrix.For example:\
\>", "Text",
 CellChangeTimes->{{3.940296532997452*^9, 3.940296534534505*^9}, 
   3.940740462505371*^9},
 CellID->1516551864,ExpressionUUID->"2d72d0ca-ceb9-47f2-bbe2-a9ce3e3b67e0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"buildWishartMatrix", "[", 
  RowBox[{"2", ",", "1", ",", "0", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.94029653633746*^9, 3.9402965424407167`*^9}},
 CellLabel->"In[740]:=",
 CellID->883138816,ExpressionUUID->"8026960a-9254-4451-9f43-53183c622d9b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     RowBox[{"0.41189326904068896`", "\[VeryThinSpace]", "-", 
      RowBox[{"1.7471274737907865`", " ", "\[ImaginaryI]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     RowBox[{
      RowBox[{"-", "1.2735415318419043`"}], "+", 
      RowBox[{"1.4455385607952183`", " ", "\[ImaginaryI]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"0.41189326904068896`", "\[VeryThinSpace]", "+", 
      RowBox[{"1.7471274737907865`", " ", "\[ImaginaryI]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "1.2735415318419043`"}], "-", 
      RowBox[{"1.4455385607952183`", " ", "\[ImaginaryI]"}]}], ",", "0"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.94029654293309*^9},
 CellLabel->"Out[740]=",
 CellID->52044199,ExpressionUUID->"59b847f6-349f-4f9c-933f-c8b32cc5f3e6"]
}, Open  ]],

Cell["Let us see if we gained anything:", "Text",
 CellChangeTimes->{3.9402965506698914`*^9, 3.9407404625227137`*^9},
 CellID->681008264,ExpressionUUID->"cb33dcb6-a378-4f1c-99f4-93a7f8100cbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"buildWishartMatrix", "[", 
      RowBox[{"10", ",", "10", ",", "0", ",", "1"}], "]"}], ",", 
     RowBox[{"{", "1000", "}"}]}], "]"}], ";"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940296552627544*^9, 3.940296565733303*^9}},
 CellLabel->"In[741]:=",
 CellID->1618724696,ExpressionUUID->"006c35d1-1e5c-4d95-bd9f-0b3aec25483e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.090574`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940296566110154*^9},
 CellLabel->"Out[741]=",
 CellID->99911398,ExpressionUUID->"261d5085-b1ef-428b-8406-af4499bb90b9"]
}, Open  ]],

Cell["\<\
We see that we get about 70-100 % increase in speed, with respect to the \
procedural solution.\
\>", "Text",
 CellChangeTimes->{{3.940296572507381*^9, 3.940296574673617*^9}},
 CellID->2026137879,ExpressionUUID->"60a526fd-fdc5-439e-8fda-8e7fa653fef0"],

Cell["Implementation based on structural operations", "ItemNumbered",
 CellChangeTimes->{3.940296592126498*^9},
 CellID->651141874,ExpressionUUID->"3064e711-de75-40df-b71e-0b3f4c254cfd"],

Cell["\<\
Following our main rule of thumb, which states that we must use as large \
piece of data as possible at a time, let us ask ourselves: is it possible to \
create all the matrices we need at once, without a separate function which \
builds a single matrix? This sounds rather strange, but the answer is yes. \
Here is the implementation:\
\>", "Text",
 CellChangeTimes->{{3.94029659882907*^9, 3.94029660344258*^9}, 
   3.940740462539953*^9},
 CellID->164811206,ExpressionUUID->"887e7766-edd6-42f7-a277-5b1f091d6b7c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "recmatrices", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"recmatrices", "[", 
    RowBox[{"vertsize_", ",", "horsize_", ",", "matnum_", ",", "data_"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"initpartition", ",", "upper", ",", "lower"}], "}"}], ",", 
     RowBox[{
      RowBox[{"initpartition", "=", 
       RowBox[{"Partition", "[", 
        RowBox[{"data", ",", "horsize"}], "]"}]}], ";", 
      RowBox[{"upper", "=", 
       RowBox[{"Partition", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"Partition", "[", 
                RowBox[{
                 RowBox[{"Array", "[", 
                  RowBox[{
                   RowBox[{"0", "&"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"vertsize", "^", "2"}], "*", "matnum"}], "}"}]}], 
                  "]"}], ",", "vertsize"}], "]"}], "}"}], ",", 
              RowBox[{"{", "initpartition", "}"}]}], "]"}], "//", 
            "Transpose"}], ")"}]}], ",", "vertsize"}], "]"}]}], ";", 
      RowBox[{"lower", "=", 
       RowBox[{"Partition", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", 
          RowBox[{"Transpose", "[", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"Flatten", "[", 
               RowBox[{
                RowBox[{"Transpose", "/@", 
                 RowBox[{"Partition", "[", 
                  RowBox[{"initpartition", ",", "vertsize"}], "]"}]}], ",", 
                "1"}], "]"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"Partition", "[", 
               RowBox[{
                RowBox[{"Array", "[", 
                 RowBox[{
                  RowBox[{"0", "&"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"horsize", "^", "2"}], "*", "matnum"}], "}"}]}], 
                 "]"}], ",", "horsize"}], "]"}], "}"}]}], "]"}], "]"}]}], ",",
          "horsize"}], "]"}]}], ";", 
      RowBox[{
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", 
       RowBox[{"Transpose", "[", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"{", "upper", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"Conjugate", "[", "lower", "]"}], "}"}]}], "]"}], 
        "]"}]}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9402966076329613`*^9, 3.940296763659144*^9}},
 CellLabel->"In[742]:=",
 CellID->1921158607,ExpressionUUID->"6a8b385c-a46e-42fd-9b87-26ff283f9b57"],

Cell["\<\
What it does is to build lower and upper parts of all matrices we need at \
once, by the liberal use of Partition and Transpose commands. The result is a \
list of matrices, but it is not prepared matrix by matrix. ather, the \
structural manipulations affect all matrices at once. It takes vertical size \
(n), horizontal size (m), total number of matrices needed, and a list of data \
to fill the matrices with (complex random numbers in our case).To illustrate \
the way it works, consider:\
\>", "Text",
 CellChangeTimes->{{3.940296772708971*^9, 3.94029678197126*^9}, 
   3.9407404625572042`*^9},
 CellID->1968169610,ExpressionUUID->"7084f323-7d38-4d98-9790-ca5050cbf9f6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "/@", 
  RowBox[{"recmatrices", "[", 
   RowBox[{"2", ",", "3", ",", "5", ",", 
    RowBox[{"Range", "[", "30", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940296784386677*^9, 3.940296791661602*^9}},
 CellLabel->"In[744]:=",
 CellID->849427515,ExpressionUUID->"90c42e0b-805e-464f-8b6b-f247ebaeec65"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "0", "1", "2", "3"},
       {"0", "0", "4", "5", "6"},
       {"1", "4", "0", "0", "0"},
       {"2", "5", "0", "0", "0"},
       {"3", "6", "0", "0", "0"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "0", "7", "8", "9"},
       {"0", "0", "10", "11", "12"},
       {"7", "10", "0", "0", "0"},
       {"8", "11", "0", "0", "0"},
       {"9", "12", "0", "0", "0"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "0", "13", "14", "15"},
       {"0", "0", "16", "17", "18"},
       {"13", "16", "0", "0", "0"},
       {"14", "17", "0", "0", "0"},
       {"15", "18", "0", "0", "0"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "0", "19", "20", "21"},
       {"0", "0", "22", "23", "24"},
       {"19", "22", "0", "0", "0"},
       {"20", "23", "0", "0", "0"},
       {"21", "24", "0", "0", "0"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "0", "25", "26", "27"},
       {"0", "0", "28", "29", "30"},
       {"25", "28", "0", "0", "0"},
       {"26", "29", "0", "0", "0"},
       {"27", "30", "0", "0", "0"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{3.9402967925720997`*^9},
 CellLabel->"Out[744]=",
 CellID->862554022,ExpressionUUID->"c933dae2-1724-43ae-ba3a-c5de633b9e68"]
}, Open  ]],

Cell["\<\
Basically, it first prepares the upper part of all matrices at once, and then \
the lower one for all matrices at once, in such way that the non-zero lower \
block WH is exactly the hermitian conjugate of W for each matrix. It is not \
difficult to dissect the code and see what is going on. \
\>", "Text",
 CellChangeTimes->{{3.940296802370657*^9, 3.940296813730549*^9}},
 CellID->1430830504,ExpressionUUID->"1b2d781e-5b90-413b-949a-cbcd322ca80d"],

Cell["\<\
For this version, we will need an external function to prepare a list of \
random complex numbers for us:\
\>", "Text",
 CellChangeTimes->{{3.940296802370657*^9, 3.940296812465383*^9}, 
   3.940740462574452*^9},
 CellID->2114227944,ExpressionUUID->"ff858922-3807-4440-b175-ca9deeda1426"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "prepareComplexNormal", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"prepareComplexNormal", "[", 
    RowBox[{
     RowBox[{"mu_", "?", "NumericQ"}], ",", 
     RowBox[{"sigma_", "?", "NumericQ"}], ",", "n_Integer"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"Plus", "[", 
      RowBox[{
       RowBox[{"Take", "[", 
        RowBox[{"#", ",", 
         RowBox[{
          RowBox[{"Length", "[", "#", "]"}], "/", "2"}]}], "]"}], ",", 
       RowBox[{"I", "*", 
        RowBox[{"Drop", "[", 
         RowBox[{"#", ",", 
          RowBox[{
           RowBox[{"Length", "[", "#", "]"}], "/", "2"}]}], "]"}]}]}], "]"}], 
     "&"}], "[", 
    RowBox[{"RandomReal", "[", 
     RowBox[{
      RowBox[{"NormalDistribution", "[", 
       RowBox[{"mu", ",", "sigma"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", "n"}], "}"}]}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940296819729863*^9, 3.940296876822413*^9}},
 CellLabel->"In[745]:=",
 CellID->709424158,ExpressionUUID->"ce754bde-8d21-44cc-aa67-c4a06997ee7a"],

Cell["Now we can test the performance:", "Text",
 CellChangeTimes->{3.940296882948723*^9, 3.9407404625916862`*^9},
 CellID->1344265392,ExpressionUUID->"a84a4b7d-5f80-4b25-9e5c-a7265aa4d900"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ourmatrices", "=", 
    RowBox[{"recmatrices", "[", 
     RowBox[{"10", ",", "10", ",", "1000", ",", 
      RowBox[{"prepareComplexNormal", "[", 
       RowBox[{"0", ",", "1", ",", "100000"}], "]"}]}], "]"}]}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9402968848338947`*^9, 3.940296907888215*^9}},
 CellLabel->"In[747]:=",
 CellID->732477296,ExpressionUUID->"8020316f-bb1e-4bf0-b347-6baeb99863f5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.16268`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940296908331325*^9},
 CellLabel->"Out[747]=",
 CellID->1073812873,ExpressionUUID->"1ec96419-0401-4b50-b858-71a8fb754a50"]
}, Open  ]],

Cell["\<\
We see that we get another factor of 3 improvement as compared to the \
functional version.\
\>", "Text",
 CellChangeTimes->{{3.94029691548531*^9, 3.94029691755372*^9}},
 CellID->1816415791,ExpressionUUID->"3c3a6528-3f51-44dd-bf3b-f118b09098b9"],

Cell["\<\
Let us see how long it takes the builit-in Eigenvalues to diagonalize these \
matrices:\
\>", "Text",
 CellChangeTimes->{3.94029691548531*^9, 3.940740462608962*^9, 
  3.9407408505579453`*^9},
 CellID->2144694357,ExpressionUUID->"d7369d83-75e9-40f2-b7a0-02e354e56973"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Eigenvalues", "/@", "ourmatrices"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9402969209073753`*^9, 3.940296929714726*^9}},
 CellLabel->"In[748]:=",
 CellID->2067833796,ExpressionUUID->"6f6f5273-850f-4c3c-952b-9c2abb2ee321"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.495046`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940296930083194*^9},
 CellLabel->"Out[748]=",
 CellID->186447978,ExpressionUUID->"fdc9b39f-2f42-4f26-b63f-a5d14be8b95b"]
}, Open  ]],

Cell["\<\
We see that it is about the same time as needed for their generation. While \
ideally we should be able to generate the matrices much faster than to \
diagonalize them, this is marginally acceptable. The situation with a \
procedural version where it takes 5 times longer to generate the matrix than \
to diagonalize it, is not.\
\>", "Text",
 CellChangeTimes->{{3.940296937039691*^9, 3.940296940134424*^9}},
 CellID->452525273,ExpressionUUID->"5dffb8bf-25f0-4916-a58e-49286a5cb57d"],

Cell["Conclusions", "ItemNumbered",
 CellChangeTimes->{3.9402969485615396`*^9},
 CellID->1071877202,ExpressionUUID->"17df7594-1e56-48ca-8268-fe657ab8ec13"],

Cell["\<\
This problem is just another example to illustrate the relative efficiency of \
different programming styles. The performance difference between the fastest \
(structural) solution and the slowest (procedural) one is not as dramatic \
here as in other examples in this chapter and is about 5-6 times, but it is \
nevertheless substantial. It means for example that I can gather the same \
statistics with the structural solution in 1 hour
as with the procedural solution in 5-6 hours.\
\>", "Text",
 CellChangeTimes->{{3.94029695440373*^9, 3.940296974109977*^9}},
 CellID->1947302978,ExpressionUUID->"18de3faf-50d6-4fe7-b337-255bbaa46b52"],

Cell["\<\
As before, we have seen that the procedural style is the least efficient, \
functional one is in between, and the one based on the structural operations \
is the fastest by a wide margin. Admittedly, however, it requires a rather \
counter-intuitive thinking, which may be considered a disadvantage in terms \
of program readability and maintenance. However, if the gain is a 3-fold \
performance increase, it may be worth it.\
\>", "Text",
 CellChangeTimes->{{3.94029695440373*^9, 3.940296982405869*^9}},
 CellID->1754073936,ExpressionUUID->"58067dce-c5d2-43e2-b18b-e32657948169"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Case study IV: sorting, mapping and membership tests", "Subsection",
 CellChangeTimes->{3.940296999632421*^9},
 CellID->1407094610,ExpressionUUID->"51c99369-c26c-4a61-844a-da82d568ffdd"],

Cell["The problem", "ItemNumbered",
 CellChangeTimes->{3.940297005919113*^9},
 CellID->949189506,ExpressionUUID->"57659b12-4777-429d-aa27-062b71269eb1"],

Cell[TextData[{
 "It is often needed in practice to do something to those elements of one \
list (set) which are also the members of another list (set). Some examples of \
this kind we have considered before - the unsorted Intersection function \
(section ",
 ButtonBox["4.3.3.4",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-4-Rules-patterns-functions.nb", 
     CharacterEncoding -> "UTF-8"], "4.3.3.4"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-4-Rules-patterns-functions.\
nb"],
 "), and unsorted Union function (section ",
 ButtonBox["5.2.6.2.5",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-5-Functions-on-lists.nb", CharacterEncoding -> 
     "UTF-8"], "5.2.6.2.5"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-5-Functions-on-lists.nb"],
 "), but this is a rather general formulation. Here we will consider a \
following problem: we need to Map some function <f> on these\nelements. As \
usual, we will move from the easiest procedural solution to more efficient \
ones, and develop some generally useful functionality along the way."
}], "Text",
 CellChangeTimes->{{3.9402970129852552`*^9, 3.9402970284691153`*^9}, {
  3.940297084005382*^9, 3.940297084013597*^9}, {3.940297120441167*^9, 
  3.940297120449419*^9}},
 CellID->1519497426,ExpressionUUID->"4fd34bdf-c6a8-40de-ac6b-4cd409ea42cc"],

Cell["Test sets", "ItemNumbered",
 CellChangeTimes->{3.940297130227524*^9},
 CellID->2007512358,ExpressionUUID->"3b4a8330-dd78-4fd7-a39c-64a5940176ad"],

Cell["\<\
These will be our simple test sets that we will use to develop our functions: \
a first list on which elements we should Map f, and the second list \
membership in which we will test for the elements of the first one.\
\>", "Text",
 CellChangeTimes->{{3.9402971352208157`*^9, 3.94029713674503*^9}},
 CellID->1144622889,ExpressionUUID->"e89160c0-5152-4dd7-9f03-bd7e0a81d6fb"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "f", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testlst", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "15"}], "}"}], "]"}], ",", 
    RowBox[{"{", "20", "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.94029714007242*^9, 3.940297160033765*^9}},
 CellLabel->"In[749]:=",
 CellID->1123824048,ExpressionUUID->"9027d6a0-a73e-4227-9b10-ff35d3c3ae43"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "7", ",", "9", ",", "1", ",", "13", ",", "6", ",", "5", ",", "7", ",", "1", 
   ",", "9", ",", "9", ",", "13", ",", "6", ",", "14", ",", "12", ",", "10", 
   ",", "3", ",", "2", ",", "1", ",", "14", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.940297160334437*^9},
 CellLabel->"Out[750]=",
 CellID->1608314735,ExpressionUUID->"51db8844-fea9-42ff-b805-b8fef8be52f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"memblist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "15"}], "}"}], "]"}], ",", 
    RowBox[{"{", "5", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.94029716170498*^9, 3.9402971727317133`*^9}},
 CellLabel->"In[751]:=",
 CellID->1889705201,ExpressionUUID->"1bcd9e1a-6bc2-4e30-8ec7-3c1320675f84"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"12", ",", "15", ",", "13", ",", "13", ",", "9"}], "}"}]], "Output",\

 CellChangeTimes->{3.9402971731606283`*^9},
 CellLabel->"Out[751]=",
 CellID->1780544232,ExpressionUUID->"dda9fc88-65b3-4ef5-b725-49bb5c8a8746"]
}, Open  ]],

Cell["\<\
These 2 lists will be our \
\[OpenCurlyDoubleQuote]power\[CloseCurlyDoubleQuote] test lists, which we \
will use to test the efficiency of our implementations:\
\>", "Text",
 CellChangeTimes->{3.9402971806391287`*^9},
 CellID->1230105503,ExpressionUUID->"294154bc-451a-4850-bc27-85f795489680"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"powertestlst", "=", 
   RowBox[{"Range", "[", "4000", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"powermemblist", "=", 
   RowBox[{"Range", "[", 
    RowBox[{"1000", ",", "3000"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940297182420124*^9, 3.94029719700037*^9}},
 CellLabel->"In[752]:=",
 CellID->101698268,ExpressionUUID->"c0894fad-3c20-4f5c-aa88-aff21848eedd"],

Cell["Procedural solutions", "ItemNumbered",
 CellChangeTimes->{3.940297203691888*^9},
 CellID->906839391,ExpressionUUID->"6041d99f-f307-49ea-8342-0356575f09d6"],

Cell["\<\
We will start with a couple of straightforward procedural attempts to solve \
our problem.\
\>", "Text",
 CellChangeTimes->{3.940297208372402*^9},
 CellID->558201778,ExpressionUUID->"83bc836c-b450-4647-92ce-9cc9d8ac0c02"],

Cell["The absolutely worst way to do it", "SubitemNumbered",
 CellChangeTimes->{3.9402972161600103`*^9},
 CellID->1488712750,ExpressionUUID->"d46559ee-09f7-4eb5-bd4a-9f84729b9b5e"],

Cell["\<\
Below is the absolutely worst possible solution for this problem.\
\>", "Text",
 CellChangeTimes->{3.940297220842284*^9},
 CellID->463218053,ExpressionUUID->"d747a349-3b0d-4f80-96c4-877a566939ec"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mapOnMembersProcBad", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersProcBad", "[", 
    RowBox[{"f_", ",", "x_List", ",", "y_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", ",", "j", ",", 
       RowBox[{"result", "=", 
        RowBox[{"{", "}"}]}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "<=", 
         RowBox[{"Length", "[", "x", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", 
        RowBox[{
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"j", "=", "1"}], ",", 
           RowBox[{"j", "<=", 
            RowBox[{"Length", "[", "y", "]"}]}], ",", 
           RowBox[{"j", "++"}], ",", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"SameQ", "[", 
               RowBox[{
                RowBox[{"x", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", 
                RowBox[{"y", "[", 
                 RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
              RowBox[{
               RowBox[{"AppendTo", "[", 
                RowBox[{"result", ",", 
                 RowBox[{"f", "[", 
                  RowBox[{"x", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "]"}], ";", 
               RowBox[{"Break", "[", "]"}]}]}], "]"}], ";"}]}], "]"}], ";", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"j", "==", 
            RowBox[{
             RowBox[{"Length", "[", "y", "]"}], "+", "1"}]}], ",", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"result", ",", 
             RowBox[{"x", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], "]"}]}]}], "]"}], 
      ";", 
      RowBox[{"Return", "[", "result", "]"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940297224363708*^9, 3.940297321022794*^9}, {
  3.9402973554789743`*^9, 3.940297356386807*^9}},
 CellLabel->"In[757]:=",
 CellID->256847531,ExpressionUUID->"55896203-d680-4d70-b6c6-7204f776bd47"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940297322897169*^9, 3.940297323782123*^9}},
 CellID->1349858523,ExpressionUUID->"a226fd81-95ee-4af2-b61a-006795b500aa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mapOnMembersProcBad", "[", 
  RowBox[{"f", ",", "testlst", ",", "memblist"}], "]"}]], "Input",
 CellChangeTimes->{{3.940297324878201*^9, 3.9402973323037777`*^9}},
 CellLabel->"In[759]:=",
 CellID->1906736211,ExpressionUUID->"b127e35f-24b1-48de-9870-71b0227fb1ee"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", "1", ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "5", ",", "7", ",", "1", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "14", ",", 
   RowBox[{"f", "[", "12", "]"}], ",", "10", ",", "3", ",", "2", ",", "1", 
   ",", "14", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{{3.940297332684627*^9, 3.940297358773581*^9}},
 CellLabel->"Out[759]=",
 CellID->1613097847,ExpressionUUID->"2e72f665-98b1-4ee4-9bcc-89d9e7fb0623"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersProcBad", "[", 
    RowBox[{"f", ",", "powertestlst", ",", "powermemblist"}], "]"}], ";"}], "//",
   "Timing"}]], "Input",
 CellChangeTimes->{{3.94029736351794*^9, 3.9402973868610487`*^9}},
 CellLabel->"In[760]:=",
 CellID->100318360,ExpressionUUID->"ad1981ec-8843-4c2e-8539-c7466f5d6664"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5.35221`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940297392504384*^9},
 CellLabel->"Out[760]=",
 CellID->83719407,ExpressionUUID->"c3acecd0-5d97-43ad-9690-f83c8bab77f4"]
}, Open  ]],

Cell["A marginally better procedural way", "SubitemNumbered",
 CellChangeTimes->{3.940297401188821*^9},
 CellID->1229566184,ExpressionUUID->"7f0d5f45-a3de-43f6-84cf-f02eba41848a"],

Cell["\<\
Here we will pre-allocate the list and get rid of Append operators, in the \
hope that this will help\
\>", "Text",
 CellChangeTimes->{3.940297407156212*^9},
 CellID->470284664,ExpressionUUID->"5b0f776b-b195-43b8-859b-8af1035c5aab"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mapOnMembersProc", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersProc", "[", 
    RowBox[{"f_", ",", "x_List", ",", "y_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", ",", "j", ",", 
       RowBox[{"copy", "=", "x"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "<=", 
         RowBox[{"Length", "[", "x", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"j", "=", "1"}], ",", 
          RowBox[{"j", "<=", 
           RowBox[{"Length", "[", "y", "]"}]}], ",", 
          RowBox[{"j", "++"}], ",", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"SameQ", "[", 
              RowBox[{
               RowBox[{"x", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", 
               RowBox[{"y", "[", 
                RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"copy", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "=", 
               RowBox[{"f", "[", 
                RowBox[{"x", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";", 
              RowBox[{"Break", "[", "]"}]}]}], "]"}], ";"}]}], "]"}]}], "]"}],
       ";", 
      RowBox[{"Return", "[", "copy", "]"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940297419755055*^9, 3.94029749325275*^9}},
 CellLabel->"In[761]:=",
 CellID->1074197348,ExpressionUUID->"c614a7ba-00f7-4a55-a51e-920a6b13a47e"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.9402974953076773`*^9, 3.940297496193734*^9}},
 CellID->412586772,ExpressionUUID->"7db46f8c-4bd6-44e4-ba90-c48c094e96e7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mapOnMembersProc", "[", 
  RowBox[{"f", ",", "testlst", ",", "memblist"}], "]"}]], "Input",
 CellChangeTimes->{{3.940297497916457*^9, 3.940297507684979*^9}},
 CellLabel->"In[763]:=",
 CellID->444174732,ExpressionUUID->"9c6f7d05-553b-4b08-93d8-8c5654a500cb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", "1", ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "5", ",", "7", ",", "1", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "14", ",", 
   RowBox[{"f", "[", "12", "]"}], ",", "10", ",", "3", ",", "2", ",", "1", 
   ",", "14", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.940297508001055*^9},
 CellLabel->"Out[763]=",
 CellID->1807015218,ExpressionUUID->"16a8a608-c83a-4980-8ff4-97103d061b30"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersProc", "[", 
    RowBox[{"f", ",", "powertestlst", ",", "powermemblist"}], "]"}], ";"}], "//",
   "Timing"}]], "Input",
 CellChangeTimes->{{3.940297521091772*^9, 3.940297521448925*^9}},
 CellLabel->"In[764]:=",
 CellID->791033052,ExpressionUUID->"1abf6ce2-87da-4f61-970b-b8db994d7826"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5.226191`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940297526973402*^9},
 CellLabel->"Out[764]=",
 CellID->341001690,ExpressionUUID->"6ce0c78b-e043-4a80-b833-e0299afd58b2"]
}, Open  ]],

Cell["\<\
There is almost no gain here, since the cost of Append turns out to be \
negligible w.r.t. cost of sweeping through a double-loop.\
\>", "Text",
 CellChangeTimes->{{3.940297530090349*^9, 3.940297543888146*^9}},
 CellID->261060873,ExpressionUUID->"669f0f63-d7fb-4ef5-8687-a3ee4343b148"],

Cell["A real improvement: version with a binary search", "SubitemNumbered",
 CellChangeTimes->{3.940297554021227*^9},
 CellID->119575434,ExpressionUUID->"3ba4bc6c-7ca8-440f-9e9c-9a904edf3983"],

Cell["\<\
Of course, it would not be fair to end the procedural part with only the \
above implementations, since everybody knows that there are better ways to \
test for membership. In particular, we could use binary search instead of a \
linear one. It may seem that there could be a problem here since first, both \
lists <x> and <y> have to be completely generic (this is our goal), second, \
the list <y> has to be sorted, and third, the binary search has to use the \
same comparison function as the one used for sorting the list. Fortunately \
for us, the builit-in Sort is a generic function, and the built-in generic \
OrderedQ predicate gives exactly the same results as the comparison function \
used internally by Sort (when no explicit comparison function is applied to \
it). So, here is a generic version of binary search (this is a modified \
version of the code from the book of Roman Maeder):\
\>", "Text",
 CellChangeTimes->{{3.940297563114942*^9, 3.940297583224771*^9}, {
   3.940301525854986*^9, 3.9403015320623198`*^9}, 3.940740850578*^9, {
   3.940740960108561*^9, 3.940740960125718*^9}},
 CellID->1807109293,ExpressionUUID->"0888a39d-e2e1-4d24-909d-314b24303310"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "bsearch", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"bsearch", "[", 
    RowBox[{"set_List", ",", "elem_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"n0", "=", "1"}], ",", 
       RowBox[{"n1", "=", 
        RowBox[{"Length", "[", "set", "]"}]}], ",", "m", ",", "temp"}], "}"}],
      ",", 
     RowBox[{
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"n0", "<=", "n1"}], ",", 
        RowBox[{
         RowBox[{"m", "=", 
          RowBox[{"Floor", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"n0", "+", "n1"}], ")"}], "/", "2"}], "]"}]}], ";", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"SameQ", "[", 
            RowBox[{
             RowBox[{"temp", "=", 
              RowBox[{"set", "[", 
               RowBox[{"[", "m", "]"}], "]"}]}], ",", "elem"}], "]"}], ",", 
           RowBox[{"Return", "[", "m", "]"}]}], "]"}], ";", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"OrderedQ", "[", 
            RowBox[{"{", 
             RowBox[{"temp", ",", "elem"}], "}"}], "]"}], ",", 
           RowBox[{"n0", "=", 
            RowBox[{"m", "+", "1"}]}], ",", 
           RowBox[{"n1", "=", 
            RowBox[{"m", "-", "1"}]}]}], "]"}]}]}], "]"}], ";", 
      RowBox[{"Return", "[", "0", "]"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940297598782778*^9, 3.940297675401169*^9}},
 CellLabel->"In[765]:=",
 CellID->1390349047,ExpressionUUID->"b98a1222-9a98-4ab1-b521-a3a661e7edcd"],

Cell["\<\
It will return a position of the (first entry of the) element if it is found, \
and 0 if not. Then, here is our modified mapping function:\
\>", "Text",
 CellChangeTimes->{{3.940297682598523*^9, 3.9402976844719763`*^9}},
 CellID->320749901,ExpressionUUID->"5d47ebdb-8767-4d76-bdee-ea7f9805c0bd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mapOnMembersProcBS", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersProcBS", "[", 
    RowBox[{"f_", ",", "x_List", ",", "y_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"copy", "=", "x"}], ",", 
       RowBox[{"sortedy", "=", 
        RowBox[{"Sort", "[", "y", "]"}]}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "<=", 
         RowBox[{"Length", "[", "x", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"bsearch", "[", 
            RowBox[{"sortedy", ",", 
             RowBox[{"x", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "!=", "0"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"copy", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "=", 
            RowBox[{"f", "[", 
             RowBox[{"x", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";"}]}], "]"}]}], 
       "]"}], ";", 
      RowBox[{"Return", "[", "copy", "]"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940297801716564*^9, 3.9402978664576807`*^9}},
 CellLabel->"In[767]:=",
 CellID->1408742344,ExpressionUUID->"d4599088-85c8-4939-a84e-5c1b3cb45df1"],

Cell["check:", "Text",
 CellChangeTimes->{{3.940297868661737*^9, 3.940297869410811*^9}},
 CellID->1332268190,ExpressionUUID->"64b21fbd-5063-4f3e-ad6e-f83a8b3ad0b8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mapOnMembersProcBS", "[", 
  RowBox[{"f", ",", "testlst", ",", "memblist"}], "]"}]], "Input",
 CellChangeTimes->{{3.940297870494286*^9, 3.9402978795727463`*^9}},
 CellLabel->"In[769]:=",
 CellID->1371500754,ExpressionUUID->"efe91b6c-4352-447f-92b5-4452c4093916"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", "1", ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "5", ",", "7", ",", "1", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "14", ",", 
   RowBox[{"f", "[", "12", "]"}], ",", "10", ",", "3", ",", "2", ",", "1", 
   ",", "14", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.9402978798929443`*^9},
 CellLabel->"Out[769]=",
 CellID->1503166782,ExpressionUUID->"1506a8d8-32ba-4f78-b4ce-3efa2f664d36"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersProcBS", "[", 
    RowBox[{"f", ",", "powertestlst", ",", "powermemblist"}], "]"}], ";"}], "//",
   "Timing"}]], "Input",
 CellChangeTimes->{{3.940297895377325*^9, 3.940297895538384*^9}},
 CellLabel->"In[770]:=",
 CellID->1862398182,ExpressionUUID->"be6f1d68-45af-4f63-9dfb-ff7e2f8abb29"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.111803`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940297896268071*^9},
 CellLabel->"Out[770]=",
 CellID->828040362,ExpressionUUID->"b310b782-a869-4330-95d1-bf9544b31cf2"]
}, Open  ]],

Cell["\<\
The timing is quite decent, and this is perhaps where users coming from the \
procedural background would stop.\
\>", "Text",
 CellChangeTimes->{{3.9402979040834427`*^9, 3.940297905366062*^9}},
 CellID->761727503,ExpressionUUID->"9be9093a-5fdc-48e3-be73-cbad7e34e491"],

Cell["Using MemberQ in a procedural version", "SubitemNumbered",
 CellChangeTimes->{3.9402979144346323`*^9},
 CellID->1959443597,ExpressionUUID->"440eb5cb-becd-462d-9b0c-e7d9a703a754"],

Cell["\<\
It is interesting to see what we get if we use instead of binary search the \
built-in MemberQ predicate:\
\>", "Text",
 CellChangeTimes->{3.940297919849304*^9},
 CellID->706808034,ExpressionUUID->"53ef2b72-8b4c-48fb-9f13-01e0d98a899e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mapOnMembersProcBetter", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersProcBetter", "[", 
    RowBox[{"f_", ",", "x_List", ",", "y_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"copy", "=", "x"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "<=", 
         RowBox[{"Length", "[", "x", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"y", ",", 
            RowBox[{"x", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
          RowBox[{
           RowBox[{"copy", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "=", 
           RowBox[{"f", "[", 
            RowBox[{"x", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}]}]}], "]"}]}], "]"}], ";", 
      RowBox[{"Return", "[", "copy", "]"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9402979268328133`*^9, 3.940297979586479*^9}},
 CellLabel->"In[771]:=",
 CellID->932394111,ExpressionUUID->"7175a6a9-bc48-4259-a357-932bbe6b3717"],

Cell["Check", "Text",
 CellChangeTimes->{{3.940297981944915*^9, 3.9402979843257713`*^9}},
 CellID->2096382090,ExpressionUUID->"fef8a42b-721f-4c4a-982f-81c79f73c794"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mapOnMembersProcBetter", "[", 
  RowBox[{"f", ",", "testlst", ",", "memblist"}], "]"}]], "Input",
 CellChangeTimes->{{3.940297985408244*^9, 3.940297994489873*^9}},
 CellLabel->"In[773]:=",
 CellID->1459309277,ExpressionUUID->"efde5e5e-cd4f-4b24-8b7d-e6c1c06105e5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", "1", ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "5", ",", "7", ",", "1", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "14", ",", 
   RowBox[{"f", "[", "12", "]"}], ",", "10", ",", "3", ",", "2", ",", "1", 
   ",", "14", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.940297994798731*^9},
 CellLabel->"Out[773]=",
 CellID->1733143436,ExpressionUUID->"e26778b6-2e4b-48c5-a8bb-8b5cb817ebd1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersProcBetter", "[", 
    RowBox[{"f", ",", "powertestlst", ",", "powermemblist"}], "]"}], ";"}], "//",
   "Timing"}]], "Input",
 CellChangeTimes->{{3.9402980028092527`*^9, 3.940298004544836*^9}},
 CellLabel->"In[774]:=",
 CellID->473540944,ExpressionUUID->"a9e78724-e10f-47c9-81aa-67588983a22e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.334338`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940298005150037*^9},
 CellLabel->"Out[774]=",
 CellID->2088053039,ExpressionUUID->"9e82d302-4db7-4888-af4b-18bc00473460"]
}, Open  ]],

Cell["\<\
We can appreciate the power of the built-in function - we get a 30 times \
improvement straight away (given that internally MemberQ is bound to perform \
a linear search, being a general-purpose operation)! This is not so bad, but \
first, it still has a linear complexity in the size of the <y> list (rather \
than logarithmic for binary search, and the cost of a single Sort command is \
negligible both because it is only done once and because it is highly \
optimized). Second, it turns out that we can do a lot better.\
\>", "Text",
 CellChangeTimes->{{3.940298016597953*^9, 3.940298023270235*^9}},
 CellID->339548167,ExpressionUUID->"1ca260f8-d1b7-401f-aca5-eba588a61f24"],

Cell["Functional implementations", "ItemNumbered",
 CellChangeTimes->{3.940298031459455*^9},
 CellID->395548229,ExpressionUUID->"3a1718de-31c4-4a9d-a08f-1067fb14664f"],

Cell["Using Map and MemberQ", "SubitemNumbered",
 CellChangeTimes->{3.940298037405258*^9},
 CellID->1517197338,ExpressionUUID->"23fce576-933d-4692-a8db-28141536007e"],

Cell["\<\
We now turn to functional implementations. The simplest that comes to mind is \
to use the standard Map for mapping, If to choose which function to Map, and \
MemberQ to test membership in the second list:\
\>", "Text",
 CellChangeTimes->{{3.9402980475166397`*^9, 3.940298049550541*^9}},
 CellID->314835288,ExpressionUUID->"93798aad-0497-4408-a589-89861413b76d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mapOnMembersFun1", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun1", "[", 
    RowBox[{"f_", ",", "x_List", ",", "y_List"}], "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"y", ",", "#"}], "]"}], ",", 
        RowBox[{"f", "[", "#", "]"}], ",", "#"}], "]"}], "&"}], ",", "x"}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9402980534092607`*^9, 3.9402980878567247`*^9}},
 CellLabel->"In[775]:=",
 CellID->632943337,ExpressionUUID->"6bf73269-ec5d-4dde-9daf-b57637e787df"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940298090141181*^9, 3.940298091091555*^9}},
 CellID->962198364,ExpressionUUID->"3bffb260-fc9c-44cb-9247-f44eb7ac8078"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mapOnMembersFun1", "[", 
  RowBox[{"f", ",", "testlst", ",", "memblist"}], "]"}]], "Input",
 CellChangeTimes->{{3.940298091880672*^9, 3.940298100612122*^9}},
 CellLabel->"In[777]:=",
 CellID->1184002223,ExpressionUUID->"ec5df26c-74bc-46af-b599-48e92e79679d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", "1", ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "5", ",", "7", ",", "1", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "14", ",", 
   RowBox[{"f", "[", "12", "]"}], ",", "10", ",", "3", ",", "2", ",", "1", 
   ",", "14", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.940298100942746*^9},
 CellLabel->"Out[777]=",
 CellID->1177721968,ExpressionUUID->"e03d3e02-830d-43dd-bee2-3115aeb32aa2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun1", "[", 
    RowBox[{"f", ",", "powertestlst", ",", "powermemblist"}], "]"}], ";"}], "//",
   "Timing"}]], "Input",
 CellChangeTimes->{{3.940298102978105*^9, 3.940298115305028*^9}},
 CellLabel->"In[778]:=",
 CellID->1542616558,ExpressionUUID->"686abae8-8a06-4b41-a54d-a70576850a27"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.330643`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940298116141761*^9},
 CellLabel->"Out[778]=",
 CellID->103756558,ExpressionUUID->"c3504cdd-6dda-43b6-8222-0f2797e6ffed"]
}, Open  ]],

Cell["\<\
We see that this does not make a difference w.r.t. the previous improved \
procedural realization, which tells us that the most expensive operation is \
now MemberQ.\
\>", "Text",
 CellChangeTimes->{{3.940298124915429*^9, 3.940298126406866*^9}},
 CellID->1060737456,ExpressionUUID->"5d956680-424a-45d0-a917-7cf4806252c7"],

Cell["Using Map and Alternatives", "SubitemNumbered",
 CellChangeTimes->{3.9402981342935743`*^9},
 CellID->1638206018,ExpressionUUID->"620bf981-1ff4-41f4-a3e2-a3bc7a0dab20"],

Cell[TextData[{
 "As another attempt of the similar kind, we can replace MemberQ by \
explicitly constructed from the second list large alternative pattern, just \
like in example of section ",
 ButtonBox["4.3.3.4",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-4-Rules-patterns-functions.nb", 
     CharacterEncoding -> "UTF-8"], "4.3.3.4"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-4-Rules-patterns-functions.\
nb"],
 ":"
}], "Text",
 CellChangeTimes->{{3.940298140619556*^9, 3.940298142086444*^9}, {
  3.9402981778243713`*^9, 3.940298177833378*^9}},
 CellID->440706339,ExpressionUUID->"6203c9e4-0a47-44ac-ad04-77473eeeb537"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mapOnMembersFun2", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun2", "[", 
    RowBox[{"f_", ",", "x_List", ",", "y_List"}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"alts", "=", 
       RowBox[{"Alternatives", "@@", "y"}]}], "}"}], ",", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"#", ",", "alts"}], "]"}], ",", 
          RowBox[{"f", "[", "#", "]"}], ",", "#"}], "]"}], "&"}], ",", "x"}], 
      "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940298180711316*^9, 3.940298224838471*^9}},
 CellLabel->"In[779]:=",
 CellID->562771482,ExpressionUUID->"8400d5fd-190a-4f6a-8946-c857f283e229"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940298226809025*^9, 3.940298227719974*^9}},
 CellID->42166333,ExpressionUUID->"17931547-1858-4012-9bf0-d4231985ebda"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mapOnMembersFun2", "[", 
  RowBox[{"f", ",", "testlst", ",", "memblist"}], "]"}]], "Input",
 CellChangeTimes->{{3.940298228668515*^9, 3.940298238170237*^9}},
 CellLabel->"In[781]:=",
 CellID->656333748,ExpressionUUID->"77b3559b-586b-4390-9ed8-bf7a16a92d89"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", "1", ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "5", ",", "7", ",", "1", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "14", ",", 
   RowBox[{"f", "[", "12", "]"}], ",", "10", ",", "3", ",", "2", ",", "1", 
   ",", "14", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.940298238633296*^9},
 CellLabel->"Out[781]=",
 CellID->154717816,ExpressionUUID->"be47c0a7-e1cd-4b57-b231-b95ff2593521"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun2", "[", 
    RowBox[{"f", ",", "powertestlst", ",", "powermemblist"}], "]"}], ";"}], "//",
   "Timing"}]], "Input",
 CellChangeTimes->{{3.9402982457656193`*^9, 3.940298245879998*^9}},
 CellLabel->"In[782]:=",
 CellID->1887120642,ExpressionUUID->"e318f4d9-54eb-473f-8328-93fa253295db"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.071957`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940298246348364*^9},
 CellLabel->"Out[782]=",
 CellID->591123824,ExpressionUUID->"644cbfd7-53ed-4a24-9b13-f14fb16241d0"]
}, Open  ]],

Cell["\<\
We get about 50-70% of improvement this way, essentially because explicit \
pattern is more precise and completely syntactic (this refers to the version \
5.x. For version 6, we get for some reason the opposite effect). Note that \
the same replacement could also be done in a procedural version with the same \
effect.\
\>", "Text",
 CellChangeTimes->{{3.940298258213251*^9, 3.940298261487831*^9}},
 CellID->1963178230,ExpressionUUID->"428e584f-0424-4020-9cbd-8341f70833ef"],

Cell["A functional version with a binary search", "SubitemNumbered",
 CellChangeTimes->{3.9402987340852537`*^9},
 CellID->11650197,ExpressionUUID->"97b46f62-9f03-475a-8e53-41d726172fa8"],

Cell["\<\
We can use binary search also in a functional implementation:\
\>", "Text",
 CellChangeTimes->{3.940298739007513*^9, 3.940301537066998*^9},
 CellID->383849102,ExpressionUUID->"513ebc13-92c5-4540-bcdc-7adb95d25749"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mapOnMembersFunBS", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFunBS", "[", 
    RowBox[{"f_", ",", "x_List", ",", "y_List"}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sortedy", "=", 
       RowBox[{"Sort", "[", "y", "]"}]}], "}"}], ",", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"bsearch", "[", 
            RowBox[{"sortedy", ",", "#"}], "]"}], "!=", "0"}], ",", 
          RowBox[{"f", "[", "#", "]"}], ",", "#"}], "]"}], "&"}], ",", "x"}], 
      "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940298742177101*^9, 3.940298787316926*^9}},
 CellLabel->"In[783]:=",
 CellID->1842155731,ExpressionUUID->"992fe0d8-d994-4565-9bdd-c77bbfe134fa"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.9402987894638557`*^9, 3.940298790843441*^9}},
 CellID->23964916,ExpressionUUID->"223f3fbb-2b6f-4fae-9a43-0bfa08d6aed5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mapOnMembersFunBS", "[", 
  RowBox[{"f", ",", "testlst", ",", "memblist"}], "]"}]], "Input",
 CellChangeTimes->{{3.94029879276543*^9, 3.940298799337277*^9}},
 CellLabel->"In[785]:=",
 CellID->156487075,ExpressionUUID->"0e85ea64-e33e-4d6d-a1da-8b1c96854700"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", "1", ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "5", ",", "7", ",", "1", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "14", ",", 
   RowBox[{"f", "[", "12", "]"}], ",", "10", ",", "3", ",", "2", ",", "1", 
   ",", "14", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.940298799611236*^9},
 CellLabel->"Out[785]=",
 CellID->160841007,ExpressionUUID->"7b50a36b-3a2d-4af5-996b-640b5113e80e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFunBS", "[", 
    RowBox[{"f", ",", "powertestlst", ",", "powermemblist"}], "]"}], ";"}], "//",
   "Timing"}]], "Input",
 CellChangeTimes->{{3.940298809125658*^9, 3.940298809273*^9}},
 CellLabel->"In[786]:=",
 CellID->1720376723,ExpressionUUID->"dddb10b5-9867-4e91-8c97-89a2702f467c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.110977`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.9402988097386723`*^9},
 CellLabel->"Out[786]=",
 CellID->44905352,ExpressionUUID->"a27777af-cac7-4abd-bf2f-964c2d338767"]
}, Open  ]],

Cell["\<\
The performance is the same as in the procedural one, since however fast the \
binary search is, it is still the most expensive operation and the overhead \
induced by list indexing in explicit loop is negligible.\
\>", "Text",
 CellChangeTimes->{{3.940298817801277*^9, 3.940298822788561*^9}},
 CellID->109127403,ExpressionUUID->"3adb56f4-1541-4505-b3c4-1da7285b56c2"],

Cell["\<\
There is nothing more we can do if we don\[CloseCurlyQuote]t get some new \
ideas. The bad thing in our present implementations is that the MemberQ \
operation is repeated afresh for every element in the first list. This leads \
to a complexity which is proportional to the product of lengths of the two \
lists. This is because, however good and optimized the MemberQ operation is, \
it is a general purpose function and thus it is bound to have no better than \
a linear complexity in the length of the second list. The fact that it is a \
built-in does not mean that it can do magic.\
\>", "Text",
 CellChangeTimes->{{3.940298817801277*^9, 3.940298832498303*^9}},
 CellID->788078407,ExpressionUUID->"674f7ba1-003a-41ba-be7b-b17937391f23"],

Cell["Using Intersection, Position, MemberQ and MapAt", "SubitemNumbered",
 CellChangeTimes->{3.940298844865573*^9},
 CellID->1493684714,ExpressionUUID->"4a2e8506-e016-458f-a9c6-ad46b86a8d34"],

Cell["\<\
It would be nice if we could test the membership of all elements of the first \
list in the second list at once. Once we start thinking in this direction, \
the first thing that comes to mind is to locate the set of all elements in \
the first list that are members also of the second list. This is very easy - \
we just need to use the built-in Intersection command. Once this set of \
elements is located, we then have to find their positions in the first list \
(this can be accomplished with Position), and then use more precise version \
of Map - MapAt, to map the function on these positions only. This is the \
implementation:\
\>", "Text",
 CellChangeTimes->{{3.9402988511664963`*^9, 3.9402988603828287`*^9}},
 CellID->275154768,ExpressionUUID->"4a882922-bc0a-40a7-ab61-accfc199b0e6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mapOnMembersFun3", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun3", "[", 
    RowBox[{"f_", ",", "x_List", ",", "y_List"}], "]"}], ":=", 
   RowBox[{"MapAt", "[", 
    RowBox[{"f", ",", "x", ",", 
     RowBox[{"Position", "[", 
      RowBox[{"x", ",", 
       RowBox[{"z_", "/;", 
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"Intersection", "[", 
           RowBox[{"x", ",", "y"}], "]"}], ",", "z"}], "]"}]}]}], "]"}]}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940298866744514*^9, 3.940298900987446*^9}},
 CellLabel->"In[787]:=",
 CellID->766695896,ExpressionUUID->"39727737-15f4-413b-a937-b0bbbd7470a0"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940298902474709*^9, 3.940298904529957*^9}},
 CellID->1478461661,ExpressionUUID->"bb9929bf-cf81-4018-8763-e6c9854e42ed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mapOnMembersFun3", "[", 
  RowBox[{"f", ",", "testlst", ",", "memblist"}], "]"}]], "Input",
 CellChangeTimes->{{3.940298918552134*^9, 3.940298955227212*^9}},
 CellLabel->"In[792]:=",
 CellID->982637332,ExpressionUUID->"1d6c2644-1624-482a-af7e-b612b8030b1b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", "1", ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "5", ",", "7", ",", "1", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "14", ",", 
   RowBox[{"f", "[", "12", "]"}], ",", "10", ",", "3", ",", "2", ",", "1", 
   ",", "14", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.9402989237353086`*^9, 3.940298955515665*^9},
 CellLabel->"Out[792]=",
 CellID->292878100,ExpressionUUID->"31f2b939-6c39-4e40-8db4-de47d70d4214"]
}, Open  ]],

Cell["\<\
If you don\[CloseCurlyQuote]t see a problem in this code, think again. But \
the best judge is the performance test, of course:\
\>", "Text",
 CellChangeTimes->{3.940298948081159*^9},
 CellID->1641367373,ExpressionUUID->"8347e63b-ac05-4cf7-8350-c182976c98e2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun3", "[", 
    RowBox[{"f", ",", "powertestlst", ",", "powermemblist"}], "]"}], ";"}], "//",
   "Timing"}]], "Input",
 CellLabel->"In[791]:=",
 CellID->2033992296,ExpressionUUID->"cf10caf0-0f02-4ba4-a648-7acd25915f24"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.524008`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940298953869529*^9},
 CellLabel->"Out[791]=",
 CellID->346379220,ExpressionUUID->"d01cbc0a-33d0-490d-8049-903ab18231ac"]
}, Open  ]],

Cell["\<\
This looks like we moved a few steps back. I used this opportunity to \
illustrate once again one of the very common mistakes made when patterns are \
constructed: in the way it is coded, the Intersection command will be \
recomputed every time the pattern is checked against a new list element. In \
fact, it is surprising that it is so fast as to slow down our function less \
than one could expect. This is a proper way of doing this -
preallocate the result:\
\>", "Text",
 CellChangeTimes->{{3.94029896332172*^9, 3.9402989676803503`*^9}},
 CellID->369707776,ExpressionUUID->"7810779c-bccf-4cfd-8ea7-67d9d0cd618b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mapOnMembersFun4", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun4", "[", 
    RowBox[{"f_", ",", "x_List", ",", "y_List"}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"int", "=", 
       RowBox[{"Intersection", "[", 
        RowBox[{"x", ",", "y"}], "]"}]}], "}"}], ",", 
     RowBox[{"MapAt", "[", 
      RowBox[{"f", ",", "x", ",", 
       RowBox[{"Position", "[", 
        RowBox[{"x", ",", 
         RowBox[{"z_", "/;", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"int", ",", "z"}], "]"}]}]}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940298978570195*^9, 3.940299011478986*^9}},
 CellLabel->"In[793]:=",
 CellID->203439626,ExpressionUUID->"fafca7f8-ebb3-4797-b6b2-ae57ec5dc874"],

Cell["Check now:", "Text",
 CellChangeTimes->{{3.940299014148322*^9, 3.940299015967793*^9}},
 CellID->1387733864,ExpressionUUID->"34b27440-a4f1-49e4-b6e2-47ff3b1df605"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mapOnMembersFun4", "[", 
  RowBox[{"f", ",", "testlst", ",", "memblist"}], "]"}]], "Input",
 CellChangeTimes->{{3.94029902500749*^9, 3.94029902530934*^9}},
 CellLabel->"In[795]:=",
 CellID->1135823752,ExpressionUUID->"554d5cf2-78b4-4e68-b3c8-e1a2b78533cd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", "1", ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "5", ",", "7", ",", "1", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "14", ",", 
   RowBox[{"f", "[", "12", "]"}], ",", "10", ",", "3", ",", "2", ",", "1", 
   ",", "14", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.940299025598029*^9},
 CellLabel->"Out[795]=",
 CellID->1181199076,ExpressionUUID->"794b9874-b333-4565-a3f9-b1f35926ab3c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun4", "[", 
    RowBox[{"f", ",", "powertestlst", ",", "powermemblist"}], "]"}], ";"}], "//",
   "Timing"}]], "Input",
 CellChangeTimes->{{3.940299032881317*^9, 3.940299033228636*^9}},
 CellLabel->"In[796]:=",
 CellID->1074037464,ExpressionUUID->"728cae61-eadb-4aeb-b696-6a553f9ad5da"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.10641`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.9402990335865602`*^9},
 CellLabel->"Out[796]=",
 CellID->436638465,ExpressionUUID->"e54a4525-de17-471b-82ef-0e0cdcff29bb"]
}, Open  ]],

Cell["Using Intersection, Position, Alternatives and MapAt", "SubitemNumbered",
 CellChangeTimes->{3.9402990432523613`*^9},
 CellID->1235022987,ExpressionUUID->"2a5b1910-3e7a-4f84-a738-9168bb1fdc4e"],

Cell["\<\
As we have noticed, in our setting we can win some performance by using \
Alternatives instead of MemberQ. We can try it here:\
\>", "Text",
 CellChangeTimes->{{3.940299048225078*^9, 3.940299050151931*^9}},
 CellID->1601894254,ExpressionUUID->"e523e494-06a2-4230-bf4c-948d3574c40d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mapOnMembersFun5", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun5", "[", 
    RowBox[{"f_", ",", "x_List", ",", "y_List"}], "]"}], ":=", 
   RowBox[{"MapAt", "[", 
    RowBox[{"f", ",", "x", ",", 
     RowBox[{"Position", "[", 
      RowBox[{"x", ",", 
       RowBox[{"Alternatives", "@@", 
        RowBox[{"Intersection", "[", 
         RowBox[{"x", ",", "y"}], "]"}]}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.9402990631858597`*^9, 3.94029908245887*^9}},
 CellLabel->"In[797]:=",
 CellID->34244539,ExpressionUUID->"c3ee6bf4-617e-4a52-9a2c-e665ea2a2a33"],

Cell["Check now:", "Text",
 CellChangeTimes->{{3.9402990853880796`*^9, 3.940299086920026*^9}},
 CellID->1279300501,ExpressionUUID->"5d0788c3-a948-4f86-8eaf-cf39ebb7a7a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mapOnMembersFun5", "[", 
  RowBox[{"f", ",", "testlst", ",", "memblist"}], "]"}]], "Input",
 CellChangeTimes->{{3.940299093904158*^9, 3.940299094264673*^9}},
 CellLabel->"In[799]:=",
 CellID->683777696,ExpressionUUID->"53b02ae1-7018-4700-8f6c-4dfb7c91ebe5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", "1", ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "5", ",", "7", ",", "1", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "14", ",", 
   RowBox[{"f", "[", "12", "]"}], ",", "10", ",", "3", ",", "2", ",", "1", 
   ",", "14", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.940299094539536*^9},
 CellLabel->"Out[799]=",
 CellID->2030351983,ExpressionUUID->"08aa669e-b107-425e-8d47-2d7c03574a75"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun5", "[", 
    RowBox[{"f", ",", "powertestlst", ",", "powermemblist"}], "]"}], ";"}], "//",
   "Timing"}]], "Input",
 CellChangeTimes->{{3.9402991003848543`*^9, 3.940299100763623*^9}},
 CellLabel->"In[800]:=",
 CellID->610627451,ExpressionUUID->"78b0d294-a30d-43a6-ab64-2be76e4a9ee5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.024003`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940299101067038*^9},
 CellLabel->"Out[800]=",
 CellID->1762130289,ExpressionUUID->"1456f5ad-5af6-40fe-b753-f3a840bf6681"]
}, Open  ]],

Cell["\<\
Our new function is about twice more efficient than the previous one (the \
result depends somewhat on the version - 5.x or 6). Also, note that in this \
case there was no need in pre-allocating the result of the Intersection \
operation. Do you understand why?\
\>", "Text",
 CellChangeTimes->{{3.9402991095341063`*^9, 3.940299112837352*^9}},
 CellID->608860350,ExpressionUUID->"3d6e04eb-62a2-410f-9f53-238dba003e64"],

Cell["Yet faster implementations - read if you enjoy hacking", "ItemNumbered",
 CellChangeTimes->{3.940299384154922*^9},
 CellID->1642923529,ExpressionUUID->"32c0e152-032a-455f-a135-2996e4cc3b44"],

Cell["\<\
The last version of our function (or the version with a binary search, for \
larger lists) is where most users (including myself) will normally stop. It \
is relatively efficient, and in fact (although I deliberately went down this \
road starting from the worst procedural code for pedagogical purposes), with \
some experience this will perhaps be the first or second thing which comes to \
mind. But now I suggest to explore a little bit the \
\[OpenCurlyDoubleQuote]twilight zone of Mathematica hackery\
\[CloseCurlyDoubleQuote] and see what else we can do in principle.\
\>", "Text",
 CellChangeTimes->{{3.9402993896562023`*^9, 3.940299396381619*^9}},
 CellID->271018777,ExpressionUUID->"2381d81c-aa5d-4b93-bbda-3cadb64867dd"],

Cell["Boosting MapAt", "SubitemNumbered",
 CellChangeTimes->{3.9402994027083263`*^9},
 CellID->234322135,ExpressionUUID->"27c16157-9bff-433f-8613-9890f996c71d"],

Cell[TextData[{
 "As a first step, let us recall that the MapAt function can be quite slow if \
it has to map on many positions in a flat list at once (see section ",
 ButtonBox["5.2.3.3",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-5-Functions-on-lists.nb", CharacterEncoding -> 
     "UTF-8"], "5.2.3.3"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-5-Functions-on-lists.nb"],
 "). We have so far no evidence of the extent to which this affected the \
performance of our implementations, but there is only one way to find out. \
While for the general case, improving MapAt from within Mathematica is a \
tough problem, improving it in the case of flat list is\nrelatively simple. \
We will use the capability of the Part function to change a large number of \
expression elements in place (see section ",
 ButtonBox["3.6.6.2",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-3-Lists.nb", CharacterEncoding -> "UTF-8"], 
    "3.6.6.2"},
  ButtonNote->"/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-3-Lists.nb"],
 "). Thus, what we have to do is the following: 1. extract from the element \
list all elements with the positions in a position list, with the use of \
Part. 2. Map the function f on a list of extracted elements 3. Use part to \
\[OpenCurlyDoubleQuote]place back\[CloseCurlyDoubleQuote] the elements with \
the function <f> already mapped on them. Also, we will have to create a copy \
of the original list and modify a copy. So, here is the code:"
}], "Text",
 CellChangeTimes->{{3.940299408916834*^9, 3.940299421946663*^9}, {
  3.9402994585412207`*^9, 3.9402994585498343`*^9}, {3.940299502028824*^9, 
  3.940299502037263*^9}},
 CellID->1914597994,ExpressionUUID->"75d447c4-c8ae-4d3e-873b-070c6d255b7e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "fastMapAtSimpleList", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fastMapAtSimpleList", "[", 
    RowBox[{"f_", ",", "x_List", ",", "positions_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"copy", "=", "x"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"copy", "[", 
        RowBox[{"[", "positions", "]"}], "]"}], "=", 
       RowBox[{"Map", "[", 
        RowBox[{"f", ",", 
         RowBox[{"x", "[", 
          RowBox[{"[", "positions", "]"}], "]"}]}], "]"}]}], ";", 
      RowBox[{"Return", "[", "copy", "]"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940299521846198*^9, 3.94029956505998*^9}},
 CellLabel->"In[801]:=",
 CellID->1150601291,ExpressionUUID->"b7a11e93-8589-4a93-90b9-deeb9036cf17"],

Cell["\<\
Notice that the list of positions has to be as the one used in Part rather \
than in Extract, Position or built-in MapAt. Thus, the syntax of our version \
of MapAt is somewhat different. Check:\
\>", "Text",
 CellChangeTimes->{{3.9402995752998953`*^9, 3.940299582798704*^9}},
 CellID->1522906291,ExpressionUUID->"8ade8308-dca7-4056-b6a8-753b42b94039"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fastMapAtSimpleList", "[", 
  RowBox[{"f", ",", 
   RowBox[{"Range", "[", "15", "]"}], ",", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Position", "[", 
     RowBox[{
      RowBox[{"Range", "[", "15", "]"}], ",", 
      RowBox[{"_", "?", "OddQ"}]}], "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9402995868997602`*^9, 3.94029962183488*^9}},
 CellLabel->"In[804]:=",
 CellID->1937601050,ExpressionUUID->"4b5dfcea-5e05-43c8-bdea-8b496d11599d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", "1", "]"}], ",", "2", ",", 
   RowBox[{"f", "[", "3", "]"}], ",", "4", ",", 
   RowBox[{"f", "[", "5", "]"}], ",", "6", ",", 
   RowBox[{"f", "[", "7", "]"}], ",", "8", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", "10", ",", 
   RowBox[{"f", "[", "11", "]"}], ",", "12", ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "14", ",", 
   RowBox[{"f", "[", "15", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.940299607033675*^9, 3.940299622138996*^9}},
 CellLabel->"Out[804]=",
 CellID->1070182929,ExpressionUUID->"8b76035b-11ac-47bd-8489-50fb7ace304a"]
}, Open  ]],

Cell["\<\
Ok, it works, but is it really faster than the built-in MapAt? Let us make a \
power test:\
\>", "Text",
 CellChangeTimes->{3.940299638730139*^9},
 CellID->1509970749,ExpressionUUID->"a3fef167-35ba-4b8a-b0b9-d25aa8ba0494"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mapattestlist", "=", 
   RowBox[{"Range", "[", "10000", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"posliststandard", "=", 
   RowBox[{"Position", "[", 
    RowBox[{"mapattestlist", ",", 
     RowBox[{"_", "?", "OddQ"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"poslist", "=", 
   RowBox[{"Flatten", "[", "posliststandard", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940299640403737*^9, 3.9402996955592318`*^9}},
 CellLabel->"In[805]:=",
 CellID->1040112337,ExpressionUUID->"ee963dd8-6f93-40ac-b5ed-4ad0576dc836"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fastMapAtSimpleList", "[", 
    RowBox[{"f", ",", "mapattestlist", ",", "poslist"}], "]"}], "//", 
   "Short"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940299698048583*^9, 3.9402997131279716`*^9}},
 CellLabel->"In[808]:=",
 CellID->1023136320,ExpressionUUID->"6571513a-22c4-48f7-9c02-17babe33b668"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.001488`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "[", "1", "]"}], ",", "2", ",", 
      RowBox[{"\[LeftSkeleton]", "9996", "\[RightSkeleton]"}], ",", 
      RowBox[{"f", "[", "9999", "]"}], ",", "10000"}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940299713507868*^9},
 CellLabel->"Out[808]=",
 CellID->1766155343,ExpressionUUID->"825a8ae5-7e01-41a6-a086-e066fd3c73da"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MapAt", "[", 
    RowBox[{"f", ",", "mapattestlist", ",", "posliststandard"}], "]"}], "//", 
   "Short"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940299717941677*^9, 3.940299730117939*^9}},
 CellLabel->"In[809]:=",
 CellID->720384358,ExpressionUUID->"ba3bdb28-d12c-4916-8f40-a97ef0a06ff4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.123387`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "[", "1", "]"}], ",", "2", ",", 
      RowBox[{"\[LeftSkeleton]", "9996", "\[RightSkeleton]"}], ",", 
      RowBox[{"f", "[", "9999", "]"}], ",", "10000"}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940299730602812*^9},
 CellLabel->"Out[809]=",
 CellID->609538156,ExpressionUUID->"590bcf03-f245-4e7d-ab98-7638737703f2"]
}, Open  ]],

Cell["The difference is more than a 100 times for this list size.", "Text",
 CellChangeTimes->{{3.940299770161956*^9, 3.940299773067711*^9}},
 CellID->1010791702,ExpressionUUID->"ee385d82-a81c-4e5a-8646-35b5d7410e31"],

Cell["\<\
The final comments here are the following: first, our version of MapAt does \
not support the feature that when identical positions are present in the \
list, the mapped function is nested several times on the element with such at \
such a position. This can be implemented also, if needed, but will slow down \
the function somewhat. Second, the order in which the function is mapped on \
the elements here, corresponds to the
original order of positions in the position list. For the built-in MapAt, \
however, the order is always depth-first, which in a flat list corresponds to \
a left-to-right order. This difference may matter if the function being \
mapped contains side effects. Again, if the latter behavior is needed, it can \
be easily implemented - for a flat list it amounts to just sorting the \
position list with Sort before using it. Again, this will slow down the \
function a bit. Also, note that if our version of MapAt is used in \
conjunction with Position command, this is unnecessary altogether, since \
Position by itself produces a list of positions which corresponds to a \
depth-first traversal of an expression (just because Position traverses \
expressions depth-first).\
\>", "Text",
 CellChangeTimes->{{3.940299770161956*^9, 3.94029979466431*^9}},
 CellID->1421153163,ExpressionUUID->"c2553f8e-4272-4ca6-9e3c-8565fd7d6feb"],

Cell["Using the boosted version of MapAt", "SubitemNumbered",
 CellChangeTimes->{3.940299803030442*^9},
 CellID->1651915404,ExpressionUUID->"5a5ac3a4-6d97-49ec-8116-86ee03d1f7df"],

Cell["\<\
We can now use our new function to see whether we get any improvements:\
\>", "Text",
 CellChangeTimes->{3.940299809676692*^9},
 CellID->1073606612,ExpressionUUID->"9ca3a888-9ce3-49c0-9ba1-0c0b85ad4108"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mapOnMembersFun6", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun6", "[", 
    RowBox[{"f_", ",", "x_List", ",", "y_List"}], "]"}], ":=", 
   RowBox[{"fastMapAtSimpleList", "[", 
    RowBox[{"f", ",", "x", ",", 
     RowBox[{"Flatten", "[", 
      RowBox[{"Position", "[", 
       RowBox[{"x", ",", 
        RowBox[{"Alternatives", "@@", 
         RowBox[{"Intersection", "[", 
          RowBox[{"x", ",", "y"}], "]"}]}]}], "]"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940299811586182*^9, 3.940299843670059*^9}},
 CellLabel->"In[810]:=",
 CellID->168273555,ExpressionUUID->"e868f84e-c835-4ae4-a0e2-219f9aadddac"],

Cell["Check now:", "Text",
 CellChangeTimes->{{3.940299845864314*^9, 3.940299850469743*^9}},
 CellID->1179051197,ExpressionUUID->"d8ce6a7b-ed40-4b4f-8bdb-4a0124180557"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mapOnMembersFun6", "[", 
  RowBox[{"f", ",", "testlst", ",", "memblist"}], "]"}]], "Input",
 CellChangeTimes->{{3.940299851983664*^9, 3.940299869983881*^9}},
 CellLabel->"In[812]:=",
 CellID->1472461758,ExpressionUUID->"e401025f-c243-4887-bdc0-dd569ef21e2f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", "1", ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "5", ",", "7", ",", "1", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "14", ",", 
   RowBox[{"f", "[", "12", "]"}], ",", "10", ",", "3", ",", "2", ",", "1", 
   ",", "14", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.9402998704538517`*^9},
 CellLabel->"Out[812]=",
 CellID->466799999,ExpressionUUID->"a337b109-67cc-4a97-be49-d1c8a06cc990"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun6", "[", 
    RowBox[{"f", ",", "powertestlst", ",", "powermemblist"}], "]"}], ";"}], "//",
   "Timing"}]], "Input",
 CellChangeTimes->{{3.940299879265377*^9, 3.940299879687189*^9}},
 CellLabel->"In[813]:=",
 CellID->1913909055,ExpressionUUID->"c1a5603c-ca9d-48cc-9abf-21e5f9aa85e8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.004004`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940299880249815*^9},
 CellLabel->"Out[813]=",
 CellID->834865017,ExpressionUUID->"0ac507a6-bb56-4690-8975-773d20d3ad87"]
}, Open  ]],

Cell["\<\
We see about 30% improvement for this size of the list. In fact, one may \
check that this number will remain mostly constant as we increase the list \
size, which means that the most expensive operation now is the Position.\
\>", "Text",
 CellChangeTimes->{{3.940299889983056*^9, 3.9402998923794537`*^9}},
 CellID->342839091,ExpressionUUID->"18746a13-fcf6-4e15-973f-f19f72c4673f"],

Cell["\<\
Positions of member elements - developing the memberPositions function\
\>", "SubitemNumbered",
 CellChangeTimes->{3.940299902114884*^9},
 CellID->1752577116,ExpressionUUID->"9d529e1d-0f77-49d7-b0ed-f2530a950a8c"],

Cell["\<\
It looks like we have reached the full stop: Position is a built-in operation \
specially designed for finding many positions at once, and we have supplied a \
large alternative pattern which speeds-up the pattern-matching. However, we \
can do better. Let us think if we can write our own function that will find \
all the positions of the member elements. To develop such a function, let us \
start once again with a simple member list and test list\
\>", "Text",
 CellChangeTimes->{{3.940299961938891*^9, 3.940299969441783*^9}},
 CellID->677886360,ExpressionUUID->"b19af030-2530-4cbd-bf8d-4aa6524f92a5"],

Cell[CellGroupData[{

Cell[BoxData["testlst"], "Input",
 CellChangeTimes->{{3.940299972302877*^9, 3.940299973365909*^9}},
 CellLabel->"In[814]:=",
 CellID->951564684,ExpressionUUID->"5d036fdc-800f-470d-b15f-94da526f7116"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "7", ",", "9", ",", "1", ",", "13", ",", "6", ",", "5", ",", "7", ",", "1", 
   ",", "9", ",", "9", ",", "13", ",", "6", ",", "14", ",", "12", ",", "10", 
   ",", "3", ",", "2", ",", "1", ",", "14", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.940299973920067*^9},
 CellLabel->"Out[814]=",
 CellID->1636922889,ExpressionUUID->"dedcd219-574f-451f-af46-f9ecce30e4ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["memblist"], "Input",
 CellChangeTimes->{{3.940299974400931*^9, 3.940299975859132*^9}},
 CellLabel->"In[815]:=",
 CellID->386507609,ExpressionUUID->"131d57f9-77fe-4f1f-8641-65ac7c105e47"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"12", ",", "15", ",", "13", ",", "13", ",", "9"}], "}"}]], "Output",\

 CellChangeTimes->{3.9402999761635227`*^9},
 CellLabel->"Out[815]=",
 CellID->1183770136,ExpressionUUID->"ddb038bb-c18e-4e1b-9f72-0a43208c7c86"]
}, Open  ]],

Cell["\<\
As a first step, let us find an ordering permutation which is needed to sort \
<testlst>, using the standard Ordering command:\
\>", "Text",
 CellChangeTimes->{{3.940299987774144*^9, 3.94029998927878*^9}},
 CellID->1336169944,ExpressionUUID->"3e57e109-91e1-418e-9d40-4ee269c626dd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ord", "=", 
  RowBox[{"Ordering", "[", "testlst", "]"}]}]], "Input",
 CellChangeTimes->{{3.940300026421949*^9, 3.9403000308159246`*^9}},
 CellLabel->"In[816]:=",
 CellID->93285625,ExpressionUUID->"76011cf5-f531-44c9-b694-13471d53d543"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "8", ",", "18", ",", "20", ",", "17", ",", "16", ",", "6", ",", 
   "5", ",", "12", ",", "1", ",", "7", ",", "2", ",", "9", ",", "10", ",", 
   "15", ",", "14", ",", "4", ",", "11", ",", "13", ",", "19"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9403000312553587`*^9},
 CellLabel->"Out[816]=",
 CellID->2004663322,ExpressionUUID->"9b16bd42-c587-4b65-956c-0b3aae3d8dec"]
}, Open  ]],

Cell["\<\
The numbers here indicate a sequence of positions, so that if we extract the \
elements at these positions in this order, we get a sorted list:\
\>", "Text",
 CellChangeTimes->{{3.940300041247695*^9, 3.9403000435672493`*^9}},
 CellID->505515071,ExpressionUUID->"7ed4a381-7268-4be6-ab88-a6db4f747de5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sorted", "=", 
  RowBox[{"testlst", "[", 
   RowBox[{"[", "ord", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9403000452747726`*^9, 3.9403000500295877`*^9}},
 CellLabel->"In[817]:=",
 CellID->209165117,ExpressionUUID->"a6e9243d-5be0-4b3d-a026-c4f75477bb49"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "6", 
   ",", "6", ",", "7", ",", "7", ",", "9", ",", "9", ",", "9", ",", "10", ",",
    "12", ",", "13", ",", "13", ",", "14", ",", "14"}], "}"}]], "Output",
 CellChangeTimes->{3.940300050365466*^9},
 CellLabel->"Out[817]=",
 CellID->603045243,ExpressionUUID->"7fcf9862-df59-4a16-b2c4-2a8872d33d1c"]
}, Open  ]],

Cell["\<\
Here, I used the capability of Part to extract many elements at once.\
\>", "Text",
 CellChangeTimes->{{3.940300058376225*^9, 3.9403000605651827`*^9}},
 CellID->1406068908,ExpressionUUID->"6f880caf-ef16-480d-bf90-6617b10356f2"],

Cell[TextData[{
 "By using a well-known for us by now combination of Split, Length, Transpose \
and Map (see section ",
 ButtonBox["3.10.3.4",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-3-Lists.nb", CharacterEncoding -> "UTF-8"], 
    "3.10.3.4"},
  ButtonNote->"/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-3-Lists.nb"],
 "), we can obtain a list of unique (distinct) elements plus a list of their \
frequencies (which are given just by lengths of the sublists of same elements \
which Split produces):"
}], "Text",
 CellChangeTimes->{{3.940300058376225*^9, 3.940300063785741*^9}, {
  3.94030010349323*^9, 3.9403001035017757`*^9}},
 CellID->553532234,ExpressionUUID->"5f30cc77-1cc3-45d7-af48-47541bb42654"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"distinct", ",", "freqs"}], "}"}], "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", 
       RowBox[{"Length", "[", "#", "]"}]}], "}"}], "&"}], "/@", 
    RowBox[{"Split", "[", "sorted", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9403001402620907`*^9, 3.940300168860711*^9}},
 CellLabel->"In[818]:=",
 CellID->788221945,ExpressionUUID->"bc4f2298-581f-4cea-bb1e-8efcd72c81d6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "5", ",", "6", ",", "7", ",", "9", ",", 
     "10", ",", "12", ",", "13", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "4", ",", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "3", ",", "1",
      ",", "1", ",", "2", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9403001704143667`*^9},
 CellLabel->"Out[818]=",
 CellID->672039036,ExpressionUUID->"0a08cdb5-6aaa-4a9c-a3b6-52702cb18b76"]
}, Open  ]],

Cell["\<\
Now we would like to know, to which intervals of positions in the original \
sorted list correspond the sublists of identical elements produced by Split. \
Since the list of frequencies is at the same time the list of lengths of \
these sublists, the general formulation of our sub-problem is to obtain a \
list of position intervals given a partition of the length of the main list \
into lengths of sublists. For example, for a list Range[10] and length \
partitioning {1,3,4,2}, we should get the following position list: \
{{1,1},{2,4},{5,8},{9,10}}. The way to solve this problem is to construct \
partial sums of the length list by using the FoldList. This will give the \
starting points of the intervals when we remove the last element, and the \
endpoints when we subtract 1 from this list and remove the first element. \
Then we need to Transpose the resulting two lists. So, here is the code:\
\>", "Text",
 CellChangeTimes->{{3.94030017839415*^9, 3.940300194591997*^9}, 
   3.940301537089067*^9},
 CellID->1343578479,ExpressionUUID->"7eb53a84-3dee-4121-9dcb-0273fd4f969f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"posints", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Most", "[", "#", "]"}], ",", 
       RowBox[{
        RowBox[{"Rest", "[", "#", "]"}], "-", "1"}]}], "}"}], "&"}], "[", 
    RowBox[{"FoldList", "[", 
     RowBox[{"Plus", ",", "1", ",", "freqs"}], "]"}], "]"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.94030020104044*^9, 3.940300223203937*^9}},
 CellLabel->"In[819]:=",
 CellID->1582054681,ExpressionUUID->"0847a769-3d32-42f5-a318-4a3101dfa358"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "11"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"16", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17", ",", "18"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"19", ",", "20"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940300223637125*^9},
 CellLabel->"Out[819]=",
 CellID->933853257,ExpressionUUID->"1cf376f0-bd61-4aa1-afe6-af4014d1703f"]
}, Open  ]],

Cell["\<\
By using a pure function like this, we can avoid an introduction of an \
auxiliary variable to hold the result of FoldList operation. This is a \
generally useful trick.\
\>", "Text",
 CellChangeTimes->{{3.940300232289855*^9, 3.940300237402523*^9}},
 CellID->1461198123,ExpressionUUID->"10587389-46ac-4ac3-88c6-55e8045dbd6f"],

Cell[TextData[{
 "What we would like to do now is to create a set of rules, relating each \
distinct element in a list to an interval of positions where this element \
(identical copies of it) is present in a sorted list. This is done in a \
standard way using Thread (see section ",
 ButtonBox["5.3.1.5",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-5-Functions-on-lists.nb", CharacterEncoding -> 
     "UTF-8"], "5.3.1.5"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-5-Functions-on-lists.nb"],
 ")."
}], "Text",
 CellChangeTimes->{{3.940300232289855*^9, 3.940300240799988*^9}, {
  3.940300279412612*^9, 3.940300279420936*^9}},
 CellID->1890314917,ExpressionUUID->"6bc08fe7-0fe1-43e6-97df-ec78818f089f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rules", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{"Rule", "[", 
    RowBox[{"distinct", ",", "posints"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940300284787093*^9, 3.94030029402739*^9}},
 CellLabel->"In[820]:=",
 CellID->1004404345,ExpressionUUID->"6b283f02-9020-44e1-8ef8-62b7c4265d6a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4"}], "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"5", ",", "5"}], "}"}]}], ",", 
   RowBox[{"3", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"6", ",", "6"}], "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"7", ",", "7"}], "}"}]}], ",", 
   RowBox[{"6", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"8", ",", "9"}], "}"}]}], ",", 
   RowBox[{"7", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"10", ",", "11"}], "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"12", ",", "14"}], "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"15", ",", "15"}], "}"}]}], ",", 
   RowBox[{"12", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"16", ",", "16"}], "}"}]}], ",", 
   RowBox[{"13", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"17", ",", "18"}], "}"}]}], ",", 
   RowBox[{"14", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"19", ",", "20"}], "}"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.940300294317171*^9},
 CellLabel->"Out[820]=",
 CellID->1938625731,ExpressionUUID->"96680c84-94ea-4673-bbdc-c9609d8d0c1d"]
}, Open  ]],

Cell["\<\
The next and absolutely crucial step is to use Dispatch, to create a hashed \
version of our set of rules:\
\>", "Text",
 CellChangeTimes->{3.940300302910594*^9},
 CellID->1404011673,ExpressionUUID->"deb385d8-f3b0-4096-9bb3-209584c5459c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rules", "=", 
  RowBox[{"Dispatch", "[", "rules", "]"}]}]], "Input",
 CellChangeTimes->{{3.940300304569996*^9, 3.940300309194182*^9}},
 CellLabel->"In[821]:=",
 CellID->2133753494,ExpressionUUID->"7510a3ae-1230-43e5-a987-8f83fe854827"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Dispatch",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              GrayLevel[0.5], 
              
              PolygonBox[{{0.25, 0.5}, {0.05, 0.35}, {0.15, 0.35}, {0.35, 
               0.5}, {0.15, 0.65}, {0.05, 0.65}}], 
              
              PolygonBox[{{0.4, 0.5}, {0.2, 0.35}, {0.35, 0.35}, {0.55, 
               0.5}, {0.35, 0.65}, {0.2, 0.65}}], 
              
              PolygonBox[{{0.95, 0.5}, {0.55, 0.1}, {0.6, 0.35}, {0.4, 
               0.35}, {0.6, 0.5}, {0.4, 0.65}, {0.6, 0.65}, {0.55, 0.9}}]}, 
             PlotRange -> {{-0.05, 1.05}, {-0.05, 1.05}}, Background -> 
             GrayLevel[0.93], FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Length: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["11", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              GrayLevel[0.5], 
              
              PolygonBox[{{0.25, 0.5}, {0.05, 0.35}, {0.15, 0.35}, {0.35, 
               0.5}, {0.15, 0.65}, {0.05, 0.65}}], 
              
              PolygonBox[{{0.4, 0.5}, {0.2, 0.35}, {0.35, 0.35}, {0.55, 
               0.5}, {0.35, 0.65}, {0.2, 0.65}}], 
              
              PolygonBox[{{0.95, 0.5}, {0.55, 0.1}, {0.6, 0.35}, {0.4, 
               0.35}, {0.6, 0.5}, {0.4, 0.65}, {0.6, 0.65}, {0.55, 0.9}}]}, 
             PlotRange -> {{-0.05, 1.05}, {-0.05, 1.05}}, Background -> 
             GrayLevel[0.93], FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Length: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["11", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Rules:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4"}], "}"}]}]}, {
                    RowBox[{"2", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "5"}], "}"}]}]}, {
                    RowBox[{"3", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", "6"}], "}"}]}]}, {
                    RowBox[{"5", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"7", ",", "7"}], "}"}]}]}, {
                    RowBox[{"6", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"8", ",", "9"}], "}"}]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Dispatch[{
   1 -> {1, 4}, 2 -> {5, 5}, 3 -> {6, 6}, 5 -> {7, 7}, 6 -> {8, 9}, 
    7 -> {10, 11}, 9 -> {12, 14}, 10 -> {15, 15}, 12 -> {16, 16}, 
    13 -> {17, 18}, 14 -> {19, 20}}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.940300310065069*^9},
 CellLabel->"Out[821]=",
 CellID->1225361271,ExpressionUUID->"0af8f574-0536-4337-a0ed-0699710d70e0"]
}, Open  ]],

Cell["\<\
Now we can find members of the first list which are also members of the \
second list, as before, by using Intersection:\
\>", "Text",
 CellChangeTimes->{{3.9403003196224537`*^9, 3.940300320993053*^9}},
 CellID->278706967,ExpressionUUID->"32a6d8f8-f295-4f80-9fd0-9145424509cb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"members", "=", 
  RowBox[{"Intersection", "[", 
   RowBox[{"memblist", ",", "testlst"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940300322253518*^9, 3.940300329383544*^9}},
 CellLabel->"In[822]:=",
 CellID->1284271442,ExpressionUUID->"85fb6bb9-f9ab-4a73-8edf-eba15e268b4a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"9", ",", "12", ",", "13"}], "}"}]], "Output",
 CellChangeTimes->{3.940300330151965*^9},
 CellLabel->"Out[822]=",
 CellID->1109023867,ExpressionUUID->"da4350ef-5c02-471f-a23c-a07ad1bd2300"]
}, Open  ]],

Cell["\<\
The next step is to find intervals of positions in the sorted list which \
correspond to these elements. We use our Dispatched rules for that:\
\>", "Text",
 CellChangeTimes->{{3.940300336863409*^9, 3.940300338241012*^9}},
 CellID->1353560356,ExpressionUUID->"99d064bc-dcc3-4d04-9efd-b7519e0b35a9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ints", "=", 
  RowBox[{"ReplaceAll", "[", 
   RowBox[{"members", ",", "rules"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940300339563768*^9, 3.940300347183359*^9}},
 CellLabel->"In[823]:=",
 CellID->1945199012,ExpressionUUID->"29638856-9779-4aee-9922-cf05f5314d58"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"12", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"16", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17", ",", "18"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9403003475673637`*^9},
 CellLabel->"Out[823]=",
 CellID->363341729,ExpressionUUID->"6b5fa2d6-b698-43b1-9d9b-bc50cdd56624"]
}, Open  ]],

Cell[TextData[{
 "Now we will use Range with the Map[Apply,..] (@@@, see section ",
 ButtonBox["5.2.7.5",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-5-Functions-on-lists.nb", CharacterEncoding -> 
     "UTF-8"], "5.2.7.5"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-5-Functions-on-lists.nb"],
 "), to generate all the positions from position intervals:"
}], "Text",
 CellChangeTimes->{{3.940300355306013*^9, 3.9403003570684834`*^9}, {
  3.940300388473431*^9, 3.940300388482236*^9}},
 CellID->1388430882,ExpressionUUID->"cc2ef842-71a8-42de-a592-c1b105cd1588"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"positions", "=", 
  RowBox[{"Range", "@@@", "ints"}]}]], "Input",
 CellChangeTimes->{{3.9403003948255577`*^9, 3.940300402202907*^9}},
 CellLabel->"In[824]:=",
 CellID->1959030749,ExpressionUUID->"ecc5eb00-0b0e-4f2a-8d4f-940ce2659812"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"12", ",", "13", ",", "14"}], "}"}], ",", 
   RowBox[{"{", "16", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17", ",", "18"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940300402525453*^9},
 CellLabel->"Out[824]=",
 CellID->825615447,ExpressionUUID->"369bb691-f545-490e-b5be-83fe915ea699"]
}, Open  ]],

Cell["\<\
We will also Flatten this list, since we no longer need the internal braces:\
\>", "Text",
 CellChangeTimes->{3.940300408630145*^9},
 CellID->1226974462,ExpressionUUID->"3d862ad3-3ac6-484b-9792-f2069d26ac74"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"positions", "=", 
  RowBox[{"Flatten", "[", "positions", "]"}]}]], "Input",
 CellChangeTimes->{{3.940300410243737*^9, 3.940300417635028*^9}},
 CellLabel->"In[825]:=",
 CellID->1803094656,ExpressionUUID->"93a4568e-47c1-4793-8d88-0494d7a00b4b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"12", ",", "13", ",", "14", ",", "16", ",", "17", ",", "18"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9403004181043167`*^9},
 CellLabel->"Out[825]=",
 CellID->34176035,ExpressionUUID->"53f7a4b6-c5b1-4fb2-aa50-bbed1abab10d"]
}, Open  ]],

Cell["\<\
To get a corresponding list of positions of these elements in the original \
unsorted list, we recall that we have an access to an ordering permutation. \
All we have to do is just to extract from this permutation the elements \
(positions in an unsorted list) which are at the positions we have just \
found. This is perhaps the most logically non-trivial step in the whole \
procedure and may take a bit to digest. Anyway, here is the result:\
\>", "Text",
 CellChangeTimes->{{3.9403004268125362`*^9, 3.940300438177005*^9}},
 CellID->1018486496,ExpressionUUID->"f1e59555-eecc-4d64-808a-0261fe659fa9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mempositions", "=", 
  RowBox[{"ord", "[", 
   RowBox[{"[", "positions", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.94030044332029*^9, 3.940300450411644*^9}},
 CellLabel->"In[826]:=",
 CellID->908098140,ExpressionUUID->"39636e8b-e136-4d9b-985a-7fb3545f5d6b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "9", ",", "10", ",", "14", ",", "4", ",", "11"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940300450903242*^9},
 CellLabel->"Out[826]=",
 CellID->322165206,ExpressionUUID->"b0660285-24a6-45a9-a062-88bf7452f3ef"]
}, Open  ]],

Cell["The final step is to Sort these positions:", "Text",
 CellChangeTimes->{3.9403004569303913`*^9},
 CellID->824343155,ExpressionUUID->"e86163ff-12eb-4a78-9a4d-172c5f7be00a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"Sort", "[", "mempositions", "]"}]}]], "Input",
 CellChangeTimes->{{3.940300458350075*^9, 3.940300464221527*^9}},
 CellLabel->"In[827]:=",
 CellID->600563670,ExpressionUUID->"0ba59742-6da3-4b2e-8e32-1997000e7500"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4", ",", "9", ",", "10", ",", "11", ",", "14"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940300464633627*^9},
 CellLabel->"Out[827]=",
 CellID->383060852,ExpressionUUID->"4b085c5d-2d62-490c-a97c-e836efa650d1"]
}, Open  ]],

Cell["\<\
Let me display both lists again so that we can see that these positions \
indeed are the positions of he common members of the two lists, in the first \
list:\
\>", "Text",
 CellChangeTimes->{{3.9403004728962812`*^9, 3.940300474794876*^9}},
 CellID->2095249505,ExpressionUUID->"4aa83e94-6fcf-479f-b484-d8777d52bc31"],

Cell[CellGroupData[{

Cell[BoxData["testlst"], "Input",
 CellChangeTimes->{{3.9403004765242434`*^9, 3.9403004774686832`*^9}},
 CellLabel->"In[828]:=",
 CellID->1064644950,ExpressionUUID->"ae780116-5763-4594-9ffe-dd062b08a51d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "7", ",", "9", ",", "1", ",", "13", ",", "6", ",", "5", ",", "7", ",", "1", 
   ",", "9", ",", "9", ",", "13", ",", "6", ",", "14", ",", "12", ",", "10", 
   ",", "3", ",", "2", ",", "1", ",", "14", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.9403004783241463`*^9},
 CellLabel->"Out[828]=",
 CellID->58196114,ExpressionUUID->"26557741-8bfd-49ca-8412-7fe4b5604a9b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["memblist"], "Input",
 CellChangeTimes->{{3.940300479295444*^9, 3.940300481824486*^9}},
 CellLabel->"In[829]:=",
 CellID->245001150,ExpressionUUID->"2d18a954-0c23-4dda-9deb-7a587b9bf434"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"12", ",", "15", ",", "13", ",", "13", ",", "9"}], "}"}]], "Output",\

 CellChangeTimes->{3.940300482087379*^9},
 CellLabel->"Out[829]=",
 CellID->864003752,ExpressionUUID->"e4b49e04-8e49-41cf-b98b-6d48f0a2bd87"]
}, Open  ]],

Cell["\<\
This was a terribly long discussion (it actually took me several times less \
time to write this function than to describe it), but let us now condense all \
the steps into a single function:\
\>", "Text",
 CellChangeTimes->{{3.94030049347239*^9, 3.940300495034316*^9}},
 CellID->26638850,ExpressionUUID->"295eed79-12fb-4d95-9085-9f888739b762"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "memberPositions", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"memberPositions", "[", 
    RowBox[{"x_List", ",", "y_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "order", ",", "xsorted", ",", "distinct", ",", "freqs", ",", "rules", 
       ",", "positionsInSorted", ",", "posintervals"}], "}"}], ",", 
     RowBox[{
      RowBox[{"xsorted", "=", 
       RowBox[{"x", "[", 
        RowBox[{"[", 
         RowBox[{"order", "=", 
          RowBox[{"Ordering", "[", "x", "]"}]}], "]"}], "]"}]}], ";", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"distinct", ",", "freqs"}], "}"}], "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"Length", "[", "#", "]"}]}], "}"}], "&"}], "/@", 
         RowBox[{"Split", "[", "xsorted", "]"}]}], "]"}]}], ";", 
      RowBox[{"posintervals", "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Most", "[", "#", "]"}], ",", 
            RowBox[{
             RowBox[{"Rest", "[", "#", "]"}], "-", "1"}]}], "}"}], "&"}], "[", 
         RowBox[{"FoldList", "[", 
          RowBox[{"Plus", ",", "1", ",", "freqs"}], "]"}], "]"}], "]"}]}], 
      ";", 
      RowBox[{"rules", "=", 
       RowBox[{"Dispatch", "[", 
        RowBox[{"Thread", "[", 
         RowBox[{"Rule", "[", 
          RowBox[{"distinct", ",", "posintervals"}], "]"}], "]"}], "]"}]}], 
      ";", 
      RowBox[{"positionsInSorted", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Range", "@@@", 
         RowBox[{"ReplaceAll", "[", 
          RowBox[{
           RowBox[{"Intersection", "[", 
            RowBox[{"x", ",", "y"}], "]"}], ",", "rules"}], "]"}]}], "]"}]}], 
      ";", 
      RowBox[{"Return", "[", 
       RowBox[{"Sort", "[", 
        RowBox[{"order", "[", 
         RowBox[{"[", "positionsInSorted", "]"}], "]"}], "]"}], "]"}]}]}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940300497376286*^9, 3.940300646303074*^9}, {
  3.9403006782679453`*^9, 3.9403007356433363`*^9}, {3.940300820052062*^9, 
  3.940300820423978*^9}, {3.9403008532323112`*^9, 3.9403008697862787`*^9}},
 CellLabel->"In[837]:=",
 CellID->1797777018,ExpressionUUID->"0c251c97-9cf8-431f-8e0a-74fa45d3da21"],

Cell["Let us check again that it gives the right thing:", "Text",
 CellChangeTimes->{3.940300743926434*^9},
 CellID->1586049342,ExpressionUUID->"5fe65b37-c38a-4c74-8a25-a1edad4ba63b"],

Cell[CellGroupData[{

Cell[BoxData["testlst"], "Input",
 CellChangeTimes->{{3.940300745453586*^9, 3.9403007465023937`*^9}},
 CellLabel->"In[832]:=",
 CellID->714262124,ExpressionUUID->"c0810ac7-548b-4a37-a86f-189c40a7a2c2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "7", ",", "9", ",", "1", ",", "13", ",", "6", ",", "5", ",", "7", ",", "1", 
   ",", "9", ",", "9", ",", "13", ",", "6", ",", "14", ",", "12", ",", "10", 
   ",", "3", ",", "2", ",", "1", ",", "14", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.9403007469323187`*^9},
 CellLabel->"Out[832]=",
 CellID->1413956081,ExpressionUUID->"04200315-1fcb-4977-8600-750e24d65d84"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"memberPositions", "[", 
  RowBox[{"testlst", ",", "memblist"}], "]"}]], "Input",
 CellChangeTimes->{{3.9403007476457253`*^9, 3.940300757066921*^9}},
 CellLabel->"In[839]:=",
 CellID->915514384,ExpressionUUID->"bbaf289b-026f-40d0-8751-36cb474bb7e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4", ",", "9", ",", "10", ",", "11", ",", "14"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.94030075757508*^9, 3.940300824142207*^9, 
  3.9403008731284*^9},
 CellLabel->"Out[839]=",
 CellID->1625144660,ExpressionUUID->"6c501ae7-9142-4aee-8b7a-0c5ff9f823e8"]
}, Open  ]],

Cell["\<\
The function we have just developed represents some value by itself, but now \
we will use it in our problem.\
\>", "Text",
 CellChangeTimes->{{3.94030088371383*^9, 3.9403008872751637`*^9}},
 CellID->2109278074,ExpressionUUID->"7d3d11ea-5dbd-42c2-889b-59bd223314d8"],

Cell["Using memberPositions function", "SubitemNumbered",
 CellChangeTimes->{3.940300896872208*^9},
 CellID->1766781058,ExpressionUUID->"4a3bb469-0106-4dc3-9ed6-090a3f76bf82"],

Cell["\<\
Now we can try to use our newly developed function. The new code will look \
like:\
\>", "Text",
 CellChangeTimes->{3.940300902193787*^9},
 CellID->1032854737,ExpressionUUID->"2d07288d-838e-4788-8f82-77d8aef01f09"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mapOnMembersFast", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFast", "[", 
    RowBox[{"f_", ",", "x_List", ",", "y_List"}], "]"}], ":=", 
   RowBox[{"fastMapAtSimpleList", "[", 
    RowBox[{"f", ",", "x", ",", 
     RowBox[{"memberPositions", "[", 
      RowBox[{"x", ",", "y"}], "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9403009076948643`*^9, 3.940300938301291*^9}},
 CellLabel->"In[840]:=",
 CellID->1241614244,ExpressionUUID->"1793e924-b4d7-404d-bb51-72eacf6cc869"],

Cell["We now check it:", "Text",
 CellChangeTimes->{{3.9403009407262907`*^9, 3.940300943382613*^9}},
 CellID->83414686,ExpressionUUID->"9041480d-1ac6-4c60-b18a-84035b6578cd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mapOnMembersFast", "[", 
  RowBox[{"f", ",", "testlst", ",", "memblist"}], "]"}]], "Input",
 CellChangeTimes->{{3.940300944987561*^9, 3.9403009522777452`*^9}},
 CellLabel->"In[842]:=",
 CellID->1006744591,ExpressionUUID->"590ece17-5650-488c-a5a2-cba455a629b0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", "1", ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "5", ",", "7", ",", "1", ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "9", "]"}], ",", 
   RowBox[{"f", "[", "13", "]"}], ",", "6", ",", "14", ",", 
   RowBox[{"f", "[", "12", "]"}], ",", "10", ",", "3", ",", "2", ",", "1", 
   ",", "14", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.940300952552931*^9},
 CellLabel->"Out[842]=",
 CellID->1583784046,ExpressionUUID->"bf56b1e1-ede7-4ebb-9e63-c269de17211f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFast", "[", 
    RowBox[{"f", ",", "powertestlst", ",", "powermemblist"}], "]"}], ";"}], "//",
   "Timing"}]], "Input",
 CellChangeTimes->{{3.940300970483459*^9, 3.940300971056776*^9}},
 CellLabel->"In[843]:=",
 CellID->67797810,ExpressionUUID->"954c1275-be57-4114-b7bd-bfea3459b8ce"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.011918`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940300971524075*^9},
 CellLabel->"Out[843]=",
 CellID->2043615553,ExpressionUUID->"d754a58a-93de-4a3e-89ec-cb11e95bc778"]
}, Open  ]],

Cell["\<\
We see that we have made a quantum improvement - our function is now 7-10 \
times faster than the best of our previous implementations. I have to add \
that a lot of it is due to our use of Dispatch. You can try removing it and \
you will see that the performance will greatly drop down. Notice by the way, \
that in this example (and for the given size of the test list), the \
difference in performance between the present best
version and the worst procedural one in 2000 times (on my machine). Of \
course, this number is not really a constant and will increase for large \
lists and decrease for smaller one. The real story is that we obtained a \
solution with a different computational complexity. This means that we will \
benefit from this solution
even more if the intersection of the two large lists is large:\
\>", "Text",
 CellChangeTimes->{{3.940300984981636*^9, 3.940300995565683*^9}},
 CellID->1400825910,ExpressionUUID->"6371eb2b-af73-4d91-b877-7226f7338058"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"powertestlst1", "=", 
   RowBox[{"Range", "[", "10000", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"powermemblist1", "=", 
   RowBox[{"Range", "[", 
    RowBox[{"5000", ",", "20000"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9403009994245787`*^9, 3.940301018095653*^9}},
 CellLabel->"In[844]:=",
 CellID->1662056232,ExpressionUUID->"9e4d80ae-d9ce-49de-b55e-57db8f57adea"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFast", "[", 
    RowBox[{"f", ",", "powertestlst1", ",", "powermemblist1"}], "]"}], "//", 
   "Short"}], "//", "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun6", "[", 
    RowBox[{"f", ",", "powertestlst1", ",", "powermemblist1"}], "]"}], "//", 
   "Short"}], "//", "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun5", "[", 
    RowBox[{"f", ",", "powertestlst1", ",", "powermemblist1"}], "]"}], "//", 
   "Short"}], "//", "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun4", "[", 
    RowBox[{"f", ",", "powertestlst1", ",", "powermemblist1"}], "]"}], "//", 
   "Short"}], "//", "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun2", "[", 
    RowBox[{"f", ",", "powertestlst1", ",", "powermemblist1"}], "]"}], "//", 
   "Short"}], "//", "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapOnMembersFun1", "[", 
    RowBox[{"f", ",", "powertestlst1", ",", "powermemblist1"}], "]"}], "//", 
   "Short"}], "//", "Timing"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.9403010311765738`*^9, 3.9403010792686453`*^9}},
 CellLabel->"In[852]:=",
 CellID->850548125,ExpressionUUID->"a5fd7ddd-e35e-41b0-9af4-28b5def91089"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.035963`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", 
      RowBox[{"\[LeftSkeleton]", "9996", "\[RightSkeleton]"}], ",", 
      RowBox[{"f", "[", "9999", "]"}], ",", 
      RowBox[{"f", "[", "10000", "]"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940301080585555*^9, 3.940301118049115*^9},
 CellLabel->"Out[852]=",
 CellID->1232519931,ExpressionUUID->"bddec272-40a1-4f53-80ba-71f898eb20b2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.005048`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", 
      RowBox[{"\[LeftSkeleton]", "9996", "\[RightSkeleton]"}], ",", 
      RowBox[{"f", "[", "9999", "]"}], ",", 
      RowBox[{"f", "[", "10000", "]"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940301080585555*^9, 3.940301118063601*^9},
 CellLabel->"Out[853]=",
 CellID->335221355,ExpressionUUID->"5e06a746-c413-4f97-8302-853c6359144f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.094106`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", 
      RowBox[{"\[LeftSkeleton]", "9996", "\[RightSkeleton]"}], ",", 
      RowBox[{"f", "[", "9999", "]"}], ",", 
      RowBox[{"f", "[", "10000", "]"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940301080585555*^9, 3.9403011181627693`*^9},
 CellLabel->"Out[854]=",
 CellID->1215707404,ExpressionUUID->"0494c845-10ef-4c45-92b4-bb0ed8d103a2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.544094`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", 
      RowBox[{"\[LeftSkeleton]", "9996", "\[RightSkeleton]"}], ",", 
      RowBox[{"f", "[", "9999", "]"}], ",", 
      RowBox[{"f", "[", "10000", "]"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940301080585555*^9, 3.94030111871395*^9},
 CellLabel->"Out[855]=",
 CellID->1234921470,ExpressionUUID->"45f6a00a-c7c2-4b84-90f4-6b0d368484c1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.72769`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", 
      RowBox[{"\[LeftSkeleton]", "9996", "\[RightSkeleton]"}], ",", 
      RowBox[{"f", "[", "9999", "]"}], ",", 
      RowBox[{"f", "[", "10000", "]"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940301080585555*^9, 3.940301119448896*^9},
 CellLabel->"Out[856]=",
 CellID->2043181682,ExpressionUUID->"65696f8d-0b6d-4cde-a6e0-1b0cf2ee27fb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5.719789`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", 
      RowBox[{"\[LeftSkeleton]", "9996", "\[RightSkeleton]"}], ",", 
      RowBox[{"f", "[", "9999", "]"}], ",", 
      RowBox[{"f", "[", "10000", "]"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940301080585555*^9, 3.940301125174251*^9},
 CellLabel->"Out[857]=",
 CellID->1491013844,ExpressionUUID->"5e762822-6f90-4941-a03e-016cd5172c9e"]
}, Open  ]],

Cell["\<\
Another application of <memberPositions>: the <unsortedIntersection> function\
\
\>", "SubitemNumbered",
 CellChangeTimes->{3.940301146556838*^9},
 CellID->482999265,ExpressionUUID->"fc389fef-feb3-4ea4-b744-1bc5c3283bf1"],

Cell[TextData[{
 "The memberPosition function that we have developed, is useful by itself, \
and can be used for other purposes as well. For instance, in the section ",
 ButtonBox["4.3.3.4",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-4-Rules-patterns-functions.nb", 
     CharacterEncoding -> "UTF-8"], "4.3.3.4"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-4-Rules-patterns-functions.\
nb"],
 " we have considered an unsorted Intersection function (that is, the \
function that returns all elements of the first list that are also members of \
the second one, but in the same order in which they are present in the first \
list, and also it does not remove the duplicate elements from the result). \
Our previous implementation was based on Cases and either MemberQ or \
Alternatives, very similarly to our functional versions of <mapOnMembers>. \
And, like them, it also can be sped up by using memberPositions. Here is the \
code:"
}], "Text",
 CellChangeTimes->{{3.940301153180395*^9, 3.940301163343069*^9}, {
  3.940301195850801*^9, 3.940301195859207*^9}},
 CellID->280461195,ExpressionUUID->"898be5ab-bffa-40cc-a236-4f864a144ecd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "unsortedIntersectionFast", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"unsortedIntersectionFast", "[", 
    RowBox[{"x_List", ",", "y_List"}], "]"}], ":=", 
   RowBox[{"x", "[", 
    RowBox[{"[", 
     RowBox[{"memberPositions", "[", 
      RowBox[{"x", ",", "y"}], "]"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940301268196414*^9, 3.94030129027359*^9}},
 CellLabel->"In[858]:=",
 CellID->1082569981,ExpressionUUID->"9d4aa64b-25b9-4fd7-9ce5-c6dacb819af2"],

Cell["\<\
Basically, all it has to do it to extract the elements from the first list, \
given the list of positions computed by <memberPositions>. Check:\
\>", "Text",
 CellChangeTimes->{{3.940301296942601*^9, 3.940301298495151*^9}},
 CellID->1172447602,ExpressionUUID->"8bd201f0-c47a-4bb5-b703-f5e3733b0bd4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"unsortedIntersectionFast", "[", 
  RowBox[{
   RowBox[{"Range", "[", 
    RowBox[{"20", ",", "1", ",", 
     RowBox[{"-", "1"}]}], "]"}], ",", 
   RowBox[{"Range", "[", "10", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940301300375121*^9, 3.940301308016423*^9}},
 CellLabel->"In[860]:=",
 CellID->141742690,ExpressionUUID->"c7e05c97-47e4-4438-8f8c-a207067d39ab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5", ",", "4", ",", "3", 
   ",", "2", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.94030130844594*^9},
 CellLabel->"Out[860]=",
 CellID->347339876,ExpressionUUID->"b2af37b4-eaa4-4ff2-ae11-ae525591b7e6"]
}, Open  ]],

Cell["\<\
We could revisit our previous implementation and convince ourselves that this \
one is much superior in terms of efficiency.\
\>", "Text",
 CellChangeTimes->{{3.9403013148377857`*^9, 3.940301316478253*^9}},
 CellID->880743386,ExpressionUUID->"3516bdde-0e73-428b-a506-6457a28183cf"],

Cell["Conclusions", "ItemNumbered",
 CellChangeTimes->{3.94030132274304*^9},
 CellID->1967444822,ExpressionUUID->"24fc1c87-824c-4039-9d05-77c22df72dc7"],

Cell["\<\
As I mention in the Preface, in my opinion Mathematica programming is divided \
in 3 layers in terms of efficiency: scripting, intermediate and system \
layers. This section is a good illustration of this statement: solutions in \
the first part (procedural) are \"scripting\" in the sense that they are \
completely straightforward. Also, they are slow, and can practically be used \
only on very small lists. The unfortunate thing is that they
  are also the ones which are most likely to first come to mind for people \
coming from the procedural   background. Solutions in the second part \
(functional, using Intersection, MemberQ or Alternatives)   represent an \
\"intermediate\" level and are generally not bad, and also easy to write for \
anybody with some Mathematica programming experience. For many purposes they \
can be good enough. \
\>", "Text",
 CellChangeTimes->{{3.940301328571144*^9, 3.940301349351967*^9}, {
  3.940301537111257*^9, 3.94030153713242*^9}, {3.940740416355301*^9, 
  3.940740416442134*^9}},
 CellID->2039410495,ExpressionUUID->"f60e35f0-10fa-4f54-b899-6f6cc7ecb76d"],

Cell["\<\
The final solution which is based on boosted MapAt and memberPositions \
functions, represents a  \"system\" level (if there are further ways to speed \
up this code within Mathematica, I am not aware of them), and can perhaps be \
packaged to make an extension of Mathematica language. While not as fast as  \
the analogous builit-in probably would be, it should be fast enough for most \
purposes for which Mathematica is generally acceptable in terms of \
performance. In terms of development speed, it takes somewhat   longer to get \
the \"system level\" function done, mainly to figure out the idea of the \
implementation. Perhaps, with experience it takes about couple of minutes to \
make any of the functional versions work (in fact, faster than the procedural \
ones since the code is shorter) and about half an hour to get the structural \
version done (well, at least in my experience. Perhaps it can be done much \
faster still). But given the level of generality of the problem in question, \
I think this is acceptable. \
\>", "Text",
 CellChangeTimes->{{3.940301328571144*^9, 3.940301406833477*^9}, {
   3.940740416459841*^9, 3.940740416546693*^9}, 3.9407408505969973`*^9},
 CellID->88197532,ExpressionUUID->"86e128fc-21fb-45c0-bde3-6a7aa0ed8ce5"],

Cell["\<\
Returning to the problem in question, the final comment is that in cases when \
the mapped function is very computationally intensive (so that the \
computation of this function becomes the most expensive operation), the \
difference in efficiency between the various solutions we have discussed will \
matter less or much less. So, it makes sense to perform this kind of analysis \
before going say from the \"intermediate\" to \"system\" levels in one' s \
implementations, because it may be just not worth it for a given problem.\
\>", "Text",
 CellChangeTimes->{{3.940301328571144*^9, 3.9403014284534283`*^9}, 
   3.940740416564287*^9},
 CellID->1613787488,ExpressionUUID->"4a63b28e-bc9b-4eec-b9ad-b5f102892b4e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Summary", "Subsection",
 CellChangeTimes->{3.940301443093145*^9},
 CellID->1770714766,ExpressionUUID->"92479a42-4f42-4937-a31b-8f4bbfa27449"],

Cell["\<\
In this chapter we went through a lot of code of type common to see in real \
Mathematica programs. My goal was to illustrate several things, such as the \
typically large number of ways to solve a given problem in Mathematica, and \
the relative efficiency of these solutions. The rule of thumb is that the \
procedural programming style is more likely to produce inefficient solutions, \
the functional programming style is
usually more efficient (when applied with some thought), and the programming \
based on the structural operations is typically the most efficient style, \
which sometimes can improve performance by an order of magnitude or lead to a \
solution of different computations complexity altogether.\
\>", "Text",
 CellChangeTimes->{{3.940301452000668*^9, 3.9403014665126038`*^9}},
 CellID->574692036,ExpressionUUID->"ff6121dd-4ccd-4c60-802e-fb790fe70c96"],

Cell["\<\
Also, one could naively expect that the code size of the best solution should \
be larger than that of the worst one (because the former has to be more \
sophisticated than the latter). This is generally not so. The best solution \
is the one which achieves the closest correspondence between the structure of \
the problem and the efficient structures and operations built in Mathematica. \
But due to a very high level of the language, this does not necessarily imply \
longer code, and often in fact implies just the opposite.\
\>", "Text",
 CellChangeTimes->{{3.940301452000668*^9, 3.940301476773489*^9}},
 CellID->656309146,ExpressionUUID->"9532144f-8d45-4dae-beb2-d632ac44f90f"],

Cell["\<\
We have also seen that many of our best solutions resulted from the \
complementary use of several different programming styles, such as structural \
operations, functional programming, rule-based programming (especially in \
combination with hashing through Dispatch). This is perhaps where the most \
interesting and efficient solutions in Mathematica should be, since this \
possibility to mix different programming styles is
one of the unique features of Mathematica system.\
\>", "Text",
 CellChangeTimes->{{3.940301452000668*^9, 3.940301488173904*^9}},
 CellID->1262385060,ExpressionUUID->"aef9d5da-78b9-4fe4-8ca1-82ea42f9a116"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1024, 1099},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (July 16, 2024)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "BookToolsStyles.nb", 
  CharacterEncoding -> "UTF-8"],
ExpressionUUID->"b0d2f8d4-b3fb-4725-8445-6e6aaf228bf8"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[554, 20, 3588, 93, 130, "Text",ExpressionUUID->"8f0ad322-7839-4f6c-add5-ef923908f86c",
 CellID->912160115],
Cell[CellGroupData[{
Cell[4167, 117, 384, 10, 176, "Section",ExpressionUUID->"5d1b78af-ff2c-48d5-855c-33a18e4746f5",
 CounterAssignments->{{"Section", 5}},
 CellID->1010546796],
Cell[CellGroupData[{
Cell[4576, 131, 152, 2, 68, "Subsection",ExpressionUUID->"b7d92196-4a2f-403a-876f-eed5c087fb20",
 CellID->1959319896],
Cell[4731, 135, 963, 14, 281, "Text",ExpressionUUID->"3f0a6e16-1e9c-4326-90ff-b92ab307d12e",
 CellID->1000423627],
Cell[5697, 151, 436, 7, 134, "Text",ExpressionUUID->"489343ef-f1dd-4e71-a49c-b2ed719646e2",
 CellID->569325140]
}, Open  ]],
Cell[CellGroupData[{
Cell[6170, 163, 192, 2, 68, "Subsection",ExpressionUUID->"bc29bc97-055f-4804-9b8f-0188ba0d09dd",
 CellID->108855381],
Cell[6365, 167, 153, 2, 38, "ItemNumbered",ExpressionUUID->"910cab5d-c202-467a-8dd4-6f841b446756",
 CellID->2023804870],
Cell[6521, 171, 379, 7, 75, "Text",ExpressionUUID->"348deed2-1133-4a4a-b5a8-2687facd79dc",
 CellID->94965257],
Cell[6903, 180, 159, 2, 38, "ItemNumbered",ExpressionUUID->"161c2f91-0a3c-4812-859f-1859d7cd0627",
 CellID->1838734200],
Cell[7065, 184, 426, 7, 134, "Text",ExpressionUUID->"b88e5878-7564-43bc-bd2d-a28d101a7deb",
 CellID->1316019070],
Cell[7494, 193, 533, 15, 54, "Input",ExpressionUUID->"b8defe13-fa06-4821-b893-09428f3fbe27",
 CellID->1399417905],
Cell[8030, 210, 166, 2, 38, "ItemNumbered",ExpressionUUID->"5c2d58d6-6afb-424f-a32b-676ec3fd570b",
 CellID->242044473],
Cell[8199, 214, 181, 2, 45, "Text",ExpressionUUID->"329957fb-b89e-4ce5-afbe-f426ee5a3dc0",
 CellID->707430293],
Cell[8383, 218, 1561, 44, 172, "Input",ExpressionUUID->"49957905-122f-491a-b02c-2dfdd1ee62d2",
 CellID->14371005],
Cell[9947, 264, 190, 2, 45, "Text",ExpressionUUID->"1619288f-6566-43fa-a060-784ae01cb3ed",
 CellID->1495119065],
Cell[CellGroupData[{
Cell[10162, 270, 273, 6, 31, "Input",ExpressionUUID->"4c5b1d3f-c551-4760-b6c0-49fadfda4b6a",
 CellID->1762609047],
Cell[10438, 278, 227, 5, 45, "Output",ExpressionUUID->"8ed7ef43-aed8-4bae-8945-f01fc3f69609",
 CellID->571718778]
}, Open  ]],
Cell[CellGroupData[{
Cell[10702, 288, 270, 6, 31, "Input",ExpressionUUID->"ffb8bb34-4ee4-430d-9f7c-186a92cd705a",
 CellID->943540150],
Cell[10975, 296, 227, 5, 45, "Output",ExpressionUUID->"fbc95bde-3798-45ce-830d-a250db11534e",
 CellID->1720056267]
}, Open  ]],
Cell[11217, 304, 608, 10, 163, "Text",ExpressionUUID->"c1d39276-a9f2-4cb0-9d69-268803855d2b",
 CellID->21131561],
Cell[11828, 316, 167, 2, 38, "ItemNumbered",ExpressionUUID->"4c69c28f-dd1d-4d1f-b2df-4a5440527dc8",
 CellID->516251667],
Cell[11998, 320, 397, 7, 104, "Text",ExpressionUUID->"a7cc2704-5254-4b41-b706-c07f947b3301",
 CellID->1168453781],
Cell[12398, 329, 775, 21, 78, "Input",ExpressionUUID->"dd1e0c02-475b-4f7d-97f6-6a1ca3362ac0",
 CellID->1722503338],
Cell[13176, 352, 224, 5, 45, "Text",ExpressionUUID->"4803784b-ff4d-474d-8c25-5fce242c08e4",
 CellID->952415852],
Cell[CellGroupData[{
Cell[13425, 361, 265, 5, 31, "Input",ExpressionUUID->"84d99791-211f-485c-902e-a8cf2d1fcb99",
 CellID->1212403070],
Cell[13693, 368, 230, 5, 45, "Output",ExpressionUUID->"435c001c-30d8-49a8-80a3-96209155392a",
 CellID->1391677876]
}, Open  ]],
Cell[CellGroupData[{
Cell[13960, 378, 264, 5, 31, "Input",ExpressionUUID->"334fb5c3-b873-4420-99c9-95be995892e0",
 CellID->1324609961],
Cell[14227, 385, 227, 5, 45, "Output",ExpressionUUID->"594c44c3-972c-4143-9db2-37f72afdac0e",
 CellID->1795408283]
}, Open  ]],
Cell[14469, 393, 393, 6, 104, "Text",ExpressionUUID->"93e7e528-0428-4218-bec4-2f9693d91c4e",
 CellID->930760198],
Cell[14865, 401, 289, 5, 75, "Text",ExpressionUUID->"967a1809-cd20-4558-9448-0a95c3433b4a",
 CellID->819616407],
Cell[15157, 408, 1120, 31, 125, "Input",ExpressionUUID->"5f7ca1e2-5a36-4cab-aceb-44770fba0131",
 CellID->617552918],
Cell[16280, 441, 209, 4, 45, "Text",ExpressionUUID->"3db18147-c863-494e-bcd2-fcb2d727fddd",
 CellID->1064051784],
Cell[CellGroupData[{
Cell[16514, 449, 268, 5, 31, "Input",ExpressionUUID->"ab6bbc66-8eb8-4184-aa3f-a0034b159744",
 CellID->294527570],
Cell[16785, 456, 251, 5, 45, "Output",ExpressionUUID->"16961559-235d-48ef-b789-1d5794b1913d",
 CellID->347358835]
}, Open  ]],
Cell[CellGroupData[{
Cell[17073, 466, 267, 5, 31, "Input",ExpressionUUID->"9ded3635-f603-4cd8-b128-bfd9c75c2e32",
 CellID->2024654646],
Cell[17343, 473, 249, 5, 45, "Output",ExpressionUUID->"1cf40e3e-7aa9-4220-af78-3c7af33bf4a8",
 CellID->1840301802]
}, Open  ]],
Cell[17607, 481, 190, 2, 38, "ItemNumbered",ExpressionUUID->"582957bd-1a8e-45af-884a-9168b85961e5",
 CellID->1892902120],
Cell[17800, 485, 413, 7, 104, "Text",ExpressionUUID->"3fce76d2-90df-45fd-ac0e-cc9781f88206",
 CellID->1183184182],
Cell[18216, 494, 229, 4, 45, "Text",ExpressionUUID->"6eeb3dec-86f5-444b-8403-1cd4f49eb954",
 CellID->2134421011],
Cell[18448, 500, 840, 23, 78, "Input",ExpressionUUID->"7650b531-f8a9-406a-af86-b783ef8d4e1c",
 CellID->591270972],
Cell[19291, 525, 470, 10, 134, "Text",ExpressionUUID->"eaa12320-8d53-4d85-98ac-4ce0f80259ce",
 CellID->2065715614],
Cell[CellGroupData[{
Cell[19786, 539, 367, 8, 54, "Input",ExpressionUUID->"8ca394ab-2c8a-4018-9d13-66a0b0c7f4a6",
 CellID->57276738],
Cell[20156, 549, 228, 5, 45, "Output",ExpressionUUID->"3259a8da-ebea-4936-8af6-72716ae1d2c9",
 CellID->1077156471],
Cell[20387, 556, 228, 5, 45, "Output",ExpressionUUID->"048d44a7-9169-499d-99cd-79fcc4359895",
 CellID->481663887]
}, Open  ]],
Cell[20630, 564, 201, 2, 45, "Text",ExpressionUUID->"bcc96fca-0f6c-4c6b-88a0-eea35270e2c7",
 CellID->880780872],
Cell[20834, 568, 301, 5, 75, "Text",ExpressionUUID->"1f23d26c-2362-42c6-a0a6-c9ad09c09cbc",
 CellID->1225745698],
Cell[21138, 575, 491, 8, 134, "Text",ExpressionUUID->"01416f04-6587-4f54-a0ee-503f93261cfc",
 CellID->198213662],
Cell[21632, 585, 1016, 28, 172, "Input",ExpressionUUID->"edc36498-4d52-46a7-b654-448124cd9e12",
 CellID->2016417167],
Cell[22651, 615, 162, 2, 45, "Text",ExpressionUUID->"f593e105-1d97-4756-b190-0264004c1843",
 CellID->29844051],
Cell[CellGroupData[{
Cell[22838, 621, 367, 8, 54, "Input",ExpressionUUID->"d5b6e3db-4f94-49bf-a597-1758be486aea",
 CellID->1225275406],
Cell[23208, 631, 227, 5, 45, "Output",ExpressionUUID->"9707a216-c2c8-4d1f-9581-4095ddd22818",
 CellID->1499439679],
Cell[23438, 638, 226, 5, 45, "Output",ExpressionUUID->"1cb773a9-9bd8-439a-930e-0b2f2fdca8cf",
 CellID->362087408]
}, Open  ]],
Cell[23679, 646, 239, 4, 45, "Text",ExpressionUUID->"5d5e78cd-a7d5-4017-b2b6-4673bd365be8",
 CellID->1911213261],
Cell[23921, 652, 379, 6, 104, "Text",ExpressionUUID->"bc7592bd-e7b6-43d1-84ee-073e531c7703",
 CellID->1849681636],
Cell[24303, 660, 1072, 32, 125, "Input",ExpressionUUID->"baacbc27-fbb5-49b8-8733-cb867f35beb7",
 CellID->361793307],
Cell[25378, 694, 165, 2, 45, "Text",ExpressionUUID->"1443dbe5-4226-4693-8b1d-d7614f580463",
 CellID->1667754933],
Cell[CellGroupData[{
Cell[25568, 700, 377, 9, 54, "Input",ExpressionUUID->"7df977c8-ae4f-4a0e-ae28-868a2810c5d0",
 CellID->1000598287],
Cell[25948, 711, 278, 6, 45, "Output",ExpressionUUID->"da40436b-bd94-4158-82a6-c81b8bfa9956",
 CellID->1099145471],
Cell[26229, 719, 277, 6, 45, "Output",ExpressionUUID->"3811c05f-7937-43d7-aea2-091d015ca776",
 CellID->683599603]
}, Open  ]],
Cell[26521, 728, 191, 2, 45, "Text",ExpressionUUID->"c8b4d3fa-795d-44af-9e56-a33c09941242",
 CellID->221016171],
Cell[26715, 732, 555, 9, 163, "Text",ExpressionUUID->"6beb0b96-cbe0-43df-ad7e-c80e2039a36d",
 CellID->212101718],
Cell[27273, 743, 1372, 39, 148, "Input",ExpressionUUID->"6e75c08d-26c9-47c4-840b-436f2b28a006",
 CellID->886161025],
Cell[28648, 784, 166, 2, 45, "Text",ExpressionUUID->"bd351113-e72f-474b-a0fc-b083abfa48dd",
 CellID->1175403448],
Cell[CellGroupData[{
Cell[28839, 790, 381, 9, 54, "Input",ExpressionUUID->"4b4e5531-0f93-484f-9ac6-d1c38447a7d3",
 CellID->1524614588],
Cell[29223, 801, 227, 5, 45, "Output",ExpressionUUID->"451df778-e481-4a35-b221-c9939c6268b0",
 CellID->1866906653],
Cell[29453, 808, 226, 5, 45, "Output",ExpressionUUID->"217cb0b1-a476-43a2-83f5-c0d2333e02d0",
 CellID->216550654]
}, Open  ]],
Cell[29694, 816, 312, 5, 75, "Text",ExpressionUUID->"86869cbb-5f46-48ef-a02c-10678c5a7ce7",
 CellID->103328528],
Cell[30009, 823, 1414, 41, 125, "Input",ExpressionUUID->"7d6d454f-6a4e-44c8-9b8f-a6daef017d9f",
 CellID->54136390],
Cell[31426, 866, 371, 6, 104, "Text",ExpressionUUID->"f8660dce-46bf-4516-af1f-ac9c914dd687",
 CellID->440310792],
Cell[CellGroupData[{
Cell[31822, 876, 379, 9, 54, "Input",ExpressionUUID->"aaeccdd0-e124-4321-9da7-dee21d0abbed",
 CellID->1450079179],
Cell[32204, 887, 228, 5, 45, "Output",ExpressionUUID->"16ffce05-685c-4b3b-ae6e-6c3b24f81e85",
 CellID->1016200839],
Cell[32435, 894, 227, 5, 45, "Output",ExpressionUUID->"192071bc-ec5a-4878-a067-66e312ba3d16",
 CellID->350056482]
}, Open  ]],
Cell[32677, 902, 341, 6, 75, "Text",ExpressionUUID->"164a3bb0-1bbc-4563-843f-5f4ba4857a10",
 CellID->789110233],
Cell[33021, 910, 457, 7, 134, "Text",ExpressionUUID->"662f056b-ef47-44ad-bb11-352e36f566ff",
 CellID->1161466078],
Cell[33481, 919, 1318, 39, 125, "Input",ExpressionUUID->"a1e51ff9-bae0-4365-a112-c35ff34a6a77",
 CellID->134021716],
Cell[34802, 960, 155, 2, 45, "Text",ExpressionUUID->"4757ca13-47f7-4f72-b2cd-853adae83eb8",
 CellID->1824970010],
Cell[CellGroupData[{
Cell[34982, 966, 379, 9, 54, "Input",ExpressionUUID->"f0459103-0137-4153-8300-23a94cd95dcb",
 CellID->1909511616],
Cell[35364, 977, 230, 5, 45, "Output",ExpressionUUID->"4c4c7e4d-e22f-4341-aac1-f4983d176438",
 CellID->1922046012],
Cell[35597, 984, 229, 5, 45, "Output",ExpressionUUID->"2cc629b3-5231-4a4b-b7b8-0e0fe248d70f",
 CellID->1378305510]
}, Open  ]],
Cell[35841, 992, 293, 5, 75, "Text",ExpressionUUID->"24d77820-9575-437c-881d-04650d831712",
 CellID->188546317],
Cell[36137, 999, 359, 6, 75, "Text",ExpressionUUID->"35bb2240-5c6e-4b37-b12c-931876f72b52",
 CellID->928419710],
Cell[36499, 1007, 1277, 36, 125, "Input",ExpressionUUID->"4882bb7e-dc7f-48b6-a97b-9c3d661c668f",
 CellID->333886868],
Cell[37779, 1045, 154, 2, 45, "Text",ExpressionUUID->"c8146e29-9bd5-4b17-8df0-49096a59c61b",
 CellID->980039122],
Cell[CellGroupData[{
Cell[37958, 1051, 378, 9, 54, "Input",ExpressionUUID->"ee985f97-9c65-4970-ad37-e3d8e7685838",
 CellID->317950964],
Cell[38339, 1062, 252, 5, 45, "Output",ExpressionUUID->"e4eff240-a6f0-4324-ba9e-7a8b8a733d01",
 CellID->2027040801],
Cell[38594, 1069, 248, 5, 45, "Output",ExpressionUUID->"d2312c5f-120e-411c-a638-f22ea0010dc8",
 CellID->794166399]
}, Open  ]],
Cell[38857, 1077, 564, 9, 163, "Text",ExpressionUUID->"32227e19-fc7f-4fca-b861-de68c9331df8",
 CellID->943801888],
Cell[39424, 1088, 1012, 19, 163, "Text",ExpressionUUID->"14333894-1906-49ce-b27f-e0d19f4219ca",
 CellID->969364365],
Cell[40439, 1109, 461, 7, 134, "Text",ExpressionUUID->"03e97e98-db76-4589-a7e6-59c53cac228f",
 CellID->1124044582],
Cell[40903, 1118, 154, 2, 38, "ItemNumbered",ExpressionUUID->"28f266a8-2b9c-4469-9ff3-e0be89ee594a",
 CellID->244108529],
Cell[41060, 1122, 1293, 18, 399, "Text",ExpressionUUID->"fea4d3c2-51f2-4665-a506-250d72b4ab08",
 CellID->1038281133],
Cell[42356, 1142, 832, 13, 222, "Text",ExpressionUUID->"2ea8dcb1-3fee-403b-99cb-0b99ecae10d5",
 CellID->190382796]
}, Open  ]],
Cell[CellGroupData[{
Cell[43225, 1160, 183, 2, 68, "Subsection",ExpressionUUID->"77db5185-0713-422c-a707-aa2848732f66",
 CellID->584781191],
Cell[43411, 1164, 155, 2, 38, "ItemNumbered",ExpressionUUID->"e93cc18e-c694-408b-a555-2d284fca0179",
 CellID->1532308465],
Cell[43569, 1168, 615, 9, 193, "Text",ExpressionUUID->"242e2f33-a9b5-484e-ba87-536279859202",
 CellID->884476431],
Cell[44187, 1179, 155, 2, 38, "ItemNumbered",ExpressionUUID->"91868b5d-fa33-4459-b613-a42b67e8f607",
 CellID->1503335422],
Cell[CellGroupData[{
Cell[44367, 1185, 527, 15, 31, "Input",ExpressionUUID->"eee87ce2-f9f9-4b03-abc2-b20049a0e86a",
 CellID->1948876291],
Cell[44897, 1202, 763, 20, 133, "Output",ExpressionUUID->"3ec57dc5-a020-42ad-96e6-07b4b341f9f7",
 CellID->502255041]
}, Open  ]],
Cell[45675, 1225, 484, 13, 31, "Input",ExpressionUUID->"c0d64e03-8a14-43fe-a77e-fa52f5c37638",
 CellID->1386492739],
Cell[46162, 1240, 219, 3, 38, "ItemNumbered",ExpressionUUID->"60ee8c09-37d1-4c86-a434-0aa409269478",
 CellID->1799713437],
Cell[46384, 1245, 162, 2, 31, "SubitemNumbered",ExpressionUUID->"2706bd1b-13fd-495c-a97a-4c78c3bac8fe",
 CellID->476567664],
Cell[46549, 1249, 445, 8, 104, "Text",ExpressionUUID->"18c10f69-eb7a-4e44-a8de-c25f7bb44b0c",
 CellID->1706209185],
Cell[46997, 1259, 279, 5, 75, "Text",ExpressionUUID->"263cc4ea-4610-4bd0-9d89-ca8c2eb3acee",
 CellID->2018030659],
Cell[47279, 1266, 624, 10, 134, "Text",ExpressionUUID->"c03ff0bf-7077-4d47-8602-6951281d8d3d",
 CellID->2095762153],
Cell[47906, 1278, 1489, 42, 171, "Input",ExpressionUUID->"b309a479-c5f5-426e-89aa-130fb55f59b1",
 CellID->2047887885],
Cell[49398, 1322, 435, 7, 75, "Text",ExpressionUUID->"69829000-4a39-463c-94b0-3e897b5dee5e",
 CellID->2033621358],
Cell[CellGroupData[{
Cell[49858, 1333, 353, 9, 31, "Input",ExpressionUUID->"2e5e6e2a-5143-4d92-bdf4-22e0f7e3885f",
 CellID->932632847],
Cell[50214, 1344, 217, 5, 45, "Output",ExpressionUUID->"89e6b99b-50a3-4be3-bda1-9fbd8ba1f614",
 CellID->283785028]
}, Open  ]],
Cell[50446, 1352, 385, 7, 104, "Text",ExpressionUUID->"18f9e499-f8f0-43e1-a483-2f491ddc9870",
 CellID->760326767],
Cell[50834, 1361, 977, 26, 125, "Input",ExpressionUUID->"4b4ac532-6101-459d-8d6d-0388dcd20a69",
 CellID->423536436],
Cell[51814, 1389, 171, 2, 45, "Text",ExpressionUUID->"52af4148-472f-4e5d-8583-8e6bfa464d3a",
 CellID->1551046384],
Cell[CellGroupData[{
Cell[52010, 1395, 599, 17, 31, "Input",ExpressionUUID->"310c7b0f-00cc-4c09-83dc-74d5bf36e0d7",
 CellID->637445793],
Cell[52612, 1414, 372, 11, 45, "Output",ExpressionUUID->"a0c9172b-b8f3-4b08-8eb5-f5089c66c1c0",
 CellID->878443412]
}, Open  ]],
Cell[52999, 1428, 608, 9, 193, "Text",ExpressionUUID->"1bd1a39a-0232-4a69-925e-6cee9a39e0d0",
 CellID->48352359],
Cell[53610, 1439, 425, 7, 104, "Text",ExpressionUUID->"8ccf72c3-691a-49b2-a24e-bc56559b6a9b",
 CellID->369839750],
Cell[54038, 1448, 1053, 30, 125, "Input",ExpressionUUID->"90735023-ff14-4635-b5d6-165146071a45",
 CellID->986297449],
Cell[55094, 1480, 898, 25, 78, "Input",ExpressionUUID->"a629fa86-33ab-452b-8592-4739d2be0238",
 CellID->2088272396],
Cell[55995, 1507, 170, 2, 45, "Text",ExpressionUUID->"142df520-e028-42e6-9d94-b622df22c7e0",
 CellID->1080074603],
Cell[CellGroupData[{
Cell[56190, 1513, 292, 6, 31, "Input",ExpressionUUID->"8f93e891-1ec4-4774-907f-ac287008d5ba",
 CellID->1204570793],
Cell[56485, 1521, 845, 27, 45, "Output",ExpressionUUID->"a1a930db-9c0d-4cc7-8eb6-31db5490b7cf",
 CellID->2014318372]
}, Open  ]],
Cell[CellGroupData[{
Cell[57367, 1553, 291, 6, 31, "Input",ExpressionUUID->"57e53467-df58-46a5-8699-723b322160bb",
 CellID->685086362],
Cell[57661, 1561, 846, 27, 45, "Output",ExpressionUUID->"4e62b275-b117-4d40-a6bc-b72ae0c4e8ff",
 CellID->864755520]
}, Open  ]],
Cell[58522, 1591, 521, 8, 134, "Text",ExpressionUUID->"495f8ca4-9f10-404e-9958-fcd4bf07de27",
 CellID->1424577508],
Cell[59046, 1601, 2062, 60, 242, "Input",ExpressionUUID->"9f1b554c-4bf1-4fcf-945d-feb291b3afce",
 CellID->2103199597],
Cell[61111, 1663, 359, 7, 75, "Text",ExpressionUUID->"ded779d9-d058-4822-bdff-c8d1f35d66b6",
 CellID->1574276907],
Cell[CellGroupData[{
Cell[61495, 1674, 361, 9, 31, "Input",ExpressionUUID->"9a0df597-0469-4945-b024-0485744690b1",
 CellID->1155207388],
Cell[61859, 1685, 372, 11, 45, "Output",ExpressionUUID->"74d2e256-ffb0-4c93-84cd-16980babe1ec",
 CellID->1755250652]
}, Open  ]],
Cell[CellGroupData[{
Cell[62268, 1701, 358, 9, 31, "Input",ExpressionUUID->"4b90fefe-80c9-4ce6-b894-d42b5f4a454d",
 CellID->860991512],
Cell[62629, 1712, 432, 13, 45, "Output",ExpressionUUID->"604a0e1a-6a9d-4ccf-aeb6-ed2e14a89560",
 CellID->1997649708]
}, Open  ]],
Cell[63076, 1728, 479, 8, 134, "Text",ExpressionUUID->"b46a0d7e-b712-4c53-b5b4-1382dfca7789",
 CellID->739305158],
Cell[63558, 1738, 1605, 43, 171, "Input",ExpressionUUID->"3e78adf3-1c87-486b-8f9c-ce811acdb587",
 CellID->533405988],
Cell[65166, 1783, 610, 10, 163, "Text",ExpressionUUID->"ab8c44d7-23a2-442f-b58f-12a3bcd947c2",
 CellID->1870790414],
Cell[CellGroupData[{
Cell[65801, 1797, 233, 4, 31, "Input",ExpressionUUID->"98203061-af6a-47c5-94db-3a101c93fc20",
 CellID->1382868540],
Cell[66037, 1803, 764, 20, 133, "Output",ExpressionUUID->"fe23e0aa-4bae-40a3-8dff-6f7fd7b09288",
 CellID->1130559047]
}, Open  ]],
Cell[CellGroupData[{
Cell[66838, 1828, 736, 20, 54, "Input",ExpressionUUID->"8882f904-b633-442a-bb95-2ffd040d92d7",
 CellID->875370011],
Cell[67577, 1850, 669, 17, 45, "Output",ExpressionUUID->"1b8b8e3a-7bd6-4c44-933d-3e980b1ebd57",
 CellID->1645756655]
}, Open  ]],
Cell[CellGroupData[{
Cell[68283, 1872, 280, 5, 31, "Input",ExpressionUUID->"fd277d7b-a7bf-4b22-adfa-4bc3bbbc9593",
 CellID->642727225],
Cell[68566, 1879, 770, 21, 68, "Output",ExpressionUUID->"7936daf7-d2f3-4602-9a99-e05339986cd7",
 CellID->1338280305]
}, Open  ]],
Cell[69351, 1903, 524, 8, 163, "Text",ExpressionUUID->"a07da7e7-fac2-47cb-a3fe-a1c828d158fe",
 CellID->2100164350],
Cell[69878, 1913, 534, 9, 134, "Text",ExpressionUUID->"57c72bb9-b86e-4172-af9f-e2ec258e597a",
 CellID->909360441],
Cell[70415, 1924, 1587, 43, 171, "Input",ExpressionUUID->"6a3b6378-d1e9-4f4e-a606-b8cb590bcf46",
 CellID->357202218],
Cell[72005, 1969, 522, 8, 134, "Text",ExpressionUUID->"ed1c5725-69b3-47d8-9c3f-293d2b08bdae",
 CellID->1274744311],
Cell[CellGroupData[{
Cell[72552, 1981, 623, 17, 31, "Input",ExpressionUUID->"825eb4e1-04b1-4d2f-a1e3-bc831f462733",
 CellID->877926676],
Cell[73178, 2000, 451, 12, 45, "Output",ExpressionUUID->"6c2e8d08-3d5f-4686-8420-cd85c4921418",
 CellID->986329548]
}, Open  ]],
Cell[CellGroupData[{
Cell[73666, 2017, 279, 5, 31, "Input",ExpressionUUID->"db4354ab-e3bd-4ea7-b6e4-f79fa3ea7a62",
 CellID->266650723],
Cell[73948, 2024, 770, 21, 68, "Output",ExpressionUUID->"b751cece-7a61-45df-af2a-bde55bf3bf5b",
 CellID->1391325198]
}, Open  ]],
Cell[74733, 2048, 338, 6, 75, "Text",ExpressionUUID->"041ec3f3-ddcc-4224-b10e-33f3ee6044b8",
 CellID->754438472],
Cell[75074, 2056, 850, 24, 101, "Input",ExpressionUUID->"d7f1e5c6-632f-4f18-b142-b411770ad8b7",
 CellID->1528769028],
Cell[75927, 2082, 249, 5, 75, "Text",ExpressionUUID->"5031dcec-6636-4b38-b1a9-56bb37f46c89",
 CellID->3123283],
Cell[CellGroupData[{
Cell[76201, 2091, 616, 17, 31, "Input",ExpressionUUID->"39274697-231f-4ce5-9764-11f8cb69e453",
 CellID->1583909104],
Cell[76820, 2110, 932, 28, 68, "Output",ExpressionUUID->"0949cb58-d6a3-4b8e-acbe-6010b32f4679",
 CellID->1375462375]
}, Open  ]],
Cell[CellGroupData[{
Cell[77789, 2143, 274, 5, 31, "Input",ExpressionUUID->"4b98ca5f-69d8-4631-95c4-983a00f2fed2",
 CellID->1034327509],
Cell[78066, 2150, 1757, 55, 115, "Output",ExpressionUUID->"7e6f90fe-2618-4fb9-b3a7-00c335eca7c4",
 CellID->800417439]
}, Open  ]],
Cell[79838, 2208, 390, 6, 104, "Text",ExpressionUUID->"68303708-c478-4568-80f2-d4385a91aede",
 CellID->778332465],
Cell[80231, 2216, 164, 2, 31, "SubitemNumbered",ExpressionUUID->"4c0815cc-61b6-4f4b-b7f2-ed52d4c18e2c",
 CellID->2128541601],
Cell[80398, 2220, 236, 5, 75, "Text",ExpressionUUID->"9615ac8d-142f-47df-8fb2-f9921b2e607e",
 CellID->1616096281],
Cell[CellGroupData[{
Cell[80659, 2229, 345, 8, 31, "Input",ExpressionUUID->"03bb3ade-9407-447f-9b6c-a837d1605430",
 CellID->492067659],
Cell[81007, 2239, 575, 16, 45, "Output",ExpressionUUID->"ab7f4879-9535-40a2-a27b-e2d050916027",
 CellID->705483355]
}, Open  ]],
Cell[CellGroupData[{
Cell[81619, 2260, 345, 8, 31, "Input",ExpressionUUID->"3e28b664-83dd-49cd-8ece-228ee310342e",
 CellID->1420852270],
Cell[81967, 2270, 554, 16, 45, "Output",ExpressionUUID->"b0de74c7-bfdf-4a03-84ff-ecdff57ca0b1",
 CellID->619734695]
}, Open  ]],
Cell[CellGroupData[{
Cell[82558, 2291, 343, 8, 31, "Input",ExpressionUUID->"170e544f-bf3e-425f-acb2-73396a953c3e",
 CellID->101762264],
Cell[82904, 2301, 594, 18, 45, "Output",ExpressionUUID->"29472e66-c51d-4091-b448-db12a222dc4e",
 CellID->1359976015]
}, Open  ]],
Cell[83513, 2322, 213, 2, 45, "Text",ExpressionUUID->"b20ab214-d39c-4cd8-b265-20aad4e1a187",
 CellID->984322342],
Cell[83729, 2326, 351, 6, 104, "Text",ExpressionUUID->"553bfab5-6c14-4816-a714-76831539b5ab",
 CellID->796028566],
Cell[CellGroupData[{
Cell[84105, 2336, 574, 16, 54, "Input",ExpressionUUID->"6947c225-3aeb-45c7-a762-63ebb9de248e",
 CellID->190868931],
Cell[84682, 2354, 300, 8, 45, "Output",ExpressionUUID->"6ade43c8-8537-4eaf-b2b4-c1aa7b3e3f75",
 CellID->930725372]
}, Open  ]],
Cell[84997, 2365, 166, 2, 38, "ItemNumbered",ExpressionUUID->"1d7c6ccd-f0a8-4d20-9ded-ad1d1c314ff3",
 CellID->179721409],
Cell[85166, 2369, 163, 2, 31, "SubitemNumbered",ExpressionUUID->"4c5de15d-1dee-4ef5-aa7a-ece49bec6b68",
 CellID->1215713381],
Cell[85332, 2373, 635, 9, 193, "Text",ExpressionUUID->"4128a92b-5871-4af2-a98e-9e52c7b80682",
 CellID->1335376909],
Cell[85970, 2384, 2604, 74, 265, "Input",ExpressionUUID->"378e247d-cbce-4d41-8279-9b99b498ae7a",
 CellID->936217721],
Cell[88577, 2460, 170, 2, 45, "Text",ExpressionUUID->"9494ad19-7cd8-4493-9efd-55165d381e01",
 CellID->1091835804],
Cell[CellGroupData[{
Cell[88772, 2466, 232, 4, 31, "Input",ExpressionUUID->"2790e7da-b5d5-4a41-a285-6787ba89339f",
 CellID->790447139],
Cell[89007, 2472, 766, 20, 133, "Output",ExpressionUUID->"d9072d06-8ac6-4673-8972-d010b26b7641",
 CellID->1042535283]
}, Open  ]],
Cell[CellGroupData[{
Cell[89810, 2497, 324, 7, 31, "Input",ExpressionUUID->"1e661da4-14b0-425d-bf8c-a119f28b5e06",
 CellID->609896957],
Cell[90137, 2506, 240, 5, 45, "Output",ExpressionUUID->"1689f7b4-8f09-4f2e-8eae-8d06ec05b14c",
 CellID->11885955]
}, Open  ]],
Cell[CellGroupData[{
Cell[90414, 2516, 321, 7, 31, "Input",ExpressionUUID->"c6dbec97-ffde-415d-b99d-3d1ba910d303",
 CellID->51266514],
Cell[90738, 2525, 192, 4, 45, "Output",ExpressionUUID->"a035f829-717f-4cd2-b1f0-ec2f822a6308",
 CellID->410851530]
}, Open  ]],
Cell[90945, 2532, 225, 5, 45, "Text",ExpressionUUID->"56a93266-a7ac-4721-a965-946e8048e9ac",
 CellID->935123864],
Cell[91173, 2539, 2007, 54, 265, "Input",ExpressionUUID->"fdef9e70-8e0d-4cc3-bba1-bbcae5976aef",
 CellID->1525681908],
Cell[93183, 2595, 165, 2, 45, "Text",ExpressionUUID->"eb4708e2-9cab-4dc2-a5c3-aff3886bdaaa",
 CellID->930592443],
Cell[CellGroupData[{
Cell[93373, 2601, 680, 19, 54, "Input",ExpressionUUID->"edff60b4-6e8b-4440-a2bb-ad87ac334502",
 CellID->401286575],
Cell[94056, 2622, 574, 16, 45, "Output",ExpressionUUID->"3f552ed0-78d5-4a01-a96e-e2940ae3295a",
 CellID->184583225]
}, Open  ]],
Cell[CellGroupData[{
Cell[94667, 2643, 278, 5, 31, "Input",ExpressionUUID->"53980524-49ea-426f-8423-4dea02b3fe01",
 CellID->311025182],
Cell[94948, 2650, 771, 21, 68, "Output",ExpressionUUID->"d0b73871-5fbe-4065-b12b-0446daecc9c6",
 CellID->240868114]
}, Open  ]],
Cell[95734, 2674, 522, 8, 104, "Text",ExpressionUUID->"f166ee11-f175-4545-b1b7-796f1137a3f4",
 CellID->1901553806],
Cell[CellGroupData[{
Cell[96281, 2686, 161, 2, 31, "SubitemNumbered",ExpressionUUID->"8555f17d-e220-4d31-8fa8-b9276827ff3a",
 CellID->545077966],
Cell[CellGroupData[{
Cell[96467, 2692, 580, 16, 54, "Input",ExpressionUUID->"126eae9e-7e75-46fe-9b33-6317606c6688",
 CellID->28381084],
Cell[97050, 2710, 328, 9, 45, "Output",ExpressionUUID->"ebec9fcc-d390-4e49-9dce-00bdad4b1a13",
 CellID->599635825]
}, Open  ]],
Cell[CellGroupData[{
Cell[97415, 2724, 344, 8, 31, "Input",ExpressionUUID->"394c4253-44c2-4637-996e-d1e0aeea5c4e",
 CellID->520284500],
Cell[97762, 2734, 553, 16, 45, "Output",ExpressionUUID->"4e020864-05db-472d-a8c9-a57d3aa184f5",
 CellID->1169965501]
}, Open  ]]
}, Open  ]],
Cell[98342, 2754, 787, 12, 222, "Text",ExpressionUUID->"54ff9ec7-b09d-49fb-871d-cf7a371bb442",
 CellID->281098254],
Cell[99132, 2768, 314, 5, 75, "Text",ExpressionUUID->"8fde50d4-66ac-474f-8467-b0b21ba612c7",
 CellID->1509510104],
Cell[99449, 2775, 232, 5, 38, "ItemNumbered",ExpressionUUID->"184658b0-8f42-4d61-a250-885f420449bc",
 CellID->558175756],
Cell[99684, 2782, 168, 2, 31, "SubitemNumbered",ExpressionUUID->"66b20838-e84e-4ee1-8ee8-e61ca6e413b7",
 CellID->1051360996],
Cell[99855, 2786, 461, 7, 134, "Text",ExpressionUUID->"9a352475-f9d4-489d-b5d3-9d1efcbf16b4",
 CellID->728812256],
Cell[CellGroupData[{
Cell[100341, 2797, 232, 4, 31, "Input",ExpressionUUID->"be0ba1c7-97e5-4209-a9c5-822b5baa63f2",
 CellID->338889718],
Cell[100576, 2803, 764, 20, 133, "Output",ExpressionUUID->"e3bef626-e7b2-40d8-9ce5-511564571591",
 CellID->1086219411]
}, Open  ]],
Cell[101355, 2826, 200, 2, 45, "Text",ExpressionUUID->"7c5a4f72-6f08-48ea-bc42-4f51764ea1d1",
 CellID->331157530],
Cell[CellGroupData[{
Cell[101580, 2832, 325, 7, 31, "Input",ExpressionUUID->"3e836bd7-3650-4dfd-a142-be016a73170c",
 CellID->328482066],
Cell[101908, 2841, 218, 5, 45, "Output",ExpressionUUID->"8c592e5f-8764-4eca-9cff-cc36eceae545",
 CellID->1213161759]
}, Open  ]],
Cell[102141, 2849, 735, 15, 75, "Text",ExpressionUUID->"be5e3fc9-a829-45cd-af10-a06ea73133fb",
 CellID->1399938895],
Cell[CellGroupData[{
Cell[102901, 2868, 494, 13, 31, "Input",ExpressionUUID->"d3e68bac-1030-4772-9a34-21211a5b4414",
 CellID->1172382736],
Cell[103398, 2883, 683, 17, 45, "Output",ExpressionUUID->"dec18c40-93a7-4dec-94f1-b64a25137c3f",
 CellID->1234764814]
}, Open  ]],
Cell[104096, 2903, 488, 8, 104, "Text",ExpressionUUID->"b364f43e-5b69-488d-bdbb-423cc1c85827",
 CellID->1736307034],
Cell[CellGroupData[{
Cell[104609, 2915, 756, 22, 54, "Input",ExpressionUUID->"477a569a-755a-427d-a59a-7cbb4f3ab94c",
 CellID->816859623],
Cell[105368, 2939, 1210, 38, 68, "Output",ExpressionUUID->"1561018f-9c92-423b-bdab-42410bbe871d",
 CellID->1945330018]
}, Open  ]],
Cell[106593, 2980, 632, 10, 163, "Text",ExpressionUUID->"104ff0fb-afac-472a-bc74-a539f5c59fc1",
 CellID->230488104],
Cell[CellGroupData[{
Cell[107250, 2994, 360, 9, 31, "Input",ExpressionUUID->"6f5debb0-d3f5-4d1c-bf41-83f24d429ba5",
 CellID->247267499],
Cell[107613, 3005, 933, 25, 68, "Output",ExpressionUUID->"d78722b1-9129-4160-a2b2-bc97bc1f1ad2",
 CellID->372654453]
}, Open  ]],
Cell[108561, 3033, 399, 7, 104, "Text",ExpressionUUID->"d29731c9-fed6-4c21-8617-c06d96fba43d",
 CellID->1141076919],
Cell[CellGroupData[{
Cell[108985, 3044, 334, 7, 31, "Input",ExpressionUUID->"69cb60a3-5a91-4b16-8189-338166febbde",
 CellID->1558135261],
Cell[109322, 3053, 846, 22, 68, "Output",ExpressionUUID->"d785e84d-594f-40f5-bc9e-fb03208caa64",
 CellID->741811586]
}, Open  ]],
Cell[110183, 3078, 351, 6, 104, "Text",ExpressionUUID->"db92ed74-a4ae-40f9-8826-90b0fee7cf8c",
 CellID->1484755067],
Cell[110537, 3086, 2253, 60, 242, "Input",ExpressionUUID->"793d93b7-7a15-4067-b5bc-00ca432fa9b7",
 CellID->643232844],
Cell[112793, 3148, 162, 2, 45, "Text",ExpressionUUID->"41691c83-6ddf-4fb6-ad15-2a42b369f59c",
 CellID->54710577],
Cell[CellGroupData[{
Cell[112980, 3154, 251, 4, 31, "Input",ExpressionUUID->"37f85961-6458-4a69-bc9f-6e24cd253f31",
 CellID->2018997387],
Cell[113234, 3160, 770, 21, 68, "Output",ExpressionUUID->"6fd5db38-535e-4cef-8283-bb4c7661dec5",
 CellID->1814507924]
}, Open  ]],
Cell[114019, 3184, 362, 7, 104, "Text",ExpressionUUID->"032ed7e1-ab45-4fa5-9ceb-ac7a3555f1ca",
 CellID->19407621],
Cell[114384, 3193, 588, 15, 78, "Input",ExpressionUUID->"30c58958-bf39-43e5-99c4-bfa54ffe15ac",
 CellID->1543491186],
Cell[114975, 3210, 164, 2, 45, "Text",ExpressionUUID->"e3579169-827f-48ff-9648-02d608c0d493",
 CellID->1175917676],
Cell[CellGroupData[{
Cell[115164, 3216, 271, 6, 31, "Input",ExpressionUUID->"21a3c8c9-3187-49ca-bd16-285c8f28cb2a",
 CellID->1509782903],
Cell[115438, 3224, 777, 22, 183, "Output",ExpressionUUID->"24248b16-a356-4238-933b-ab1e1f6b1970",
 CellID->1070067326]
}, Open  ]],
Cell[CellGroupData[{
Cell[116252, 3251, 282, 5, 31, "Input",ExpressionUUID->"004e5bbd-e8ee-4079-95e6-f73672139014",
 CellID->486002191],
Cell[116537, 3258, 769, 21, 68, "Output",ExpressionUUID->"bf5c3633-894a-4335-8d69-9208cdf190aa",
 CellID->875808823]
}, Open  ]],
Cell[117321, 3282, 321, 6, 75, "Text",ExpressionUUID->"339ebc51-5269-4601-9b0d-4767b66f0757",
 CellID->1410189518],
Cell[117645, 3290, 503, 12, 54, "Input",ExpressionUUID->"0e966d81-564a-40c0-9fc6-c723d1587f16",
 CellID->224301679],
Cell[118151, 3304, 162, 2, 45, "Text",ExpressionUUID->"c36118e3-5dd9-44dc-9211-b84fabd41ed2",
 CellID->22405320],
Cell[CellGroupData[{
Cell[118338, 3310, 233, 4, 31, "Input",ExpressionUUID->"f9cae2ec-0445-4219-b0d5-fd76109db9a2",
 CellID->1646744358],
Cell[118574, 3316, 763, 20, 133, "Output",ExpressionUUID->"76e79ab1-3bed-405e-a4d7-3ccf6b36e088",
 CellID->1327712761]
}, Open  ]],
Cell[CellGroupData[{
Cell[119374, 3341, 246, 4, 31, "Input",ExpressionUUID->"4cf55c4e-9081-4a09-a350-a42768a744b4",
 CellID->1871309336],
Cell[119623, 3347, 770, 21, 68, "Output",ExpressionUUID->"2bb4ed1e-07a2-4e43-bdc0-07b055acac2e",
 CellID->1561621455]
}, Open  ]],
Cell[120408, 3371, 236, 4, 45, "Text",ExpressionUUID->"7885ee45-bc47-4b4d-b3b4-dab24b53eb40",
 CellID->231097191],
Cell[120647, 3377, 586, 15, 78, "Input",ExpressionUUID->"afb688e2-3f9b-462d-9f0a-8553a77a36e5",
 CellID->752132148],
Cell[121236, 3394, 164, 2, 45, "Text",ExpressionUUID->"2ac7cb95-054d-4c5e-9680-5cb770de9042",
 CellID->1758261316],
Cell[CellGroupData[{
Cell[121425, 3400, 247, 4, 31, "Input",ExpressionUUID->"751cd42a-6356-46a8-81e4-f8e290654af3",
 CellID->979369091],
Cell[121675, 3406, 1487, 41, 91, "Output",ExpressionUUID->"4d042737-94e4-4cd7-a909-68f5eadbd47f",
 CellID->448692343]
}, Open  ]],
Cell[123177, 3450, 160, 2, 31, "SubitemNumbered",ExpressionUUID->"472286e4-e984-4a68-b2db-e9c7614617ad",
 CellID->60351730],
Cell[123340, 3454, 233, 4, 45, "Text",ExpressionUUID->"6c4be2b6-018a-4951-b1dd-e18c2efb64fe",
 CellID->719244726],
Cell[CellGroupData[{
Cell[123598, 3462, 317, 7, 31, "Input",ExpressionUUID->"bf22bcce-e14d-461b-b866-8ecd3dbb3634",
 CellID->841121354],
Cell[123918, 3471, 552, 16, 45, "Output",ExpressionUUID->"fffe2753-5cea-496f-99bd-01849c8dfe2b",
 CellID->243763419]
}, Open  ]],
Cell[CellGroupData[{
Cell[124507, 3492, 313, 7, 31, "Input",ExpressionUUID->"419965af-9ca5-4166-bfe5-853892cabcf8",
 CellID->2073343631],
Cell[124823, 3501, 555, 16, 45, "Output",ExpressionUUID->"bf8a1424-e860-4162-a400-9864404517bd",
 CellID->1826414498]
}, Open  ]],
Cell[CellGroupData[{
Cell[125415, 3522, 316, 7, 31, "Input",ExpressionUUID->"25d012b8-dbf2-4b2e-bde3-8bca3bc450e0",
 CellID->643238621],
Cell[125734, 3531, 678, 19, 45, "Output",ExpressionUUID->"2828ce89-595f-40e2-8299-6ed8a588cb8d",
 CellID->1550188005]
}, Open  ]],
Cell[126427, 3553, 564, 9, 163, "Text",ExpressionUUID->"1433ffba-54d7-4f5a-894e-d719d1dc242e",
 CellID->2146192286],
Cell[126994, 3564, 153, 2, 38, "ItemNumbered",ExpressionUUID->"680d216c-3a5b-4f5f-a799-56277b9f8cc1",
 CellID->1622477367],
Cell[127150, 3568, 840, 13, 252, "Text",ExpressionUUID->"2f9a9913-512d-4cb9-858f-b92f7aa83e07",
 CellID->229757563],
Cell[127993, 3583, 570, 9, 163, "Text",ExpressionUUID->"d9967588-5ce1-4b0e-ad60-cba915addafb",
 CellID->1560893219]
}, Open  ]],
Cell[CellGroupData[{
Cell[128600, 3597, 200, 3, 68, "Subsection",ExpressionUUID->"1b6b00e8-d0ad-4bb4-8ff0-312fd67c2382",
 CellID->1908754514],
Cell[128803, 3602, 155, 2, 38, "ItemNumbered",ExpressionUUID->"c0a2bce6-4254-4e13-96c0-de3758fc8d7e",
 CellID->1326397912],
Cell[128961, 3606, 345, 6, 104, "Text",ExpressionUUID->"e478348d-e62b-466b-9994-cbdd66a9a5fa",
 CellID->1889451124],
Cell[CellGroupData[{
Cell[129331, 3616, 377, 11, 31, "Input",ExpressionUUID->"f3cb17e1-e23c-4e1f-8aa5-cef51912771c",
 CellID->613127063],
Cell[129711, 3629, 638, 18, 83, "Output",ExpressionUUID->"e87bee26-6b3d-41b4-8b4a-32d83db3d7a1",
 CellID->1705755950]
}, Open  ]],
Cell[130364, 3650, 723, 12, 222, "Text",ExpressionUUID->"9ab637f3-6aa0-4316-86b8-947796d92ff6",
 CellID->1881047847],
Cell[131090, 3664, 153, 2, 38, "ItemNumbered",ExpressionUUID->"1c4de60a-ab3d-4cd0-b0d3-6cee9b6c0e5f",
 CellID->158757856],
Cell[131246, 3668, 249, 5, 45, "Text",ExpressionUUID->"19d7741f-aef7-4c8f-bec0-aa70823e1b58",
 CellID->1068596218],
Cell[131498, 3675, 213, 2, 45, "Text",ExpressionUUID->"6a5aa6ba-37de-4b5b-8bc6-f466bbc7d2dc",
 CellID->1877317241],
Cell[CellGroupData[{
Cell[131736, 3681, 401, 9, 31, "Input",ExpressionUUID->"60b16108-42ca-4036-b549-a9d11ffdb008",
 CellID->1125649430],
Cell[132140, 3692, 570, 11, 68, "Output",ExpressionUUID->"d92fea8e-c346-4b36-8420-7413a6fce03b",
 CellID->1401200308]
}, Open  ]],
Cell[132725, 3706, 217, 4, 45, "Text",ExpressionUUID->"8a6f4a04-f45e-4358-9c0e-86345c410f6a",
 CellID->692240463],
Cell[132945, 3712, 167, 2, 38, "ItemNumbered",ExpressionUUID->"616fcff7-3351-49ae-bbe4-3692b4b929d3",
 CellID->1566545842],
Cell[133115, 3716, 346, 6, 104, "Text",ExpressionUUID->"71ad58e7-5059-4768-8f6f-ad60d60ecf56",
 CellID->786454274],
Cell[133464, 3724, 2453, 68, 195, "Input",ExpressionUUID->"7a2f6e03-f715-4951-a8eb-e4e054a79da4",
 CellID->209231357],
Cell[135920, 3794, 418, 7, 104, "Text",ExpressionUUID->"f434173f-4dae-418d-9c33-cb3e2af0d9aa",
 CellID->28882382],
Cell[CellGroupData[{
Cell[136363, 3805, 277, 5, 31, "Input",ExpressionUUID->"f6aeb5cc-dba4-43c7-a3db-7dfc848bcf04",
 CellID->675519880],
Cell[136643, 3812, 901, 24, 68, "Output",ExpressionUUID->"06c6a5d7-3df4-4450-b838-28e05d92a480",
 CellID->456692691]
}, Open  ]],
Cell[137559, 3839, 268, 5, 75, "Text",ExpressionUUID->"f5aafd76-8f69-41eb-bd6f-50caeaa9312e",
 CellID->94065372],
Cell[CellGroupData[{
Cell[137852, 3848, 417, 10, 31, "Input",ExpressionUUID->"ab44e003-55c2-422c-80d6-623651bc7385",
 CellID->2091099578],
Cell[138272, 3860, 227, 5, 45, "Output",ExpressionUUID->"6414a9b9-e265-479b-bdc9-5dae9e9d85bb",
 CellID->1013141260]
}, Open  ]],
Cell[138514, 3868, 166, 2, 38, "ItemNumbered",ExpressionUUID->"e8631408-207a-4011-991c-6b33bbeb4caf",
 CellID->467319757],
Cell[138683, 3872, 354, 7, 75, "Text",ExpressionUUID->"f40d65db-b249-4b3c-8641-abe8b135f6ca",
 CellID->895458820],
Cell[139040, 3881, 298, 6, 75, "Text",ExpressionUUID->"e9e98b04-9025-4c38-a3e6-09f5caded5b7",
 CellID->1986457225],
Cell[CellGroupData[{
Cell[139363, 3891, 948, 30, 54, "Input",ExpressionUUID->"fac4982b-4d53-4fb1-b7f6-f162a781362d",
 CellID->1420681321],
Cell[140314, 3923, 2181, 65, 68, "Output",ExpressionUUID->"d9c0f15d-91aa-4afb-9d8a-278bca99ff7a",
 CellID->1695950174]
}, Open  ]],
Cell[142510, 3991, 148, 2, 45, "Text",ExpressionUUID->"1dd112c6-3c63-496d-a250-218191bb50fe",
 CellID->2127442684],
Cell[CellGroupData[{
Cell[142683, 3997, 325, 8, 31, "Input",ExpressionUUID->"994256c6-a51c-4ac4-9edd-2391bdcfcc50",
 CellID->117512381],
Cell[143011, 4007, 743, 20, 133, "Output",ExpressionUUID->"c7978f25-1b47-43d1-a18f-aafef6c24d99",
 CellID->275296807]
}, Open  ]],
Cell[143769, 4030, 174, 2, 45, "Text",ExpressionUUID->"0b852dd9-88d0-4497-ac13-92402742e693",
 CellID->1233659611],
Cell[143946, 4034, 875, 25, 101, "Input",ExpressionUUID->"04f7c6f3-eed5-4388-a17f-d99fcbc3b136",
 CellID->1186482307],
Cell[144824, 4061, 165, 2, 45, "Text",ExpressionUUID->"f67bc23b-d61e-413f-a5aa-217acd5185ff",
 CellID->1863425471],
Cell[CellGroupData[{
Cell[145014, 4067, 901, 29, 54, "Input",ExpressionUUID->"bf48c446-1a32-449b-859d-3c37a784a2c1",
 CellID->1125764614],
Cell[145918, 4098, 520, 14, 45, "Output",ExpressionUUID->"b7887263-e74a-46d3-a04c-909d5dc362c0",
 CellID->501587164]
}, Open  ]],
Cell[146453, 4115, 246, 4, 45, "Text",ExpressionUUID->"5d9be516-2e65-4c50-a415-ffaf10bbe828",
 CellID->1349677391],
Cell[146702, 4121, 250, 5, 45, "Text",ExpressionUUID->"2036b19e-2000-4394-ac5a-9ffe4ff123b6",
 CellID->1902470450],
Cell[146955, 4128, 1861, 52, 171, "Input",ExpressionUUID->"c23344d2-d110-46fd-923a-bb1bfc75ad36",
 CellID->1600381893],
Cell[148819, 4182, 384, 7, 104, "Text",ExpressionUUID->"2d72d0ca-ceb9-47f2-bbe2-a9ce3e3b67e0",
 CellID->1516551864],
Cell[CellGroupData[{
Cell[149228, 4193, 281, 5, 31, "Input",ExpressionUUID->"8026960a-9254-4451-9f43-53183c622d9b",
 CellID->883138816],
Cell[149512, 4200, 895, 22, 68, "Output",ExpressionUUID->"59b847f6-349f-4f9c-933f-c8b32cc5f3e6",
 CellID->52044199]
}, Open  ]],
Cell[150422, 4225, 192, 2, 45, "Text",ExpressionUUID->"cb33dcb6-a378-4f1c-99f4-93a7f8100cbb",
 CellID->681008264],
Cell[CellGroupData[{
Cell[150639, 4231, 421, 10, 31, "Input",ExpressionUUID->"006c35d1-1e5c-4d95-bd9f-0b3aec25483e",
 CellID->1618724696],
Cell[151063, 4243, 225, 5, 45, "Output",ExpressionUUID->"261d5085-b1ef-428b-8406-af4499bb90b9",
 CellID->99911398]
}, Open  ]],
Cell[151303, 4251, 261, 5, 75, "Text",ExpressionUUID->"60a526fd-fdc5-439e-8fda-8e7fa653fef0",
 CellID->2026137879],
Cell[151567, 4258, 186, 2, 38, "ItemNumbered",ExpressionUUID->"3064e711-de75-40df-b71e-0b3f4c254cfd",
 CellID->651141874],
Cell[151756, 4262, 524, 9, 134, "Text",ExpressionUUID->"887e7766-edd6-42f7-a277-5b1f091d6b7c",
 CellID->164811206],
Cell[152283, 4273, 2995, 80, 335, "Input",ExpressionUUID->"6a8b385c-a46e-42fd-9b87-26ff283f9b57",
 CellID->1921158607],
Cell[155281, 4355, 686, 11, 193, "Text",ExpressionUUID->"7084f323-7d38-4d98-9790-ca5050cbf9f6",
 CellID->1968169610],
Cell[CellGroupData[{
Cell[155992, 4370, 342, 7, 31, "Input",ExpressionUUID->"90c42e0b-805e-464f-8b6b-f247ebaeec65",
 CellID->849427515],
Cell[156337, 4379, 3369, 95, 288, "Output",ExpressionUUID->"c933dae2-1724-43ae-ba3a-c5de633b9e68",
 CellID->862554022]
}, Open  ]],
Cell[159721, 4477, 458, 7, 134, "Text",ExpressionUUID->"1b2d781e-5b90-413b-949a-cbcd322ca80d",
 CellID->1430830504],
Cell[160182, 4486, 297, 6, 75, "Text",ExpressionUUID->"ff858922-3807-4440-b175-ca9deeda1426",
 CellID->2114227944],
Cell[160482, 4494, 1116, 32, 101, "Input",ExpressionUUID->"ce754bde-8d21-44cc-aa67-c4a06997ee7a",
 CellID->709424158],
Cell[161601, 4528, 190, 2, 45, "Text",ExpressionUUID->"a84a4b7d-5f80-4b25-9e5c-a7265aa4d900",
 CellID->1344265392],
Cell[CellGroupData[{
Cell[161816, 4534, 463, 11, 54, "Input",ExpressionUUID->"8020316f-bb1e-4bf0-b347-6baeb99863f5",
 CellID->732477296],
Cell[162282, 4547, 226, 5, 45, "Output",ExpressionUUID->"1ec96419-0401-4b50-b858-71a8fb754a50",
 CellID->1073812873]
}, Open  ]],
Cell[162523, 4555, 255, 5, 75, "Text",ExpressionUUID->"3c3a6528-3f51-44dd-bf3b-f118b09098b9",
 CellID->1816415791],
Cell[162781, 4562, 277, 6, 45, "Text",ExpressionUUID->"d7369d83-75e9-40f2-b7a0-02e354e56973",
 CellID->2144694357],
Cell[CellGroupData[{
Cell[163083, 4572, 290, 7, 31, "Input",ExpressionUUID->"6f6f5273-850f-4c3c-952b-9c2abb2ee321",
 CellID->2067833796],
Cell[163376, 4581, 226, 5, 45, "Output",ExpressionUUID->"fdc9b39f-2f42-4f26-b63f-a5d14be8b95b",
 CellID->186447978]
}, Open  ]],
Cell[163617, 4589, 493, 8, 134, "Text",ExpressionUUID->"5dffb8bf-25f0-4916-a58e-49286a5cb57d",
 CellID->452525273],
Cell[164113, 4599, 155, 2, 38, "ItemNumbered",ExpressionUUID->"17df7594-1e56-48ca-8268-fe657ab8ec13",
 CellID->1071877202],
Cell[164271, 4603, 649, 10, 193, "Text",ExpressionUUID->"18de3faf-50d6-4fe7-b337-255bbaa46b52",
 CellID->1947302978],
Cell[164923, 4615, 591, 9, 163, "Text",ExpressionUUID->"58067dce-c5d2-43e2-b18b-e32657948169",
 CellID->1754073936]
}, Open  ]],
Cell[CellGroupData[{
Cell[165551, 4629, 192, 2, 68, "Subsection",ExpressionUUID->"51c99369-c26c-4a61-844a-da82d568ffdd",
 CellID->1407094610],
Cell[165746, 4633, 152, 2, 38, "ItemNumbered",ExpressionUUID->"57659b12-4777-429d-aa27-062b71269eb1",
 CellID->949189506],
Cell[165901, 4637, 1558, 31, 222, "Text",ExpressionUUID->"4fd34bdf-c6a8-40de-ac6b-4cd409ea42cc",
 CellID->1519497426],
Cell[167462, 4670, 151, 2, 38, "ItemNumbered",ExpressionUUID->"3b4a8330-dd78-4fd7-a39c-64a5940176ad",
 CellID->2007512358],
Cell[167616, 4674, 384, 6, 104, "Text",ExpressionUUID->"e89160c0-5152-4dd7-9f03-bd7e0a81d6fb",
 CellID->1144622889],
Cell[CellGroupData[{
Cell[168025, 4684, 478, 12, 54, "Input",ExpressionUUID->"9027d6a0-a73e-4227-9b10-ff35d3c3ae43",
 CellID->1123824048],
Cell[168506, 4698, 413, 8, 45, "Output",ExpressionUUID->"51db8844-fea9-42ff-b805-b8fef8be52f1",
 CellID->1608314735]
}, Open  ]],
Cell[CellGroupData[{
Cell[168956, 4711, 401, 10, 31, "Input",ExpressionUUID->"1bcd9e1a-6bc2-4e30-8ec7-3c1320675f84",
 CellID->1889705201],
Cell[169360, 4723, 254, 6, 45, "Output",ExpressionUUID->"dda9fc88-65b3-4ef5-b725-49bb5c8a8746",
 CellID->1780544232]
}, Open  ]],
Cell[169629, 4732, 303, 6, 75, "Text",ExpressionUUID->"294154bc-451a-4850-bc27-85f795489680",
 CellID->1230105503],
Cell[169935, 4740, 425, 10, 54, "Input",ExpressionUUID->"c0894fad-3c20-4f5c-aa88-aff21848eedd",
 CellID->101698268],
Cell[170363, 4752, 161, 2, 38, "ItemNumbered",ExpressionUUID->"6041d99f-f307-49ea-8342-0356575f09d6",
 CellID->906839391],
Cell[170527, 4756, 231, 5, 75, "Text",ExpressionUUID->"83bc836c-b450-4647-92ce-9cc9d8ac0c02",
 CellID->558201778],
Cell[170761, 4763, 180, 2, 31, "SubitemNumbered",ExpressionUUID->"d46559ee-09f7-4eb5-bd4a-9f84729b9b5e",
 CellID->1488712750],
Cell[170944, 4767, 206, 4, 45, "Text",ExpressionUUID->"d747a349-3b0d-4f80-96c4-877a566939ec",
 CellID->463218053],
Cell[171153, 4773, 2156, 58, 219, "Input",ExpressionUUID->"55896203-d680-4d70-b6c6-7204f776bd47",
 CellID->256847531],
Cell[173312, 4833, 164, 2, 45, "Text",ExpressionUUID->"a226fd81-95ee-4af2-b61a-006795b500aa",
 CellID->1349858523],
Cell[CellGroupData[{
Cell[173501, 4839, 287, 5, 31, "Input",ExpressionUUID->"b127e35f-24b1-48de-9870-71b0227fb1ee",
 CellID->1906736211],
Cell[173791, 4846, 604, 12, 45, "Output",ExpressionUUID->"2e72f665-98b1-4ee4-9bcc-89d9e7fb0623",
 CellID->1613097847]
}, Open  ]],
Cell[CellGroupData[{
Cell[174432, 4863, 348, 8, 31, "Input",ExpressionUUID->"ad1981ec-8843-4c2e-8539-c7466f5d6664",
 CellID->100318360],
Cell[174783, 4873, 224, 5, 45, "Output",ExpressionUUID->"c3acecd0-5d97-43ad-9690-f83c8bab77f4",
 CellID->83719407]
}, Open  ]],
Cell[175022, 4881, 179, 2, 31, "SubitemNumbered",ExpressionUUID->"7f0d5f45-a3de-43f6-84cf-f02eba41848a",
 CellID->1229566184],
Cell[175204, 4885, 242, 5, 75, "Text",ExpressionUUID->"5b0f776b-b195-43b8-859b-8af1035c5aab",
 CellID->470284664],
Cell[175449, 4892, 1712, 47, 172, "Input",ExpressionUUID->"c614a7ba-00f7-4a55-a51e-920a6b13a47e",
 CellID->1074197348],
Cell[177164, 4941, 165, 2, 45, "Text",ExpressionUUID->"7db46f8c-4bd6-44e4-ba90-c48c094e96e7",
 CellID->412586772],
Cell[CellGroupData[{
Cell[177354, 4947, 281, 5, 31, "Input",ExpressionUUID->"9c6f7d05-553b-4b08-93d8-8c5654a500cb",
 CellID->444174732],
Cell[177638, 4954, 580, 12, 45, "Output",ExpressionUUID->"16a8a608-c83a-4980-8ff4-97103d061b30",
 CellID->1807015218]
}, Open  ]],
Cell[CellGroupData[{
Cell[178255, 4971, 344, 8, 31, "Input",ExpressionUUID->"1abf6ce2-87da-4f61-970b-b8db994d7826",
 CellID->791033052],
Cell[178602, 4981, 226, 5, 45, "Output",ExpressionUUID->"6ce0c78b-e043-4a80-b833-e0299afd58b2",
 CellID->341001690]
}, Open  ]],
Cell[178843, 4989, 295, 5, 75, "Text",ExpressionUUID->"669f0f63-d7fb-4ef5-8687-a3ee4343b148",
 CellID->261060873],
Cell[179141, 4996, 192, 2, 31, "SubitemNumbered",ExpressionUUID->"3ba4bc6c-7ca8-440f-9e9c-9a904edf3983",
 CellID->119575434],
Cell[179336, 5000, 1187, 17, 340, "Text",ExpressionUUID->"0888a39d-e2e1-4d24-909d-314b24303310",
 CellID->1807109293],
Cell[180526, 5019, 1627, 45, 172, "Input",ExpressionUUID->"b98a1222-9a98-4ab1-b521-a3a661e7edcd",
 CellID->1390349047],
Cell[182156, 5066, 305, 5, 75, "Text",ExpressionUUID->"5d47ebdb-8767-4d76-bdee-ea7f9805c0bd",
 CellID->320749901],
Cell[182464, 5073, 1430, 40, 148, "Input",ExpressionUUID->"d4599088-85c8-4939-a84e-5c1b3cb45df1",
 CellID->1408742344],
Cell[183897, 5115, 164, 2, 45, "Text",ExpressionUUID->"64b21fbd-5063-4f3e-ad6e-f83a8b3ad0b8",
 CellID->1332268190],
Cell[CellGroupData[{
Cell[184086, 5121, 286, 5, 31, "Input",ExpressionUUID->"efe91b6c-4352-447f-92b5-4452c4093916",
 CellID->1371500754],
Cell[184375, 5128, 582, 12, 45, "Output",ExpressionUUID->"1506a8d8-32ba-4f78-b4ce-3efa2f664d36",
 CellID->1503166782]
}, Open  ]],
Cell[CellGroupData[{
Cell[184994, 5145, 347, 8, 31, "Input",ExpressionUUID->"be6f1d68-45af-4f63-9dfb-ff7e2f8abb29",
 CellID->1862398182],
Cell[185344, 5155, 226, 5, 45, "Output",ExpressionUUID->"b310b782-a869-4330-95d1-bf9544b31cf2",
 CellID->828040362]
}, Open  ]],
Cell[185585, 5163, 278, 5, 75, "Text",ExpressionUUID->"9be9093a-5fdc-48e3-be73-cbad7e34e491",
 CellID->761727503],
Cell[185866, 5170, 184, 2, 31, "SubitemNumbered",ExpressionUUID->"440eb5cb-becd-462d-9b0c-e7d9a703a754",
 CellID->1959443597],
Cell[186053, 5174, 246, 5, 75, "Text",ExpressionUUID->"53ef2b72-8b4c-48fb-9f13-01e0d98a899e",
 CellID->706808034],
Cell[186302, 5181, 1274, 35, 125, "Input",ExpressionUUID->"7175a6a9-bc48-4259-a357-932bbe6b3717",
 CellID->932394111],
Cell[187579, 5218, 165, 2, 45, "Text",ExpressionUUID->"fef8a42b-721f-4c4a-982f-81c79f73c794",
 CellID->2096382090],
Cell[CellGroupData[{
Cell[187769, 5224, 288, 5, 31, "Input",ExpressionUUID->"efde5e5e-cd4f-4b24-8b7d-e6c1c06105e5",
 CellID->1459309277],
Cell[188060, 5231, 580, 12, 45, "Output",ExpressionUUID->"e26778b6-2e4b-48c5-a8bb-8b5cb817ebd1",
 CellID->1733143436]
}, Open  ]],
Cell[CellGroupData[{
Cell[188677, 5248, 352, 8, 31, "Input",ExpressionUUID->"a9e78724-e10f-47c9-81aa-67588983a22e",
 CellID->473540944],
Cell[189032, 5258, 227, 5, 45, "Output",ExpressionUUID->"9e82d302-4db7-4888-af4b-18bc00473460",
 CellID->2088053039]
}, Open  ]],
Cell[189274, 5266, 688, 10, 193, "Text",ExpressionUUID->"1ca260f8-d1b7-401f-aca5-eba588a61f24",
 CellID->339548167],
Cell[189965, 5278, 167, 2, 38, "ItemNumbered",ExpressionUUID->"3a1718de-31c4-4a9d-a08f-1067fb14664f",
 CellID->395548229],
Cell[190135, 5282, 166, 2, 31, "SubitemNumbered",ExpressionUUID->"23fce576-933d-4692-a8db-28141536007e",
 CellID->1517197338],
Cell[190304, 5286, 372, 6, 104, "Text",ExpressionUUID->"93798aad-0497-4408-a589-89861413b76d",
 CellID->314835288],
Cell[190679, 5294, 682, 19, 78, "Input",ExpressionUUID->"6bf73269-ec5d-4dde-9daf-b57637e787df",
 CellID->632943337],
Cell[191364, 5315, 163, 2, 45, "Text",ExpressionUUID->"3bffb260-fc9c-44cb-9247-f44eb7ac8078",
 CellID->962198364],
Cell[CellGroupData[{
Cell[191552, 5321, 282, 5, 31, "Input",ExpressionUUID->"ec5df26c-74bc-46af-b599-48e92e79679d",
 CellID->1184002223],
Cell[191837, 5328, 580, 12, 45, "Output",ExpressionUUID->"e03d3e02-830d-43dd-bee2-3115aeb32aa2",
 CellID->1177721968]
}, Open  ]],
Cell[CellGroupData[{
Cell[192454, 5345, 345, 8, 31, "Input",ExpressionUUID->"686abae8-8a06-4b41-a54d-a70576850a27",
 CellID->1542616558],
Cell[192802, 5355, 226, 5, 45, "Output",ExpressionUUID->"c3504cdd-6dda-43b6-8222-0f2797e6ffed",
 CellID->103756558]
}, Open  ]],
Cell[193043, 5363, 331, 6, 75, "Text",ExpressionUUID->"5d956680-424a-45d0-a917-7cf4806252c7",
 CellID->1060737456],
Cell[193377, 5371, 173, 2, 31, "SubitemNumbered",ExpressionUUID->"620bf981-1ff4-41f4-a3e2-a3bc7a0dab20",
 CellID->1638206018],
Cell[193553, 5375, 758, 17, 104, "Text",ExpressionUUID->"6203c9e4-0a47-44ac-ad04-77473eeeb537",
 CellID->440706339],
Cell[194314, 5394, 851, 24, 78, "Input",ExpressionUUID->"8400d5fd-190a-4f6a-8946-c857f283e229",
 CellID->562771482],
Cell[195168, 5420, 162, 2, 45, "Text",ExpressionUUID->"17931547-1858-4012-9bf0-d4231985ebda",
 CellID->42166333],
Cell[CellGroupData[{
Cell[195355, 5426, 281, 5, 31, "Input",ExpressionUUID->"77b3559b-586b-4390-9ed8-bf7a16a92d89",
 CellID->656333748],
Cell[195639, 5433, 579, 12, 45, "Output",ExpressionUUID->"be47c0a7-e1cd-4b57-b231-b95ff2593521",
 CellID->154717816]
}, Open  ]],
Cell[CellGroupData[{
Cell[196255, 5450, 347, 8, 31, "Input",ExpressionUUID->"e318f4d9-54eb-473f-8328-93fa253295db",
 CellID->1887120642],
Cell[196605, 5460, 226, 5, 45, "Output",ExpressionUUID->"644cbfd7-53ed-4a24-9b13-f14fb16241d0",
 CellID->591123824]
}, Open  ]],
Cell[196846, 5468, 485, 8, 134, "Text",ExpressionUUID->"428e584f-0424-4020-9cbd-8341f70833ef",
 CellID->1963178230],
Cell[197334, 5478, 186, 2, 31, "SubitemNumbered",ExpressionUUID->"97b46f62-9f03-475a-8e53-41d726172fa8",
 CellID->11650197],
Cell[197523, 5482, 224, 4, 45, "Text",ExpressionUUID->"513ebc13-92c5-4540-bcdc-7adb95d25749",
 CellID->383849102],
Cell[197750, 5488, 891, 25, 78, "Input",ExpressionUUID->"992fe0d8-d994-4565-9bdd-c77bbfe134fa",
 CellID->1842155731],
Cell[198644, 5515, 164, 2, 45, "Text",ExpressionUUID->"223f3fbb-2b6f-4fae-9a43-0bfa08d6aed5",
 CellID->23964916],
Cell[CellGroupData[{
Cell[198833, 5521, 281, 5, 31, "Input",ExpressionUUID->"0e85ea64-e33e-4d6d-a1da-8b1c96854700",
 CellID->156487075],
Cell[199117, 5528, 579, 12, 45, "Output",ExpressionUUID->"7b50a36b-3a2d-4af5-996b-640b5113e80e",
 CellID->160841007]
}, Open  ]],
Cell[CellGroupData[{
Cell[199733, 5545, 343, 8, 31, "Input",ExpressionUUID->"dddb10b5-9867-4e91-8c97-89a2702f467c",
 CellID->1720376723],
Cell[200079, 5555, 227, 5, 45, "Output",ExpressionUUID->"a27777af-cac7-4abd-bf2f-964c2d338767",
 CellID->44905352]
}, Open  ]],
Cell[200321, 5563, 378, 6, 104, "Text",ExpressionUUID->"3adb56f4-1541-4505-b3c4-1da7285b56c2",
 CellID->109127403],
Cell[200702, 5571, 751, 11, 222, "Text",ExpressionUUID->"674f7ba1-003a-41ba-be7b-b17937391f23",
 CellID->788078407],
Cell[201456, 5584, 192, 2, 31, "SubitemNumbered",ExpressionUUID->"4a2e8506-e016-458f-a9c6-ad46b86a8d34",
 CellID->1493684714],
Cell[201651, 5588, 802, 12, 222, "Text",ExpressionUUID->"4a882922-bc0a-40a7-ab61-accfc199b0e6",
 CellID->275154768],
Cell[202456, 5602, 738, 20, 78, "Input",ExpressionUUID->"39727737-15f4-413b-a937-b0bbbd7470a0",
 CellID->766695896],
Cell[203197, 5624, 164, 2, 45, "Text",ExpressionUUID->"bb9929bf-cf81-4018-8763-e6c9854e42ed",
 CellID->1478461661],
Cell[CellGroupData[{
Cell[203386, 5630, 281, 5, 31, "Input",ExpressionUUID->"1d6c2644-1624-482a-af7e-b612b8030b1b",
 CellID->982637332],
Cell[203670, 5637, 603, 12, 45, "Output",ExpressionUUID->"31f2b939-6c39-4e40-8db4-de47d70d4214",
 CellID->292878100]
}, Open  ]],
Cell[204288, 5652, 269, 5, 75, "Text",ExpressionUUID->"8347e63b-ac05-4cf7-8350-c182976c98e2",
 CellID->1641367373],
Cell[CellGroupData[{
Cell[204582, 5661, 279, 7, 31, "Input",ExpressionUUID->"cf10caf0-0f02-4ba4-a648-7acd25915f24",
 CellID->2033992296],
Cell[204864, 5670, 226, 5, 45, "Output",ExpressionUUID->"d01cbc0a-33d0-490d-8049-903ab18231ac",
 CellID->346379220]
}, Open  ]],
Cell[205105, 5678, 628, 10, 193, "Text",ExpressionUUID->"7810779c-bccf-4cfd-8ea7-67d9d0cd618b",
 CellID->369707776],
Cell[205736, 5690, 858, 24, 101, "Input",ExpressionUUID->"fafca7f8-ebb3-4797-b6b2-ae57ec5dc874",
 CellID->203439626],
Cell[206597, 5716, 168, 2, 45, "Text",ExpressionUUID->"34b27440-a4f1-49e4-b6e2-47ff3b1df605",
 CellID->1387733864],
Cell[CellGroupData[{
Cell[206790, 5722, 280, 5, 31, "Input",ExpressionUUID->"554d5cf2-78b4-4e68-b3c8-e1a2b78533cd",
 CellID->1135823752],
Cell[207073, 5729, 580, 12, 45, "Output",ExpressionUUID->"794b9874-b333-4565-a3f9-b1f35926ab3c",
 CellID->1181199076]
}, Open  ]],
Cell[CellGroupData[{
Cell[207690, 5746, 345, 8, 31, "Input",ExpressionUUID->"728cae61-eadb-4aeb-b696-6a553f9ad5da",
 CellID->1074037464],
Cell[208038, 5756, 227, 5, 45, "Output",ExpressionUUID->"e54a4525-de17-471b-82ef-0e0cdcff29bb",
 CellID->436638465]
}, Open  ]],
Cell[208280, 5764, 199, 2, 31, "SubitemNumbered",ExpressionUUID->"2a5b1910-3e7a-4f84-a738-9168bb1fdc4e",
 CellID->1235022987],
Cell[208482, 5768, 292, 5, 75, "Text",ExpressionUUID->"e523e494-06a2-4230-bf4c-948d3574c40d",
 CellID->1601894254],
Cell[208777, 5775, 672, 18, 78, "Input",ExpressionUUID->"c3ee6bf4-617e-4a52-9a2c-e665ea2a2a33",
 CellID->34244539],
Cell[209452, 5795, 170, 2, 45, "Text",ExpressionUUID->"5d0788c3-a948-4f86-8eaf-cf39ebb7a7a1",
 CellID->1279300501],
Cell[CellGroupData[{
Cell[209647, 5801, 281, 5, 31, "Input",ExpressionUUID->"53b02ae1-7018-4700-8f6c-4dfb7c91ebe5",
 CellID->683777696],
Cell[209931, 5808, 580, 12, 45, "Output",ExpressionUUID->"08aa669e-b107-425e-8d47-2d7c03574a75",
 CellID->2030351983]
}, Open  ]],
Cell[CellGroupData[{
Cell[210548, 5825, 346, 8, 31, "Input",ExpressionUUID->"78b0d294-a30d-43a6-ab64-2be76e4a9ee5",
 CellID->610627451],
Cell[210897, 5835, 227, 5, 45, "Output",ExpressionUUID->"1456f5ad-5af6-40fe-b753-f3a840bf6681",
 CellID->1762130289]
}, Open  ]],
Cell[211139, 5843, 428, 7, 134, "Text",ExpressionUUID->"3d6e04eb-62a2-410f-9f53-238dba003e64",
 CellID->608860350],
Cell[211570, 5852, 196, 2, 38, "ItemNumbered",ExpressionUUID->"32c0e152-032a-455f-a135-2996e4cc3b44",
 CellID->1642923529],
Cell[211769, 5856, 741, 11, 193, "Text",ExpressionUUID->"2381d81c-aa5d-4b93-bbda-3cadb64867dd",
 CellID->271018777],
Cell[212513, 5869, 160, 2, 31, "SubitemNumbered",ExpressionUUID->"27c16157-9bff-433f-8613-9890f996c71d",
 CellID->234322135],
Cell[212676, 5873, 1953, 34, 370, "Text",ExpressionUUID->"75d447c4-c8ae-4d3e-873b-070c6d255b7e",
 CellID->1914597994],
Cell[214632, 5909, 854, 23, 101, "Input",ExpressionUUID->"b7a11e93-8589-4a93-90b9-deeb9036cf17",
 CellID->1150601291],
Cell[215489, 5934, 362, 6, 104, "Text",ExpressionUUID->"8ade8308-dca7-4056-b6a8-753b42b94039",
 CellID->1522906291],
Cell[CellGroupData[{
Cell[215876, 5944, 472, 11, 31, "Input",ExpressionUUID->"4b5dfcea-5e05-43c8-bdea-8b496d11599d",
 CellID->1937601050],
Cell[216351, 5957, 608, 13, 45, "Output",ExpressionUUID->"8b76035b-11ac-47bd-8489-50fb7ace304a",
 CellID->1070182929]
}, Open  ]],
Cell[216974, 5973, 232, 5, 45, "Text",ExpressionUUID->"a3fef167-35ba-4b8a-b0b9-d25aa8ba0494",
 CellID->1509970749],
Cell[217209, 5980, 594, 14, 78, "Input",ExpressionUUID->"ee963dd8-6f93-40ac-b5ed-4ad0576dc836",
 CellID->1040112337],
Cell[CellGroupData[{
Cell[217828, 5998, 356, 8, 31, "Input",ExpressionUUID->"6571513a-22c4-48f7-9c02-17babe33b668",
 CellID->1023136320],
Cell[218187, 6008, 458, 12, 45, "Output",ExpressionUUID->"825a8ae5-7e01-41a6-a086-e066fd3c73da",
 CellID->1766155343]
}, Open  ]],
Cell[CellGroupData[{
Cell[218682, 6025, 347, 8, 31, "Input",ExpressionUUID->"ba3bdb28-d12c-4916-8f40-a97ef0a06ff4",
 CellID->720384358],
Cell[219032, 6035, 457, 12, 45, "Output",ExpressionUUID->"590bcf03-f245-4e7d-ab98-7638737703f2",
 CellID->609538156]
}, Open  ]],
Cell[219504, 6050, 217, 2, 45, "Text",ExpressionUUID->"ee385d82-a81c-4e5a-8646-35b5d7410e31",
 CellID->1010791702],
Cell[219724, 6054, 1366, 20, 429, "Text",ExpressionUUID->"c2553f8e-4272-4ca6-9e3c-8565fd7d6feb",
 CellID->1421153163],
Cell[221093, 6076, 179, 2, 31, "SubitemNumbered",ExpressionUUID->"5a5ac3a4-6d97-49ec-8116-86ee03d1f7df",
 CellID->1651915404],
Cell[221275, 6080, 213, 4, 45, "Text",ExpressionUUID->"9ca3a888-9ce3-49c0-9ba1-0c0b85ad4108",
 CellID->1073606612],
Cell[221491, 6086, 728, 19, 101, "Input",ExpressionUUID->"e868f84e-c835-4ae4-a0e2-219f9aadddac",
 CellID->168273555],
Cell[222222, 6107, 168, 2, 45, "Text",ExpressionUUID->"d8ce6a7b-ed40-4b4f-8bdb-4a0124180557",
 CellID->1179051197],
Cell[CellGroupData[{
Cell[222415, 6113, 282, 5, 31, "Input",ExpressionUUID->"e401025f-c243-4887-bdc0-dd569ef21e2f",
 CellID->1472461758],
Cell[222700, 6120, 581, 12, 45, "Output",ExpressionUUID->"a337b109-67cc-4a97-be49-d1c8a06cc990",
 CellID->466799999]
}, Open  ]],
Cell[CellGroupData[{
Cell[223318, 6137, 345, 8, 31, "Input",ExpressionUUID->"c1a5603c-ca9d-48cc-9abf-21e5f9aa85e8",
 CellID->1913909055],
Cell[223666, 6147, 226, 5, 45, "Output",ExpressionUUID->"0ac507a6-bb56-4690-8975-773d20d3ad87",
 CellID->834865017]
}, Open  ]],
Cell[223907, 6155, 391, 6, 104, "Text",ExpressionUUID->"18746a13-fcf6-4e15-973f-f19f72c4673f",
 CellID->342839091],
Cell[224301, 6163, 223, 4, 31, "SubitemNumbered",ExpressionUUID->"9d529e1d-0f77-49d7-b0ed-f2530a950a8c",
 CellID->1752577116],
Cell[224527, 6169, 616, 9, 193, "Text",ExpressionUUID->"b19af030-2530-4cbd-bf8d-4aa6524f92a5",
 CellID->677886360],
Cell[CellGroupData[{
Cell[225168, 6182, 199, 3, 31, "Input",ExpressionUUID->"5d036fdc-800f-470d-b15f-94da526f7116",
 CellID->951564684],
Cell[225370, 6187, 413, 8, 45, "Output",ExpressionUUID->"dedcd219-574f-451f-af46-f9ecce30e4ad",
 CellID->1636922889]
}, Open  ]],
Cell[CellGroupData[{
Cell[225820, 6200, 200, 3, 31, "Input",ExpressionUUID->"131d57f9-77fe-4f1f-8641-65ac7c105e47",
 CellID->386507609],
Cell[226023, 6205, 254, 6, 45, "Output",ExpressionUUID->"ddb038bb-c18e-4e1b-9f72-0a43208c7c86",
 CellID->1183770136]
}, Open  ]],
Cell[226292, 6214, 291, 5, 75, "Text",ExpressionUUID->"3e57e109-91e1-418e-9d40-4ee269c626dd",
 CellID->1336169944],
Cell[CellGroupData[{
Cell[226608, 6223, 259, 5, 31, "Input",ExpressionUUID->"76011cf5-f531-44c9-b694-13471d53d543",
 CellID->93285625],
Cell[226870, 6230, 423, 9, 45, "Output",ExpressionUUID->"9b16bd42-c587-4b65-956c-0b3aae3d8dec",
 CellID->2004663322]
}, Open  ]],
Cell[227308, 6242, 310, 5, 75, "Text",ExpressionUUID->"7ed4a381-7268-4be6-ab88-a6db4f747de5",
 CellID->505515071],
Cell[CellGroupData[{
Cell[227643, 6251, 284, 6, 31, "Input",ExpressionUUID->"a6e9243d-5be0-4b3d-a026-c4f75477bb49",
 CellID->209165117],
Cell[227930, 6259, 412, 8, 45, "Output",ExpressionUUID->"7fcf9862-df59-4a16-b2c4-2a8872d33d1c",
 CellID->603045243]
}, Open  ]],
Cell[228357, 6270, 237, 4, 45, "Text",ExpressionUUID->"6f880caf-ef16-480d-bf90-6617b10356f2",
 CellID->1406068908],
Cell[228597, 6276, 818, 16, 134, "Text",ExpressionUUID->"5f30cc77-1cc3-45d7-af48-47541bb42654",
 CellID->553532234],
Cell[CellGroupData[{
Cell[229440, 6296, 548, 15, 31, "Input",ExpressionUUID->"bc4f2298-581f-4cea-bb1e-8efcd72c81d6",
 CellID->788221945],
Cell[229991, 6313, 521, 13, 45, "Output",ExpressionUUID->"0a08cdb5-6aaa-4a9c-a3b6-52702cb18b76",
 CellID->672039036]
}, Open  ]],
Cell[230527, 6329, 1094, 16, 340, "Text",ExpressionUUID->"7eb53a84-3dee-4121-9dcb-0273fd4f969f",
 CellID->1343578479],
Cell[CellGroupData[{
Cell[231646, 6349, 542, 15, 31, "Input",ExpressionUUID->"0847a769-3d32-42f5-a318-4a3101dfa358",
 CellID->1582054681],
Cell[232191, 6366, 856, 27, 68, "Output",ExpressionUUID->"1cf376f0-bd61-4aa1-afe6-af4014d1703f",
 CellID->933853257]
}, Open  ]],
Cell[233062, 6396, 335, 6, 75, "Text",ExpressionUUID->"10587389-46ac-4ac3-88c6-55e8045dbd6f",
 CellID->1461198123],
Cell[233400, 6404, 834, 17, 104, "Text",ExpressionUUID->"6bc08fe7-0fe1-43e6-97df-ec78818f089f",
 CellID->1890314917],
Cell[CellGroupData[{
Cell[234259, 6425, 322, 7, 31, "Input",ExpressionUUID->"6b283f02-9020-44e1-8ef8-62b7c4265d6a",
 CellID->1004404345],
Cell[234584, 6434, 1213, 38, 68, "Output",ExpressionUUID->"96680c84-94ea-4673-bbdc-c9609d8d0c1d",
 CellID->1938625731]
}, Open  ]],
Cell[235812, 6475, 248, 5, 75, "Text",ExpressionUUID->"deb385d8-f3b0-4096-9bb3-209584c5459c",
 CellID->1404011673],
Cell[CellGroupData[{
Cell[236085, 6484, 259, 5, 31, "Input",ExpressionUUID->"7510a3ae-1230-43e5-a987-8f83fe854827",
 CellID->2133753494],
Cell[236347, 6491, 7217, 155, 84, "Output",ExpressionUUID->"0af8f574-0536-4337-a0ed-0699710d70e0",
 CellID->1225361271]
}, Open  ]],
Cell[243579, 6649, 287, 5, 75, "Text",ExpressionUUID->"32a6d8f8-f295-4f80-9fd0-9145424509cb",
 CellID->278706967],
Cell[CellGroupData[{
Cell[243891, 6658, 298, 6, 31, "Input",ExpressionUUID->"85fb6bb9-f9ab-4a73-8edf-eba15e268b4a",
 CellID->1284271442],
Cell[244192, 6666, 228, 5, 45, "Output",ExpressionUUID->"da4350ef-5c02-471f-a23c-a07ad1bd2300",
 CellID->1109023867]
}, Open  ]],
Cell[244435, 6674, 308, 5, 75, "Text",ExpressionUUID->"99d064bc-dcc3-4d04-9efd-b7519e0b35a9",
 CellID->1353560356],
Cell[CellGroupData[{
Cell[244768, 6683, 290, 6, 31, "Input",ExpressionUUID->"29638856-9779-4aee-9922-cf05f5314d58",
 CellID->1945199012],
Cell[245061, 6691, 380, 11, 45, "Output",ExpressionUUID->"6b5fa2d6-b698-43b1-9d9b-bc50cdd56624",
 CellID->363341729]
}, Open  ]],
Cell[245456, 6705, 691, 14, 75, "Text",ExpressionUUID->"cc2ef842-71a8-42de-a592-c1b105cd1588",
 CellID->1388430882],
Cell[CellGroupData[{
Cell[246172, 6723, 258, 5, 31, "Input",ExpressionUUID->"ecc5eb00-0b0e-4f2a-8d4f-940ce2659812",
 CellID->1959030749],
Cell[246433, 6730, 363, 10, 45, "Output",ExpressionUUID->"369bb691-f545-490e-b5be-83fe915ea699",
 CellID->825615447]
}, Open  ]],
Cell[246811, 6743, 218, 4, 45, "Text",ExpressionUUID->"3d862ad3-3ac6-484b-9792-f2069d26ac74",
 CellID->1226974462],
Cell[CellGroupData[{
Cell[247054, 6751, 266, 5, 31, "Input",ExpressionUUID->"93a4568e-47c1-4793-8d88-0494d7a00b4b",
 CellID->1803094656],
Cell[247323, 6758, 265, 6, 45, "Output",ExpressionUUID->"53f7a4b6-c5b1-4fb2-aa50-bbed1abab10d",
 CellID->34176035]
}, Open  ]],
Cell[247603, 6767, 612, 9, 163, "Text",ExpressionUUID->"f1e59555-eecc-4d64-808a-0261fe659fa9",
 CellID->1018486496],
Cell[CellGroupData[{
Cell[248240, 6780, 287, 6, 31, "Input",ExpressionUUID->"39636e8b-e136-4d9b-985a-7fb3545f5d6b",
 CellID->908098140],
Cell[248530, 6788, 261, 6, 45, "Output",ExpressionUUID->"b0660285-24a6-45a9-a062-88bf7452f3ef",
 CellID->322165206]
}, Open  ]],
Cell[248806, 6797, 177, 2, 45, "Text",ExpressionUUID->"e86163ff-12eb-4a78-9a4d-172c5f7be00a",
 CellID->824343155],
Cell[CellGroupData[{
Cell[249008, 6803, 262, 5, 31, "Input",ExpressionUUID->"0ba59742-6da3-4b2e-8e32-1997000e7500",
 CellID->600563670],
Cell[249273, 6810, 261, 6, 45, "Output",ExpressionUUID->"4b085c5d-2d62-490c-a97c-e836efa650d1",
 CellID->383060852]
}, Open  ]],
Cell[249549, 6819, 326, 6, 75, "Text",ExpressionUUID->"4aa83e94-6fcf-479f-b484-d8777d52bc31",
 CellID->2095249505],
Cell[CellGroupData[{
Cell[249900, 6829, 204, 3, 31, "Input",ExpressionUUID->"ae780116-5763-4594-9ffe-dd062b08a51d",
 CellID->1064644950],
Cell[250107, 6834, 413, 8, 45, "Output",ExpressionUUID->"26557741-8bfd-49ca-8412-7fe4b5604a9b",
 CellID->58196114]
}, Open  ]],
Cell[CellGroupData[{
Cell[250557, 6847, 200, 3, 31, "Input",ExpressionUUID->"2d18a954-0c23-4dda-9deb-7a587b9bf434",
 CellID->245001150],
Cell[250760, 6852, 251, 6, 45, "Output",ExpressionUUID->"e4b49e04-8e49-41cf-b98b-6d48f0a2bd87",
 CellID->864003752]
}, Open  ]],
Cell[251026, 6861, 354, 6, 104, "Text",ExpressionUUID->"295eed79-12fb-4d95-9085-9f888739b762",
 CellID->26638850],
Cell[251383, 6869, 2506, 67, 243, "Input",ExpressionUUID->"0c251c97-9cf8-431f-8e0a-74fa45d3da21",
 CellID->1797777018],
Cell[253892, 6938, 183, 2, 45, "Text",ExpressionUUID->"5fe65b37-c38a-4c74-8a25-a1edad4ba63b",
 CellID->1586049342],
Cell[CellGroupData[{
Cell[254100, 6944, 201, 3, 31, "Input",ExpressionUUID->"c0810ac7-548b-4a37-a86f-189c40a7a2c2",
 CellID->714262124],
Cell[254304, 6949, 415, 8, 45, "Output",ExpressionUUID->"04200315-1fcb-4977-8600-750e24d65d84",
 CellID->1413956081]
}, Open  ]],
Cell[CellGroupData[{
Cell[254756, 6962, 272, 5, 31, "Input",ExpressionUUID->"bbaf289b-026f-40d0-8751-36cb474bb7e1",
 CellID->915514384],
Cell[255031, 6969, 306, 7, 45, "Output",ExpressionUUID->"6c501ae7-9142-4aee-8b7a-0c5ff9f823e8",
 CellID->1625144660]
}, Open  ]],
Cell[255352, 6979, 276, 5, 75, "Text",ExpressionUUID->"7d3d11ea-5dbd-42c2-889b-59bd223314d8",
 CellID->2109278074],
Cell[255631, 6986, 175, 2, 31, "SubitemNumbered",ExpressionUUID->"4a3bb469-0106-4dc3-9ed6-090a3f76bf82",
 CellID->1766781058],
Cell[255809, 6990, 224, 5, 45, "Text",ExpressionUUID->"2d07288d-838e-4788-8f82-77d8aef01f09",
 CellID->1032854737],
Cell[256036, 6997, 578, 14, 78, "Input",ExpressionUUID->"1793e924-b4d7-404d-bb51-72eacf6cc869",
 CellID->1241614244],
Cell[256617, 7013, 174, 2, 45, "Text",ExpressionUUID->"9041480d-1ac6-4c60-b18a-84035b6578cd",
 CellID->83414686],
Cell[CellGroupData[{
Cell[256816, 7019, 284, 5, 31, "Input",ExpressionUUID->"590ece17-5650-488c-a5a2-cba455a629b0",
 CellID->1006744591],
Cell[257103, 7026, 580, 12, 45, "Output",ExpressionUUID->"bf56b1e1-ede7-4ebb-9e63-c269de17211f",
 CellID->1583784046]
}, Open  ]],
Cell[CellGroupData[{
Cell[257720, 7043, 343, 8, 31, "Input",ExpressionUUID->"954c1275-be57-4114-b7bd-bfea3459b8ce",
 CellID->67797810],
Cell[258066, 7053, 227, 5, 45, "Output",ExpressionUUID->"d754a58a-93de-4a3e-89ec-cb11e95bc778",
 CellID->2043615553]
}, Open  ]],
Cell[258308, 7061, 986, 15, 311, "Text",ExpressionUUID->"6371eb2b-af73-4d91-b877-7226f7338058",
 CellID->1400825910],
Cell[259297, 7078, 433, 10, 54, "Input",ExpressionUUID->"9e4d80ae-d9ce-49de-b55e-57db8f57adea",
 CellID->1662056232],
Cell[CellGroupData[{
Cell[259755, 7092, 1346, 33, 171, "Input",ExpressionUUID->"a5fd7ddd-e35e-41b0-9af4-28b5def91089",
 CellID->850548125],
Cell[261104, 7127, 480, 12, 45, "Output",ExpressionUUID->"bddec272-40a1-4f53-80ba-71f898eb20b2",
 CellID->1232519931],
Cell[261587, 7141, 479, 12, 45, "Output",ExpressionUUID->"5e06a746-c413-4f97-8302-853c6359144f",
 CellID->335221355],
Cell[262069, 7155, 482, 12, 45, "Output",ExpressionUUID->"0494c845-10ef-4c45-92b4-bb0ed8d103a2",
 CellID->1215707404],
Cell[262554, 7169, 479, 12, 45, "Output",ExpressionUUID->"45f6a00a-c7c2-4b84-90f4-6b0d368484c1",
 CellID->1234921470],
Cell[263036, 7183, 479, 12, 45, "Output",ExpressionUUID->"65696f8d-0b6d-4cde-a6e0-1b0cf2ee27fb",
 CellID->2043181682],
Cell[263518, 7197, 480, 12, 45, "Output",ExpressionUUID->"5e762822-6f90-4941-a03e-016cd5172c9e",
 CellID->1491013844]
}, Open  ]],
Cell[264013, 7212, 231, 5, 31, "SubitemNumbered",ExpressionUUID->"fc389fef-feb3-4ea4-b744-1bc5c3283bf1",
 CellID->482999265],
Cell[264247, 7219, 1268, 23, 281, "Text",ExpressionUUID->"898be5ab-bffa-40cc-a236-4f864a144ecd",
 CellID->280461195],
Cell[265518, 7244, 552, 14, 55, "Input",ExpressionUUID->"9d4aa64b-25b9-4fd7-9ce5-c6dacb819af2",
 CellID->1082569981],
Cell[266073, 7260, 309, 5, 75, "Text",ExpressionUUID->"8bd201f0-c47a-4bb5-b703-f5e3733b0bd4",
 CellID->1172447602],
Cell[CellGroupData[{
Cell[266407, 7269, 390, 9, 31, "Input",ExpressionUUID->"c7e05c97-47e4-4438-8f8c-a207067d39ab",
 CellID->141742690],
Cell[266800, 7280, 302, 7, 45, "Output",ExpressionUUID->"b2af37b4-eaa4-4ff2-ae11-ae525591b7e6",
 CellID->347339876]
}, Open  ]],
Cell[267117, 7290, 291, 5, 75, "Text",ExpressionUUID->"3516bdde-0e73-428b-a506-6457a28183cf",
 CellID->880743386],
Cell[267411, 7297, 152, 2, 38, "ItemNumbered",ExpressionUUID->"24fc1c87-824c-4039-9d05-77c22df72dc7",
 CellID->1967444822],
Cell[267566, 7301, 1111, 17, 311, "Text",ExpressionUUID->"f60e35f0-10fa-4f54-b899-6f6cc7ecb76d",
 CellID->2039410495],
Cell[268680, 7320, 1274, 18, 399, "Text",ExpressionUUID->"86e128fc-21fb-45c0-bde3-6a7aa0ed8ce5",
 CellID->88197532],
Cell[269957, 7340, 726, 11, 222, "Text",ExpressionUUID->"4a63b28e-bc9b-4eec-b9ad-b5f102892b4e",
 CellID->1613787488]
}, Open  ]],
Cell[CellGroupData[{
Cell[270720, 7356, 147, 2, 68, "Subsection",ExpressionUUID->"92479a42-4f42-4937-a31b-8f4bbfa27449",
 CellID->1770714766],
Cell[270870, 7360, 885, 13, 281, "Text",ExpressionUUID->"ff6121dd-4ccd-4c60-802e-fb790fe70c96",
 CellID->574692036],
Cell[271758, 7375, 694, 10, 193, "Text",ExpressionUUID->"9532144f-8d45-4dae-beb2-d632ac44f90f",
 CellID->656309146],
Cell[272455, 7387, 644, 10, 193, "Text",ExpressionUUID->"aef9d5da-78b9-4fe4-8ca1-82ea42f9a116",
 CellID->1262385060]
}, Open  ]]
}, Open  ]]
}
]
*)

