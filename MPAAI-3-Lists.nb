(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    334390,       8913]
NotebookOptionsPosition[    251334,       7184]
NotebookOutlinePosition[    253733,       7253]
CellTagsIndexPosition[    253412,       7239]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 StyleBox["Leonid Shifrin",
  FontFamily->"FZLanTingHei-DB-GBK",
  FontSize->12,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.8488288700694285, 0.3848325322346838, 0.1479972533760586]],
 StyleBox["\[LineSeparator]",
  FontSize->12,
  FontColor->RGBColor[1, 0.5, 0]],
 StyleBox["\n",
  FontSize->12,
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0.5, 0]],
 StyleBox["Mathematica programming: an advanced introduction                  \
           ",
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox[ButtonBox["<",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{"."}, "MPAAI-2-Elementary-operations.nb", 
     CharacterEncoding -> "UTF-8"], None},
  ButtonNote->"./MPAAI-2-Elementary-operations.nb"],
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox["    ",
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox[ButtonBox[">",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{"."}, "MPAAI-4-Rules-patterns-functions.nb", 
     CharacterEncoding -> "UTF-8"], None},
  ButtonNote->"./MPAAI-4-Rules-patterns-functions.nb"],
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox["    ",
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox[ButtonBox["\[CapitalXi]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "contents.nb", CharacterEncoding -> "UTF-8"], None},
  
  ButtonNote->"/Users/fengh/Documents/RDS/EDITED/MPAAI/contents.nb"],
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox["\[LineSeparator]\[LineSeparator]",
  FontSize->12,
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0.5, 0]],
 StyleBox["Edited by Hao Feng",
  FontFamily->"Futura",
  FontSize->12,
  FontWeight->"Medium",
  FontSlant->"Italic",
  FontColor->RGBColor[
   0.8488288700694285, 0.3848325322346838, 0.1479972533760586]]
}], "Text",
 CellMargins->{{66, -45}, {4, 12}},
 CellChangeTimes->{{3.9397640484222183`*^9, 3.939764052679113*^9}, 
   3.9397641564677134`*^9, 3.939764214184162*^9, {3.939774845841297*^9, 
   3.9397748486786137`*^9}, 3.9397769383984737`*^9, 3.939777524212697*^9, {
   3.939777679887363*^9, 3.9397776986053457`*^9}, 3.939777748637487*^9, 
   3.939777854556375*^9, {3.939778004745451*^9, 3.939778004752576*^9}, {
   3.939778088573533*^9, 3.9397780885805683`*^9}, {3.939778650880439*^9, 
   3.9397786508874483`*^9}, {3.939778753074917*^9, 3.9397787530822372`*^9}, {
   3.939778788965104*^9, 3.9397787889721003`*^9}, {3.939784031878096*^9, 
   3.9397840413844843`*^9}, {3.9403032713851624`*^9, 3.940303271392748*^9}},
 LineSpacing->{0.6999999999999997, 3},
 Background->RGBColor[
  0.13066300450141147`, 0.12460517280842298`, 0.4353551537346456],
 CellID->912160115,ExpressionUUID->"bd0bea70-a121-40ca-9836-4c84ae7df73e"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 StyleBox[" | ", "SectionBar"],
 "Lists"
}], "Section",
 CellChangeTimes->{
  3.652728456208679*^9, 3.652728527108994*^9, {3.939778480035862*^9, 
   3.939778482449224*^9}},
 CounterAssignments->{{"Section", 2}},
 CellID->919055616,ExpressionUUID->"76472712-eadd-44eb-98de-42fb8a27a2d4"],

Cell[CellGroupData[{

Cell["Introduction", "Subsection",
 CellChangeTimes->{3.9397877158146887`*^9},
 CellID->1334210680,ExpressionUUID->"0ced549c-1195-4094-b143-6cb1aaab8da3"],

Cell[TextData[{
 "Lists are the main data structure in Mathematica, and also in functional \
programming languages such as LISP. Any complex data structure can be \
represented as some (perhaps, complex and nested) list. For example, ",
 StyleBox["N",
  FontSlant->"Italic"],
 "-dimensional array is represented as a list with depth ",
 StyleBox["N",
  FontSlant->"Italic"],
 ". Any tree can also be represented as a\nlist."
}], "Text",
 CellChangeTimes->{{3.939787722613873*^9, 3.9397877309920187`*^9}},
 CellID->54656786,ExpressionUUID->"19a918a4-669d-4732-b0ee-8ee6978832ca"],

Cell["\<\
Lists can be generated dynamically during the process of program execution, \
and the correctly written functions work on lists of arbitrary length without \
taking the length of the list as an explicit parameter. This results in a \
quite \[OpenCurlyDoubleQuote]clean\[CloseCurlyDoubleQuote] code, which is at \
the same time easy to write. Another advantage of lists is that it is usually \
easy to debug functions that work on them - we will see many examples of \
these features. In this chapter we will cover several built-in functions \
which are used to generate and process lists.\
\>", "Text",
 CellChangeTimes->{{3.939787744955104*^9, 3.9397877726312933`*^9}},
 CellID->849705552,ExpressionUUID->"4a126f08-d44d-4870-a55e-9015452c45ac"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
The main rule of thumb when working with lists in Mathematica\
\>", "Subsection",
 CellChangeTimes->{3.939787781240891*^9},
 CellID->610703252,ExpressionUUID->"0c671e56-8186-4222-8d78-ce48fe96b10b"],

Cell[TextData[{
 "When we work with lists in Mathematica, especially large ones, it makes \
sense to stick to the following main rule: ",
 StyleBox["any list we have to treat as a single unit, and avoid operations \
that break it into pieces, such as array indexing",
  FontSlant->"Italic"],
 ". In other words, the best programming style is to try writing the programs \
such that the operations are applied to the list as a whole. This approach is \
especially important in the functional programming style, and leads to \
significant increase of code efficiency. We will illustrate this issue on \
many examples, particularly in the chapter V on functional programming."
}], "Text",
 CellChangeTimes->{{3.939787787509284*^9, 3.939787815209879*^9}},
 CellID->1265207351,ExpressionUUID->"82f316a9-ec8a-4141-bac1-b2a041afc07b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The content of lists", "Subsection",
 CellChangeTimes->{3.9397878223400507`*^9},
 CellID->238968988,ExpressionUUID->"fc21000b-1ccd-4183-82a4-ad08ca093de3"],

Cell["\<\
Lists are not required to contain only elements of the same type - they can \
contain any Mathematica expressions mixed in an arbitrary way. These \
expressions may themselves be lists or more general Mathematica expressions, \
of any size and depth. Essentially, a list is a particular case of a general \
Mathematica expression, characterized by having the head List:\
\>", "Text",
 CellChangeTimes->{{3.939787829949401*^9, 3.939787851961849*^9}},
 CellID->557361426,ExpressionUUID->"f5200853-cfb7-4db6-8af1-abf70236055d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "x", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"List", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"Cos", "[", "x", "]"}], ",", 
   RowBox[{"Tan", "[", "x", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.939787856030386*^9, 3.939787863283202*^9}},
 CellLabel->"In[86]:=",
 CellID->365345351,ExpressionUUID->"8b2e623b-9cca-4338-8a19-745dd0d6031c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"Cos", "[", "x", "]"}], ",", 
   RowBox[{"Tan", "[", "x", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939787863799034*^9},
 CellLabel->"Out[87]=",
 CellID->382254241,ExpressionUUID->"e7d31de2-7f73-4423-91be-fcef953d0cc3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generation of lists", "Subsection",
 CellChangeTimes->{3.9397878790658617`*^9},
 CellID->1423440310,ExpressionUUID->"a08efdb1-28e4-486a-8cb4-ef7be4e13518"],

Cell["There are many ways to generate a list", "Text",
 CellChangeTimes->{3.9397878849500113`*^9},
 CellID->793462590,ExpressionUUID->"a4848f25-0530-42c6-90e4-30e69988ec42"],

Cell[CellGroupData[{

Cell["Generating a list by hand", "Subsubsection",
 CellChangeTimes->{3.9397878929163218`*^9},
 CellID->1999785907,ExpressionUUID->"98b8b983-c39c-4b90-9733-910aec2ed6f3"],

Cell["\<\
First of all, it is of course possible to generate a list by hand. That is, \
some fixed lists in the programs are just defined by the programmer. For \
instance:\
\>", "Text",
 CellChangeTimes->{{3.93978789859895*^9, 3.939787902764988*^9}},
 CellID->135179752,ExpressionUUID->"4665725a-12ef-4693-9ca0-58cdcc170b5c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"testlist", ",", "a", ",", "b", ",", "c", ",", "d", ",", "e"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testlist", "=", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], 
   "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "testlist", "]"}]}], "Input",
 CellChangeTimes->{{3.939787907883471*^9, 3.939787926284738*^9}},
 CellLabel->"In[88]:=",
 CellID->137878516,ExpressionUUID->"79a94ece-2e3a-492c-9f91-da64a66991ec"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]], "Output",
 CellChangeTimes->{3.939787926640512*^9},
 CellLabel->"Out[89]=",
 CellID->1199301931,ExpressionUUID->"17dc6e4a-0c6f-4e52-b08e-85955bc4e3f6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Generation of lists of equidistant numbers by the Range command\
\>", "Subsubsection",
 CellChangeTimes->{3.9397879398827057`*^9},
 CellID->2109646076,ExpressionUUID->"038e8624-06a5-41e0-920f-5cfb26456fa8"],

Cell["\<\
In practice it is very often necessary to generate lists of equidistant \
numbers. This is especially true in the functional approach since there \
functions on such lists replace loops. Such lists can be generated by using \
the built-in Range command. Examples:\
\>", "Text",
 CellChangeTimes->{{3.9397879487614594`*^9, 3.939787966786254*^9}},
 CellID->1866587362,ExpressionUUID->"bba9e24e-b290-4270-8b82-f1cb9e842b0b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Range", "[", "5", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Range", "[", 
  RowBox[{"2", ",", "10"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Range", "[", 
  RowBox[{"2", ",", "11", ",", "3"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Range", "[", 
  RowBox[{"0", ",", "1", ",", "0.1"}], "]"}]}], "Input",
 CellChangeTimes->{{3.9397879688468027`*^9, 3.939787981394353*^9}},
 CellLabel->"In[91]:=",
 CellID->1777994463,ExpressionUUID->"f56c5c21-b41b-4897-857a-2e0fe5282bc1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.93978798174021*^9},
 CellLabel->"Out[91]=",
 CellID->75016856,ExpressionUUID->"61ff5ef2-ea8a-41cd-9d60-2a9319fb52ce"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", 
   ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.9397879817522917`*^9},
 CellLabel->"Out[92]=",
 CellID->235398003,ExpressionUUID->"3a6c245d-cf50-4a8c-aab7-55fe20d177c7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "5", ",", "8", ",", "11"}], "}"}]], "Output",
 CellChangeTimes->{3.939787981758601*^9},
 CellLabel->"Out[93]=",
 CellID->669358647,ExpressionUUID->"6dc05c73-9259-42b2-b91b-4b986c157c3e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.`", ",", "0.1`", ",", "0.2`", ",", "0.30000000000000004`", ",", "0.4`", 
   ",", "0.5`", ",", "0.6000000000000001`", ",", "0.7000000000000001`", ",", 
   "0.8`", ",", "0.9`", ",", "1.`"}], "}"}]], "Output",
 CellChangeTimes->{3.939787981764632*^9},
 CellLabel->"Out[94]=",
 CellID->1391437143,ExpressionUUID->"ba412535-9190-4ab7-9ba4-1d2f0b3f842f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generation of lists with the Table command", "Subsubsection",
 CellChangeTimes->{3.939787990426812*^9},
 CellTags->"3.4.3",
 CellID->1934630218,ExpressionUUID->"b9847a09-d3e2-429a-a777-68fbb92ea886"],

Cell["\<\
In cases when we need lists of more general nature, often they can be \
generated by the Table command. Examples:\
\>", "Text",
 CellChangeTimes->{{3.939787995460911*^9, 3.93978800157554*^9}},
 CellID->280174699,ExpressionUUID->"7d07ccb9-b28a-4ba5-abf1-58e4588dfee9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Table", "[", 
  RowBox[{"1", ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   SuperscriptBox["i", "2"], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"i", "*", "j"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"j", ",", "1", ",", "3"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"i", "+", "j"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"j", ",", "1", ",", "i"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"i", "+", "j", "+", "k"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"j", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "1", ",", "3"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "i", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.939788005503318*^9, 3.939788054072016*^9}},
 CellLabel->"In[95]:=",
 CellID->1522118056,ExpressionUUID->"cf7d9e56-0466-4e18-9aa4-6960f3f46781"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
   ",", "1", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.939788054338778*^9},
 CellLabel->"Out[95]=",
 CellID->182345328,ExpressionUUID->"6e979ec9-fc0f-4d43-87af-12a92c0f1c52"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "9", ",", "16", ",", "25", ",", "36", ",", "49", ",", 
   "64", ",", "81", ",", "100"}], "}"}]], "Output",
 CellChangeTimes->{3.939788054350868*^9},
 CellLabel->"Out[96]=",
 CellID->218763427,ExpressionUUID->"39da8487-1c89-4461-ae05-2a83e17d2217"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6", ",", "9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9397880543569736`*^9},
 CellLabel->"Out[97]=",
 CellID->264913925,ExpressionUUID->"649d4c1d-c5d6-4d6c-b3af-c579d1400c9c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.93978805436299*^9},
 CellLabel->"Out[98]=",
 CellID->674737244,ExpressionUUID->"5c84d823-857e-419c-95e8-1c434a2240ac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6", ",", "7"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "7", ",", "8"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939788054368992*^9},
 CellLabel->"Out[99]=",
 CellID->1595203748,ExpressionUUID->"0cde4531-59d1-4606-8ec8-f0a611892023"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Sin", "[", "1", "]"}], ",", 
   RowBox[{"Sin", "[", "2", "]"}], ",", 
   RowBox[{"Sin", "[", "3", "]"}], ",", 
   RowBox[{"Sin", "[", "4", "]"}], ",", 
   RowBox[{"Sin", "[", "5", "]"}], ",", 
   RowBox[{"Sin", "[", "6", "]"}], ",", 
   RowBox[{"Sin", "[", "7", "]"}], ",", 
   RowBox[{"Sin", "[", "8", "]"}], ",", 
   RowBox[{"Sin", "[", "9", "]"}], ",", 
   RowBox[{"Sin", "[", "10", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939788054375305*^9},
 CellLabel->"Out[100]=",
 CellID->1403543488,ExpressionUUID->"942b5470-16bd-4b13-9a7a-35ca72fc3521"]
}, Open  ]],

Cell["\<\
As these examples show, Table accepts one or more lists which indicate the \
iteration bounds, but we can fill the lists with some functions computed on \
the counters being iterated. In cases when we have more than one iterator, we \
create a nested list where the innermost iterators correspond to the \
outermost lists. As we see, the bounds of the more outermost iterators may \
depend on the variables of more innermost ones, in which case the lists will \
have sublists of different lengths. This is where we start seeing that lists \
are more general than (multidimensional) arrays since the sublists are not \
bound to have the same dimensions. Also, notice that lists created by Table \
are not bound to be lists of numbers - they can be lists of functions:\
\>", "Text",
 CellChangeTimes->{{3.939788087840283*^9, 3.9397881367097054`*^9}},
 CellID->1395024168,ExpressionUUID->"8f22394e-fdd5-472a-a552-396c78736865"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"i", ",", "x"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   SuperscriptBox["x", "i"], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.9397881511280518`*^9, 3.939788159191628*^9}},
 CellLabel->"In[101]:=",
 CellID->1790533662,ExpressionUUID->"a556d969-41c2-46ce-a3a9-f28b1c5d953d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", 
   SuperscriptBox["x", "2"], ",", 
   SuperscriptBox["x", "3"], ",", 
   SuperscriptBox["x", "4"], ",", 
   SuperscriptBox["x", "5"], ",", 
   SuperscriptBox["x", "6"], ",", 
   SuperscriptBox["x", "7"], ",", 
   SuperscriptBox["x", "8"], ",", 
   SuperscriptBox["x", "9"], ",", 
   SuperscriptBox["x", "10"]}], "}"}]], "Output",
 CellChangeTimes->{3.939788159472702*^9},
 CellLabel->"Out[102]=",
 CellID->828493899,ExpressionUUID->"4a5e59bc-3278-444f-b65d-18e6658edb4c"]
}, Open  ]],

Cell["Here, for example, we created a 3x3 matrix of monomials:", "Text",
 CellChangeTimes->{3.9397881672135983`*^9},
 CellID->212993345,ExpressionUUID->"b2f44677-8b41-4870-b623-0dcd24d3b4f5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"i", ",", "j", ",", "x"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   SuperscriptBox["x", 
    RowBox[{"i", "+", "j"}]], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"j", ",", "1", ",", "3"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.939788169064089*^9, 3.939788183900404*^9}},
 CellLabel->"In[103]:=",
 CellID->1053371474,ExpressionUUID->"b85afa1a-e052-4bc3-b782-36f424d1afa9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["x", "2"], ",", 
     SuperscriptBox["x", "3"], ",", 
     SuperscriptBox["x", "4"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["x", "3"], ",", 
     SuperscriptBox["x", "4"], ",", 
     SuperscriptBox["x", "5"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["x", "4"], ",", 
     SuperscriptBox["x", "5"], ",", 
     SuperscriptBox["x", "6"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939788184372757*^9},
 CellLabel->"Out[104]=",
 CellID->2105872124,ExpressionUUID->"cb6b447f-ed5d-4ce7-8b35-edd70f5a2c5b"]
}, Open  ]],

Cell["\<\
One more comment about Table is that it is a scoping construct in the sense \
that it localizes its iterator variables. It effectively uses Block[] scoping \
construct in doing so, with all the consequences which normally accompany the \
use of Block[] (see section 4.8). In particular, naively we expect <f[i] > \
symbol printed 5 times in the following example, since the definition of <f > \
used the global <i >\
\>", "Text",
 CellChangeTimes->{{3.939788194310766*^9, 3.9397882107945766`*^9}, {
  3.939948546371591*^9, 3.939948546418025*^9}},
 CellID->714801861,ExpressionUUID->"a4c5fa77-39f7-4d02-8177-47322bca5447"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"f", ",", "i"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"f", ":=", 
   SuperscriptBox["i", "2"]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.939788219211274*^9, 3.939788230944285*^9}},
 CellLabel->"In[105]:=",
 CellID->1679433966,ExpressionUUID->"5624563c-fc88-402f-ac9d-6bc7e40b397d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "9", ",", "16", ",", "25"}], "}"}]], "Output",
 CellChangeTimes->{3.939788233613838*^9},
 CellLabel->"Out[107]=",
 CellID->1624114657,ExpressionUUID->"1e9e31ad-befc-4435-b364-828e4ca30f80"]
}, Open  ]],

Cell["The global <i > however did not receive any value :", "Text",
 CellChangeTimes->{3.939788242089713*^9, 3.939948546440694*^9},
 CellID->1977886829,ExpressionUUID->"7e295eb9-b67e-47ee-a11f-1fe599cf951f"],

Cell[CellGroupData[{

Cell[BoxData["i"], "Input",
 CellChangeTimes->{3.939788243643628*^9},
 CellLabel->"In[108]:=",
 CellID->1469224295,ExpressionUUID->"16eb5259-5a2e-4179-96ad-98a9fae5adea"],

Cell[BoxData["i"], "Output",
 CellChangeTimes->{3.9397882438942537`*^9},
 CellLabel->"Out[108]=",
 CellID->1718514223,ExpressionUUID->"28eb5229-3b1e-46b4-aada-79d42535389c"]
}, Open  ]],

Cell["\<\
The final comment about Table is that while it is a scoping construct, \
Return[] command can not be used to break out of it, unlike some other \
scoping constructs we will encounter :\
\>", "Text",
 CellChangeTimes->{{3.93978825190863*^9, 3.9397882557092953`*^9}},
 CellID->1560977458,ExpressionUUID->"2b62830e-7b66-4932-9d93-bb850b96ee2a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"i", ">", "3"}], ",", 
     RowBox[{"Return", "[", "]"}], ",", "i"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.939788259911038*^9, 3.939788276541421*^9}},
 CellLabel->"In[109]:=",
 CellID->196009309,ExpressionUUID->"03ed2e59-3f88-4297-8ecd-c64ad7c7c80f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", 
   RowBox[{"Return", "[", "]"}], ",", 
   RowBox[{"Return", "[", "]"}], ",", 
   RowBox[{"Return", "[", "]"}], ",", 
   RowBox[{"Return", "[", "]"}], ",", 
   RowBox[{"Return", "[", "]"}], ",", 
   RowBox[{"Return", "[", "]"}], ",", 
   RowBox[{"Return", "[", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.93978827782454*^9},
 CellLabel->"Out[109]=",
 CellID->131831707,ExpressionUUID->"a0b227cd-9b63-4010-9733-8202e73dca5a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["A comment on universality of Range", "Subsubsection",
 CellChangeTimes->{3.939789146950902*^9},
 CellID->1639859492,ExpressionUUID->"e3b31785-b470-4c17-a8e9-96d239670d68"],

Cell["\<\
As far as the first and the second examples are concerned, we can get the \
same result also with the Range command. Observe:\
\>", "Text",
 CellChangeTimes->{{3.939789153252657*^9, 3.9397891575231953`*^9}},
 CellID->313356446,ExpressionUUID->"7d7a9351-8e34-4df2-8de6-5978f00384f2"],

Cell[CellGroupData[{

Cell[BoxData[{
 SuperscriptBox[
  RowBox[{"Range", "[", "10", "]"}], "0"], "\[IndentingNewLine]", 
 SuperscriptBox[
  RowBox[{"Range", "[", "10", "]"}], "2"]}], "Input",
 CellChangeTimes->{{3.939789165972471*^9, 3.939789175897564*^9}},
 CellLabel->"In[110]:=",
 CellID->733839252,ExpressionUUID->"3f17a7c9-1de3-4d6d-af53-8e3fc854bb91"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
   ",", "1", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.939789176585367*^9},
 CellLabel->"Out[110]=",
 CellID->1382526386,ExpressionUUID->"a457a5dd-7323-458e-b9cd-125c16964604"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "9", ",", "16", ",", "25", ",", "36", ",", "49", ",", 
   "64", ",", "81", ",", "100"}], "}"}]], "Output",
 CellChangeTimes->{3.93978917659767*^9},
 CellLabel->"Out[111]=",
 CellID->347908962,ExpressionUUID->"7d82ca0b-c541-475e-a2d5-62ded6fbfcae"]
}, Open  ]],

Cell["\<\
All other examples can also be done with Range and a small amount of \
functional programming:\
\>", "Text",
 CellChangeTimes->{3.9397891877264347`*^9},
 CellID->1855437200,ExpressionUUID->"7fceaeb8-f39d-433f-93ff-ed10a61bb3e7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Range", "[", "3", "]"}], "*", "#"}], ")"}], "&"}], "/@", 
  RowBox[{"Range", "[", "3", "]"}]}]], "Input",
 CellChangeTimes->{{3.939789190840193*^9, 3.939789200556878*^9}},
 CellLabel->"In[112]:=",
 CellID->684296319,ExpressionUUID->"9d8566fa-d15d-4e3d-80de-32707672520b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6", ",", "9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939789200949595*^9},
 CellLabel->"Out[112]=",
 CellID->887117072,ExpressionUUID->"3afe0033-5e11-4a55-a352-4dbc7cf85447"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Range", "[", 
    RowBox[{
     RowBox[{"#", "+", "1"}], ",", 
     RowBox[{"2", "*", "#"}]}], "]"}], "&"}], "/@", 
  RowBox[{"Range", "[", "4", "]"}]}]], "Input",
 CellChangeTimes->{{3.9397892195251904`*^9, 3.939789229732184*^9}},
 CellLabel->"In[113]:=",
 CellID->1019887129,ExpressionUUID->"32cf126d-f2a6-4824-b593-cf2076f747c7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939789230072302*^9},
 CellLabel->"Out[113]=",
 CellID->1855394060,ExpressionUUID->"95c91a4c-0d89-4cc4-9805-f9ff8c4d2cd2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Nest", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Partition", "[", 
     RowBox[{"#", ",", "3", ",", "1"}], "]"}], "&"}], ",", 
   RowBox[{"Range", "[", 
    RowBox[{"3", ",", "8"}], "]"}], ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.9397892585496273`*^9, 3.9397892763075113`*^9}},
 CellLabel->"In[114]:=",
 CellID->1688714730,ExpressionUUID->"65ea8f76-b8c7-4bca-b31d-7b925089c850"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6", ",", "7"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "7", ",", "8"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939789276754141*^9},
 CellLabel->"Out[114]=",
 CellID->1006731815,ExpressionUUID->"3bb3558e-f84e-4831-a698-c7507e689bd0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Sin", ",", 
   RowBox[{"Range", "[", "10", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.939789298253833*^9, 3.939789305060707*^9}},
 CellLabel->"In[115]:=",
 CellID->426179363,ExpressionUUID->"101c97b5-61d5-4a52-8aa7-cff68ec6173d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Sin", "[", "1", "]"}], ",", 
   RowBox[{"Sin", "[", "2", "]"}], ",", 
   RowBox[{"Sin", "[", "3", "]"}], ",", 
   RowBox[{"Sin", "[", "4", "]"}], ",", 
   RowBox[{"Sin", "[", "5", "]"}], ",", 
   RowBox[{"Sin", "[", "6", "]"}], ",", 
   RowBox[{"Sin", "[", "7", "]"}], ",", 
   RowBox[{"Sin", "[", "8", "]"}], ",", 
   RowBox[{"Sin", "[", "9", "]"}], ",", 
   RowBox[{"Sin", "[", "10", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939789305453702*^9},
 CellLabel->"Out[115]=",
 CellID->1425313914,ExpressionUUID->"595a38fa-0566-4240-b721-1deacaf733c0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "x", "]"}], ";"}], "\[IndentingNewLine]", 
 SuperscriptBox["x", 
  RowBox[{"Range", "[", "10", "]"}]]}], "Input",
 CellChangeTimes->{{3.939789308245309*^9, 3.9397893176910048`*^9}},
 CellLabel->"In[116]:=",
 CellID->1411410153,ExpressionUUID->"ac8652cc-5ddd-4e91-a329-38ef2f4a829f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", 
   SuperscriptBox["x", "2"], ",", 
   SuperscriptBox["x", "3"], ",", 
   SuperscriptBox["x", "4"], ",", 
   SuperscriptBox["x", "5"], ",", 
   SuperscriptBox["x", "6"], ",", 
   SuperscriptBox["x", "7"], ",", 
   SuperscriptBox["x", "8"], ",", 
   SuperscriptBox["x", "9"], ",", 
   SuperscriptBox["x", "10"]}], "}"}]], "Output",
 CellChangeTimes->{3.9397893182579947`*^9},
 CellLabel->"Out[117]=",
 CellID->1348249820,ExpressionUUID->"48ceb991-94e7-4ddc-b1c0-44f89c4dfe08"]
}, Open  ]],

Cell["\<\
The above examples may look unclear now. We give them here just to show that \
one can go a long way with just the Range command, and to clarify the role of \
Table. In fact, Table can be thought of as an optimized loop - it is usually \
(much) more efficient to create lists with Table rather than to do that in a \
loop such as Do, For or While. But in the functional programming, Table is \
not so often used, unlike Range, and now you can see why - we can always get \
the same effect, and moreover, very often do it faster.\
\>", "Text",
 CellChangeTimes->{{3.939789327444784*^9, 3.939789355268752*^9}},
 CellID->1934765243,ExpressionUUID->"4d2d3b5f-fac3-45b0-9f70-85535bd30e08"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generation of lists inside loops", "Subsubsection",
 CellChangeTimes->{3.939789413651273*^9},
 CellID->736909015,ExpressionUUID->"5865d26f-9031-4d70-a325-51c99e76892b"],

Cell["List generation with Append or Prepend", "ItemNumbered",
 CellChangeTimes->{3.939789434065445*^9},
 CellID->691622856,ExpressionUUID->"cef4427c-eb76-4d93-9fb9-157c51ce5044"],

Cell["\<\
Such loop generation is possible and resembles most closely what we usually \
have in procedural languages. In Mathematica usually this is one of the least \
efficient ways to do this. Also, the Table command is actually a loop, but \
optimized for list generation and fast. The direct list generation inside a \
loop requires the commands Append, Prepend, AppendTo or PrependTo, starting \
with an empty list. Append adds one element at the end of the list, and for \
reasons which we will explain later is very inefficient in Mathematica for \
large lists. Let us instead illustrate this with an example. Here is a simple \
list generated with Append:\
\>", "Text",
 CellChangeTimes->{{3.939789442456839*^9, 3.939789471398073*^9}},
 CellID->1923843228,ExpressionUUID->"9697dd12-d50d-43d3-9a6f-c201fd025fab"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"testlist", "=", 
      RowBox[{"{", "}"}]}], ";", 
     RowBox[{"i", "=", "1"}]}], ",", 
    RowBox[{"i", "<=", "10"}], ",", "\[IndentingNewLine]", 
    RowBox[{"i", "++"}], ",", 
    RowBox[{"testlist", "=", 
     RowBox[{"Append", "[", 
      RowBox[{"testlist", ",", 
       RowBox[{"Sin", "[", "i", "]"}]}], "]"}]}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", "testlist"}], "Input",
 CellChangeTimes->{{3.939789500872259*^9, 3.939789527097741*^9}},
 CellLabel->"In[118]:=",
 CellID->591100848,ExpressionUUID->"25ab8ed5-a158-44e3-8b08-67014770aeab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Sin", "[", "1", "]"}], ",", 
   RowBox[{"Sin", "[", "2", "]"}], ",", 
   RowBox[{"Sin", "[", "3", "]"}], ",", 
   RowBox[{"Sin", "[", "4", "]"}], ",", 
   RowBox[{"Sin", "[", "5", "]"}], ",", 
   RowBox[{"Sin", "[", "6", "]"}], ",", 
   RowBox[{"Sin", "[", "7", "]"}], ",", 
   RowBox[{"Sin", "[", "8", "]"}], ",", 
   RowBox[{"Sin", "[", "9", "]"}], ",", 
   RowBox[{"Sin", "[", "10", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939789527473818*^9},
 CellLabel->"Out[119]=",
 CellID->1661389970,ExpressionUUID->"2c0df467-455a-4770-b13e-360c40355e28"]
}, Open  ]],

Cell["This is how we do it with Range:", "Text",
 CellChangeTimes->{3.939789536277995*^9},
 CellID->1398847496,ExpressionUUID->"433c4403-1dcd-4261-b721-7e1bd4c7035e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sin", "[", 
  RowBox[{"Range", "[", "10", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.9397895385538263`*^9, 3.939789540667221*^9}},
 CellLabel->"In[120]:=",
 CellID->1231467169,ExpressionUUID->"398dfe07-8d22-4572-a151-d541754261c7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Sin", "[", "1", "]"}], ",", 
   RowBox[{"Sin", "[", "2", "]"}], ",", 
   RowBox[{"Sin", "[", "3", "]"}], ",", 
   RowBox[{"Sin", "[", "4", "]"}], ",", 
   RowBox[{"Sin", "[", "5", "]"}], ",", 
   RowBox[{"Sin", "[", "6", "]"}], ",", 
   RowBox[{"Sin", "[", "7", "]"}], ",", 
   RowBox[{"Sin", "[", "8", "]"}], ",", 
   RowBox[{"Sin", "[", "9", "]"}], ",", 
   RowBox[{"Sin", "[", "10", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939789541009581*^9},
 CellLabel->"Out[120]=",
 CellID->1084920148,ExpressionUUID->"c51d1cd1-56df-4164-a99e-06a9172217b6"]
}, Open  ]],

Cell["\<\
A digression: <myTiming> : a useful function to measure small execution times\
\
\>", "ItemNumbered",
 CellChangeTimes->{3.939789492584311*^9},
 CellTags->"3.4.5.2",
 CellID->1773148907,ExpressionUUID->"ef68e417-0048-4ca6-9b20-3fa9782efccc"],

Cell["\<\
Here I introduce a (user-defined) utility function <myTiming >, which I will \
use heavily in various performance measurements throughout the book :\
\>", "Text",
 CellChangeTimes->{{3.9397895512082777`*^9, 3.9397895582906857`*^9}, 
   3.9399485464706593`*^9},
 CellID->2116764406,ExpressionUUID->"656fb0a0-cdec-4ea9-a485-ca1db67e2dbe"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "myTiming", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"myTiming", "[", "x_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"z", "=", "0"}], ",", 
       RowBox[{"y", "=", "0"}], ",", 
       RowBox[{"timelim", "=", "0.1"}], ",", "\[IndentingNewLine]", "p", ",", 
       "q", ",", 
       RowBox[{"iterlist", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Power", "[", 
            RowBox[{"10", ",", "#"}], "]"}], "&"}], "/@", 
          RowBox[{"Range", "[", 
           RowBox[{"0", ",", "10"}], "]"}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"nm", "=", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToExpression", "[", 
            RowBox[{"StringTake", "[", 
             RowBox[{"$Version", ",", "1"}], "]"}], "]"}], "<", "6"}], ",", 
          "2", ",", "1"}], "\[IndentingNewLine]", "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Catch", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"z", "=", 
              RowBox[{"Nest", "[", "\[IndentingNewLine]", 
               RowBox[{"First", ",", 
                RowBox[{"Timing", "[", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"y", "++"}], ";", 
                    RowBox[{"Do", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], ")"}], ";"}], "]"}], 
                ",", "nm"}], "]"}]}], ")"}], ">", "timelim"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Throw", "[", 
            RowBox[{"{", 
             RowBox[{"z", ",", "y"}], "}"}], "\[IndentingNewLine]", "]"}]}], 
          "\[IndentingNewLine]", "]"}], "&"}], "/@", "iterlist"}], "]"}], "/.", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p_", ",", "q_"}], "}"}], ":>", 
       RowBox[{"p", "/", 
        RowBox[{"iterlist", "[", 
         RowBox[{"[", "q", "]"}], "]"}]}]}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Attributes", "[", "myTiming", "]"}], "=", 
   RowBox[{"{", "HoldAll", "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.939789564505192*^9, 3.939789702685955*^9}, {
  3.939789750458873*^9, 3.9397897841652937`*^9}, {3.9397899786105824`*^9, 
  3.939789980184396*^9}},
 CellLabel->"In[137]:=",
 CellID->14190841,ExpressionUUID->"f6e44bff-d770-4b34-9ed9-c56f759775a5"],

Cell["\<\
The code is a bit involved to explain now, but after reading through the book \
it may be a good idea to revisit it, since it illustrates many points. \
Anyway, for now we are just users.\
\>", "Text",
 CellChangeTimes->{{3.93978979550727*^9, 3.939789798638624*^9}},
 CellID->1326379041,ExpressionUUID->"7c188a81-8f47-4f62-9a35-1e0759dff997"],

Cell["Efficiency pitfall: constructing a list with Append", "ItemNumbered",
 CellChangeTimes->{3.939789817635354*^9},
 CellTags->"3.4.5.3",
 CellID->628340854,ExpressionUUID->"53ab4eb9-5585-46e0-8a7c-841853d6da6a"],

Cell["\<\
Let us compare the elapsed time of such list generation with that of Range, \
using the function myTiming :
Check now:\
\>", "Text",
 CellChangeTimes->{3.939789825974395*^9},
 CellID->1347640879,ExpressionUUID->"d9b3a01a-6fac-4478-8db6-8ff2d837c8f9"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"myTiming", " ", 
   RowBox[{"doesn", "'"}], "t", " ", "work"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.9397956202591343`*^9, 3.9397956283873177`*^9}},
 CellID->249904465,ExpressionUUID->"b412e635-091f-48f0-9e88-bdc70c13b98a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"testlist", "=", 
       RowBox[{"{", "}"}]}], ";", 
      RowBox[{"i", "=", "1"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"i", "<", "1000"}], ",", 
     RowBox[{"i", "++"}], ",", 
     RowBox[{"testlist", "=", 
      RowBox[{"Append", "[", 
       RowBox[{"testlist", ",", 
        RowBox[{"Sin", "[", "i", "]"}]}], "]"}]}]}], "]"}], ";"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.939790345287161*^9, 3.939790347919503*^9}},
 CellLabel->"In[142]:=",
 CellID->813977250,ExpressionUUID->"33fe968e-a1f3-402c-85b7-d230a27bb010"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.01847`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.93979034854714*^9},
 CellLabel->"Out[142]=",
 CellID->868619998,ExpressionUUID->"3a687821-819b-4595-ace9-e340e9befd48"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"Range", "[", "1000", "]"}], "]"}], ";"}], "]"}]], "Input",
 CellChangeTimes->{{3.939790371370023*^9, 3.9397903796313877`*^9}},
 CellLabel->"In[145]:=",
 CellID->588070111,ExpressionUUID->"4deaba7e-f577-49dd-9043-c130887301f7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000142`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.939790380650345*^9, 3.939795703692308*^9},
 CellLabel->"Out[145]=",
 CellID->2031977519,ExpressionUUID->"ee538806-7516-402b-a2b7-b6639655cd9a"]
}, Open  ]],

Cell["\<\
We see that constructing a list of (symbolic) values of Sin on a thousand \
first natural numbers is hundred times slower with Append than with Range. \
But the truth is that the computational complexities are different and the \
larger is the list, the more overhead is induced by using Append. We can also \
see how Table will perform:\
\>", "Text",
 CellChangeTimes->{{3.939795639730859*^9, 3.939795648355341*^9}},
 CellID->1768562943,ExpressionUUID->"8ffbb666-9964-4474-860c-aec9d3758db2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Sin", "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1000"}], "}"}]}], "]"}], ";"}], "]"}]], "Input",
 CellChangeTimes->{{3.939795663672419*^9, 3.939795686913032*^9}},
 CellLabel->"In[146]:=",
 CellID->712203719,ExpressionUUID->"6242d686-9aa6-4f46-aea0-521b6ce49aad"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000602`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.939795688786085*^9, 3.9397957075925407`*^9}},
 CellLabel->"Out[146]=",
 CellID->2012319418,ExpressionUUID->"b73f5845-bc18-4620-b8b3-f76807a139fb"]
}, Open  ]],

Cell["We see that it is a little slower than Range.", "Text",
 CellChangeTimes->{3.939795717234564*^9},
 CellID->332501723,ExpressionUUID->"4bcaadc7-0ef1-4346-853a-da4439ad5ebf"],

Cell["\<\
In addition to being slower, the generation with the loop introduced a global \
side effect - the variable <testlist>. So, to make the code clean, one will \
have in this approach to wrap the loop in an additional modularization \
construct and thus make it even clumsier.\
\>", "Text",
 CellChangeTimes->{{3.9397957302325907`*^9, 3.939795749476218*^9}},
 CellID->604008967,ExpressionUUID->"0fc3eebe-7c17-4bdc-8860-aa6ba8aed247"],

Cell["\<\
So, in conclusion, I would thoroughly discourage the reader from \
straightforward list generation inside a loop. First, there are almost always \
better design solutions which avoid this problem altogether. Second, there \
exist workarounds to get a linear time performance in doing it, such as using \
linked lists (to be discussed below), or indexed variables. Finally, starting \
with version 5, there are special commands Reap and Sow introduced \
specifically for efficient generation and collection of intermediate results \
in computations - we will have an entire chapter in the part II devoted to \
these commands.\
\>", "Text",
 CellChangeTimes->{{3.9397957604886923`*^9, 3.939795805027205*^9}},
 CellID->91532658,ExpressionUUID->"aa3dc20e-1106-4e79-b5d9-d78cd295c8e2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Internal (full) form of lists", "Subsection",
 CellChangeTimes->{3.939795834290831*^9},
 CellID->720809093,ExpressionUUID->"8114e080-fdf6-4ea1-8e99-47f45238a21c"],

Cell[TextData[{
 "Let me emphasize once again that internal form of lists satisfies the \
general requirement of how normal expressions are built in Mathematica (see \
chapter ",
 ButtonBox["I",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-1-Introduction.nb", CharacterEncoding -> 
     "UTF-8"], "ch1"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-1-Introduction.nb"],
 "). For example, here are simple and nested lists:"
}], "Text",
 CellChangeTimes->{{3.9397958458265753`*^9, 3.9397958521136827`*^9}, {
  3.939795931708756*^9, 3.939795931715754*^9}},
 CellID->683173324,ExpressionUUID->"4656aa76-9984-4e89-a0e2-fe14480ca6ce"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"testlist", ",", "complextestlist"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"testlist", "=", 
  RowBox[{"Range", "[", "10", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"complextestlist", "=", 
  RowBox[{"Range", "/@", 
   RowBox[{"Range", "[", "5", "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.939795950847224*^9, 3.939795975141594*^9}},
 CellLabel->"In[147]:=",
 CellID->1265196337,ExpressionUUID->"3321a582-0a91-4c7e-8679-07f2faf615c9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.939795975749308*^9},
 CellLabel->"Out[148]=",
 CellID->93140903,ExpressionUUID->"345baff2-2f7c-467c-9d88-aa82a8864042"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9397959757616587`*^9},
 CellLabel->"Out[149]=",
 CellID->2051061705,ExpressionUUID->"1f0837f9-fb53-4e65-acae-9c3652f93946"]
}, Open  ]],

Cell["And here are their full forms:", "Text",
 CellChangeTimes->{3.9397959882861633`*^9},
 CellID->786574291,ExpressionUUID->"4641fe6a-be01-4019-9a0f-08ac908fe238"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", "testlist", "]"}]], "Input",
 CellChangeTimes->{{3.9397959945552397`*^9, 3.9397960008276997`*^9}},
 CellLabel->"In[150]:=",
 CellID->962972885,ExpressionUUID->"b16b7af9-a3b0-4c69-a6b3-c8afd4d9855b"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"List", "[", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "9", ",", "10"}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.939796002885277*^9},
 CellLabel->"Out[150]//FullForm=",
 CellID->466561895,ExpressionUUID->"417d2de1-002f-4ce7-abc3-169fcc6cf90a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", "complextestlist", "]"}]], "Input",
 CellChangeTimes->{{3.9397960043378267`*^9, 3.9397960083870373`*^9}},
 CellLabel->"In[151]:=",
 CellID->1503634062,ExpressionUUID->"7d4846a4-bca7-45b9-a543-045de60852a2"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"List", "[", 
    RowBox[{
     RowBox[{"List", "[", "1", "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"1", ",", "2"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"1", ",", "2", ",", "3"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.939796008810965*^9},
 CellLabel->"Out[151]//FullForm=",
 CellID->1264571396,ExpressionUUID->"6c4ebc73-e5ac-45da-9e57-a6ab29b53200"]
}, Open  ]],

Cell[TextData[{
 "This shows in particular that list indexing can be performed in the same \
way as indexing of more general normal Mathematica expressions, outlined in \
chapter ",
 ButtonBox["I",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-1-Introduction.nb", CharacterEncoding -> 
     "UTF-8"], "ch1"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-1-Introduction.nb"],
 ". We will use this fact in the next subsection."
}], "Text",
 CellChangeTimes->{{3.9397960225902967`*^9, 3.9397960502916927`*^9}},
 CellID->5798213,ExpressionUUID->"2ff67a6e-be72-42b4-b442-aecb4f00a75b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"testlist", ",", "complextestlist"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.9397960742089453`*^9, 3.939796081209283*^9}},
 CellLabel->"In[152]:=",
 CellID->1292829029,ExpressionUUID->"d66104aa-cf06-4c4e-b08c-4c116301456e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Working with lists and their parts", "Subsection",
 CellChangeTimes->{3.939796090863886*^9},
 CellID->1185985057,ExpressionUUID->"ec5685ef-6001-47d0-998b-3d52863ab502"],

Cell[CellGroupData[{

Cell["List indexing and element extraction with the Part command", \
"Subsubsection",
 CellChangeTimes->{3.939796099718775*^9},
 CellID->2055125192,ExpressionUUID->"a1e6b2ce-e205-45c5-94fe-fa2497eb152f"],

Cell["Simple lists", "ItemNumbered",
 CellChangeTimes->{3.939796119231988*^9},
 CellID->362123596,ExpressionUUID->"63b950cb-e7a6-4da7-9f9a-0872084eb8fc"],

Cell["Consider a simple list:", "Text",
 CellChangeTimes->{3.9397961278561172`*^9},
 CellID->242622374,ExpressionUUID->"f22815a8-7da5-4584-8e3f-2f0edf7e8e03"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "testlist", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testlist", "=", 
  RowBox[{"Range", "[", 
   RowBox[{"1", ",", "20", ",", "3"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.939796129931697*^9, 3.9397961386751003`*^9}},
 CellLabel->"In[153]:=",
 CellID->923426656,ExpressionUUID->"bfb6e394-2160-4d52-bfd5-116427950fe9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "7", ",", "10", ",", "13", ",", "16", ",", "19"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939796139106291*^9},
 CellLabel->"Out[154]=",
 CellID->1781739313,ExpressionUUID->"d7e6f58c-d792-4676-aec7-72884f27ea9e"]
}, Open  ]],

Cell["\<\
Say we need to extract its first element. This is accomplished as follows:\
\>", "Text",
 CellChangeTimes->{3.939796148076149*^9},
 CellID->1180659823,ExpressionUUID->"cbaeadad-d8df-4d8b-b797-74e04d49522f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "[", 
  RowBox[{"[", "3", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.9397961499737597`*^9, 3.939796151649088*^9}},
 CellLabel->"In[155]:=",
 CellID->1432204420,ExpressionUUID->"cf007d24-686d-4208-be78-82c61adbaaac"],

Cell[BoxData["7"], "Output",
 CellChangeTimes->{3.93979615209461*^9},
 CellLabel->"Out[155]=",
 CellID->24043010,ExpressionUUID->"4175370e-dccc-42cf-8bca-db31a5e86fc8"]
}, Open  ]],

Cell["Or, which is the same, like this:", "Text",
 CellChangeTimes->{3.939796160601886*^9},
 CellID->363943434,ExpressionUUID->"161872f2-ed4d-47fa-a965-f6244cc2e813"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{"testlist", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.939796167268284*^9, 3.939796173188332*^9}},
 CellLabel->"In[156]:=",
 CellID->682015908,ExpressionUUID->"9eb27727-994f-49ac-bb9c-b70ad074d4d3"],

Cell[BoxData["7"], "Output",
 CellChangeTimes->{3.939796173596796*^9},
 CellLabel->"Out[156]=",
 CellID->985155537,ExpressionUUID->"b3f87f32-8d0c-4f4e-b422-4e05ab7e93ba"]
}, Open  ]],

Cell["\<\
Now, let us say we need to extract second, fourth and fifth elements. This is \
how:\
\>", "Text",
 CellChangeTimes->{3.939796181003867*^9},
 CellID->410191989,ExpressionUUID->"0aa08921-4075-4de9-b77d-b9aaa7fb572e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "5"}], "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.939796186318722*^9, 3.939796191911705*^9}},
 CellLabel->"In[157]:=",
 CellID->2033894599,ExpressionUUID->"339cbfe2-f8e4-4111-82db-6d9e3ba31a28"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "10", ",", "13"}], "}"}]], "Output",
 CellChangeTimes->{3.939796193323675*^9},
 CellLabel->"Out[157]=",
 CellID->1811739127,ExpressionUUID->"1af13f50-9a1c-48fc-bded-40709c38bf65"]
}, Open  ]],

Cell["Or, which is the same:", "Text",
 CellChangeTimes->{3.939796203687505*^9},
 CellID->728876676,ExpressionUUID->"c03a5685-a966-4ad8-874d-755f985e2485"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{"testlist", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.939796205381572*^9, 3.9397962107048283`*^9}},
 CellLabel->"In[158]:=",
 CellID->1696905549,ExpressionUUID->"22949994-126d-4f9f-90cd-d678a51effc3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "10", ",", "13"}], "}"}]], "Output",
 CellChangeTimes->{3.9397962114604273`*^9},
 CellLabel->"Out[158]=",
 CellID->944208100,ExpressionUUID->"0d2d5d0a-62f9-40d4-9835-ce79cea20824"]
}, Open  ]],

Cell["\<\
List elements can be also counted from the end of the list. In this case, \
their positions are negative by convention:\
\>", "Text",
 CellChangeTimes->{{3.939796221717813*^9, 3.9397962258539963`*^9}},
 CellID->1548869017,ExpressionUUID->"1c678a30-77b7-4fb5-86d5-a7496dad0ba7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "[", 
  RowBox[{"[", 
   RowBox[{"-", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.939796227522644*^9, 3.939796230925832*^9}},
 CellLabel->"In[159]:=",
 CellID->1349026457,ExpressionUUID->"fbb6df6f-72e7-4c13-a0eb-fb3a15bd2ae7"],

Cell[BoxData["19"], "Output",
 CellChangeTimes->{3.939796231394455*^9},
 CellLabel->"Out[159]=",
 CellID->2031891540,ExpressionUUID->"8ae55324-be51-43bb-a3be-a1b45813f7c4"]
}, Open  ]],

Cell["Working with nested lists", "ItemNumbered",
 CellChangeTimes->{3.93979624647754*^9},
 CellID->716158186,ExpressionUUID->"ec149892-a195-4a26-862e-e620e5de7c14"],

Cell["Consider now a more complex list:", "Text",
 CellChangeTimes->{3.939796255118391*^9},
 CellID->1972274314,ExpressionUUID->"208dc0f1-b66d-4554-815d-75e565849085"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"complextestlist", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"Range", "[", 
     RowBox[{
      RowBox[{"5", "*", "#"}], ",", 
      RowBox[{
       RowBox[{"5", "*", "#"}], "+", "4"}]}], "]"}], "&"}], "/@", 
   RowBox[{"Range", "[", "5", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.939796258827899*^9, 3.939796277456222*^9}},
 CellLabel->"In[160]:=",
 CellID->1879349986,ExpressionUUID->"ecf1425e-904c-461f-be43-5aa3863982f1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "11", ",", "12", ",", "13", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "16", ",", "17", ",", "18", ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"20", ",", "21", ",", "22", ",", "23", ",", "24"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"25", ",", "26", ",", "27", ",", "28", ",", "29"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9397962785945053`*^9},
 CellLabel->"Out[160]=",
 CellID->1333147202,ExpressionUUID->"8c83c6e8-6fae-4f8a-a8d0-5d493d8e3be8"]
}, Open  ]],

Cell[TextData[{
 "Its elements of level one (we remind that level is the \
\[OpenCurlyDoubleQuote]distance from the stem\[CloseCurlyDoubleQuote], see \
section ",
 ButtonBox["1.1.7",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-1-Introduction.nb", CharacterEncoding -> 
     "UTF-8"], "1.1.7"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-1-Introduction.nb"],
 ") are its sublists:"
}], "Text",
 CellChangeTimes->{{3.9397964763403597`*^9, 3.93979648144313*^9}, {
  3.93979654942811*^9, 3.939796549435149*^9}},
 CellID->1508134863,ExpressionUUID->"0917b443-fcbe-41ef-a6e8-c541ebe34d98"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"complextestlist", "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.93979655931032*^9, 3.93979656131698*^9}},
 CellLabel->"In[161]:=",
 CellID->1217179393,ExpressionUUID->"413cbaff-d147-4367-ab64-e9ade6525847"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"10", ",", "11", ",", "12", ",", "13", ",", "14"}], "}"}]], "Output",\

 CellChangeTimes->{3.939796562257168*^9},
 CellLabel->"Out[161]=",
 CellID->1087795886,ExpressionUUID->"bc4c9398-048c-40a2-8577-2dfae79c1dd2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"complextestlist", "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "5"}], "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.939796564275731*^9, 3.939796568862578*^9}},
 CellLabel->"In[162]:=",
 CellID->1708700806,ExpressionUUID->"5db18414-2f15-4ea9-886a-ba4246dd0bab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"20", ",", "21", ",", "22", ",", "23", ",", "24"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"25", ",", "26", ",", "27", ",", "28", ",", "29"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939796569647407*^9},
 CellLabel->"Out[162]=",
 CellID->106837431,ExpressionUUID->"1e1d583b-c53c-4a70-8c2f-ce5838afa550"]
}, Open  ]],

Cell["\<\
To get to the numbers, we need in this case a 2-number indexing (since all \
sublists have a depth 1. Should they have depth N, we would need N+1 indexes, \
and should the depth be different for different sublists, the number of \
necessary indices would accordingly be different)\
\>", "Text",
 CellChangeTimes->{{3.939796589005643*^9, 3.9397966033775043`*^9}},
 CellID->320373925,ExpressionUUID->"36cfe0d4-cec0-4011-8f87-482154a1a43d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"complextestlist", "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.939796608006072*^9, 3.939796611145039*^9}},
 CellLabel->"In[163]:=",
 CellID->2074647976,ExpressionUUID->"b5193d32-5567-4515-ae5b-0651f286aacf"],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.939796611527562*^9},
 CellLabel->"Out[163]=",
 CellID->30484584,ExpressionUUID->"723e5276-e487-46d4-8bfa-ea1a2f040f1a"]
}, Open  ]],

Cell["\<\
which means \[OpenCurlyDoubleQuote]first element of the first element\
\[CloseCurlyDoubleQuote] (we can view this list as a 2-dimensional array). \
Notice that the syntax complextestlist[[{1,1}]] will be interpreted as a \
twice repeated first element of the original list, i.e. twice repeated first \
sublist:\
\>", "Text",
 CellChangeTimes->{{3.9397966227412443`*^9, 3.939796633796021*^9}},
 CellID->1253295302,ExpressionUUID->"b6a4c55e-0a14-44eb-9345-1902d4b50fcf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"complextestlist", "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.939796645699445*^9, 3.9397966484607983`*^9}},
 CellLabel->"In[164]:=",
 CellID->1291366131,ExpressionUUID->"456f3b34-d63d-492f-a559-a07ffd3c525f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939796649043379*^9},
 CellLabel->"Out[164]=",
 CellID->2025521627,ExpressionUUID->"5390976a-1dfe-49ad-96c7-e9ba10dddaa1"]
}, Open  ]],

Cell["\<\
Everything that was true for simple lists, is also true here:\
\>", "Text",
 CellChangeTimes->{3.93979665725686*^9},
 CellID->1031212745,ExpressionUUID->"f1a0fbb2-d444-409f-b542-d1bf2ac54f37"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"complextestlist", "[", 
  RowBox[{"[", 
   RowBox[{"-", "1"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"complextestlist", "[", 
  RowBox[{"[", 
   RowBox[{
    RowBox[{"-", "1"}], ",", 
    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.939796664803404*^9, 3.939796673412801*^9}},
 CellLabel->"In[165]:=",
 CellID->1250571884,ExpressionUUID->"0c12ae2e-a7d9-4c23-9ca1-2a04ec9ce08a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"25", ",", "26", ",", "27", ",", "28", ",", "29"}], "}"}]], "Output",\

 CellChangeTimes->{3.939796674207275*^9},
 CellLabel->"Out[165]=",
 CellID->1212788954,ExpressionUUID->"eb42fc2d-9840-45b0-ad42-c9be37454217"],

Cell[BoxData["29"], "Output",
 CellChangeTimes->{3.9397966742192507`*^9},
 CellLabel->"Out[166]=",
 CellID->1576656201,ExpressionUUID->"923a4fa4-ba77-4add-9aa2-106ea801dbfb"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"testlist", ",", "complextestlist"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.93979667630796*^9, 3.9397966817062273`*^9}},
 CellLabel->"In[167]:=",
 CellID->733896806,ExpressionUUID->"d44f8a18-3190-454f-a13b-2db8e8e0b222"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Extract", "Subsubsection",
 CellChangeTimes->{{3.939796686341468*^9, 3.939796687788213*^9}},
 CellID->616743194,ExpressionUUID->"55654bde-572a-4a63-9eeb-c83af4acacd4"],

Cell["\<\
This operator is analogous to the Part operator, with some extra \
functionality which is sometimes very useful but of no interest for us at the \
moment. What is important now, is that it can extract several elements at \
different levels at the same time (Part can also extract several elements, \
but they have to be at the same level). Also, Extract has a different syntax \
- to extract an element on the level deeper than the first (and also, every \
time when we extract more than one element), the address of the element being \
extracted should be entered as a list of indices:\
\>", "Text",
 CellChangeTimes->{{3.939796696973263*^9, 3.939796732076968*^9}},
 CellID->110929692,ExpressionUUID->"740cafa8-40d5-4666-88e8-48d403029d93"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"testlist", "=", 
   RowBox[{"Range", "[", 
    RowBox[{"1", ",", "20", ",", "3"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"complextestlist", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"Range", "[", 
     RowBox[{
      RowBox[{"5", "*", "#"}], ",", 
      RowBox[{
       RowBox[{"5", "*", "#"}], "+", "4"}]}], "]"}], "&"}], "/@", 
   RowBox[{"Range", "[", "5", "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.939796734432598*^9, 3.9397967577536488`*^9}},
 CellLabel->"In[168]:=",
 CellID->214631699,ExpressionUUID->"352b093b-b0b8-485a-b590-105ae03ad013"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "11", ",", "12", ",", "13", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "16", ",", "17", ",", "18", ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"20", ",", "21", ",", "22", ",", "23", ",", "24"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"25", ",", "26", ",", "27", ",", "28", ",", "29"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939796758252975*^9},
 CellLabel->"Out[169]=",
 CellID->1079582974,ExpressionUUID->"b89bdea8-265f-4c2e-84f2-0266d602bd45"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Extract", "[", 
  RowBox[{"testlist", ",", "1"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Extract", "[", 
  RowBox[{"complextestlist", ",", "1"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Extract", "[", 
  RowBox[{"complextestlist", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.9397967638031673`*^9, 3.939796780420808*^9}},
 CellLabel->"In[170]:=",
 CellID->1110208994,ExpressionUUID->"54bb944a-6c34-4268-8a43-d4abd66929de"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.9397967809385767`*^9},
 CellLabel->"Out[170]=",
 CellID->1205977315,ExpressionUUID->"0e1db453-0cec-485e-95fa-45b6e114fcca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}]], "Output",
 CellChangeTimes->{3.9397967809512873`*^9},
 CellLabel->"Out[171]=",
 CellID->910072819,ExpressionUUID->"a07cad9c-a433-4b5f-b4a5-4467e6806eb0"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{3.939796780957687*^9},
 CellLabel->"Out[172]=",
 CellID->1215334999,ExpressionUUID->"f2b32b85-908b-4d7a-94e8-25db9179294b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Take and Drop", "Subsubsection",
 CellChangeTimes->{{3.939796834885927*^9, 3.939796836776184*^9}},
 CellID->836662551,ExpressionUUID->"de14a43d-9eb6-4da8-87a5-91b2b828b8ef"],

Cell["\<\
These commands are used to take or drop from a list several elements in a \
row. For example, here are again our lists:\
\>", "Text",
 CellChangeTimes->{{3.93979684568301*^9, 3.939796850351*^9}},
 CellID->45076348,ExpressionUUID->"4572e8f9-fd46-4abc-bf92-3b201ad54f98"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"testlist", "=", 
  RowBox[{"Range", "[", 
   RowBox[{"1", ",", "20", ",", "3"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"complextestlist", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"Range", "[", 
     RowBox[{
      RowBox[{"5", "*", "#"}], ",", 
      RowBox[{
       RowBox[{"5", "*", "#"}], "+", "4"}]}], "]"}], "&"}], "/@", 
   RowBox[{"Range", "[", "5", "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.939796852620998*^9, 3.939796869838344*^9}, 
   3.9397969135789633`*^9},
 CellLabel->"In[178]:=",
 CellID->974775988,ExpressionUUID->"e68cee63-8c0b-4c7d-abd2-921fc84cf295"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "7", ",", "10", ",", "13", ",", "16", ",", "19"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9397968701853228`*^9, 3.9397969139058437`*^9},
 CellLabel->"Out[178]=",
 CellID->1169655155,ExpressionUUID->"b7b441ef-4693-4783-9ec5-3c58b2327e5b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "11", ",", "12", ",", "13", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "16", ",", "17", ",", "18", ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"20", ",", "21", ",", "22", ",", "23", ",", "24"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"25", ",", "26", ",", "27", ",", "28", ",", "29"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9397968701853228`*^9, 3.9397969139179897`*^9},
 CellLabel->"Out[179]=",
 CellID->328885447,ExpressionUUID->"8c7203ef-8bc5-4baa-98f9-99ab5ec647ab"]
}, Open  ]],

Cell["And these are examples of how Take and Drop work", "Text",
 CellChangeTimes->{3.939796879996002*^9},
 CellID->571050291,ExpressionUUID->"26ce5476-8a1d-4c4a-ac20-78518026f0d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{"testlist", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.93979688161626*^9, 3.9397968857373543`*^9}},
 CellLabel->"In[176]:=",
 CellID->422305735,ExpressionUUID->"ad4e1d06-a6ac-4ce5-bc58-af1f036aa76b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "7"}], "}"}]], "Output",
 CellChangeTimes->{3.939796886883168*^9},
 CellLabel->"Out[176]=",
 CellID->399572579,ExpressionUUID->"882d6e30-0731-44f7-bccd-2046659405e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{"testlist", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.939796890119731*^9, 3.939796895877894*^9}},
 CellLabel->"In[177]:=",
 CellID->524674400,ExpressionUUID->"524f432f-1b96-4be2-a2d8-be4432d1e0e9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "7", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.939796896223612*^9},
 CellLabel->"Out[177]=",
 CellID->478367320,ExpressionUUID->"78cc40b1-8469-4b69-b227-8879e2ecda46"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{"testlist", ",", 
   RowBox[{"-", "3"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.939796932620521*^9, 3.939796937396758*^9}},
 CellLabel->"In[180]:=",
 CellID->538710295,ExpressionUUID->"cda70387-6d73-4abe-907a-cbc43d624ddc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"13", ",", "16", ",", "19"}], "}"}]], "Output",
 CellChangeTimes->{3.9397969377728567`*^9},
 CellLabel->"Out[180]=",
 CellID->1056742693,ExpressionUUID->"ab4a0758-06b8-4bcf-9a60-f738de0e4db4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{"testlist", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4"}], ",", 
     RowBox[{"-", "3"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.93979694005651*^9, 3.939796945119412*^9}},
 CellLabel->"In[181]:=",
 CellID->1017204945,ExpressionUUID->"f4348920-0e07-4cfa-8a27-b4adae333e70"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"10", ",", "13"}], "}"}]], "Output",
 CellChangeTimes->{3.939796945669764*^9},
 CellLabel->"Out[181]=",
 CellID->171076216,ExpressionUUID->"626d2706-0416-414f-90f9-56fe44847b1a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Drop", "[", 
  RowBox[{"testlist", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.939796947453848*^9, 3.939796950088107*^9}},
 CellLabel->"In[182]:=",
 CellID->121424195,ExpressionUUID->"e3609c08-4221-490b-bb77-e4b05ab91c59"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"10", ",", "13", ",", "16", ",", "19"}], "}"}]], "Output",
 CellChangeTimes->{3.939796950514904*^9},
 CellLabel->"Out[182]=",
 CellID->1596255208,ExpressionUUID->"eea2af28-7387-42a2-8ad2-75717998da56"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Drop", "[", 
  RowBox[{"testlist", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9397969551889553`*^9, 3.939796960517956*^9}},
 CellLabel->"In[183]:=",
 CellID->799572079,ExpressionUUID->"7abb4464-2167-4c04-9ed8-aaf59a10592a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "13", ",", "16", ",", "19"}], "}"}]], "Output",
 CellChangeTimes->{3.939796960984171*^9},
 CellLabel->"Out[183]=",
 CellID->1742630145,ExpressionUUID->"38141133-d536-4e09-9f60-d14adf140f00"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Drop", "[", 
  RowBox[{"testlist", ",", 
   RowBox[{"-", "3"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.939796965886533*^9, 3.939796970442253*^9}},
 CellLabel->"In[184]:=",
 CellID->1771470147,ExpressionUUID->"309a208e-4873-4c61-a1bb-32cfa2b201f6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "7", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.939796970780946*^9},
 CellLabel->"Out[184]=",
 CellID->1166533361,ExpressionUUID->"f16dd5df-775a-4d9e-b744-5f613e3b398a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Drop", "[", 
  RowBox[{"testlist", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4"}], ",", 
     RowBox[{"-", "3"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.939796972408516*^9, 3.939796977565126*^9}},
 CellLabel->"In[185]:=",
 CellID->217225843,ExpressionUUID->"ae9c86fe-e748-4400-a057-0ad29b333896"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "7", ",", "16", ",", "19"}], "}"}]], "Output",
 CellChangeTimes->{3.9397969779614353`*^9},
 CellLabel->"Out[185]=",
 CellID->1511019501,ExpressionUUID->"7e3c581a-0200-4148-8e14-880fbc78aedb"]
}, Open  ]],

Cell["\<\
Both Take and Drop also have some extended functionality to automate \
structural operations performed on nested lists, such as extraction of \
submatrices from matrices. We don\[CloseCurlyQuote]t cover them here, but \
they are described in Mathematica Help.\
\>", "Text",
 CellChangeTimes->{{3.939796988153723*^9, 3.939797000987282*^9}},
 CellID->1710627532,ExpressionUUID->"a216648d-1751-4a61-934b-196d19843a43"]
}, Open  ]],

Cell[CellGroupData[{

Cell["First, Rest, Last and Most", "Subsubsection",
 CellChangeTimes->{{3.9397970133263187`*^9, 3.939797018038715*^9}},
 CellID->1014803087,ExpressionUUID->"8813451a-4d32-4631-b50f-99a24bab1f09"],

Cell["\<\
This commands are is in principle redundant, since First[list] is exactly \
equivalent to list[[1]], Rest[list] is equivalent to Drop[list,1], Last[list] \
is equivalent to list[[-1]], and Most[list] is equivalent to Drop[list,-1]. \
However, they can be used for better code readability.\
\>", "Text",
 CellChangeTimes->{{3.939797026701034*^9, 3.939797040134047*^9}},
 CellID->2021445403,ExpressionUUID->"15ae8142-3f5c-411b-83af-71a2b910f0eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Length", "Subsubsection",
 CellChangeTimes->{{3.939797045575716*^9, 3.939797046358368*^9}},
 CellID->71905884,ExpressionUUID->"6a93351e-cf95-47ae-ae16-137251e2073a"],

Cell["This command returns the length of the list. For instance:", "Text",
 CellChangeTimes->{3.939797053885125*^9},
 CellID->1201955956,ExpressionUUID->"32701ab4-1a22-42d5-8819-45522c1b2c30"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"testlist", "=", 
  RowBox[{"Range", "[", 
   RowBox[{"1", ",", "20", ",", "3"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"complextestlist", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"Range", "[", 
     RowBox[{
      RowBox[{"5", "*", "#"}], ",", 
      RowBox[{
       RowBox[{"5", "*", "#"}], "+", "4"}]}], "]"}], "&"}], "/@", 
   RowBox[{"Range", "[", "5", "]"}]}]}]}], "Input",
 CellLabel->"In[186]:=",
 CellID->2042568810,ExpressionUUID->"b1f6e427-c4c9-4dc0-bfe6-e6fa0d4517fd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "7", ",", "10", ",", "13", ",", "16", ",", "19"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.93979707348346*^9},
 CellLabel->"Out[186]=",
 CellID->1687010769,ExpressionUUID->"7e238cc4-eae0-4997-bea9-ea6456b3dcbc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "11", ",", "12", ",", "13", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "16", ",", "17", ",", "18", ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"20", ",", "21", ",", "22", ",", "23", ",", "24"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"25", ",", "26", ",", "27", ",", "28", ",", "29"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.93979707349566*^9},
 CellLabel->"Out[187]=",
 CellID->363403242,ExpressionUUID->"769aaa30-332a-4b23-8988-180717ad196e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Length", "[", "testlist", "]"}], ",", 
   RowBox[{"Length", "[", "complextestlist", "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.93979707543043*^9, 3.939797084626773*^9}},
 CellLabel->"In[188]:=",
 CellID->1628070985,ExpressionUUID->"729e36f6-d381-4064-9b52-3327362add78"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.939797085124631*^9},
 CellLabel->"Out[188]=",
 CellID->1884506824,ExpressionUUID->"9aa3df71-5f5d-40df-bf13-e0ed14ba2213"]
}, Open  ]],

Cell["\<\
If we want to compute the lengths of sublists in <complextestlist>, this can \
be done as follows:\
\>", "Text",
 CellChangeTimes->{3.939797096607415*^9},
 CellID->1817365012,ExpressionUUID->"fe4e6dc7-6965-460b-b79c-18494f230222"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Length", "[", 
    RowBox[{"complextestlist", "[", 
     RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", 
     RowBox[{"Length", "[", "complextestlist", "]"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.939797102152529*^9, 3.939797117491684*^9}},
 CellLabel->"In[189]:=",
 CellID->1991273057,ExpressionUUID->"1adfa44a-b87e-45e6-9e65-c4c02f886698"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "5", ",", "5", ",", "5", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.9397971201919317`*^9},
 CellLabel->"Out[189]=",
 CellID->1804989718,ExpressionUUID->"c10f0fcb-5074-4715-a61e-cab11e0e948c"]
}, Open  ]],

Cell["\<\
Here, obviously, the index <i> is used to index the sublists, and thus it \
runs from 1 to the length of the main list, while the Part operation [[i]] \
extracts the sublists.\
\>", "Text",
 CellChangeTimes->{{3.939797134135541*^9, 3.939797137872924*^9}},
 CellID->1108192904,ExpressionUUID->"b5bae18c-fb64-4628-8c6d-993ab5d94801"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Modification of list elements by direct indexing (using Part)\
\>", "Subsubsection",
 CellChangeTimes->{3.939797152614727*^9},
 CellID->919363875,ExpressionUUID->"8962849f-4ed1-43a4-a39a-078778769476"],

Cell["Simple uses of Part", "ItemNumbered",
 CellChangeTimes->{3.939797170136965*^9},
 CellID->603806960,ExpressionUUID->"4694c47b-2cbc-4f98-8d3c-324ba9674bd3"],

Cell["\<\
If it is necessary to replace some element of the list with a known address \
with some new expression or value (say, symbol <a>), this can be done \
directly. Here are our lists:\
\>", "Text",
 CellChangeTimes->{{3.939797182166148*^9, 3.939797186475469*^9}},
 CellID->1323344645,ExpressionUUID->"3bda5d2e-b1f5-42b1-9442-14c8643861c2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "a", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testlist", "=", 
  RowBox[{"Range", "[", 
   RowBox[{"1", ",", "20", ",", "3"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"complextestlist", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"Range", "[", 
     RowBox[{
      RowBox[{"5", "*", "#"}], ",", 
      RowBox[{
       RowBox[{"5", "*", "#"}], "+", "4"}]}], "]"}], "&"}], "/@", 
   RowBox[{"Range", "[", "5", "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.939797199495657*^9, 3.9397972024517727`*^9}},
 CellLabel->"In[190]:=",
 CellID->1847473453,ExpressionUUID->"df263616-a942-4628-9a82-b731c02e9b24"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "7", ",", "10", ",", "13", ",", "16", ",", "19"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939797203864534*^9},
 CellLabel->"Out[191]=",
 CellID->888342794,ExpressionUUID->"d2478cec-59d3-4fba-897c-1c1bf82cf4d6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "11", ",", "12", ",", "13", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "16", ",", "17", ",", "18", ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"20", ",", "21", ",", "22", ",", "23", ",", "24"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"25", ",", "26", ",", "27", ",", "28", ",", "29"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939797203876652*^9},
 CellLabel->"Out[192]=",
 CellID->1071024814,ExpressionUUID->"7a8accae-227c-49d0-84bc-c58914ab7e0f"]
}, Open  ]],

Cell["\<\
Say, we now want to replace the element with the address {5} with <a>:\
\>", "Text",
 CellChangeTimes->{3.9397972126019993`*^9},
 CellID->506119744,ExpressionUUID->"ba82a046-4bc0-4f93-9cbf-464f1e197166"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"testlist", "[", 
    RowBox[{"[", "5", "]"}], "]"}], "=", "a"}], 
  ";"}], "\[IndentingNewLine]", "testlist"}], "Input",
 CellChangeTimes->{{3.93979721845544*^9, 3.939797226035883*^9}},
 CellLabel->"In[193]:=",
 CellID->1420228719,ExpressionUUID->"baac4ad0-6772-4a3a-aedc-32692f3fa616"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "7", ",", "10", ",", "a", ",", "16", ",", "19"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939797226332676*^9},
 CellLabel->"Out[194]=",
 CellID->333958852,ExpressionUUID->"16ecbbdc-29b3-45d4-bfa8-3f6be6c1e6c7"]
}, Open  ]],

Cell["\<\
Now, let us now in our list <complextestlist> replace a random element in \
every sublist with <a>:\
\>", "Text",
 CellChangeTimes->{3.939797235971972*^9},
 CellID->1471655953,ExpressionUUID->"42b692a0-9cdf-4597-8508-712128c29ff0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{"i", "=", "1"}], ",", 
    RowBox[{"i", "<=", 
     RowBox[{"Length", "[", "complextestlist", "]"}]}], ",", 
    RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"complextestlist", "[", 
      RowBox[{"[", 
       RowBox[{"i", ",", 
        RowBox[{"Random", "[", 
         RowBox[{"Integer", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "5"}], "}"}]}], "]"}]}], "]"}], "]"}], "=", 
     "a"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", "complextestlist"}], "Input",
 CellChangeTimes->{{3.939797242437387*^9, 3.9397972824178762`*^9}},
 CellLabel->"In[195]:=",
 CellID->2073059201,ExpressionUUID->"16b909a5-9dc6-438a-95d2-2cf248d37815"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "a", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "11", ",", "12", ",", "13", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "16", ",", "a", ",", "18", ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"20", ",", "a", ",", "22", ",", "23", ",", "24"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"25", ",", "26", ",", "27", ",", "a", ",", "29"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.93979728270312*^9},
 CellLabel->"Out[196]=",
 CellID->920077539,ExpressionUUID->"f7d0d6f1-b68e-4033-b9e6-7c712aaa3c9d"]
}, Open  ]],

Cell["\<\
Notice that such modifications as described above are only possible if lists \
are stored in some variable (in C we would say, that it is an L-value). In \
particular, this input is a mistake:\
\>", "Text",
 CellChangeTimes->{{3.9397973053955307`*^9, 3.9397973121136503`*^9}},
 CellID->1860939573,ExpressionUUID->"a458889a-01ee-4498-aa62-e5a6df235716"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], "[", 
   RowBox[{"[", "3", "]"}], "]"}], "=", "a"}]], "Input",
 CellChangeTimes->{{3.9397973290953712`*^9, 3.939797339428236*^9}},
 CellLabel->"In[197]:=",
 CellID->1379012114,ExpressionUUID->"fb22815e-7dca-46b7-b8b7-389ea8da7c62"],

Cell[BoxData[
 TemplateBox[{
  "Set", "setps", 
   "\"\\!\\(\\*RowBox[{\\\"Range\\\", \\\"[\\\", \\\"10\\\", \\\"]\\\"}]\\) \
in the part assignment is not a symbol.\"", 2, 197, 20, 26587777319895376970, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9397973398603*^9},
 CellLabel->"During evaluation of In[197]:=",
 CellID->1087786313,ExpressionUUID->"99fdf979-3d72-4859-90da-fa714fa96929"],

Cell[BoxData["a"], "Output",
 CellChangeTimes->{3.939797339876891*^9},
 CellLabel->"Out[197]=",
 CellID->896275680,ExpressionUUID->"7e8ed5be-b4a8-4267-9750-a2c2947fc5f5"]
}, Open  ]],

Cell["\<\
Essentially, in all the above examples the Part command ([[ ]] ) was used for \
modification of expressions.\
\>", "Text",
 CellChangeTimes->{3.939797350061936*^9},
 CellID->1255053702,ExpressionUUID->"1e27f4f8-0b92-4b7e-94e1-f9f43e64430b"],

Cell["\<\
Note also that the modification of lists with Part introduces side effect, \
since it is the original variable where the list is stored that is modified, \
not the copy of the list.\
\>", "Text",
 CellChangeTimes->{{3.939797368870101*^9, 3.939797375383644*^9}},
 CellID->1103188680,ExpressionUUID->"1fe8155d-e72f-4799-a0ab-0b4d0847f868"],

Cell["Use Part to efficiently modify large structures", "ItemNumbered",
 CellChangeTimes->{3.939797402761999*^9},
 CellTags->"3.6.6.2",
 CellID->1872131614,ExpressionUUID->"bdcdb5d6-fe3f-4974-a368-e23ff052cfcf"],

Cell["\<\
One more thing I would like to mention here is that Part has a very powerful \
extended functionality which allows to change many elements at the same time. \
For example, if I want to change second element in each sublist of \
<complextestlist > to <b > and fourth to <c >, I can do this in the following \
way :\
\>", "Text",
 CellChangeTimes->{{3.9397974157453814`*^9, 3.9397974248419857`*^9}, {
  3.939948546517152*^9, 3.93994854655956*^9}},
 CellID->2133124301,ExpressionUUID->"1ae51b69-88ba-49c7-a636-8976f7e3e2c0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Part", "[", 
    RowBox[{"complextestlist", ",", "All", ",", "2"}], "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c", ",", "d", ",", "e", ",", "f"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", "complextestlist"}], "Input",
 CellChangeTimes->{{3.939797428784096*^9, 3.939797441853365*^9}},
 CellLabel->"In[198]:=",
 CellID->134787984,ExpressionUUID->"58fdb40f-6caa-4a9e-8493-f61454ffb9c3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "b", ",", "7", ",", "a", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "c", ",", "12", ",", "13", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "d", ",", "a", ",", "18", ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"20", ",", "e", ",", "22", ",", "23", ",", "24"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"25", ",", "36", ",", "27", ",", "a", ",", "29"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939797442152729*^9},
 CellLabel->"Out[199]=",
 CellID->595460162,ExpressionUUID->"4856923b-f5fa-497b-9927-ce01fa0cd378"]
}, Open  ]],

Cell["\<\
This turns out to be very handy in cases when many elements have to be \
changed at once. This is however limited to cases when these parts form some \
rather regular structures like sub-matrices etc. For more details, see \
Mathematica Help and Mathematica Book, also the description on the web site \
of Ted Ersek (see Appendices for the URL).\
\>", "Text",
 CellChangeTimes->{{3.939797459185421*^9, 3.9397974976052*^9}},
 CellID->625147714,ExpressionUUID->"36b56bd1-e1e2-44e9-9100-8029deea4b6a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["ReplacePart", "Subsubsection",
 CellChangeTimes->{{3.9397975066018972`*^9, 3.939797508628065*^9}},
 CellID->1207557680,ExpressionUUID->"748199af-d81b-4a3f-a504-9a94d188c383"],

Cell["\<\
There is another built-in command used to modify list elements - ReplacePart. \
But there is a big difference between direct modifications by subscripting \
(Part) used above, and the functionality of the ReplacePart command. Notice \
that as a result of our manipulations with Part, the original lists has been \
modified. However, more often in Mathematica programs we would modify a list \
which is not the original list but a copy, so that the original list remains \
unchanged. This style of programming is arguably cleaner but requires more \
memory since the original object is copied. Most built-in functions act in \
this manner. In particular, this is the case with ReplacePart:\
\>", "Text",
 CellChangeTimes->{{3.939797520535449*^9, 3.9397975565544357`*^9}},
 CellID->1248213961,ExpressionUUID->"71abc4d7-ff3d-414a-9130-6140ba84d012"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "a", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testlist", "=", 
  RowBox[{"Range", "[", 
   RowBox[{"1", ",", "20", ",", "3"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9397975593646193`*^9, 3.9397975690493317`*^9}},
 CellLabel->"In[200]:=",
 CellID->483930959,ExpressionUUID->"a0d7b231-a0a8-4f12-9522-04a722cb87d1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "7", ",", "10", ",", "13", ",", "16", ",", "19"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939797570377192*^9},
 CellLabel->"Out[201]=",
 CellID->829667477,ExpressionUUID->"1a1efde7-2130-4d69-8870-9af9a6ab9274"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReplacePart", "[", 
  RowBox[{"testlist", ",", "a", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.939797571647442*^9, 3.9397975765642433`*^9}},
 CellLabel->"In[202]:=",
 CellID->1758577045,ExpressionUUID->"78d0fd2d-55da-4c80-a01f-21d91a67df93"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "7", ",", "10", ",", "a", ",", "16", ",", "19"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.93979757699228*^9},
 CellLabel->"Out[202]=",
 CellID->1905687357,ExpressionUUID->"3bbc4819-fe8e-49d2-96e5-687da77beb7f"]
}, Open  ]],

Cell["But the original list:", "Text",
 CellChangeTimes->{3.93979758887568*^9},
 CellID->1316297741,ExpressionUUID->"afc3e86c-0a75-4414-818f-8711142e5e73"],

Cell[CellGroupData[{

Cell[BoxData["testlist"], "Input",
 CellChangeTimes->{{3.939797590318698*^9, 3.939797591612404*^9}},
 CellLabel->"In[203]:=",
 CellID->835341738,ExpressionUUID->"3288824c-7397-4370-8624-ea2932d3a050"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "7", ",", "10", ",", "13", ",", "16", ",", "19"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939797592084662*^9},
 CellLabel->"Out[203]=",
 CellID->577048094,ExpressionUUID->"b2504793-091d-4161-ab1e-4d4ffdc64776"]
}, Open  ]],

Cell["\<\
remained unchanged. This also means that ReplacePart does not require L-value \
to operate on an expression:\
\>", "Text",
 CellChangeTimes->{{3.9397976021284943`*^9, 3.9397976076480103`*^9}},
 CellID->411166006,ExpressionUUID->"5dc7bde9-fe99-48e7-b13f-2f96f9a67f79"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReplacePart", "[", 
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], ",", "a", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.9397976140827703`*^9, 3.939797619389464*^9}},
 CellLabel->"In[204]:=",
 CellID->943335804,ExpressionUUID->"43c82269-785a-4b60-8ff4-0702c77bed5b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "a", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.939797619997178*^9},
 CellLabel->"Out[204]=",
 CellID->2096125859,ExpressionUUID->"4f6ddb0a-185f-49a3-a1db-6751b8b17c19"]
}, Open  ]],

Cell["\<\
No error in this case - since it did not attempt to change the original list \
but rather changed the copy of it.\
\>", "Text",
 CellChangeTimes->{3.939797629241843*^9},
 CellID->118083178,ExpressionUUID->"eef41c22-387e-418e-97ce-352d514c6302"],

Cell["\<\
The ReplacePart can be used to change more than a single element at a time, \
also elements on different levels of expression. For example:\
\>", "Text",
 CellChangeTimes->{{3.939797646102125*^9, 3.939797651113435*^9}},
 CellID->349082818,ExpressionUUID->"4306a133-c7cf-407e-b4b1-a5e5ccbb9090"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReplacePart", "[", 
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], ",", "a", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", "5", "}"}], ",", 
     RowBox[{"{", "8", "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9397976540563*^9, 3.93979767572847*^9}},
 CellLabel->"In[206]:=",
 CellID->360004469,ExpressionUUID->"d81d0fc1-4833-481c-84a3-8f11d3705d0f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "a", ",", "3", ",", "4", ",", "a", ",", "6", ",", "7", ",", "a", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{{3.9397976649105377`*^9, 3.939797676137295*^9}},
 CellLabel->"Out[206]=",
 CellID->1585545926,ExpressionUUID->"84c0157e-50d8-4aa0-8a2b-adb8ad6be15e"]
}, Open  ]],

Cell["\<\
Note that the syntax regarding the list of positions is the same as for the \
Extract command. ReplacePart is described in detail in Mathematica Help.\
\>", "Text",
 CellChangeTimes->{{3.9397976876983757`*^9, 3.939797692413759*^9}},
 CellID->145802659,ExpressionUUID->"51a179bd-883a-49e0-afb5-68df09f810b4"],

Cell["\<\
I have to mention however, that ReplacePart can become quite slow if one \
wants to change many parts of a large expression at the same time. For a \
detailed discussion, please see Appendix C.\
\>", "Text",
 CellChangeTimes->{{3.939797701694182*^9, 3.9397977042907867`*^9}},
 CellID->580362418,ExpressionUUID->"4efca506-099e-4d75-b41c-905ceb2f495b"],

Cell["\<\
Neither do I recommend to use ReplacePart in such cases by changing elements \
one by one (say, inside a loop) rather than all at once. The reason is that \
since it effectively copies the entire list and then performs changes on the \
copy, it will in such a sequential approach copy the entire list as many \
times as is the total number of replacements. This will be terribly \
inefficient, just as with Append and Prepend operators. In some of these \
cases one can efficiently use Part to change many elements at once - one such \
example we will consider in chapter VI (see section 6.5.5.1).\
\>", "Text",
 CellChangeTimes->{{3.939797725993519*^9, 3.939797762865692*^9}},
 CellID->1686074646,ExpressionUUID->"3ddeac45-d59f-4a8f-a600-9fb2913a8cf4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Position", "Subsubsection",
 CellChangeTimes->{{3.939797810250646*^9, 3.9397978114811907`*^9}},
 CellID->377186399,ExpressionUUID->"9181ef42-b336-4f48-b836-1fafaf46de0a"],

Cell["\<\
The Position command is used to determine the positions of elements in a list \
(or more general Mathematica expression) which match a given expression, \
either exactly, or through patterns.\
\>", "Text",
 CellChangeTimes->{{3.939797821531186*^9, 3.93979782509303*^9}},
 CellID->1325897311,ExpressionUUID->"2beb3ba3-4ce1-4b4d-9911-6b0ac7ec2c7d"],

Cell["Basic uses of Position", "ItemNumbered",
 CellChangeTimes->{3.9397978433496447`*^9},
 CellID->2065784705,ExpressionUUID->"951658a4-e5c5-4a0a-b48e-9e0e8b01f122"],

Cell["\<\
In the simplest form, Position has the following format: \
Position[list,element]. Let us give a few examples:\
\>", "Text",
 CellChangeTimes->{{3.939797851529476*^9, 3.939797855491806*^9}},
 CellID->1275415886,ExpressionUUID->"d9c8450c-758e-4a0e-8178-11ef0a94e8e0"],

Cell["First we initialize our lists:", "Text",
 CellChangeTimes->{3.939797871224161*^9},
 CellID->1303730166,ExpressionUUID->"86aa5353-8ee4-479a-b5d0-89323be99185"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"testlist", "=", 
  RowBox[{"Range", "[", 
   RowBox[{"1", ",", "20", ",", "3"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"complextestlist", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"Range", "[", 
     RowBox[{
      RowBox[{"5", "*", "#"}], ",", 
      RowBox[{
       RowBox[{"5", "*", "#"}], "+", "4"}]}], "]"}], "&"}], "/@", 
   RowBox[{"Range", "[", "5", "]"}]}]}]}], "Input",
 CellLabel->"In[207]:=",
 CellID->1017249621,ExpressionUUID->"2b69b0be-8d90-4f0e-bada-be32b489a5fc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "7", ",", "10", ",", "13", ",", "16", ",", "19"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939797887864871*^9},
 CellLabel->"Out[207]=",
 CellID->1349651464,ExpressionUUID->"316ee8c6-9593-44e0-b568-297085eeee0b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "11", ",", "12", ",", "13", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "16", ",", "17", ",", "18", ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"20", ",", "21", ",", "22", ",", "23", ",", "24"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"25", ",", "26", ",", "27", ",", "28", ",", "29"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9397978878772717`*^9},
 CellLabel->"Out[208]=",
 CellID->1869875834,ExpressionUUID->"59c3b815-5d3f-4617-8c36-67bb8c8ad139"]
}, Open  ]],

Cell["\<\
We will now use the simplest version of Position (without patterns) to obtain \
all positions where the number <4> is found in a list:\
\>", "Text",
 CellChangeTimes->{{3.939797898811942*^9, 3.939797903776391*^9}},
 CellID->727451840,ExpressionUUID->"40a161cd-7f74-4d47-a07b-048aa755b149"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{"testlist", ",", "4"}], "]"}]], "Input",
 CellChangeTimes->{{3.93979790615033*^9, 3.939797911348768*^9}},
 CellLabel->"In[209]:=",
 CellID->2028448113,ExpressionUUID->"554c26c6-0c1e-45b7-8faa-6d9efef8bf09"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", "2", "}"}], "}"}]], "Output",
 CellChangeTimes->{3.9397979117161217`*^9},
 CellLabel->"Out[209]=",
 CellID->1209512686,ExpressionUUID->"0c16b6a2-9864-4d85-9260-f96a38e4313f"]
}, Open  ]],

Cell["This means that number 4 is the second element in <testlist>", "Text",
 CellChangeTimes->{3.939797920319522*^9},
 CellID->199511100,ExpressionUUID->"1f9deb00-bef9-42a5-af2a-31eeacd46a20"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{"complextestlist", ",", "12"}], "]"}]], "Input",
 CellChangeTimes->{{3.939797931406102*^9, 3.93979793655093*^9}},
 CellLabel->"In[210]:=",
 CellID->1726598444,ExpressionUUID->"daf5d1ac-17fd-469f-a3e0-ef6f34c740a4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"2", ",", "3"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.9397979370338497`*^9},
 CellLabel->"Out[210]=",
 CellID->2144582305,ExpressionUUID->"a7dde774-85ae-44b5-b2cd-64929cc6bb47"]
}, Open  ]],

Cell["\<\
This means that number 12 is the third element of the second element \
(sublist) of the list <complextestlist>.\
\>", "Text",
 CellChangeTimes->{{3.9397979594855347`*^9, 3.939797973498695*^9}},
 CellID->677512657,ExpressionUUID->"b62b7119-3025-4411-992b-85fb77046ee2"],

Cell["\<\
The Position command can be used together with the Extract command, since \
they use the same position specifications:\
\>", "Text",
 CellChangeTimes->{{3.93979798051274*^9, 3.9397979846599693`*^9}},
 CellID->731818741,ExpressionUUID->"7b2b2c39-6f69-4a24-9ced-2f6cffa42aab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{"complextestlist", ",", 
   RowBox[{"Position", "[", 
    RowBox[{"complextestlist", ",", "10"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.939797986653604*^9, 3.939797996236414*^9}},
 CellLabel->"In[211]:=",
 CellID->1249123748,ExpressionUUID->"c9119f5f-f211-4f88-9c4c-30ab8f2bc695"],

Cell[BoxData[
 RowBox[{"{", "10", "}"}]], "Output",
 CellChangeTimes->{3.939797996826654*^9},
 CellLabel->"Out[211]=",
 CellID->511402705,ExpressionUUID->"da22ca18-73d3-4ec6-b940-7d44293c9295"]
}, Open  ]],

Cell["On less trivial uses of Position", "ItemNumbered",
 CellChangeTimes->{3.93979801025975*^9},
 CellID->915707641,ExpressionUUID->"053c7746-67f5-4030-a6fe-5868287fe51b"],

Cell["\<\
This does not look like a big deal, but we may for example wish to extract \
the entire sublist containing 10. All we have to do is to construct a new \
position list, with the last element (index) dropped:\
\>", "Text",
 CellChangeTimes->{{3.9397980187772083`*^9, 3.939798026177061*^9}},
 CellID->1430507885,ExpressionUUID->"6db233e9-f74d-426c-ab55-2c571af2f08e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Most", ",", 
   RowBox[{"Position", "[", 
    RowBox[{"complextestlist", ",", "10"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.93979803081161*^9, 3.939798038894052*^9}},
 CellLabel->"In[212]:=",
 CellID->747239568,ExpressionUUID->"8c2dc06e-6cb1-45aa-88de-a4098404d37e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", "2", "}"}], "}"}]], "Output",
 CellChangeTimes->{3.939798040882207*^9},
 CellLabel->"Out[212]=",
 CellID->1506685675,ExpressionUUID->"a15da00d-c6d7-4b30-8a2f-481b8e33d10f"]
}, Open  ]],

Cell["\<\
The functionality of Map will be discussed much later, but essentially here \
it will ensure that if the position list contains several positions, the last \
index will be dropped from all of them. For example, here we define another \
nested list in which some numbers are found more than once:\
\>", "Text",
 CellChangeTimes->{{3.9397980697185993`*^9, 3.939798081226355*^9}},
 CellID->1886457948,ExpressionUUID->"a682dd5f-88f2-4956-884c-57287f54ae33"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"complextestlist1", "=", 
  RowBox[{"Range", "/@", 
   RowBox[{"Range", "[", "6", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.939798090633863*^9, 3.939798104911284*^9}},
 CellLabel->"In[213]:=",
 CellID->1542407442,ExpressionUUID->"c1f44fb8-ad95-40b2-8786-129a79a6d94c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939798105480114*^9},
 CellLabel->"Out[213]=",
 CellID->1584681440,ExpressionUUID->"8f91d184-fada-4bca-9ace-e0e9e5926d14"]
}, Open  ]],

Cell["These are all the positions where number 4 is found:", "Text",
 CellChangeTimes->{3.939798116433123*^9},
 CellID->648771986,ExpressionUUID->"f27230b1-6697-42ef-a763-92392c065be6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plist", "=", 
  RowBox[{"Position", "[", 
   RowBox[{"complextestlist1", ",", "4"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9397981181607037`*^9, 3.939798129934455*^9}},
 CellLabel->"In[215]:=",
 CellID->102411810,ExpressionUUID->"442e30df-7a6e-4f14-b8b4-790ed56e6421"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.939798124414638*^9, 3.939798130908428*^9}},
 CellLabel->"Out[215]=",
 CellID->2001557891,ExpressionUUID->"59d46624-4c2e-4804-b706-73f4555a1094"]
}, Open  ]],

Cell["\<\
If we use these positions in Extract, we just get number 4 extracted 3 times:\
\
\>", "Text",
 CellChangeTimes->{3.939798146238134*^9},
 CellID->1999627429,ExpressionUUID->"148c85b5-1e4b-4e98-a212-012c7505439f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{"complextestlist1", ",", "plist"}], "]"}]], "Input",
 CellChangeTimes->{{3.939798148007208*^9, 3.939798153515934*^9}},
 CellLabel->"In[216]:=",
 CellID->259987678,ExpressionUUID->"5e9045ef-6480-4a0c-915d-230a7b71a469"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "4", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{3.939798153804714*^9},
 CellLabel->"Out[216]=",
 CellID->1659107859,ExpressionUUID->"8279a10f-2283-4958-8687-569dd9406185"]
}, Open  ]],

Cell["\<\
However, if we want to extract all the sublists containing 4, we need one \
more step. To obtain the positions of sublists only, we have to delete the \
last index from each of the sublists in <plist>:\
\>", "Text",
 CellChangeTimes->{{3.9397981686015472`*^9, 3.9397981720973787`*^9}},
 CellID->1698113565,ExpressionUUID->"4a7f04db-3b42-4428-b525-d5e266c56e13"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Most", ",", "plist"}], "]"}]], "Input",
 CellChangeTimes->{{3.939798179659993*^9, 3.939798182283702*^9}},
 CellLabel->"In[217]:=",
 CellID->764518691,ExpressionUUID->"17d1d0da-fae7-4e8c-a6a3-a02228fb7cb1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "4", "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", "6", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939798182710058*^9},
 CellLabel->"Out[217]=",
 CellID->526607410,ExpressionUUID->"f4f52d63-a972-4a54-bf14-e5dcd40f05b6"]
}, Open  ]],

Cell["Now we can extract sublists:", "Text",
 CellChangeTimes->{3.939798190650097*^9},
 CellID->910630583,ExpressionUUID->"df9449aa-018c-4450-8562-e87f50d4c89a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{"complextestlist1", ",", 
   RowBox[{"Map", "[", 
    RowBox[{"Most", ",", "plist"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.939798193762445*^9, 3.939798202459684*^9}},
 CellLabel->"In[218]:=",
 CellID->1510415363,ExpressionUUID->"47a80d41-7864-4939-afff-c89534c6544d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939798202913363*^9},
 CellLabel->"Out[218]=",
 CellID->1506177811,ExpressionUUID->"66d305ab-6bce-4ee8-b875-5a1922a31e41"]
}, Open  ]],

Cell["Example: extracting sublists containing given element", "ItemNumbered",
 CellChangeTimes->{3.939798226694396*^9},
 CellID->1940722288,ExpressionUUID->"78827053-dbe4-4c53-80c0-f545a2063320"],

Cell["\<\
Now we will write our first \[OpenCurlyDoubleQuote]serious\
\[CloseCurlyDoubleQuote] function: it will extract those sublists from a \
list, which contain a given element.\
\>", "Text",
 CellChangeTimes->{{3.939798239766858*^9, 3.939798245746447*^9}},
 CellID->1737863780,ExpressionUUID->"6392b9fe-a7ab-445b-a383-92891a0d1475"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "sublistsWithElement", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"sublistsWithElement", "[", 
    RowBox[{"main_List", ",", "elem_"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Extract", "[", 
    RowBox[{"main", ",", 
     RowBox[{"Map", "[", 
      RowBox[{"Most", ",", 
       RowBox[{"Position", "[", 
        RowBox[{"main", ",", "elem"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.939798252681909*^9, 3.939798290059678*^9}},
 CellLabel->"In[219]:=",
 CellID->897601653,ExpressionUUID->"56609932-be0c-4bce-b6ee-259cacc266e6"],

Cell["\<\
For example, these are the sublists of <complextestlist1> which contain \
number 5:\
\>", "Text",
 CellChangeTimes->{3.9397983000179873`*^9},
 CellID->117792594,ExpressionUUID->"800623b2-d28e-4e9f-bd70-d2377d94a72f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sublistsWithElement", "[", 
  RowBox[{"complextestlist1", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.939798302014133*^9, 3.939798308313088*^9}},
 CellLabel->"In[221]:=",
 CellID->589282387,ExpressionUUID->"69bf0cd0-ae53-4518-afcf-45ad5df221f3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939798308905267*^9},
 CellLabel->"Out[221]=",
 CellID->571783642,ExpressionUUID->"8c0e8949-9235-44ac-a71f-2c9721600422"]
}, Open  ]],

Cell["\<\
I used this opportunity to illustrate several common features of user-defined \
functions in Mathematica. First, the development of the function: it is \
usually best to start with some simple test example, develop the code in \
steps like above, and then package everything into a function. Second, we saw \
that the parameters in the function definition on the l.h.s. contain an \
underscore. This is a sign that patterns are used in the definition. For now, \
I will just briefly mention that pattern like <x_> means \
\[OpenCurlyDoubleQuote]any expression\[CloseCurlyDoubleQuote] and \
automatically makes <x> local for the r.h.s., if SetDelayed (:=)was used in \
the definition (which is normally the case for functions). The pattern x_h \
means \[OpenCurlyDoubleQuote]anything with the head <h>\
\[CloseCurlyDoubleQuote]. Thus, the pattern <main_List> above will match on \
any list, but not on a more general expression whose head is not List. This \
constitutes a simple type-check.\
\>", "Text",
 CellChangeTimes->{{3.939798404822608*^9, 3.939798464031582*^9}},
 CellID->2125834416,ExpressionUUID->"bb7ee2a1-433b-4578-a257-ac9f74635cd6"],

Cell["\<\
The other comment about Position function is due here: it is important to \
remember that while this is an optimized and fast built-in function, it is \
still a general-purpose one. In particular, if you have a list sorted with \
respect to some criteria, it will be typically much faster for large lists to \
search for an element with a version of a binary search, which you can \
implement in Mathematica (and which has a logarithmic complexity) than with \
the Position function (which has a linear complexity).\
\>", "Text",
 CellChangeTimes->{{3.9397984754874887`*^9, 3.9397985237766237`*^9}},
 CellID->413548302,ExpressionUUID->"e0a1ff86-c735-4efa-946e-0f0a69652781"],

Cell["\<\
More complicated example - sublists with odd number of odd elements\
\>", "ItemNumbered",
 CellChangeTimes->{3.939798580908635*^9},
 CellTags->"3.6.8.4",
 CellID->330159301,ExpressionUUID->"c42c3548-bb7a-47c8-9d6d-d47d4cf236d0"],

Cell[TextData[StyleBox["The problem",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.939798585935317*^9, 3.939798588469886*^9}},
 CellID->2037111706,ExpressionUUID->"5f4df91a-ff52-4360-9b32-dbcc1213664d"],

Cell["\<\
We will now illustrate the use of Position with patterns on a somewhat less \
trivial example. Please ignore the pieces of syntax you are not yet familiar \
with but rather concentrate on the conceptual part and consider this as an \
illustration. The problem will be to extract from <complextestlist1> all \
sublists which have an odd number of odd elements. Our solution will go in \
steps.\
\>", "Text",
 CellChangeTimes->{{3.939798601770207*^9, 3.9397986246037617`*^9}},
 CellID->1777432853,ExpressionUUID->"5be7de10-6559-4c91-8d7e-7636da416be3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"complextestlist1", "=", 
  RowBox[{"Range", "/@", 
   RowBox[{"Range", "[", "6", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.9397986295275803`*^9, 3.939798635496586*^9}},
 CellLabel->"In[222]:=",
 CellID->1102781910,ExpressionUUID->"58af54ea-b04e-466e-a67c-650fb87bb48d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9397986359499407`*^9},
 CellLabel->"Out[222]=",
 CellID->659056005,ExpressionUUID->"3cc9c6b0-668a-4a98-a091-bca035446686"]
}, Open  ]],

Cell[TextData[StyleBox["Developing a solution",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{3.939798648003928*^9},
 CellID->33624809,ExpressionUUID->"3204e931-87f9-4ca7-88cb-706c8e1d5531"],

Cell[TextData[{
 StyleBox["Step1",
  FontSlant->"Italic"],
 ": Find all positions of all odd numbers:"
}], "Text",
 CellChangeTimes->{3.939798659538353*^9},
 CellID->343965702,ExpressionUUID->"a94f1beb-0a40-442c-b26b-3a9de4176f48"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step1list", "=", 
  RowBox[{"Position", "[", 
   RowBox[{"complextestlist1", ",", 
    RowBox[{"_", "?", "OddQ"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9397986697714252`*^9, 3.939798680675271*^9}, 
   3.939798892876185*^9},
 CellLabel->"In[227]:=",
 CellID->1370505709,ExpressionUUID->"bff4d020-50e1-4ca4-8708-eab61d8813d3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "5"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939798681183385*^9, 3.939798893400961*^9},
 CellLabel->"Out[227]=",
 CellID->213737062,ExpressionUUID->"7eb275a6-3317-4ca3-84f2-d9adca2ba493"]
}, Open  ]],

Cell["\<\
In each of the small sublists, as we already know, the first index gives the \
number of sublist in <compextestlist1>, and the second one gives the index of \
the given odd element in this sublist.\
\>", "Text",
 CellChangeTimes->{{3.939798692481235*^9, 3.939798697915551*^9}},
 CellID->1999618649,ExpressionUUID->"54eab39e-763c-43e3-8dd6-522b21199650"],

Cell[TextData[{
 StyleBox["Step 2",
  FontSlant->"Italic"],
 ": We combine together the addresses which correspond to the same sublist - \
they have the same first element:"
}], "Text",
 CellChangeTimes->{{3.939798710304294*^9, 3.939798718297866*^9}},
 CellID->470913743,ExpressionUUID->"c23027f3-0819-4298-ac38-85130f52a4fe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step2list", "=", 
  RowBox[{"Split", "[", 
   RowBox[{"step1list", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", "#1", "]"}], "==", 
      RowBox[{"First", "[", "#2", "]"}]}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.939798745318574*^9, 3.939798766105896*^9}, {
  3.939798897208993*^9, 3.939798907230625*^9}},
 CellLabel->"In[229]:=",
 CellID->1085733529,ExpressionUUID->"8c783c0a-5fd4-46d0-8251-0b317d944b27"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "5"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "5"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.939798768047186*^9, {3.939798898668627*^9, 3.939798907586832*^9}},
 CellLabel->"Out[229]=",
 CellID->967794047,ExpressionUUID->"58f26895-db8d-4a57-97d9-e710eb34c1d9"]
}, Open  ]],

Cell["\<\
The Split is another built-in command which we will cover shortly and whose \
purpose is to split a list into sublists of the \[OpenCurlyDoubleQuote]same\
\[CloseCurlyDoubleQuote] elements, where the notion of \
\[OpenCurlyDoubleQuote]same\[CloseCurlyDoubleQuote] can be defined by the \
user. In particular, in this case we tell Split to consider sublists of \
indices \[OpenCurlyDoubleQuote]same\[CloseCurlyDoubleQuote] if they have the \
same first element. Notice that now they are combined in extra lists.\
\>", "Text",
 CellChangeTimes->{{3.939798792810635*^9, 3.939798805319128*^9}},
 CellID->1779342715,ExpressionUUID->"1bf30001-af80-4e74-ab13-bfb54e22af3b"],

Cell[TextData[{
 StyleBox["Step 3",
  FontSlant->"Italic"],
 ": Leave in the lists only the first elements:"
}], "Text",
 CellChangeTimes->{3.939798817929386*^9},
 CellID->2086878280,ExpressionUUID->"5997bde3-99f6-4aba-a8b5-29d0a4dd0409"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step3list", "=", 
  RowBox[{"Map", "[", 
   RowBox[{"First", ",", "step2list", ",", 
    RowBox[{"{", "2", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.939798823230654*^9, 3.939798838397366*^9}},
 CellLabel->"In[230]:=",
 CellID->161523329,ExpressionUUID->"207e3c71-cc64-41e0-9d50-54db992dd2f5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "6", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.939798833029263*^9, 3.939798838657659*^9}, 
   3.939798911666122*^9},
 CellLabel->"Out[230]=",
 CellID->1507254627,ExpressionUUID->"7e401ef8-e781-45ac-9aec-9342eec2bb15"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Step4",
  FontSlant->"Italic"],
 ": In the above lists, leave only the sublists with odd length (the length \
of these sublists corresponds to the number of odd elements in the sublists \
of our original list, with addresses equal to numbers repeated in the \
sublists above)."
}], "Text",
 CellChangeTimes->{{3.939798924945965*^9, 3.939798947145701*^9}},
 CellID->711415977,ExpressionUUID->"1c88cef6-469a-41db-b047-fbd988c5ab96"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step4list", "=", 
  RowBox[{"Cases", "[", 
   RowBox[{"step3list", ",", 
    RowBox[{"x_List", "/;", 
     RowBox[{"OddQ", "[", 
      RowBox[{"Length", "[", "x", "]"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9397989549147263`*^9, 3.9397989740285273`*^9}},
 CellLabel->"In[231]:=",
 CellID->1510753809,ExpressionUUID->"87529532-f9ac-41cd-856b-157e03818046"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "6", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9397989747650967`*^9},
 CellLabel->"Out[231]=",
 CellID->1351080791,ExpressionUUID->"5983e5ea-31a2-4e7d-8b38-2b6dc705f8d1"]
}, Open  ]],

Cell["\<\
<Cases> is the command used to find the list of all occurrences of some \
expression or pattern in a larger expression. We will cover it later.\
\>", "Text",
 CellChangeTimes->{{3.939799002447661*^9, 3.93979900503164*^9}},
 CellID->122770959,ExpressionUUID->"85876c16-638b-42cd-8ee0-14529994c260"],

Cell[TextData[{
 StyleBox["Step5",
  FontSlant->"Italic"],
 ": Replace all sublists by their first elements:"
}], "Text",
 CellChangeTimes->{3.939799014865047*^9},
 CellID->848417851,ExpressionUUID->"ec90c33d-8b69-491f-8ae1-cfb2c54ed7e4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step5list", "=", 
  RowBox[{"Union", "[", 
   RowBox[{"Flatten", "[", "step4list", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9397990223564653`*^9, 3.939799036518094*^9}},
 CellLabel->"In[232]:=",
 CellID->1163331370,ExpressionUUID->"d237fd99-e5f3-4480-a59a-aca9ab936a02"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "5", ",", "6"}], "}"}]], "Output",
 CellChangeTimes->{3.939799036918294*^9},
 CellLabel->"Out[232]=",
 CellID->2071828573,ExpressionUUID->"96a395a4-dae6-4b17-89b1-ef31bf7402aa"]
}, Open  ]],

Cell["\<\
<Flatten> makes any list flat, and <Union> removes duplicate elements and \
sorts the resulting list.\
\>", "Text",
 CellChangeTimes->{3.9397990480502853`*^9},
 CellID->1922973953,ExpressionUUID->"e70b0eb8-8833-49b4-b66a-42892be447bf"],

Cell[TextData[{
 StyleBox["Step 6",
  FontSlant->"Italic"],
 ": Extracting the sublists:"
}], "Text",
 CellChangeTimes->{3.9397990570181437`*^9},
 CellID->1941824368,ExpressionUUID->"746a87e1-8c58-49ba-ae0f-3180259f2f7e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"complextestlist1", "[", 
  RowBox[{"[", "step5list", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.939799062104295*^9, 3.939799066457345*^9}},
 CellLabel->"In[233]:=",
 CellID->706998178,ExpressionUUID->"8c1ec849-1690-4af2-90d8-290dc7efa322"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939799066773891*^9},
 CellLabel->"Out[233]=",
 CellID->727972850,ExpressionUUID->"2dfb0948-f126-4cb2-a3f6-6b336b642ec1"]
}, Open  ]],

Cell[TextData[StyleBox["Assembling the code into a function",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{3.93979908843299*^9},
 CellID->825352991,ExpressionUUID->"3f36935b-e867-4bfd-94a7-2e4b0a8bd9b8"],

Cell["We can compress all the steps into a single function:", "Text",
 CellChangeTimes->{3.939799101390975*^9},
 CellID->1110843764,ExpressionUUID->"153f9a19-75e5-4743-8aaa-7403fa0f2926"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "oddSublists", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"oddSublists", "[", "x_List", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Part", "[", 
   RowBox[{"x", ",", 
    RowBox[{"Union", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"Cases", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{"First", ",", 
          RowBox[{"Split", "[", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{"x", ",", 
              RowBox[{"_", "?", "OddQ"}]}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"First", "[", "#1", "]"}], "==", 
              RowBox[{"First", "[", "#2", "]"}]}], "&"}]}], "]"}], ",", 
          RowBox[{"{", "2", "}"}]}], "]"}], ",", 
        RowBox[{"y_List", "/;", 
         RowBox[{"OddQ", "[", 
          RowBox[{"Length", "[", "y", "]"}], "]"}]}]}], "]"}], "]"}], "]"}]}],
    "]"}]}]}], "Input",
 CellChangeTimes->{{3.9397991055648727`*^9, 3.939799190086317*^9}},
 CellLabel->"In[234]:=",
 CellID->1480022879,ExpressionUUID->"19775520-a6e0-4784-83c6-6cc3fd5df2ca"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.939799192877523*^9, 3.939799195637637*^9}},
 CellID->210814571,ExpressionUUID->"774c421f-ba92-47ef-9150-e7ec4685e3e6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"oddSublists", "[", "complextestlist1", "]"}]], "Input",
 CellChangeTimes->{{3.9397992012989817`*^9, 3.939799205328148*^9}},
 CellLabel->"In[236]:=",
 CellID->628960713,ExpressionUUID->"2e99ffdc-88d3-4cec-93ea-16f28d05c9f1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9397992056666718`*^9},
 CellLabel->"Out[236]=",
 CellID->297927186,ExpressionUUID->"f8cfc43b-13ef-427e-9981-313832739437"]
}, Open  ]],

Cell[TextData[StyleBox["An alternative functional implementation",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{3.93979928698271*^9},
 CellID->1477833945,ExpressionUUID->"6b67f890-2f5e-476d-96eb-b55126f09069"],

Cell["\<\
There is a much simpler but less obvious way to do the same thing by using \
the mixed rule-based and functional programming style. I will give here the \
code just for an illustration:\
\>", "Text",
 CellChangeTimes->{{3.939799302273521*^9, 3.939799307461925*^9}},
 CellID->159252413,ExpressionUUID->"212fcc4f-7876-4f12-b701-ce74de2fdf4a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "oddSublistsNew", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"oddSublistsNew", "[", "x_List", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"EvenQ", "[", 
         RowBox[{"Count", "[", 
          RowBox[{"#", ",", 
           RowBox[{"_", "?", "OddQ"}]}], "]"}], "]"}], ",", 
        RowBox[{"#", "/.", 
         RowBox[{"#", "->", 
          RowBox[{"Sequence", "[", "]"}]}]}], ",", "#"}], "]"}], "&"}], ",", 
     "x"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.939799313869506*^9, 3.93979936452*^9}},
 CellLabel->"In[237]:=",
 CellID->1793581559,ExpressionUUID->"8a0d6d8d-dcb7-40c0-a541-963084aad853"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.9397993675056753`*^9, 3.939799368873928*^9}},
 CellID->641264680,ExpressionUUID->"8e5a85bc-2cdb-4718-9fe8-f86d4699793d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"oddSublistsNew", "[", "complextestlist1", "]"}]], "Input",
 CellChangeTimes->{{3.9397993701635323`*^9, 3.93979937433585*^9}},
 CellLabel->"In[239]:=",
 CellID->1868161,ExpressionUUID->"e318ccf8-18ad-435c-bec2-252f3cf1b2fe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9397993748316593`*^9},
 CellLabel->"Out[239]=",
 CellID->355472786,ExpressionUUID->"608823fe-a750-461d-97c3-b4bf3c2e52aa"]
}, Open  ]],

Cell["\<\
While the first realization became significantly complex to question the \
advantage of this programming style compared to a traditional procedural \
programming based on nested loops, my primary goal here was to illustrate the \
use of Position command, and perhaps give a flavor of a few others.\
\>", "Text",
 CellChangeTimes->{{3.939799465354135*^9, 3.939799496291133*^9}},
 CellID->131608348,ExpressionUUID->"270c1dfb-2fce-4b91-b4d1-6a0b977f79c8"],

Cell["\<\
However, the second realization is clearly shorter. This kind of programs can \
be written very quickly and are typically very short.\
\>", "Text",
 CellChangeTimes->{{3.9397995081911297`*^9, 3.939799512459689*^9}},
 CellID->416818108,ExpressionUUID->"a65d9485-1053-4b36-8ba8-57e3ecb69ab1"],

Cell[TextData[StyleBox["A procedural version",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{3.939799523791304*^9},
 CellID->2113852735,ExpressionUUID->"70782728-6677-4771-89fe-c498e266b0b7"],

Cell["\<\
It is also less bug-prone than the possible procedural implementation based \
on 2 nested loops:\
\>", "Text",
 CellChangeTimes->{3.9397995357770348`*^9},
 CellID->1700944824,ExpressionUUID->"3461e492-6460-446d-bf12-4e0d683ece5c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "oddSublistsProc", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"oddSublistsProc", "[", "x_List", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"pos", "=", 
        RowBox[{"{", "}"}]}], ",", "ctr", ",", "i", ",", "j"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "<=", 
         RowBox[{"Length", "[", "x", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"j", "=", "1"}], ";", 
            RowBox[{"ctr", "=", "0"}]}], ",", 
           RowBox[{"j", "<=", 
            RowBox[{"Length", "[", 
             RowBox[{"x", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"j", "++"}], ",", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"OddQ", "[", 
               RowBox[{"x", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", "j"}], "]"}], "]"}], "]"}], ",", 
              RowBox[{"ctr", "++"}]}], "]"}], ";"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"OddQ", "[", "ctr", "]"}], ",", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"pos", ",", "i"}], "]"}]}], "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"x", "[", 
        RowBox[{"[", "pos", "]"}], "]"}], "]"}]}]}], "]"}]}], ";"}]}], "Input",\

 CellChangeTimes->{{3.9397995440324783`*^9, 3.939799660837785*^9}},
 CellLabel->"In[240]:=",
 CellID->1938162383,ExpressionUUID->"a60bbf55-64e8-499e-b918-437db226738d"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.939799664213726*^9, 3.9397996652912073`*^9}},
 CellID->587321984,ExpressionUUID->"c02ca5cc-ec54-45b6-9f59-3b771cbb6d89"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"oddSublistsProc", "[", "complextestlist1", "]"}]], "Input",
 CellChangeTimes->{{3.939799666614789*^9, 3.9397996719836884`*^9}},
 CellLabel->"In[242]:=",
 CellID->41802913,ExpressionUUID->"ce4faa4b-1cf2-42d7-afd2-b2f3fa522580"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939799672348311*^9},
 CellLabel->"Out[242]=",
 CellID->514781356,ExpressionUUID->"db14cf08-de70-4289-8bd3-b25a60105168"]
}, Open  ]],

Cell["\<\
Apart from being clumsier, this code also uses AppendTo to append elements to \
a list, which will make it inefficient for large lists, just as in the \
examples we considered before.\
\>", "Text",
 CellChangeTimes->{{3.9397996844283133`*^9, 3.9397996888236227`*^9}},
 CellID->1866120176,ExpressionUUID->"bc42a042-b4b0-4dd5-943b-f704c3bfee49"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{
   "complextestlist1", ",", "step1list", ",", "step2list", ",", "step3list", 
    ",", "step4list", ",", "step5list", ",", "oddSublists", ",", 
    "oddSublistsNew", ",", "oddSublistsProc"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.939799696701283*^9, 3.9397997248814774`*^9}},
 CellLabel->"In[243]:=",
 CellID->1806317456,ExpressionUUID->"d35f76a8-e479-4102-bc72-b050005b2a50"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Adding elements to the list and removing them from the list", \
"Subsection",
 CellChangeTimes->{3.939799736282462*^9},
 CellID->140882736,ExpressionUUID->"1690f11e-bbfe-4b90-8d0f-64f3b5d1fc92"],

Cell[CellGroupData[{

Cell["Append, Prepend, AppendTo and PrependTo", "Subsubsection",
 CellChangeTimes->{3.939799744801969*^9},
 CellID->1289164958,ExpressionUUID->"4e1f28b1-a5b9-453f-9c3d-d135d2595910"],

Cell["\<\
Some of these commands we have already encountered before. They add an \
element to the end or to the beginning of the list. For example:\
\>", "Text",
 CellChangeTimes->{{3.939799754939505*^9, 3.9397997591305847`*^9}},
 CellID->1032934523,ExpressionUUID->"dd80ce96-0162-449c-8eeb-f10732c7ccda"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "a", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testlist", "=", 
  RowBox[{"Range", "[", "5", "]"}]}]}], "Input",
 CellChangeTimes->{{3.93979976337895*^9, 3.93979976904753*^9}},
 CellLabel->"In[244]:=",
 CellID->124098698,ExpressionUUID->"a0de7b65-0cf3-4679-ad2d-7826d7ca2d90"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.939799770231838*^9},
 CellLabel->"Out[245]=",
 CellID->756608618,ExpressionUUID->"531ade9e-e1bf-4a4a-acca-54f1ffbbb969"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Append", "[", 
  RowBox[{"testlist", ",", "a"}], "]"}]], "Input",
 CellChangeTimes->{{3.939799772031023*^9, 3.93979977538876*^9}},
 CellLabel->"In[246]:=",
 CellID->218566154,ExpressionUUID->"f4681033-d388-4c39-a253-36706b993118"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "a"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.93979977567912*^9},
 CellLabel->"Out[246]=",
 CellID->1688319621,ExpressionUUID->"dd18fed0-3c75-499f-a400-ac60cb0cfe5b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Prepend", "[", 
  RowBox[{"testlist", ",", "a"}], "]"}]], "Input",
 CellChangeTimes->{{3.939799777367116*^9, 3.939799781477433*^9}},
 CellLabel->"In[247]:=",
 CellID->1342281913,ExpressionUUID->"30d3eee6-3e55-45d2-9681-1bc4ae7fa776"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939799781893772*^9},
 CellLabel->"Out[247]=",
 CellID->957550455,ExpressionUUID->"23332004-1c85-4836-b17f-83d6ed657066"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["testlist"], "Input",
 CellChangeTimes->{{3.939799783763094*^9, 3.9397997851295433`*^9}},
 CellLabel->"In[248]:=",
 CellID->1903062299,ExpressionUUID->"ea84985b-2dbe-451d-afbf-9b3816ff4703"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.9397997853967752`*^9},
 CellLabel->"Out[248]=",
 CellID->1704801764,ExpressionUUID->"2e90414b-964a-4406-bde6-78abc4a62adf"]
}, Open  ]],

Cell["\<\
The last output shows that the list <testlist> did not change. As we \
discussed, the absence of side-effects is typical for Mathematica built-in \
functions. In this case, Append and Prepend forged a copy of <testlist> and \
modified this copy. If we want an original list to be modified, we have \
either to write:\
\>", "Text",
 CellChangeTimes->{{3.939799795425723*^9, 3.939799807655567*^9}},
 CellID->876429274,ExpressionUUID->"d7fe0061-321a-45fd-b20a-e96c3f5080e2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"testlist", "=", 
   RowBox[{"Append", "[", 
    RowBox[{"testlist", ",", "a"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", "testlist"}], "Input",
 CellChangeTimes->{{3.939799812260952*^9, 3.9397998242657223`*^9}},
 CellLabel->"In[249]:=",
 CellID->304240198,ExpressionUUID->"abdac3f4-eb11-455e-82ce-36b7fa68f812"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "a"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939799824865168*^9},
 CellLabel->"Out[250]=",
 CellID->394489450,ExpressionUUID->"33189028-106d-4a3d-9cc2-bb6283693bc0"]
}, Open  ]],

Cell["\<\
or, which is equivalent, to use the function AppendTo, which does exactly \
this:\
\>", "Text",
 CellChangeTimes->{3.939799836512809*^9},
 CellID->902167861,ExpressionUUID->"999f1924-00eb-475a-a99b-baa36b83c858"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Range", "[", "5", "]"}]}]], "Input",
 CellChangeTimes->{{3.93979983845125*^9, 3.9397998418766317`*^9}},
 CellLabel->"In[251]:=",
 CellID->2082611281,ExpressionUUID->"fa9b90b9-3aa0-4054-bdc9-31c71e31f415"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.939799843479163*^9},
 CellLabel->"Out[251]=",
 CellID->1940116113,ExpressionUUID->"fa321a97-23e5-49e6-8c7b-79dd9edf2e36"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"testlist", ",", "a"}], "]"}], 
  ";"}], "\[IndentingNewLine]", "testlist"}], "Input",
 CellChangeTimes->{{3.939799844931101*^9, 3.939799853347086*^9}},
 CellLabel->"In[252]:=",
 CellID->525998583,ExpressionUUID->"9b99695a-5390-499e-ac16-80328dd5204f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "a"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939799853877492*^9},
 CellLabel->"Out[253]=",
 CellID->1803744622,ExpressionUUID->"143d9b85-92e8-4c0b-9bd6-72b46542c4a7"]
}, Open  ]],

Cell["\<\
The situation with Prepend and PrependTo is completely analogous. And also, \
recalling the previous discussions, we may suspect that the application of \
AppendTo or PrependTo to a list which is not assigned to any variable (not an \
L-value) is a mistake, and we will be correct:\
\>", "Text",
 CellChangeTimes->{{3.939799865462973*^9, 3.9397998734580097`*^9}},
 CellID->1656700902,ExpressionUUID->"8171f7ba-6e36-4cfd-92de-57011a904dda"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Append", "[", 
  RowBox[{
   RowBox[{"Range", "[", "5", "]"}], ",", "a"}], "]"}]], "Input",
 CellChangeTimes->{{3.9397998854889917`*^9, 3.939799890049122*^9}},
 CellLabel->"In[254]:=",
 CellID->558340227,ExpressionUUID->"31068ba2-355c-4ced-80ee-333492ea6515"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "a"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9397998903978243`*^9},
 CellLabel->"Out[254]=",
 CellID->1010133199,ExpressionUUID->"57313a0f-0554-4466-9bda-01df0c859873"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AppendTo", "[", 
  RowBox[{
   RowBox[{"Range", "[", "5", "]"}], ",", "a"}], "]"}]], "Input",
 CellChangeTimes->{{3.939799905579777*^9, 3.93979991142305*^9}},
 CellLabel->"In[255]:=",
 CellID->1560019709,ExpressionUUID->"641e4c01-d535-4494-bb9b-17bf492fa2da"],

Cell[BoxData[
 TemplateBox[{
  "Set", "write", 
   "\"Tag \\!\\(\\*RowBox[{\\\"Range\\\"}]\\) in \\!\\(\\*RowBox[{\\\"Range\\\
\", \\\"[\\\", \\\"5\\\", \\\"]\\\"}]\\) is Protected.\"", 2, 255, 25, 
   26587777319895376970, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.939799912057065*^9},
 CellLabel->"During evaluation of In[255]:=",
 CellID->1902158819,ExpressionUUID->"c38b6f26-f832-496d-9009-fbab01785033"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "a"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9397999120728817`*^9},
 CellLabel->"Out[255]=",
 CellID->2141701691,ExpressionUUID->"f1e5780b-8a2a-49c5-8709-5804dc35d5b3"]
}, Open  ]],

Cell["\<\
As we already discussed, it is best to avoid using these functions (Append \
etc) for modifying large lists. Later we will consider several more efficient \
alternatives.\
\>", "Text",
 CellChangeTimes->{{3.9397999207678823`*^9, 3.939799925513102*^9}},
 CellID->1606913270,ExpressionUUID->"98e10074-8f1a-493b-82bf-7c102d2433a9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", "testlist", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.939799932876444*^9, 3.939799937194311*^9}},
 CellLabel->"In[256]:=",
 CellID->253026017,ExpressionUUID->"9c7fb616-62b2-4282-8e24-9f4875b03b77"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Insert and Delete", "Subsubsection",
 CellChangeTimes->{3.939799946178213*^9},
 CellID->848537266,ExpressionUUID->"547e4b0e-7f97-442d-8606-85e5b0cfb05a"],

Cell["\<\
As is clear from their names, these functions are used to insert an element \
to or delete it from the list, or more general Mathematica expression. These \
operations are well described in Mathematica Help. We will give just a few \
examples of their use. The format of Insert is Insert[list, new, pos] - this \
will insert the new element <new> in the position <pos> in the list <list>. \
Delete has a similar syntax Delete[list,pos] and respectively deletes from \
the list <list> an element at position <pos>. For example:\
\>", "Text",
 CellChangeTimes->{{3.9397999578772497`*^9, 3.939799985390239*^9}, {
  3.9398000204626713`*^9, 3.939800021976544*^9}},
 CellID->2074413582,ExpressionUUID->"5212325d-c360-48e1-b622-024809a86390"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "a", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testlist", "=", 
  RowBox[{"Range", "[", 
   RowBox[{"3", ",", "15", ",", "2"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9398000286795073`*^9, 3.939800037641365*^9}},
 CellLabel->"In[257]:=",
 CellID->26253713,ExpressionUUID->"96f9b8e0-9cb6-4799-9945-564f4c3830b0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", "15"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939800038320009*^9},
 CellLabel->"Out[258]=",
 CellID->5139335,ExpressionUUID->"3ab698de-d826-4f20-b85f-e25d2190f195"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Delete", "[", 
  RowBox[{"testlist", ",", "4"}], "]"}]], "Input",
 CellChangeTimes->{{3.939800040009531*^9, 3.939800043664569*^9}},
 CellLabel->"In[259]:=",
 CellID->1628709063,ExpressionUUID->"3f19a796-ad04-4e83-b0e1-0655caa363dd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "5", ",", "7", ",", "11", ",", "13", ",", "15"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939800044027301*^9},
 CellLabel->"Out[259]=",
 CellID->602455305,ExpressionUUID->"e0a5e7ac-9b27-41be-a8f2-3589cb236702"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Insert", "[", 
  RowBox[{"testlist", ",", "a", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.939800047639638*^9, 3.9398000518534327`*^9}},
 CellLabel->"In[260]:=",
 CellID->590164159,ExpressionUUID->"5ac846ec-413a-4dc6-b24e-40b07e2fa5d3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "5", ",", "7", ",", "9", ",", "a", ",", "11", ",", "13", ",", 
   "15"}], "}"}]], "Output",
 CellChangeTimes->{3.939800052231625*^9},
 CellLabel->"Out[260]=",
 CellID->460379791,ExpressionUUID->"3520275e-2b56-4ec4-8c78-fc0c92fa2426"]
}, Open  ]],

Cell["\<\
Notice that once again, both of these commands work on the copy of the \
original list that they create, so that the original list remains unchanged:\
\>", "Text",
 CellChangeTimes->{{3.93980006700487*^9, 3.939800069140523*^9}},
 CellID->219567196,ExpressionUUID->"b1a5a8ed-8842-49e4-a33d-d8ab433b6b86"],

Cell[CellGroupData[{

Cell[BoxData["testlist"], "Input",
 CellChangeTimes->{{3.939800075884097*^9, 3.939800076926858*^9}},
 CellLabel->"In[261]:=",
 CellID->1883429081,ExpressionUUID->"c6959a24-9dfc-48e4-8a60-b5775f9b60e5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", "15"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9398000772770042`*^9},
 CellLabel->"Out[261]=",
 CellID->797690328,ExpressionUUID->"81d3661b-0f37-4ae7-80c2-4325432609b2"]
}, Open  ]],

Cell["\<\
Both of these commands can work on nested lists (or more general \
expressions), and then the position will be a list of indexes. Also, they may \
also receive a list of positions rather than a single position - in this \
case, an element will be inserted or deleted in many places at once.\
\>", "Text",
 CellChangeTimes->{{3.939800090105194*^9, 3.939800098249345*^9}},
 CellID->345030841,ExpressionUUID->"38b84f38-2e7e-4991-a675-827cc8985bbe"],

Cell["\<\
However, in the case of Insert, it may become quite slow if a large number of \
parts have to be inserted at the same time. For a more detailed discussion, \
please see the Appendix C.\
\>", "Text",
 CellChangeTimes->{{3.93980010968054*^9, 3.939800112536474*^9}},
 CellID->1677245460,ExpressionUUID->"a8eeee6c-c568-4848-a05a-1d08130b1e9e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Working with nested lists", "Subsection",
 CellChangeTimes->{3.939800134172871*^9},
 CellID->2107899961,ExpressionUUID->"840a7ae6-5313-4ca2-9af6-fd343162f49e"],

Cell["\<\
It is often necessary to work with nested lists, that is - lists whose \
elements themselves are lists. We have seen simple examples of such lists \
already. Let me emphasize that in general such lists are not identical to \
multidimensional arrays but in fact much more general, because the lengths of \
sublists at each level can be different. The only thing we can say about the \
general nested list is that it represents some tree.\
\>", "Text",
 CellChangeTimes->{{3.939800143110614*^9, 3.939800163215064*^9}},
 CellID->436919968,ExpressionUUID->"78fd7072-0cec-4af2-bbf6-1f4c4ae40d9d"],

Cell["\<\
Here we will consider several special-purpose commands which were designed \
for efficient processing of some special types of such nested lists.\
\>", "Text",
 CellChangeTimes->{{3.9398001756322803`*^9, 3.939800180014411*^9}},
 CellID->2068433144,ExpressionUUID->"c8cb3c4f-d79c-4efc-bd21-bb683c440f96"],

Cell[CellGroupData[{

Cell["Partition", "Subsubsection",
 CellChangeTimes->{{3.939800196545586*^9, 3.939800197852427*^9}},
 CellID->1090537575,ExpressionUUID->"2aa8a54e-1b2a-4ad1-96de-32855fc48a42"],

Cell["\<\
This command is used to \[OpenCurlyDoubleQuote]cut\[CloseCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]slice\[CloseCurlyDoubleQuote] some list into (possibly \
overlapping) pieces. In its simplest form, it has a format Partition[list, \
size, shift]. It cuts the list into pieces with the length <size>, and \
shifted one with respect to another by <shift>. If the <shift> parameter is \
not given, the list is cut into non-overlapping pieces. For example:\
\>", "Text",
 CellChangeTimes->{{3.939800207057829*^9, 3.939800222305982*^9}},
 CellID->1740073585,ExpressionUUID->"0bd84058-5fb3-4d9d-a598-a50718209790"],

Cell["A simple example", "ItemNumbered",
 CellChangeTimes->{3.939800282821966*^9},
 CellID->680235517,ExpressionUUID->"73a956c0-835b-4221-b8d1-db9ea432a6a4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    SqrtBox["i"], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.939800284597406*^9, 3.939800296971175*^9}},
 CellLabel->"In[262]:=",
 CellID->692785008,ExpressionUUID->"375d6d38-5a45-4b24-a190-1b8ee375fb97"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   SqrtBox["2"], ",", 
   SqrtBox["3"], ",", "2", ",", 
   SqrtBox["5"], ",", 
   SqrtBox["6"], ",", 
   SqrtBox["7"], ",", 
   RowBox[{"2", " ", 
    SqrtBox["2"]}], ",", "3", ",", 
   SqrtBox["10"]}], "}"}]], "Output",
 CellChangeTimes->{3.939800297307324*^9},
 CellLabel->"Out[262]=",
 CellID->646656862,ExpressionUUID->"4827d489-65d3-46b3-b8a1-28f8c10237b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Partition", "[", 
  RowBox[{"testlist", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.939800299148715*^9, 3.939800305084367*^9}},
 CellLabel->"In[263]:=",
 CellID->676630627,ExpressionUUID->"e0a28c79-e05b-4fde-ad54-642fff5bea66"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", 
     SqrtBox["2"], ",", 
     SqrtBox["3"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     SqrtBox["5"], ",", 
     SqrtBox["6"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SqrtBox["7"], ",", 
     RowBox[{"2", " ", 
      SqrtBox["2"]}], ",", "3"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939800305616714*^9},
 CellLabel->"Out[263]=",
 CellID->310464698,ExpressionUUID->"017939c5-30a1-464a-8342-43d3c7802c81"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Partition", "[", 
  RowBox[{"testlist", ",", "7"}], "]"}]], "Input",
 CellChangeTimes->{{3.939800310263853*^9, 3.93980031452243*^9}},
 CellLabel->"In[264]:=",
 CellID->1441940969,ExpressionUUID->"601a27a6-df41-4a48-bbd4-47a5601a8cc7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"1", ",", 
    SqrtBox["2"], ",", 
    SqrtBox["3"], ",", "2", ",", 
    SqrtBox["5"], ",", 
    SqrtBox["6"], ",", 
    SqrtBox["7"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.9398003148108053`*^9},
 CellLabel->"Out[264]=",
 CellID->1584074708,ExpressionUUID->"d0b0d80b-062c-4b0e-8d7c-6d9ef86a3f83"]
}, Open  ]],

Cell["\<\
In the last example, the remaining piece had a size smaller than 7, so it was \
\[OpenCurlyDoubleQuote]eaten up\[CloseCurlyDoubleQuote]. Now we will \
partition with overlaps:\
\>", "Text",
 CellChangeTimes->{{3.9398003245129633`*^9, 3.93980033069095*^9}},
 CellID->1188845497,ExpressionUUID->"81f88af5-503e-4936-869e-3279b19f49b6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Partition", "[", 
  RowBox[{"testlist", ",", "7", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.939800333754912*^9, 3.9398003378607893`*^9}},
 CellLabel->"In[265]:=",
 CellID->1719703633,ExpressionUUID->"4172fe5f-1792-4cde-8d0d-a4c4decdb1b6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", 
     SqrtBox["2"], ",", 
     SqrtBox["3"], ",", "2", ",", 
     SqrtBox["5"], ",", 
     SqrtBox["6"], ",", 
     SqrtBox["7"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SqrtBox["2"], ",", 
     SqrtBox["3"], ",", "2", ",", 
     SqrtBox["5"], ",", 
     SqrtBox["6"], ",", 
     SqrtBox["7"], ",", 
     RowBox[{"2", " ", 
      SqrtBox["2"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SqrtBox["3"], ",", "2", ",", 
     SqrtBox["5"], ",", 
     SqrtBox["6"], ",", 
     SqrtBox["7"], ",", 
     RowBox[{"2", " ", 
      SqrtBox["2"]}], ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     SqrtBox["5"], ",", 
     SqrtBox["6"], ",", 
     SqrtBox["7"], ",", 
     RowBox[{"2", " ", 
      SqrtBox["2"]}], ",", "3", ",", 
     SqrtBox["10"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9398003387362833`*^9},
 CellLabel->"Out[265]=",
 CellID->1055722361,ExpressionUUID->"45151021-a260-4cfe-9a78-e080936d6bc3"]
}, Open  ]],

Cell["\<\
An example of practical use: computation of the moving average in a list.\
\>", "ItemNumbered",
 CellChangeTimes->{3.939800410924604*^9},
 CellTags->"3.8.1.2",
 CellID->1015829813,ExpressionUUID->"be4d3a74-64a6-4d58-9026-bfb7b342ff0a"],

Cell["This example is based on a similar discussion in Wagner\
\[CloseCurlyQuote] 96.", "Text",
 CellChangeTimes->{3.939800425924156*^9},
 CellID->556673441,ExpressionUUID->"71a8cddf-c21c-49b0-b57e-376981cb2e39"],

Cell[TextData[StyleBox["The problem",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{3.939800435539859*^9},
 CellID->1571756555,ExpressionUUID->"94b5d6eb-ddd5-4352-b39e-2a2104e51f03"],

Cell["\<\
The m-moving average for a list is an average which is obtained by averaging \
every element in a list with <m> neighbors to the right and to the left \
(which means that this quantity is only defined for points (elements) having \
at least m neighbors both to the left and to the right). Thus, moving average \
is actually a list of such averages, of the length <len>-2m, where <len> is a \
length of an initial list.\
\>", "Text",
 CellChangeTimes->{{3.939800447074911*^9, 3.939800472838037*^9}},
 CellID->316078138,ExpressionUUID->"7c9c3a81-6876-4e52-8633-6def589d5a37"],

Cell[TextData[StyleBox["Developing a solution",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{3.939800486856797*^9},
 CellID->1485668291,ExpressionUUID->"168c95da-fc51-486b-95df-f1a5a131cf82"],

Cell["\<\
To solve our problem, we will first define an auxiliary function which will \
count the average of a list of numbers. However, it will turn out that our \
function will also work on a list of lists of numbers, this time summing \
entire lists (with the same number of elements) together, which we will use. \
So:\
\>", "Text",
 CellChangeTimes->{{3.939800500417387*^9, 3.939800511323853*^9}},
 CellID->834603168,ExpressionUUID->"f1a8b83c-ff80-44d6-9102-e41580570c43"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "listAverage", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"listAverage", "[", "x_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"Apply", "[", 
     RowBox[{"Plus", ",", "x"}], "]"}], "/", 
    RowBox[{"Length", "[", "x", "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9398005164831676`*^9, 3.939800539445352*^9}},
 CellLabel->"In[285]:=",
 CellID->229627653,ExpressionUUID->"6dd56de6-77d5-4430-9550-5512739123cd"],

Cell["\<\
The expression Apply[Plus,x] computes the sum of elements in the list and its \
meaning will be explained in chapter V.\
\>", "Text",
 CellChangeTimes->{{3.9398005499597607`*^9, 3.939800554180069*^9}},
 CellID->1614081921,ExpressionUUID->"dbc4898f-e45d-4c9c-b807-5b67061d7ecc"],

Cell["Now we will define another auxiliary function:", "Text",
 CellChangeTimes->{3.9398005615436983`*^9},
 CellID->1654019374,ExpressionUUID->"a230365f-1511-4992-8a12-ff966f067349"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "neighborLists", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"neighborLists", "[", 
    RowBox[{"x_List", ",", "m_Integer"}], "]"}], ":=", "\[IndentingNewLine]", 
   
   RowBox[{"Partition", "[", 
    RowBox[{"x", ",", 
     RowBox[{
      RowBox[{"Length", "[", "x", "]"}], "-", 
      RowBox[{"2", "*", "m"}]}], ",", "1"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.93980056537364*^9, 3.939800594771694*^9}},
 CellLabel->"In[268]:=",
 CellID->4089776,ExpressionUUID->"0f1904fd-c210-4daa-b449-2797c7c543b7"],

Cell["For example:", "Text",
 CellChangeTimes->{{3.9398005982040243`*^9, 3.93980060070793*^9}},
 CellID->586239352,ExpressionUUID->"524137f8-cfed-4eb2-8d39-ea5219f91e1d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"neighborLists", "[", 
  RowBox[{"testlist", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.939800602342331*^9, 3.939800606527136*^9}},
 CellLabel->"In[270]:=",
 CellID->35737644,ExpressionUUID->"97cb14b8-8f03-4a8a-b24e-ccd1f30a6805"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", 
     SqrtBox["2"], ",", 
     SqrtBox["3"], ",", "2", ",", 
     SqrtBox["5"], ",", 
     SqrtBox["6"], ",", 
     SqrtBox["7"], ",", 
     RowBox[{"2", " ", 
      SqrtBox["2"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SqrtBox["2"], ",", 
     SqrtBox["3"], ",", "2", ",", 
     SqrtBox["5"], ",", 
     SqrtBox["6"], ",", 
     SqrtBox["7"], ",", 
     RowBox[{"2", " ", 
      SqrtBox["2"]}], ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SqrtBox["3"], ",", "2", ",", 
     SqrtBox["5"], ",", 
     SqrtBox["6"], ",", 
     SqrtBox["7"], ",", 
     RowBox[{"2", " ", 
      SqrtBox["2"]}], ",", "3", ",", 
     SqrtBox["10"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9398006071677628`*^9},
 CellLabel->"Out[270]=",
 CellID->82162071,ExpressionUUID->"f4b0514f-8f7f-4e36-8644-eb02fba97d6c"]
}, Open  ]],

Cell["\<\
Let us now realize that the middle list represents a list of \
\[OpenCurlyDoubleQuote]middle points\[CloseCurlyDoubleQuote], and the first \
and the last list represent here lists of closest \
\[OpenCurlyDoubleQuote]neighbors\[CloseCurlyDoubleQuote] for these middle \
points. Thus, the only thing left to do is to use listAverage on this result:\
\
\>", "Text",
 CellChangeTimes->{{3.939800633650188*^9, 3.939800644910912*^9}},
 CellID->65942276,ExpressionUUID->"b0773bc5-3b6b-43c7-a1a5-19e9eec59ce6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listAverage", "[", 
  RowBox[{"neighborLists", "[", 
   RowBox[{"testlist", ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.939800647273205*^9, 3.939800654347197*^9}},
 CellLabel->"In[271]:=",
 CellID->1259998457,ExpressionUUID->"59fa9427-6206-4818-a552-709c913f44df"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "3"], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      SqrtBox["2"], "+", 
      SqrtBox["3"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "3"], " ", 
    RowBox[{"(", 
     RowBox[{"2", "+", 
      SqrtBox["2"], "+", 
      SqrtBox["3"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "3"], " ", 
    RowBox[{"(", 
     RowBox[{"2", "+", 
      SqrtBox["3"], "+", 
      SqrtBox["5"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "3"], " ", 
    RowBox[{"(", 
     RowBox[{"2", "+", 
      SqrtBox["5"], "+", 
      SqrtBox["6"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "3"], " ", 
    RowBox[{"(", 
     RowBox[{
      SqrtBox["5"], "+", 
      SqrtBox["6"], "+", 
      SqrtBox["7"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "3"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", " ", 
       SqrtBox["2"]}], "+", 
      SqrtBox["6"], "+", 
      SqrtBox["7"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "3"], " ", 
    RowBox[{"(", 
     RowBox[{"3", "+", 
      RowBox[{"2", " ", 
       SqrtBox["2"]}], "+", 
      SqrtBox["7"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "3"], " ", 
    RowBox[{"(", 
     RowBox[{"3", "+", 
      RowBox[{"2", " ", 
       SqrtBox["2"]}], "+", 
      SqrtBox["10"]}], ")"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.939800654858963*^9},
 CellLabel->"Out[271]=",
 CellID->972162103,ExpressionUUID->"b246e4c4-3ad9-4fd5-b0ec-9f803bf84d5a"]
}, Open  ]],

Cell[TextData[StyleBox["Packaging code to a function",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{3.9398007601630077`*^9},
 CellID->1072878745,ExpressionUUID->"bd557d8d-06c1-4136-b2ef-54c3d059c476"],

Cell["Thus, our final function <movingAverage>will look like:", "Text",
 CellChangeTimes->{3.9398007709943953`*^9},
 CellID->1600367003,ExpressionUUID->"040fe343-9657-41f8-86b4-eec5eb0c341d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"movingAverage", ",", " ", "neighborLists", ",", "listAverage"}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"neighborLists", "[", 
    RowBox[{"x_List", ",", "m_Integer"}], "]"}], ":=", "\[IndentingNewLine]", 
   
   RowBox[{"Partition", "[", 
    RowBox[{"x", ",", 
     RowBox[{
      RowBox[{"Length", "[", "x", "]"}], "-", 
      RowBox[{"2", "*", "m"}]}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"listAverage", "[", "x_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"Apply", "[", 
     RowBox[{"Plus", ",", "x"}], "]"}], "/", 
    RowBox[{"Length", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"movingAverage", "[", 
    RowBox[{"x_List", ",", "m_Integer"}], "]"}], ":=", "\[IndentingNewLine]", 
   
   RowBox[{"listAverage", "[", 
    RowBox[{"neighborLists", "[", 
     RowBox[{"x", ",", "m"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.93980077774727*^9, 3.939800862365691*^9}, {
  3.9398012839420547`*^9, 3.939801305019964*^9}},
 CellLabel->"In[288]:=",
 CellID->1700652202,ExpressionUUID->"c7686af0-bc75-4943-be59-756525fcbce8"],

Cell["\<\
For example, here we find the moving average with two neighbors on each side:\
\
\>", "Text",
 CellChangeTimes->{3.9398008729578953`*^9},
 CellID->180081506,ExpressionUUID->"2177e9e2-a156-44f2-b03c-aad750756f48"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"movingAverage", "[", 
  RowBox[{"testlist", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.9398008753546257`*^9, 3.93980087902757*^9}},
 CellLabel->"In[292]:=",
 CellID->2114692260,ExpressionUUID->"2cad240a-8e75-44f8-9f5c-ba8b4cc2ca60"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"3", "+", 
      SqrtBox["2"], "+", 
      SqrtBox["3"], "+", 
      SqrtBox["5"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"2", "+", 
      SqrtBox["2"], "+", 
      SqrtBox["3"], "+", 
      SqrtBox["5"], "+", 
      SqrtBox["6"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"2", "+", 
      SqrtBox["3"], "+", 
      SqrtBox["5"], "+", 
      SqrtBox["6"], "+", 
      SqrtBox["7"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"2", "+", 
      RowBox[{"2", " ", 
       SqrtBox["2"]}], "+", 
      SqrtBox["5"], "+", 
      SqrtBox["6"], "+", 
      SqrtBox["7"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"3", "+", 
      RowBox[{"2", " ", 
       SqrtBox["2"]}], "+", 
      SqrtBox["5"], "+", 
      SqrtBox["6"], "+", 
      SqrtBox["7"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"3", "+", 
      RowBox[{"2", " ", 
       SqrtBox["2"]}], "+", 
      SqrtBox["6"], "+", 
      SqrtBox["7"], "+", 
      SqrtBox["10"]}], ")"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.939800879408914*^9, 3.9398009688523817`*^9, 
  3.939801193614408*^9, 3.939801308887479*^9},
 CellLabel->"Out[292]=",
 CellID->375360205,ExpressionUUID->"8012f3f7-0945-4e1d-a776-2ed39a7698a9"]
}, Open  ]],

Cell[TextData[StyleBox["Using functional programming to eliminate auxiliary \
functions",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{3.9398013246874638`*^9},
 CellID->1370564269,ExpressionUUID->"1a99cc13-da2e-4588-a9f9-6daeefff2e0d"],

Cell["\<\
With the help of the functional programming syntax, we can write this as a \
single function and eliminate the need in auxiliary functions altogether:\
\>", "Text",
 CellChangeTimes->{{3.93980133615633*^9, 3.9398013416787777`*^9}},
 CellID->1164071361,ExpressionUUID->"89f95b15-25c7-4708-b700-4bb1cba6f45e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "movingAverage", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"movingAverage", "[", 
    RowBox[{"x_List", ",", "m_Integer"}], "]"}], ":=", "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"Plus", "@@", "#"}], ")"}], "/", 
      RowBox[{"Length", "[", "#", "]"}]}], "&"}], "@", 
    RowBox[{"Partition", "[", 
     RowBox[{"x", ",", 
      RowBox[{
       RowBox[{"Length", "[", "x", "]"}], "-", 
       RowBox[{"2", "*", "m"}]}], ",", "1"}], "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9398013465711117`*^9, 3.939801390967801*^9}, 
   3.939801437694435*^9},
 CellLabel->"In[296]:=",
 CellID->1688815148,ExpressionUUID->"60a2533c-a83a-4f6f-b286-cc0f6ac9854e"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.939801394432798*^9, 3.939801396042369*^9}},
 CellID->941027624,ExpressionUUID->"a0b1d59e-156b-4e28-9f1b-8f08891df4e0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"movingAverage", "[", 
  RowBox[{"testlist", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.939801397325972*^9, 3.939801400612946*^9}},
 CellLabel->"In[298]:=",
 CellID->1673633504,ExpressionUUID->"982ec457-4dc9-4f9b-a70e-9fe0e7166e5f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"3", "+", 
      SqrtBox["2"], "+", 
      SqrtBox["3"], "+", 
      SqrtBox["5"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"2", "+", 
      SqrtBox["2"], "+", 
      SqrtBox["3"], "+", 
      SqrtBox["5"], "+", 
      SqrtBox["6"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"2", "+", 
      SqrtBox["3"], "+", 
      SqrtBox["5"], "+", 
      SqrtBox["6"], "+", 
      SqrtBox["7"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"2", "+", 
      RowBox[{"2", " ", 
       SqrtBox["2"]}], "+", 
      SqrtBox["5"], "+", 
      SqrtBox["6"], "+", 
      SqrtBox["7"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"3", "+", 
      RowBox[{"2", " ", 
       SqrtBox["2"]}], "+", 
      SqrtBox["5"], "+", 
      SqrtBox["6"], "+", 
      SqrtBox["7"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"3", "+", 
      RowBox[{"2", " ", 
       SqrtBox["2"]}], "+", 
      SqrtBox["6"], "+", 
      SqrtBox["7"], "+", 
      SqrtBox["10"]}], ")"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.939801401023498*^9, 3.9398014409054403`*^9},
 CellLabel->"Out[298]=",
 CellID->1977408698,ExpressionUUID->"bb2a7d70-263f-481e-925a-a268b2cc76cd"]
}, Open  ]],

Cell[TextData[StyleBox["A procedural version",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{3.939801451774922*^9},
 CellID->1998549961,ExpressionUUID->"b10e8ba7-e420-479d-90bb-538c7c4da173"],

Cell["Here is the procedural implementation of the same thing:", "Text",
 CellChangeTimes->{3.939801460890897*^9},
 CellID->837471800,ExpressionUUID->"262b76e7-52bd-41ba-a018-7e3426cc68b8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"movingAverageProc", "[", 
    RowBox[{"x_List", ",", "m_Integer"}], "]"}], ":=", "\[IndentingNewLine]", 
   
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", ",", "j", ",", 
       RowBox[{"ln", "=", 
        RowBox[{"Length", "[", "x", "]"}]}], ",", "aver", ",", "sum"}], "}"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"aver", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{"ln", "-", 
           RowBox[{"2", "*", "m"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", 
         RowBox[{"m", "+", "1"}]}], ",", 
        RowBox[{"i", "<=", 
         RowBox[{"ln", "-", "m"}]}], ",", 
        RowBox[{"i", "++"}], ",", 
        RowBox[{
         RowBox[{"sum", "=", "0"}], ";", "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"j", "=", 
            RowBox[{"i", "-", "m"}]}], ",", 
           RowBox[{"j", "<=", 
            RowBox[{"i", "+", "m"}]}], ",", 
           RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{"sum", "=", 
            RowBox[{"sum", "+", 
             RowBox[{"x", "[", 
              RowBox[{"[", "j", "]"}], "]"}]}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"aver", "[", 
           RowBox[{"[", 
            RowBox[{"i", "-", "m"}], "]"}], "]"}], "=", 
          RowBox[{"sum", "/", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"2", "*", "m"}], "+", "1"}], ")"}]}]}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", "aver"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.939801469377454*^9, 3.939801563065008*^9}},
 CellLabel->"In[299]:=",
 CellID->438679564,ExpressionUUID->"d5f1fb5d-472d-4f28-a0e5-2cfa3a0ecc40"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.939801566095516*^9, 3.939801567280645*^9}},
 CellID->204464260,ExpressionUUID->"8e8cbc6c-e948-46ba-86e9-7231f3f032f4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"movingAverageProc", "[", 
  RowBox[{"testlist", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.939801568629726*^9, 3.93980157282872*^9}},
 CellLabel->"In[300]:=",
 CellID->1036003604,ExpressionUUID->"c819a72c-c332-48fd-bf77-ee1722e40a2a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"3", "+", 
      SqrtBox["2"], "+", 
      SqrtBox["3"], "+", 
      SqrtBox["5"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"2", "+", 
      SqrtBox["2"], "+", 
      SqrtBox["3"], "+", 
      SqrtBox["5"], "+", 
      SqrtBox["6"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"2", "+", 
      SqrtBox["3"], "+", 
      SqrtBox["5"], "+", 
      SqrtBox["6"], "+", 
      SqrtBox["7"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"2", "+", 
      RowBox[{"2", " ", 
       SqrtBox["2"]}], "+", 
      SqrtBox["5"], "+", 
      SqrtBox["6"], "+", 
      SqrtBox["7"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"3", "+", 
      RowBox[{"2", " ", 
       SqrtBox["2"]}], "+", 
      SqrtBox["5"], "+", 
      SqrtBox["6"], "+", 
      SqrtBox["7"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "5"], " ", 
    RowBox[{"(", 
     RowBox[{"3", "+", 
      RowBox[{"2", " ", 
       SqrtBox["2"]}], "+", 
      SqrtBox["6"], "+", 
      SqrtBox["7"], "+", 
      SqrtBox["10"]}], ")"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.939801573407186*^9},
 CellLabel->"Out[300]=",
 CellID->2080167342,ExpressionUUID->"fc810709-c34a-4646-a7ef-6e94d37b389f"]
}, Open  ]],

Cell[TextData[StyleBox["Efficiency comparison",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{3.939801582800087*^9},
 CellID->338743834,ExpressionUUID->"a114464f-9e87-45a5-b099-528afca56e62"],

Cell["\<\
The problem with the procedural version is not just that the code is longer, \
but also that it is more error prone (array bounds, initialization of \
variables etc). On top of that, it turns out to be far less efficient. Let us \
compare the efficiency on large lists:\
\>", "Text",
 CellChangeTimes->{{3.939801593763401*^9, 3.93980161427309*^9}},
 CellID->288469841,ExpressionUUID->"f642d97e-8fe7-4721-bc34-fe232d0ce00e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"movingAverage", "[", 
    RowBox[{
     RowBox[{"Range", "[", "10000", "]"}], ",", "10"}], "]"}], ";"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.939801636779622*^9, 3.9398016517444983`*^9}},
 CellLabel->"In[301]:=",
 CellID->1354174068,ExpressionUUID->"32cd2d69-7205-4668-b5ee-cdfb18f5a36a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.005334`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.939801653728187*^9},
 CellLabel->"Out[301]=",
 CellID->1801078924,ExpressionUUID->"af5cf65a-c216-48f1-83fb-5d2d67f4e3cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{
   RowBox[{"movingAverageProc", "[", 
    RowBox[{
     RowBox[{"Range", "[", "10000", "]"}], ",", "10"}], "]"}], ";"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.93980165507826*^9, 3.9398016712297173`*^9}},
 CellLabel->"In[302]:=",
 CellID->2006251837,ExpressionUUID->"e6855f56-0e59-4d70-b077-ba5c54acc9b1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.18454`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.9398016718016043`*^9},
 CellLabel->"Out[302]=",
 CellID->300009028,ExpressionUUID->"b2e57400-549f-492b-bbfd-d342de3ff0fa"]
}, Open  ]],

Cell["\<\
Here we have a 100 times difference (for this length of the list)! And \
moreover, this is not a constant factor, but the difference will increase \
further with the length of the list. Of course, in procedural languages such \
as C the latter implementation is natural and fast. Not so in Mathematica. \
However, one can still obtain the code which will be concise, fast and \
elegant at the same time, with the use of functional programming methods.\
\>", "Text",
 CellChangeTimes->{{3.939801688700899*^9, 3.939801712575205*^9}},
 CellID->2107614087,ExpressionUUID->"046c15f5-f40b-49e1-9d86-ea8dbf261688"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", "testlist", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.939801715228623*^9, 3.939801718406642*^9}},
 CellLabel->"In[303]:=",
 CellID->1421551012,ExpressionUUID->"8dd32d6d-2c7c-433a-b4de-4464e3523228"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Transpose", "Subsubsection",
 CellChangeTimes->{{3.9398017253491488`*^9, 3.93980172841191*^9}},
 CellID->296740282,ExpressionUUID->"f02450c7-305e-45b4-b7bf-ba165f01ba0e"],

Cell["\<\
This is one of the most useful commands. It has this name since for matrices, \
which are represented as 2-dimensional lists of lists, it performs the \
transposition operation. However, we are not forced to always interpret the \
two-dimensional array as a matrix, especially if it is combined from elements \
of different types. Then it turns out that the number of useful things one \
can do with Transpose is much larger. But let
us start with the numeric lists: say we have a given list of lists of some \
elements (they may be lists themselves, but this does not matter for us):\
\>", "Text",
 CellChangeTimes->{{3.939801840039567*^9, 3.939801883713525*^9}},
 CellID->2034063011,ExpressionUUID->"186839ea-3bb9-46c6-b540-61c044d135b3"],

Cell["Simple example: transposing a simple matrix", "ItemNumbered",
 CellChangeTimes->{3.939801896717753*^9},
 CellID->1700064911,ExpressionUUID->"29360193-623c-4b69-b536-26052f58f4eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"i", "+", "j"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "1", ",", "3"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.939801900622512*^9, 3.939801910251342*^9}},
 CellLabel->"In[304]:=",
 CellID->199176473,ExpressionUUID->"10e340ca-b194-47e5-a768-268ba165b031"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939801911532737*^9},
 CellLabel->"Out[304]=",
 CellID->806952419,ExpressionUUID->"df7be390-4ca4-4d98-842b-3d7d1ff0bfc8"]
}, Open  ]],

Cell["Then,", "Text",
 CellChangeTimes->{{3.939801915183921*^9, 3.939801915716543*^9}},
 CellID->1090075328,ExpressionUUID->"f3902a23-ff5b-425d-8bf8-f2f627337672"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", "testlist", "]"}]], "Input",
 CellChangeTimes->{{3.9398019171235037`*^9, 3.9398019202161217`*^9}},
 CellLabel->"In[305]:=",
 CellID->261923297,ExpressionUUID->"384b59cf-493f-40a9-8aca-b11fb2a3bebd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939801920728372*^9},
 CellLabel->"Out[305]=",
 CellID->981465746,ExpressionUUID->"3b26fa84-62ef-4dc5-93dd-8ff2dd85e0cb"]
}, Open  ]],

Cell["Example: transposing a matrix of lists", "ItemNumbered",
 CellChangeTimes->{3.939801935899605*^9},
 CellID->672900415,ExpressionUUID->"49e9fef4-3de4-4592-a2ab-76c826040172"],

Cell["Another example:", "Text",
 CellChangeTimes->{3.939801950998846*^9},
 CellID->788389803,ExpressionUUID->"43bfb341-82a6-487f-b3d2-d76850a5a99a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", "j"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "1", ",", "3"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.939801962054686*^9, 3.9398019718894377`*^9}},
 CellLabel->"In[306]:=",
 CellID->1892462597,ExpressionUUID->"8d0ac721-28ea-490d-ba06-fbbfa98a4d70"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9398019723417*^9},
 CellLabel->"Out[306]=",
 CellID->212349615,ExpressionUUID->"80dd6ec4-8839-4bd1-b74c-de003066fd95"]
}, Open  ]],

Cell["This is a 2-dimensional array of lists.", "Text",
 CellChangeTimes->{3.9398019874725037`*^9},
 CellID->1989641638,ExpressionUUID->"f05142b9-a0c1-436b-9210-f4f02ae2956e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", "testlist", "]"}]], "Input",
 CellChangeTimes->{{3.939801989519606*^9, 3.9398019926243477`*^9}},
 CellLabel->"In[307]:=",
 CellID->558488042,ExpressionUUID->"887cf6a1-50d4-4d8f-ad50-641e47a02e0d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939801992905868*^9},
 CellLabel->"Out[307]=",
 CellID->1766898845,ExpressionUUID->"9518a26c-11d2-4e4d-8318-fa68ae764281"]
}, Open  ]],

Cell["Example: combining names with grades", "ItemNumbered",
 CellChangeTimes->{3.9398020256029663`*^9},
 CellID->865017199,ExpressionUUID->"5a0d9215-e943-4dc6-87a3-d4ab256e48ad"],

Cell["\<\
Another example: we have results of some exam - the scores - as a first list, \
and last names of the students as another one. We want to make a single list \
of entries like {{student1,score1},...}.\
\>", "Text",
 CellChangeTimes->{{3.939802036719266*^9, 3.9398020448930187`*^9}},
 CellID->2027257050,ExpressionUUID->"b2e3386d-813d-43af-b212-8576c095ed51"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"names", ",", "scores"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"names", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Smith\>\"", ",", "\"\<Johnson\>\"", ",", "\"\<Peterson\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"scores", "=", 
   RowBox[{"{", 
    RowBox[{"70", ",", "90", ",", "50"}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9398020488874063`*^9, 3.939802075552771*^9}},
 CellLabel->"In[308]:=",
 CellID->939314898,ExpressionUUID->"1f3ff250-ba85-4836-b80b-76948b1b5e29"],

Cell["Then we do this:", "Text",
 CellChangeTimes->{{3.939802078620216*^9, 3.939802080911531*^9}},
 CellID->994089066,ExpressionUUID->"2537d397-e44e-46d2-8343-5734f7966e38"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"{", 
   RowBox[{"names", ",", "scores"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.939802082084543*^9, 3.9398020880253267`*^9}},
 CellLabel->"In[311]:=",
 CellID->895202424,ExpressionUUID->"38fbb10e-5ae3-4b82-9f36-e5f79d7e87c4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"Smith\"\>", ",", "70"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Johnson\"\>", ",", "90"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Peterson\"\>", ",", "50"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939802088423834*^9},
 CellLabel->"Out[311]=",
 CellID->1056169243,ExpressionUUID->"291df6e7-1cb7-400d-b76d-a80aadbede4c"]
}, Open  ]],

Cell["\<\
But we will get most out of Transpose when we get to functional programming, \
since Transpose is very frequently used there for efficient structure \
rearrangements. We will see many examples of its use in the chapters that \
follow.\
\>", "Text",
 CellChangeTimes->{{3.9398020998243637`*^9, 3.93980210995142*^9}},
 CellID->2084124646,ExpressionUUID->"d231d381-626d-4cb7-96ef-e56c6bf43c3a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Flatten", "Subsubsection",
 CellChangeTimes->{{3.9398021157394943`*^9, 3.9398021176334133`*^9}},
 CellID->1364596080,ExpressionUUID->"66b4aeb0-9862-4dc0-b456-82e836dfbe48"],

Cell["\<\
This command is used to destroy the structure of nested lists, since it \
removes all internal curly braces and transforms any complicated nested list \
into a flat one. For example:\
\>", "Text",
 CellChangeTimes->{{3.9398407909564877`*^9, 3.939840793267729*^9}},
 CellID->1728082853,ExpressionUUID->"ebaf32c3-1465-489e-aecc-d6b91ade2cb5"],

Cell["Simple example: flattening a nested list", "ItemNumbered",
 CellChangeTimes->{3.93984080946684*^9},
 CellID->454734585,ExpressionUUID->"5353b32c-c941-446e-a2cb-70f7638f18b8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", "j"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "3"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.939840813055004*^9, 3.9398408238050137`*^9}},
 CellLabel->"In[312]:=",
 CellID->1080400358,ExpressionUUID->"1c05d51b-40f0-4826-8e48-d75bc023f0e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939840824554833*^9},
 CellLabel->"Out[312]=",
 CellID->1206617999,ExpressionUUID->"b68557fe-72dc-4fe2-98c5-d4a0388903fa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", "testlist", "]"}]], "Input",
 CellChangeTimes->{{3.939840826163124*^9, 3.939840829621063*^9}},
 CellLabel->"In[313]:=",
 CellID->1550898037,ExpressionUUID->"040905c2-9ff1-4c56-b697-f7785ec08fa5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "3", ",", "2", ",", "1", 
   ",", "2", ",", "2", ",", "2", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.939840829963749*^9},
 CellLabel->"Out[313]=",
 CellID->1815406551,ExpressionUUID->"fa9eb6e7-afa8-410a-bfa6-9be6fe9c8dff"]
}, Open  ]],

Cell["Flattening down to a given level", "ItemNumbered",
 CellChangeTimes->{3.939840842792362*^9},
 CellID->90246081,ExpressionUUID->"8845eab1-85e9-4215-a179-15d2dc9ae779"],

Cell["\<\
One can make Flatten more \[OpenCurlyDoubleQuote]merciful\
\[CloseCurlyDoubleQuote] and selective by instructing it to destroy only \
braces up to (or, more precisely, down to) a certain level in an expression. \
The level up to which the \[OpenCurlyDoubleQuote]destruction\
\[CloseCurlyDoubleQuote] has to be performed is given to Flatten as an \
optional second parameter. For instance:\
\>", "Text",
 CellChangeTimes->{{3.9398408493804283`*^9, 3.939840857540951*^9}},
 CellID->642428585,ExpressionUUID->"eb171a1b-a945-4f60-9f7f-57cdfd92a074"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{"testlist", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.9398408658073397`*^9, 3.939840869139024*^9}},
 CellLabel->"In[314]:=",
 CellID->561878045,ExpressionUUID->"19ad978e-a4a7-4c99-9a5f-edb80b16649d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939840869502449*^9},
 CellLabel->"Out[314]=",
 CellID->1778707074,ExpressionUUID->"443d2505-1fff-4928-b445-4abca0890bdb"]
}, Open  ]],

Cell[TextData[StyleBox["Example: flattening a nested list level by level",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{3.939840886805318*^9},
 CellID->1757426478,ExpressionUUID->"78b3087e-1d29-4544-9f82-ef8ed2c6cb6f"],

Cell["Another example:", "Text",
 CellChangeTimes->{3.9398408967030697`*^9},
 CellID->307675294,ExpressionUUID->"1e88e2a6-a914-4024-9893-26a8b319e6f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", "j", ",", "k"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"k", ",", "3"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.939840898372177*^9, 3.9398409095380173`*^9}},
 CellLabel->"In[315]:=",
 CellID->1372367437,ExpressionUUID->"eb45a76e-51aa-4635-b209-9ad8e19bd827"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "3"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "3"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "2", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2", ",", "3"}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939840909982665*^9},
 CellLabel->"Out[315]=",
 CellID->283380566,ExpressionUUID->"023180a9-c1f9-4953-86a0-bd9d6ba166fa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{"testlist", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.939840911638598*^9, 3.939840914675391*^9}},
 CellLabel->"In[316]:=",
 CellID->1834806890,ExpressionUUID->"c4bfe000-2dbd-45f6-a129-cdd267bca34d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2", ",", "3"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939840915047481*^9},
 CellLabel->"Out[316]=",
 CellID->266675472,ExpressionUUID->"d4f7a93b-a3cb-4c6e-aa43-cbdbdd8446b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{"testlist", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.9398409183972273`*^9, 3.939840920935355*^9}},
 CellLabel->"In[317]:=",
 CellID->1586807581,ExpressionUUID->"8ed37d18-a792-4927-9de5-f4e241ae0a2b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9398409213459587`*^9},
 CellLabel->"Out[317]=",
 CellID->514963169,ExpressionUUID->"fb80ec64-99cd-4a34-b265-fb3c0987be8e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{"testlist", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.939840924938219*^9, 3.9398409274394836`*^9}},
 CellLabel->"In[318]:=",
 CellID->484162029,ExpressionUUID->"955a093d-9978-49e4-a16c-09288fbb867f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "1", 
   ",", "3", ",", "1", ",", "2", ",", "1", ",", "1", ",", "2", ",", "2", ",", 
   "1", ",", "2", ",", "3", ",", "2", ",", "1", ",", "1", ",", "2", ",", "1", 
   ",", "2", ",", "2", ",", "1", ",", "3", ",", "2", ",", "2", ",", "1", ",", 
   "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.939840927833543*^9},
 CellLabel->"Out[318]=",
 CellID->1196015074,ExpressionUUID->"b4c0dd0d-b9a3-450f-b7f8-683288ed728f"]
}, Open  ]],

Cell["\<\
In practice, most frequently one uses either Flatten[expr] to get a \
completely flat list, or Flatten[expr,1] to remove some internal curly braces \
which were needed at some intermediate steps but not anymore.\
\>", "Text",
 CellChangeTimes->{{3.9398409385825043`*^9, 3.939840944337595*^9}},
 CellID->978412798,ExpressionUUID->"64e2502c-bd2b-4a86-973d-f2099af76ed2"],

Cell["\<\
Application: a computation of quadratic norm of a tensor of arbitrary rank \
(vector, matrix
etc).\
\>", "ItemNumbered",
 CellChangeTimes->{3.939840962979809*^9},
 CellTags->"3.8.3.3",
 CellID->729900717,ExpressionUUID->"02145ee7-86c3-4535-ac48-a44374598fcf"],

Cell[TextData[StyleBox["The problem and the solution",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{3.9398409720783854`*^9},
 CellID->1014758955,ExpressionUUID->"184cae7e-ed88-4f3f-87a1-353f3578eb8f"],

Cell["\<\
Here we will show how the use of Flatten can dramatically simplify the \
computation of the norm of a tensor of arbitrary rank. What may be surprising \
is that we will not need the rank of the tensor as a separate parameter. So, \
we will start with the code:\
\>", "Text",
 CellChangeTimes->{{3.9398409898381042`*^9, 3.9398410034628077`*^9}},
 CellID->1886115858,ExpressionUUID->"59160e38-9aa5-4d85-b1a7-414f181d705b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Cler", "[", "tensorNorm", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"tensorNorm", "[", "x_List", "]"}], ":=", 
   RowBox[{"Sqrt", "[", 
    RowBox[{"Plus", "@@", 
     RowBox[{"Flatten", "[", 
      RowBox[{"x", "^", "2"}], "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.93984100804125*^9, 3.939841029355571*^9}},
 CellLabel->"In[319]:=",
 CellID->203172875,ExpressionUUID->"59240eb6-5b72-4d09-aa5d-a6f36b4fbc7a"],

Cell["\<\
It turns out that this tiny code is all what is needed to solve the problem \
in all generality.\
\>", "Text",
 CellChangeTimes->{3.939841038109989*^9},
 CellID->1959912723,ExpressionUUID->"bf3799c8-9c22-4e17-ba72-e3b7b07dd9ee"],

Cell[TextData[StyleBox["Code dissection",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{3.939841049704425*^9},
 CellID->1474128,ExpressionUUID->"da302c79-f4a2-4706-8155-9a9d4f7f2856"],

Cell["\<\
Let us use an example to show how it works. This will be our test matrix:\
\>", "Text",
 CellChangeTimes->{3.939841059379443*^9},
 CellID->1153349179,ExpressionUUID->"d1fdaf96-d09f-4178-9e82-31fb4efeb8e1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testmatr", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"i", "+", "j"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "3"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.939841066432188*^9, 3.9398410758226023`*^9}},
 CellLabel->"In[321]:=",
 CellID->2066731218,ExpressionUUID->"3e183f0a-5648-4069-a508-5b8fbb6aca7e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939841076361897*^9},
 CellLabel->"Out[321]=",
 CellID->1907644628,ExpressionUUID->"9a8cfee7-c985-4049-b0aa-5f84f82addd8"]
}, Open  ]],

Cell["\<\
The norm is the square root of sum of the squares of all matrix elements. \
First, we will use the fact that arithmetic operations such as raising to \
some power, can be used on entire lists, because they are automatically \
threaded over the elements of the list (functions which have this property \
are said to be Listable). Thus, we first square all the elements:\
\>", "Text",
 CellChangeTimes->{{3.939841086273376*^9, 3.939841114895791*^9}},
 CellID->1999896733,ExpressionUUID->"167e4a9e-d79b-43b6-aac4-5da1e883fa53"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testmatr", "^", "2"}]], "Input",
 CellChangeTimes->{{3.93984111878695*^9, 3.9398411237903223`*^9}},
 CellLabel->"In[322]:=",
 CellID->909943014,ExpressionUUID->"b6c77f54-e929-4b8f-ab4f-788560c2bea4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "9", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "16", ",", "25"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"16", ",", "25", ",", "36"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939841124115671*^9},
 CellLabel->"Out[322]=",
 CellID->258685857,ExpressionUUID->"bb7d1672-137c-4a17-95f0-2268bb95a8fb"]
}, Open  ]],

Cell["\<\
Since we don\[CloseCurlyQuote]t care which elements are where but just need \
to sum them all, we will use Flatten to remove the internal curly braces:\
\>", "Text",
 CellChangeTimes->{{3.939841135295315*^9, 3.939841142527714*^9}},
 CellID->1226297071,ExpressionUUID->"e5b722db-2888-4828-bacd-c3c808fa1d50"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{"testmatr", "^", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.939841144628728*^9, 3.939841149489555*^9}},
 CellLabel->"In[323]:=",
 CellID->944421512,ExpressionUUID->"8be8e08d-f5d3-4fe5-a136-72927fcf0c53"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4", ",", "9", ",", "16", ",", "9", ",", "16", ",", "25", ",", "16", ",", 
   "25", ",", "36"}], "}"}]], "Output",
 CellChangeTimes->{3.939841150366997*^9},
 CellLabel->"Out[323]=",
 CellID->1419893444,ExpressionUUID->"708a47f4-5ec1-4f3d-8321-d02e1313fe5f"]
}, Open  ]],

Cell["\<\
Now we have to sum all the elements, and as we saw already this can be done \
for instance with Plus@@construction:\
\>", "Text",
 CellChangeTimes->{{3.939841157932612*^9, 3.939841174117167*^9}},
 CellID->1310827844,ExpressionUUID->"555c0bab-9957-42fc-a382-4d271516b8b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plus", "@@", 
  RowBox[{"Flatten", "[", 
   RowBox[{"testmatr", "^", "2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.939841180298461*^9, 3.939841186775388*^9}},
 CellLabel->"In[324]:=",
 CellID->366854457,ExpressionUUID->"a615c6cb-ab4b-4243-8366-86a5d7a8fa90"],

Cell[BoxData["156"], "Output",
 CellChangeTimes->{3.939841187866991*^9},
 CellLabel->"Out[324]=",
 CellID->1795618051,ExpressionUUID->"817134fe-43b4-4768-98ed-bafdfec45819"]
}, Open  ]],

Cell["Finally, we have to take a square root:", "Text",
 CellChangeTimes->{3.9398411952475452`*^9},
 CellID->364891866,ExpressionUUID->"2ed169f4-c9a5-42fd-b767-6aae431458cd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sqrt", "[", 
  RowBox[{"Plus", "@@", 
   RowBox[{"Flatten", "[", 
    RowBox[{"testmatr", "^", "2"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.939841199545134*^9, 3.939841205747334*^9}},
 CellLabel->"In[325]:=",
 CellID->2072477638,ExpressionUUID->"82df5179-333b-4674-89b6-751b874b3d82"],

Cell[BoxData[
 RowBox[{"2", " ", 
  SqrtBox["39"]}]], "Output",
 CellChangeTimes->{3.939841206635988*^9},
 CellLabel->"Out[325]=",
 CellID->2011746396,ExpressionUUID->"d3097228-dd80-4d7c-8ffd-11f2f657654f"]
}, Open  ]],

Cell["\<\
And we arrive at the code of our function. We see that the function works \
well on a tensor of any rank without modifications! It would be hard to do \
this without Flatten, and in particular, in languages like C we would need \
nested loops to accomplish this (in C, there is also a technique called \
flattening an array, which consists in exploiting the row-major order in \
which it is stored in memory and going through the multidimensional array \
with just a pointer to an integer (or whatever is the type of the smallest \
array element). Although it usually works, it will be illegal if one wants to \
strictly adhere to the C standard).\
\>", "Text",
 CellChangeTimes->{{3.939841215411365*^9, 3.9398412515183363`*^9}},
 CellID->1439139204,ExpressionUUID->"524aade0-671a-480f-af64-8b8795c5cdbf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"tensorNorm", ",", "testmatr"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.939841258406849*^9, 3.9398412641027803`*^9}},
 CellLabel->"In[326]:=",
 CellID->1665938356,ExpressionUUID->"98dea54a-7a74-4624-8fcf-db55aecdb73f"],

Cell["Application - (relatively) fast list generation with Flatten", \
"ItemNumbered",
 CellChangeTimes->{3.939841274765596*^9},
 CellID->835952824,ExpressionUUID->"0c2b7e33-6efa-4167-9a2a-53063e47f60d"],

Cell["\<\
As we already mentioned, generating lists straightforwardly in loops is \
perhaps the worst way to do it, in terms of efficiency. One can use Flatten \
to speed-up this process considerable. Say, we want to generate a list from 1 \
to 10 (which is easiest to do, of course, by just using Range[10]). We can do \
it in the following fashion:\
\>", "Text",
 CellChangeTimes->{{3.939841285715371*^9, 3.9398413079007063`*^9}},
 CellID->1021094294,ExpressionUUID->"dcb65f7c-c4f2-41e9-ae15-1e72f2049627"],

Cell[TextData[{
 StyleBox["Step 1",
  FontSlant->"Italic"],
 ". We generate a nested list (this type of lists are also called linked \
lists in Mathematica):"
}], "Text",
 CellChangeTimes->{3.939841316298469*^9},
 CellID->1394535748,ExpressionUUID->"c038b36f-3dbe-4744-ae19-e95c54ffaf6b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"testlist", "=", 
      RowBox[{"{", "}"}]}], ";", 
     RowBox[{"i", "=", "1"}]}], ",", 
    RowBox[{"i", "<=", "10"}], ",", 
    RowBox[{"i", "++"}], ",", 
    RowBox[{"testlist", "=", 
     RowBox[{"{", 
      RowBox[{"testlist", ",", "i"}], "}"}]}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", "testlist"}], "Input",
 CellChangeTimes->{{3.939841331394291*^9, 3.939841350192441*^9}},
 CellLabel->"In[327]:=",
 CellID->1671807143,ExpressionUUID->"77e68e0c-d1ff-4cae-9cb1-fb28a8913eca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "1"}], "}"}], ",", "2"}], "}"}], 
                 ",", "3"}], "}"}], ",", "4"}], "}"}], ",", "5"}], "}"}], ",",
            "6"}], "}"}], ",", "7"}], "}"}], ",", "8"}], "}"}], ",", "9"}], 
    "}"}], ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.939841350576911*^9},
 CellLabel->"Out[328]=",
 CellID->37799774,ExpressionUUID->"aa68fb2a-bf49-4156-acab-98d91a0d4d3f"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Step 2",
  FontSlant->"Italic"],
 ". We use Flatten:"
}], "Text",
 CellChangeTimes->{3.93984136025098*^9},
 CellID->1793125753,ExpressionUUID->"deb68775-9c5a-4715-bd3f-290374660523"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", "testlist", "]"}]], "Input",
 CellChangeTimes->{{3.939841363956409*^9, 3.939841367053372*^9}},
 CellLabel->"In[329]:=",
 CellID->885127132,ExpressionUUID->"f4417cad-8fc3-494d-805c-5944e9fd0706"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.939841367490551*^9},
 CellLabel->"Out[329]=",
 CellID->1501072363,ExpressionUUID->"d57d60a1-55ab-4344-984f-45c4333fda94"]
}, Open  ]],

Cell["\<\
Let us compare the execution time with the realization with Append described \
previously:\
\>", "Text",
 CellChangeTimes->{3.939841378025073*^9},
 CellID->2032803632,ExpressionUUID->"dea08758-e03b-4a2c-90a6-97814b10b12b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"testlist", "=", 
       RowBox[{"{", "}"}]}], ";", 
      RowBox[{"i", "=", "1"}]}], ",", 
     RowBox[{"i", "<", "5000"}], ",", 
     RowBox[{"i", "++"}], ",", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"testlist", ",", "i"}], "]"}]}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.939841387043242*^9, 3.939841408482134*^9}},
 CellLabel->"In[330]:=",
 CellID->1036536397,ExpressionUUID->"b1ff8147-a938-45ad-83f9-59f234449741"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.031365`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.939841409117649*^9},
 CellLabel->"Out[330]=",
 CellID->1777935575,ExpressionUUID->"d8f6253e-e906-44dc-8482-52ed0d653643"]
}, Open  ]],

Cell["Now, with our new method:", "Text",
 CellChangeTimes->{3.939841422114295*^9},
 CellID->1675744667,ExpressionUUID->"1a9deafb-9c29-4b26-b549-32281004bad3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"testlist", "=", 
        RowBox[{"{", "}"}]}], ";", 
       RowBox[{"i", "=", "1"}]}], ",", 
      RowBox[{"i", "<=", "5000"}], ",", 
      RowBox[{"i", "++"}], ",", 
      RowBox[{"testlist", "=", 
       RowBox[{"{", 
        RowBox[{"testlist", ",", "i"}], "}"}]}]}], "]"}], ";", 
    RowBox[{"Flatten", "[", "testlist", "]"}], ";"}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.939841437565639*^9, 3.939841462134718*^9}},
 CellLabel->"In[332]:=",
 CellID->53995608,ExpressionUUID->"9028088d-0b8e-4d9e-b56a-fe826264f465"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.002871`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.93984145189907*^9, 3.939841462831078*^9}},
 CellLabel->"Out[332]=",
 CellID->392219130,ExpressionUUID->"002e8e1f-4063-4b12-93d4-a2148add920c"]
}, Open  ]],

Cell["\<\
We see that the difference is about an order of magnitude at least. While \
even this method by itself is not the most efficient, we will later see how \
linked lists can be used in certain problems to dramatically improve \
efficiency.\
\>", "Text",
 CellChangeTimes->{{3.93984147722431*^9, 3.939841485997603*^9}},
 CellID->1399605267,ExpressionUUID->"483936cd-ac6b-44d0-b09b-d7e40a2d0b28"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", "testlist", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.9398414879851027`*^9, 3.9398414905711937`*^9}},
 CellLabel->"In[333]:=",
 CellID->752273106,ExpressionUUID->"2246c6d3-fcbf-4669-8112-9f6128836552"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Working with several lists", "Subsection",
 CellChangeTimes->{3.939841499061019*^9},
 CellID->1610127405,ExpressionUUID->"5a4fb234-5bca-4781-bdd9-ebfb5d31b5b6"],

Cell["\<\
It is often necessary to obtain unions, intersections, and complements of two \
or more lists, and also to remove duplicate elements from a list. This is \
done by such built-in commands as Join, Intersection, Complement and Union.\
\>", "Text",
 CellChangeTimes->{{3.9398415067462683`*^9, 3.939841513030159*^9}},
 CellID->969859988,ExpressionUUID->"f00048ac-3888-4fb1-a165-20575ee5b8c7"],

Cell[CellGroupData[{

Cell["Join", "Subsubsection",
 CellChangeTimes->{
  3.9398415228895884`*^9, {3.9405436681789503`*^9, 3.9405436686572866`*^9}},
 CellID->1539340028,ExpressionUUID->"1223e83a-7f3a-4884-9206-95efed1c98a1"],

Cell["\<\
The Join command joins together two or several lists. The format of it is \
Join[list1,...,listn], where <list1,..., listn> are lists, not necessarily of \
the same depth or structure. If the lists contain identical elements, the \
elements are not deleted - i.e., the lists are joined together as is, with no \
further modification of their internal structure. Examples:\
\>", "Text",
 CellChangeTimes->{{3.939841532147212*^9, 3.939841550874289*^9}},
 CellID->952355187,ExpressionUUID->"7e6ef6ba-ad4b-4e79-979c-0b7f81489959"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Join", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.93984155650498*^9, 3.939841566985306*^9}},
 CellLabel->"In[334]:=",
 CellID->334000742,ExpressionUUID->"cd2d86be-fb8a-4304-b6cf-d761d86b48ac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9398415679695787`*^9},
 CellLabel->"Out[335]=",
 CellID->1423583113,ExpressionUUID->"60873056-48f3-4476-835d-d1eb0956d76e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Join", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", "d"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"e", ",", "f"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9398415691429863`*^9, 3.939841578232733*^9}},
 CellLabel->"In[336]:=",
 CellID->1979943606,ExpressionUUID->"abdce0a6-acf4-42f8-a824-96eadbee1e52"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d"}], "}"}], ",", "e", ",", "f"}], "}"}]], "Output",
 CellChangeTimes->{3.939841578607445*^9},
 CellLabel->"Out[336]=",
 CellID->636872319,ExpressionUUID->"f1781dbc-c71c-484a-a896-ee792b6af25b"]
}, Open  ]],

Cell["\<\
Join connects lists together from left to right, as they are, without any \
sorting or permuting the elements.\
\>", "Text",
 CellChangeTimes->{3.939841603299944*^9},
 CellID->854568785,ExpressionUUID->"75cf2a81-a225-401e-9eae-9002033a5e98"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Intersection", "Subsubsection",
 CellChangeTimes->{
  3.9398416189088707`*^9, {3.940543672946089*^9, 3.9405436752571373`*^9}},
 CellID->366938359,ExpressionUUID->"d9c635b3-77d0-4102-b61e-65a1365cddcc"],

Cell["\<\
The Intersection command finds the intersection of two or more lists, that is \
a set of all elements which belong to all of the intersected lists. The \
format of the command : Intersection[list1, ..., listn]. Examples:\
\>", "Text",
 CellChangeTimes->{{3.939841625913075*^9, 3.939841630412891*^9}},
 CellID->1707449176,ExpressionUUID->"04bd0227-6f73-4463-b511-c4d14d7bd65a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Intersection", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c", ",", "d", ",", "e"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.939841639539918*^9, 3.939841652734683*^9}},
 CellLabel->"In[337]:=",
 CellID->1638796300,ExpressionUUID->"ea3d2da8-ebac-44e4-9b51-f310e4718208"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"b", ",", "c"}], "}"}]], "Output",
 CellChangeTimes->{3.939841653149197*^9},
 CellLabel->"Out[338]=",
 CellID->1583180427,ExpressionUUID->"9703f5e6-49e7-489f-aa44-7e905c187bad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Intersection", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d", ",", "e"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.939841656112995*^9, 3.9398416661041603`*^9}},
 CellLabel->"In[339]:=",
 CellID->1286629326,ExpressionUUID->"437cc2a8-3979-4bc8-a550-c431f95d3fae"],

Cell[BoxData[
 RowBox[{"{", "c", "}"}]], "Output",
 CellChangeTimes->{3.939841666562972*^9},
 CellLabel->"Out[339]=",
 CellID->1528095718,ExpressionUUID->"1c396bb0-6770-4915-89c6-a8683ab356b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Intersection", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.93984167024331*^9, 3.9398416757741947`*^9}},
 CellLabel->"In[340]:=",
 CellID->1753986272,ExpressionUUID->"c7edb815-33c9-4157-8eab-91838bedcb66"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.939841676050605*^9},
 CellLabel->"Out[340]=",
 CellID->1527629748,ExpressionUUID->"115525a0-09bd-4ee6-8be2-309052d730f9"]
}, Open  ]],

Cell["\<\
In the latter case we got an empty list, because the intersection of the \
latter two lists is empty.\
\>", "Text",
 CellChangeTimes->{3.9398416843356323`*^9},
 CellID->1706174751,ExpressionUUID->"ac9e502c-43af-4300-ad6e-c64d34f63b77"],

Cell["\<\
The Intersection command has an option SameTest which can be used to provide \
a custom \[OpenCurlyDoubleQuote]sameness\[CloseCurlyDoubleQuote] function - \
this way we can define our notion of \[OpenCurlyDoubleQuote]same\
\[CloseCurlyDoubleQuote] different from the default one. Please see the Union \
command for an example of use of this option. Also, with this option, \
Intersection may be slower or much slower than in its \
\[OpenCurlyDoubleQuote]pure\[CloseCurlyDoubleQuote] form. For a more detailed \
discussion, please see Appendix C.\
\>", "Text",
 CellChangeTimes->{{3.939841703281127*^9, 3.939841722965499*^9}},
 CellID->329901666,ExpressionUUID->"0fb0f77a-639a-4ef6-a7c8-65c6ae61aa78"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Complement", "Subsubsection",
 CellChangeTimes->{
  3.939841734425807*^9, {3.940543679800968*^9, 3.9405436838522*^9}},
 CellID->1358639254,ExpressionUUID->"2fea1baa-2958-45f4-86cc-2766266297e5"],

Cell["\<\
The command Complement[listAll,list1,...,listn] gives a complement of the \
list <listAll> with respect to the union of all other lists \
<list1,...,listn>. In other words, it returns all the elements of <listAll> \
which are not in any of <listk>. Note that Complement sorts the resulting \
list. Examples:\
\>", "Text",
 CellChangeTimes->{{3.939841742403558*^9, 3.939841750667161*^9}},
 CellID->456323427,ExpressionUUID->"5d7152ad-b53c-4515-a207-e82cd91b7e59"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Complement", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c", ",", "e"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.939841779533025*^9, 3.939841793469141*^9}},
 CellLabel->"In[341]:=",
 CellID->2133118013,ExpressionUUID->"ead331a4-543a-46bc-bb14-1e60aa2b3a4e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "d", ",", "f"}], "}"}]], "Output",
 CellChangeTimes->{3.93984179441844*^9},
 CellLabel->"Out[341]=",
 CellID->1756778046,ExpressionUUID->"cd09d9ee-5f86-454c-ac31-3973a6fc3264"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Complement", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c", ",", "e"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.939841801600696*^9, 3.939841817348958*^9}},
 CellLabel->"In[342]:=",
 CellID->921943848,ExpressionUUID->"a9ba8083-f4d6-4fbd-9751-cd3fc9d22035"],

Cell[BoxData[
 RowBox[{"{", "a", "}"}]], "Output",
 CellChangeTimes->{3.93984181781271*^9},
 CellLabel->"Out[342]=",
 CellID->1016316825,ExpressionUUID->"4201e876-3324-4244-be1a-58fdc3fbfde0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Complement", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c", ",", "e"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e", ",", "f"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.939841819685686*^9, 3.9398418334142733`*^9}},
 CellLabel->"In[343]:=",
 CellID->457812076,ExpressionUUID->"51b070dd-45bd-4645-b799-f4405d386f56"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.939841833786796*^9},
 CellLabel->"Out[343]=",
 CellID->227253773,ExpressionUUID->"1e5ca754-d7ea-4cc5-a858-41e35e334899"]
}, Open  ]],

Cell["\<\
The Complement command, like Intersection, has the option SameTest, which \
allows us to define our own notion of \[OpenCurlyDoubleQuote]sameness\
\[CloseCurlyDoubleQuote] of objects. All the comments I made for Intersection \
with this option, also apply here.\
\>", "Text",
 CellChangeTimes->{{3.939841841118568*^9, 3.939841848019495*^9}},
 CellID->1228238445,ExpressionUUID->"e036f886-478d-4810-8a78-f5e10738a1d8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functions related to list sorting", "Subsection",
 CellChangeTimes->{3.939841857375785*^9},
 CellID->2075653750,ExpressionUUID->"d203352b-b075-484d-8808-ab3446047f68"],

Cell["\<\
Here we will discuss three very useful built-in functions related to list \
sorting. Sort function sorts the list. Union function removes duplicate \
elements from the list and also sorts the result. Split function splits the \
list into sublists of same adjacent elements. For all three functions, one \
can define the notion of \[OpenCurlyDoubleQuote]sameness\
\[CloseCurlyDoubleQuote] different from the default one. Below we give more \
details and examples of use for every of
these functions.\
\>", "Text",
 CellChangeTimes->{{3.9398418653281517`*^9, 3.939841878711232*^9}},
 CellID->1788214382,ExpressionUUID->"f74608c8-edd0-44fd-8a8b-6efefacfab76"],

Cell[CellGroupData[{

Cell["Sort", "Subsubsection",
 CellChangeTimes->{
  3.9398429955637627`*^9, {3.940543697892277*^9, 3.94054369846074*^9}},
 CellID->454642342,ExpressionUUID->"84420316-ae38-4184-a63c-fcd325891b06"],

Cell["Basic Sort", "ItemNumbered",
 CellChangeTimes->{3.9398430055286303`*^9},
 CellID->427025968,ExpressionUUID->"aed8f73b-81ed-4832-89b5-114c6fc73cfe"],

Cell["This function is used for list sorting. For example :", "Text",
 CellChangeTimes->{3.939843012043244*^9},
 CellID->135095902,ExpressionUUID->"d91b5e34-a4a5-4514-be5f-c6f6f5dc94af"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{
   "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f", ",", "g", ",", 
    "t"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Sort", "[", 
  RowBox[{"{", 
   RowBox[{
   "a", ",", "d", ",", "e", ",", "b", ",", "g", ",", "t", ",", "f", ",", "d", 
    ",", "a", ",", "b", ",", "f", ",", "c"}], "}"}], "]"}]}], "Input",
 CellChangeTimes->{{3.939843014279315*^9, 3.93984303003964*^9}},
 CellLabel->"In[344]:=",
 CellID->292671846,ExpressionUUID->"29cecf3b-bdde-4c75-b74f-528745b53a10"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "a", ",", "a", ",", "b", ",", "b", ",", "c", ",", "d", ",", "d", ",", "e", 
   ",", "f", ",", "f", ",", "g", ",", "t"}], "}"}]], "Output",
 CellChangeTimes->{3.939843030605979*^9},
 CellLabel->"Out[345]=",
 CellID->291574318,ExpressionUUID->"d94bb4fe-2a4f-4a7d-bca1-0d46391b352c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{"{", 
   RowBox[{"5", ",", "7", ",", "2", ",", "4", ",", "3", ",", "1"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.939843034678843*^9, 3.939843040572624*^9}},
 CellLabel->"In[346]:=",
 CellID->1866318302,ExpressionUUID->"e891669a-5417-4828-8da3-eb762843a2a4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "7"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939843040928096*^9},
 CellLabel->"Out[346]=",
 CellID->986889579,ExpressionUUID->"fab268aa-afb7-4805-a1cf-378f45c36817"]
}, Open  ]],

Cell["\<\
Sort will sort a list of arbitrary Mathematica expressions. By default, the \
sorting is performed lexicographically for symbols, in ascending order for \
numbers, by the first elements for lists. In general, this is called a \
canonical sorting order in Mathematica - consult Mathematica Help for more \
information.\
\>", "Text",
 CellChangeTimes->{{3.939843049417221*^9, 3.9398430609729967`*^9}},
 CellID->1636948472,ExpressionUUID->"d35b2f20-c075-4cf0-8ada-c77c9b69d720"],

Cell["For example, here we will sort a nested list of integers:", "Text",
 CellChangeTimes->{3.939843072882*^9},
 CellID->668330621,ExpressionUUID->"ad7d8373-5096-4cc4-befe-20848bd76dc9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nested", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Random", "[", 
     RowBox[{"Integer", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "15"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", "5", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"Random", "[", 
      RowBox[{"Integer", ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "10"}], "}"}]}], "]"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9398430768299713`*^9, 3.939843098259017*^9}},
 CellLabel->"In[349]:=",
 CellID->1362983672,ExpressionUUID->"a888e226-adbb-4866-962a-65246d417a34"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "11", ",", "2", ",", "7", ",", "2", ",", "6", ",", "11", ",", "13", ",", 
     "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "9", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "9", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "6", ",", "7", ",", "12", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "10", ",", "14"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939843099654854*^9, 3.9398431493112917`*^9},
 CellLabel->"Out[349]=",
 CellID->1766232818,ExpressionUUID->"9cea906f-6341-4589-942d-a62f6e5e47cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", "nested", "]"}]], "Input",
 CellChangeTimes->{{3.93984310826935*^9, 3.939843112484036*^9}},
 CellLabel->"In[350]:=",
 CellID->1386974719,ExpressionUUID->"add49cac-8439-4b25-8d4a-20efd9a3e7dc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3", ",", "9", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "10", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "9", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "6", ",", "7", ",", "12", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "11", ",", "2", ",", "7", ",", "2", ",", "6", ",", "11", ",", "13", ",", 
     "1", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9398431128683043`*^9, 3.939843151542158*^9},
 CellLabel->"Out[350]=",
 CellID->1108813415,ExpressionUUID->"9fee725c-9b45-432e-b444-75e41313576b"]
}, Open  ]],

Cell["\<\
We see that the sorting is performed by the first element of the sublists.\
\>", "Text",
 CellChangeTimes->{3.939843124809896*^9},
 CellID->236347533,ExpressionUUID->"d57f07a8-e92b-42c0-93c1-bb667fb211c2"],

Cell["Sort with a user-defined sorting function", "ItemNumbered",
 CellChangeTimes->{3.939843167036923*^9},
 CellID->2111460886,ExpressionUUID->"7548e7db-6321-42cd-9454-9f626a7377e0"],

Cell["\<\
As an optional second argument, Sort accepts the comparison function to be \
used instead of the default one. For example:\
\>", "Text",
 CellChangeTimes->{{3.9398431772982807`*^9, 3.939843180088086*^9}},
 CellID->155844327,ExpressionUUID->"31aae1ff-72e6-4191-a3a1-0efa4113cf68"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "7", ",", "2", ",", "4", ",", "3", ",", "1"}], "}"}], 
   ",", "Greater"}], "]"}]], "Input",
 CellChangeTimes->{{3.9398431880242662`*^9, 3.939843196075563*^9}},
 CellLabel->"In[351]:=",
 CellID->1965168977,ExpressionUUID->"c6ffb409-6c90-4850-9de7-29dd5b64549f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", "5", ",", "4", ",", "3", ",", "2", ",", "1"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939843196473435*^9},
 CellLabel->"Out[351]=",
 CellID->255211622,ExpressionUUID->"acd1f23a-9705-4d45-8c45-0f86da636f43"]
}, Open  ]],

Cell["\<\
We can for instance sort our nested list by the length of a sublist. We first \
define a sorting function:\
\>", "Text",
 CellChangeTimes->{3.9398432041293993`*^9},
 CellID->816887895,ExpressionUUID->"5db2d383-1b64-4418-bcdf-bf7b9a576cc7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "sortFunction", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"sortFunction", "[", 
    RowBox[{"x_List", ",", "y_List"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Length", "[", "x", "]"}], "<", 
    RowBox[{"Length", "[", "y", "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9398432161065598`*^9, 3.939843236278595*^9}},
 CellLabel->"In[352]:=",
 CellID->1866650833,ExpressionUUID->"f31b9042-475a-4808-9003-5c46d9e64831"],

Cell["And now sort:", "Text",
 CellChangeTimes->{{3.9398432392918873`*^9, 3.9398432425930758`*^9}},
 CellID->196871904,ExpressionUUID->"fe6c9fff-6a49-43b4-bd6e-14228c28c4c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{"nested", ",", "sortFunction"}], "]"}]], "Input",
 CellChangeTimes->{{3.939843243972061*^9, 3.939843247859461*^9}},
 CellLabel->"In[354]:=",
 CellID->1470604986,ExpressionUUID->"f89d8ab2-2545-4761-b682-874b0feb0cb7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10", ",", "10", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "9", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "9", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "6", ",", "7", ",", "12", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "11", ",", "2", ",", "7", ",", "2", ",", "6", ",", "11", ",", "13", ",", 
     "1", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939843248151287*^9},
 CellLabel->"Out[354]=",
 CellID->98976009,ExpressionUUID->"676753a9-dcde-42c1-8e38-9fab7169820a"]
}, Open  ]],

Cell["A first look at pure functions", "ItemNumbered",
 CellChangeTimes->{3.939843279120295*^9},
 CellID->1337440485,ExpressionUUID->"397554c5-6eb8-400d-8d4b-533701fc4a6a"],

Cell["\<\
Mathematica provides a mechanism to construct and use functions without \
giving them names or separate definitions, the so called \
\[OpenCurlyDoubleQuote]pure functions\[CloseCurlyDoubleQuote] (they are \
called lambda functions in some other languages). We will cover them \
systematically later, but this is how the previous sorting would look should \
we use a pure function:\
\>", "Text",
 CellChangeTimes->{{3.939843285764369*^9, 3.939843297808296*^9}},
 CellID->650898246,ExpressionUUID->"982554ff-efb1-43cd-8a81-3f94b63e87ad"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{"nested", ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", "#1", "]"}], "<", 
     RowBox[{"Length", "[", "#2", "]"}]}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.939843301670451*^9, 3.939843315177075*^9}},
 CellLabel->"In[355]:=",
 CellID->851781666,ExpressionUUID->"24b7b845-59b2-4d3c-8ff5-90b24449ca89"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10", ",", "10", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "9", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "9", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "6", ",", "7", ",", "12", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "11", ",", "2", ",", "7", ",", "2", ",", "6", ",", "11", ",", "13", ",", 
     "1", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939843316253242*^9},
 CellLabel->"Out[355]=",
 CellID->1546710159,ExpressionUUID->"99311445-6ee3-420c-a3ce-4cf7360c4759"]
}, Open  ]],

Cell["\<\
Any function of two variables which always returns True or False, can be a \
sorting function. It is assumed that it gives True or False depending on \
which element is considered \[OpenCurlyDoubleQuote]larger\
\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.9398433244894543`*^9, 3.9398433290847893`*^9}},
 CellID->268095378,ExpressionUUID->"23989192-9020-494a-bd57-d1c50f8c4814"],

Cell["\<\
I have to mention also that using Sort with a user-defined sorting function \
may considerably slow down the Sort function. For a more detailed discussion, \
please see Appendix C.\
\>", "Text",
 CellChangeTimes->{{3.939843337286996*^9, 3.939843343272942*^9}},
 CellID->71996691,ExpressionUUID->"f94f60a3-044f-44aa-af2e-2b9b48dd33b6"],

Cell["The Ordering command", "ItemNumbered",
 CellChangeTimes->{3.939843363459113*^9},
 CellID->1047471664,ExpressionUUID->"5335747a-bfae-4432-b80d-30fbef38b01f"],

Cell["\<\
This command gives a permutation of indices needed to sort an input list. It \
also exists in both \[OpenCurlyDoubleQuote]pure\[CloseCurlyDoubleQuote] form \
and with a user-defined comparison function. It gives more information than \
just Sort, but in particular one can also sort a list using a combination of \
Ordering and Part.\
\>", "Text",
 CellChangeTimes->{{3.939843370210342*^9, 3.9398433833991833`*^9}},
 CellID->1932802389,ExpressionUUID->"93b0f20d-225d-4973-9e83-d14313cbaef4"],

Cell["For example, here is a list we considered before :", "Text",
 CellChangeTimes->{3.939843394359861*^9},
 CellID->1889087560,ExpressionUUID->"2747a227-9245-42cd-8843-75a9a0c35fbc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listtosort", "=", 
  RowBox[{"{", 
   RowBox[{
   "a", ",", "d", ",", "e", ",", "b", ",", "g", ",", "t", ",", "f", ",", "d", 
    ",", "a", ",", "b", ",", "f", ",", "c"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.939843396180758*^9, 3.939843407068283*^9}},
 CellLabel->"In[356]:=",
 CellID->539385287,ExpressionUUID->"0cb291a8-c612-4b3b-a435-9b878ea55bff"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "a", ",", "d", ",", "e", ",", "b", ",", "g", ",", "t", ",", "f", ",", "d", 
   ",", "a", ",", "b", ",", "f", ",", "c"}], "}"}]], "Output",
 CellChangeTimes->{3.9398434082319107`*^9},
 CellLabel->"Out[356]=",
 CellID->616728982,ExpressionUUID->"c3dac791-8a74-46ea-8d3c-3e05eb620563"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ordering", "[", "listtosort", "]"}]], "Input",
 CellChangeTimes->{{3.939843409068811*^9, 3.9398434134486094`*^9}},
 CellLabel->"In[357]:=",
 CellID->378100116,ExpressionUUID->"617d008c-b847-4833-9d7e-b86bf4e4f37d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "9", ",", "4", ",", "10", ",", "12", ",", "2", ",", "8", ",", "3",
    ",", "7", ",", "11", ",", "5", ",", "6"}], "}"}]], "Output",
 CellChangeTimes->{3.939843413731268*^9},
 CellLabel->"Out[357]=",
 CellID->2116254252,ExpressionUUID->"49da14bc-82f6-4f6c-a623-afe2478f9155"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listtosort", "[", 
  RowBox[{"[", 
   RowBox[{"Ordering", "[", "listtosort", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.939843424274314*^9, 3.939843435960697*^9}},
 CellLabel->"In[358]:=",
 CellID->980650007,ExpressionUUID->"2455db5c-02b5-4c3a-b3c8-8a9b234399ad"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "a", ",", "a", ",", "b", ",", "b", ",", "c", ",", "d", ",", "d", ",", "e", 
   ",", "f", ",", "f", ",", "g", ",", "t"}], "}"}]], "Output",
 CellChangeTimes->{3.939843438448408*^9},
 CellLabel->"Out[358]=",
 CellID->752557378,ExpressionUUID->"5a245513-86e9-4926-93bb-c3f9608f0ce6"]
}, Open  ]],

Cell["\<\
Ordering is a very useful command, exactly because it provides more \
information than just Sort, while being as efficient as Sort itself. We will \
see an example of its use in chapter VI.\
\>", "Text",
 CellChangeTimes->{{3.939843476728985*^9, 3.939843481876218*^9}},
 CellID->1700654863,ExpressionUUID->"f9a02a2d-78d9-44ff-9dbd-d8247f0a8ced"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Union", "Subsubsection",
 CellChangeTimes->{
  3.9398434970393467`*^9, {3.940543705033285*^9, 3.9405437057565203`*^9}},
 CellTags->"3.10.2",
 CellID->158783674,ExpressionUUID->"f939b970-f25f-41c1-b6bf-9beeac21eafd"],

Cell["\<\
The command Union[list] returns a canonically sorted list of all distinct \
elements of <list> .\
\>", "Text",
 CellChangeTimes->{
  3.9398435035807037`*^9, {3.9399485466411667`*^9, 3.9399485657766542`*^9}},
 CellID->1502519344,ExpressionUUID->"78bc84db-5315-4b77-a8c8-724b96470862"],

Cell["Basic Union", "ItemNumbered",
 CellChangeTimes->{3.939843519204772*^9},
 CellID->582409535,ExpressionUUID->"d65c22c1-4b19-49b9-9c7e-224c9f0e6b66"],

Cell["\<\
In its basic form, Union takes a list as a single argument, and returns \
sorted unique elements in a list. The sorting is done by a default sorting \
function in Mathematica (this is lexicographic for symbolic expressions, in \
increasing order for numeric ones, by first element for lists etc). Examples:\
\
\>", "Text",
 CellChangeTimes->{{3.939843526032157*^9, 3.939843535699853*^9}, 
   3.939948646977504*^9},
 CellID->326591719,ExpressionUUID->"e61a1957-2dd4-49d9-a28e-4ab3e90a76d1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{"{", 
   RowBox[{
   "a", ",", "d", ",", "e", ",", "b", ",", "g", ",", "t", ",", "f", ",", "d", 
    ",", "a", ",", "b", ",", "f", ",", "c"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.939843538938744*^9, 3.939843547229562*^9}},
 CellLabel->"In[359]:=",
 CellID->131479160,ExpressionUUID->"907674e5-fbbe-4172-a9e2-bf945e1b7211"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f", ",", "g", ",", "t"}],
   "}"}]], "Output",
 CellChangeTimes->{3.9398435478973637`*^9},
 CellLabel->"Out[359]=",
 CellID->361062643,ExpressionUUID->"e7208765-38ab-4f15-8c9a-21b96bff7a5e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "15", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.939843556235463*^9, 3.939843572055441*^9}},
 CellLabel->"In[360]:=",
 CellID->947782600,ExpressionUUID->"3f51285e-4422-42f6-a97d-f66e3e8f36a4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "1", ",", "5", ",", "1", ",", "5", ",", "2", ",", "2", ",", "4", 
   ",", "1", ",", "10", ",", "9", ",", "6", ",", "1", ",", "7", ",", "2"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.939843572560936*^9},
 CellLabel->"Out[360]=",
 CellID->1563831704,ExpressionUUID->"870d2221-d9ef-4014-87be-1c59936523c2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "[", "testlist", "]"}]], "Input",
 CellChangeTimes->{{3.939843578686578*^9, 3.9398435810193644`*^9}},
 CellLabel->"In[361]:=",
 CellID->799548235,ExpressionUUID->"62bf2e51-6de2-40e2-a4b6-37ce48928f6c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "9", 
   ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.9398435815410213`*^9},
 CellLabel->"Out[361]=",
 CellID->2018772660,ExpressionUUID->"d809ea50-0b6d-4ed0-b53e-199b64b57c0a"]
}, Open  ]],

Cell["\<\
The fact that the Union command sorts the resulting list, is intrinsically \
related with the algorithm that Union uses. If the elements should not be \
sorted, one can write a custom union function (we will consider a couple of \
implementations later, see section 5.2.6.2.5), which however will certainly \
be slower than the built-in Union.\
\>", "Text",
 CellChangeTimes->{{3.939843590337174*^9, 3.9398436078900023`*^9}},
 CellID->1417957667,ExpressionUUID->"4ed63618-aef9-4ad3-808c-e7612e4cda0d"],

Cell["Union with the SameTest option", "ItemNumbered",
 CellChangeTimes->{3.9398436424628897`*^9},
 CellID->67466149,ExpressionUUID->"29fca156-b037-4f62-9c4a-83f61a7bf4d3"],

Cell["\<\
The Union command has an option SameTest, which allows us to give it our own \
definition of which elements have to be considered same. For example, we may \
consider elements the same if they are the same modulo 3:\
\>", "Text",
 CellChangeTimes->{{3.939843648981022*^9, 3.939843656490003*^9}},
 CellID->32200627,ExpressionUUID->"3a20f33f-3197-4b4a-832d-69acdfcf828c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{"testlist", ",", 
   RowBox[{"SameTest", "->", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{
         RowBox[{"#1", "-", "#2"}], ",", "3"}], "]"}], "==", "0"}], "&"}], 
     ")"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9398436668737097`*^9, 3.93984368446511*^9}},
 CellLabel->"In[362]:=",
 CellID->1764303379,ExpressionUUID->"8e48c357-9625-4919-b381-41018927cae3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.9398436862942343`*^9},
 CellLabel->"Out[362]=",
 CellID->552995427,ExpressionUUID->"8e9e4b84-4add-4f81-bab0-5cc1a7c7b32b"]
}, Open  ]],

Cell["\<\
It should be noted that Union with the SameTest function may perform slower \
or much slower than the \[OpenCurlyDoubleQuote]pure\[CloseCurlyDoubleQuote] \
Union. For more details and discussion, please see the Appendix C.\
\>", "Text",
 CellChangeTimes->{{3.939843801393518*^9, 3.939843810211906*^9}},
 CellID->1173844991,ExpressionUUID->"c3b5fff5-06a5-4cff-87db-102c21aa1fce"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Split", "Subsubsection",
 CellChangeTimes->{
  3.9398438223309298`*^9, {3.9405437102513037`*^9, 3.9405437111816587`*^9}},
 CellTags->"3.10.3",
 CellID->50304241,ExpressionUUID->"9643fc8f-bb04-4827-af80-a26a67afb378"],

Cell["\<\
This command is used to split the list into several sublists, so that \
elements in each sublist are the same. This function can accept the \
\[OpenCurlyDoubleQuote]sameness\[CloseCurlyDoubleQuote] function as an \
optional second argument. It goes through the list and compares adjacent \
elements, using either the default sameness function, which is SameQ, or the \
sameness function provided to it. Whenever two adjacent elements are not the \
same, it groups the just
passed group of same elements in a sublist and starts a new sublist.\
\>", "Text",
 CellChangeTimes->{{3.939843829978097*^9, 3.9398438445320997`*^9}},
 CellID->1502305216,ExpressionUUID->"7a1f010f-0c8c-40ec-832a-a03d997921fa"],

Cell["Basic Split", "ItemNumbered",
 CellChangeTimes->{3.939843855885146*^9},
 CellID->1528591783,ExpressionUUID->"fa6af333-e191-4165-aec3-ccee3a9606d6"],

Cell["\<\
In its basic form, Split takes a list to split, as a single argument, and \
uses the SameQ predicate for element comparison. For example, here we \
introduce a list and its sorted version:\
\>", "Text",
 CellChangeTimes->{{3.939843863460689*^9, 3.9398438686225357`*^9}},
 CellID->695227820,ExpressionUUID->"ed34d1eb-8a33-4395-8ec2-122a7c45b9b2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "20", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.939843871941126*^9, 3.939843888408266*^9}, {
  3.939843959254092*^9, 3.939843959597886*^9}},
 CellLabel->"In[377]:=",
 CellID->1997268380,ExpressionUUID->"09c1a9a6-83fc-4b07-8093-279a4c614c87"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "8", ",", "8", ",", "10", ",", "4", ",", "3", ",", "3", ",", 
   "10", ",", "4", ",", "3", ",", "3", ",", "10", ",", "5", ",", "3", ",", 
   "8", ",", "3", ",", "1", ",", "7", ",", "9", ",", "9"}], "}"}]], "Output",
 CellChangeTimes->{{3.939843881441451*^9, 3.939843889256548*^9}, {
  3.939843938220962*^9, 3.9398439601990967`*^9}},
 CellLabel->"Out[377]=",
 CellID->1256015451,ExpressionUUID->"18a474ce-2368-4c21-a760-c44e27752e44"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sorted", "=", 
  RowBox[{"Sort", "[", "testlist", "]"}]}]], "Input",
 CellChangeTimes->{{3.939843892744615*^9, 3.9398439012231483`*^9}},
 CellLabel->"In[378]:=",
 CellID->382845113,ExpressionUUID->"6d661533-9b9a-4fef-b697-e14c588501de"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "4", 
   ",", "4", ",", "5", ",", "7", ",", "8", ",", "8", ",", "8", ",", "9", ",", 
   "9", ",", "10", ",", "10", ",", "10", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{{3.939843897738496*^9, 3.939843901447116*^9}, {
  3.939843939649946*^9, 3.9398439626821957`*^9}},
 CellLabel->"Out[378]=",
 CellID->1148463450,ExpressionUUID->"65d649a6-0841-4ad3-bd3d-2b21d99e2ceb"]
}, Open  ]],

Cell["\<\
Because in general the adjacent elements in an unsorted list are different, \
we see that most sublists here will contain a single element:\
\>", "Text",
 CellChangeTimes->{{3.939843913529049*^9, 3.939843916953405*^9}},
 CellID->244593792,ExpressionUUID->"a2f7fd6a-9afd-4efd-a94d-45a1f88f85ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Split", "[", "testlist", "]"}]], "Input",
 CellChangeTimes->{{3.93984391998357*^9, 3.9398439227302628`*^9}},
 CellLabel->"In[379]:=",
 CellID->759840911,ExpressionUUID->"86192ff7-5c44-4bdf-9398-66855e75919a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "10", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "8"}], "}"}], ",", 
   RowBox[{"{", "10", "}"}], ",", 
   RowBox[{"{", "4", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", "10", "}"}], ",", 
   RowBox[{"{", "4", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", "10", "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "8", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "7", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.939843923052863*^9, 3.9398439644158363`*^9}},
 CellLabel->"Out[379]=",
 CellID->357490385,ExpressionUUID->"ca3a69af-af7c-4df2-a5a0-d4e77d6b12e4"]
}, Open  ]],

Cell["Not so for a sorted list:", "Text",
 CellChangeTimes->{3.9398439781807413`*^9},
 CellID->1829140036,ExpressionUUID->"49a29c12-4e12-4761-a4c0-19336685dedb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Split", "[", "sorted", "]"}]], "Input",
 CellChangeTimes->{{3.9398439797774153`*^9, 3.939843981633309*^9}},
 CellLabel->"In[380]:=",
 CellID->1158677966,ExpressionUUID->"9e4d0813-e96d-40cb-a813-9b66a97f655b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", "7", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "8", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "10", ",", "10", ",", "10"}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{3.939843981951474*^9},
 CellLabel->"Out[380]=",
 CellID->1186323196,ExpressionUUID->"c8689d02-a0e8-4d8e-a472-81e5d1a0cc57"]
}, Open  ]],

Cell["Split with a user-defined sameness function", "ItemNumbered",
 CellChangeTimes->{3.939844005211388*^9},
 CellID->482693941,ExpressionUUID->"285b203e-6e57-481c-9bd7-aec10df526c4"],

Cell["\<\
We can now define two elements the same if, for example, they have the same \
remainder under the division by 3. However, before using Split to group such \
elements together, we will have to sort the list with a different sorting \
function, so that elements which are the same modulo 3 will be adjacent to \
each other in a sorted list:\
\>", "Text",
 CellChangeTimes->{{3.9398440127862463`*^9, 3.939844026244652*^9}},
 CellID->1591331668,ExpressionUUID->"2ef6290a-0037-4b3c-b224-3875399d3947"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mod3sorted", "=", 
  RowBox[{"Sort", "[", 
   RowBox[{"testlist", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{"#1", ",", "3"}], "]"}], "<", 
      RowBox[{"Mod", "[", 
       RowBox[{"#2", ",", "3"}], "]"}]}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.93984402891805*^9, 3.939844043437018*^9}},
 CellLabel->"In[381]:=",
 CellID->992486631,ExpressionUUID->"ac3f6547-083f-4dbe-b0fa-15414d9c8d4d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "9", ",", "9", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", 
   ",", "7", ",", "1", ",", "10", ",", "4", ",", "10", ",", "4", ",", "10", 
   ",", "10", ",", "8", ",", "5", ",", "8", ",", "8"}], "}"}]], "Output",
 CellChangeTimes->{3.9398440438209877`*^9},
 CellLabel->"Out[381]=",
 CellID->810898200,ExpressionUUID->"8fb10f03-0e35-439d-b8f3-55133231abcc"]
}, Open  ]],

Cell["Now we can split this list:", "Text",
 CellChangeTimes->{3.939844052927307*^9},
 CellID->834823538,ExpressionUUID->"99867be4-26dc-4582-bf9b-8528193aefde"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Split", "[", 
  RowBox[{"mod3sorted", ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{"#1", ",", "3"}], "]"}], "==", 
     RowBox[{"Mod", "[", 
      RowBox[{"#2", ",", "3"}], "]"}]}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.939844054416711*^9, 3.939844071846094*^9}},
 CellLabel->"In[382]:=",
 CellID->1456793835,ExpressionUUID->"ec2247a3-ec29-43bd-b8be-839ae0ba7867"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "9", ",", "9", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", 
     "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "7", ",", "1", ",", "10", ",", "4", ",", "10", ",", "4", ",", "10", ",", 
     "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "5", ",", "8", ",", "8"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9398440721592503`*^9},
 CellLabel->"Out[382]=",
 CellID->444010771,ExpressionUUID->"f988761b-9d92-414e-9f03-6ba2867bc67a"]
}, Open  ]],

Cell["\<\
Split is a very useful function. Since it performs a single run through the \
list and only compares adjacent elements, its complexity is linear. Also, \
because the number of comparisons is equal to the length of the list (minus \
one), it does not suffer so severely from the performance penalties \
associated with the use of user-defined sameness functions, which we \
discussed for the Sort and Union functions.\
\>", "Text",
 CellChangeTimes->{{3.9398441053984632`*^9, 3.9398441282500963`*^9}},
 CellID->2130838519,ExpressionUUID->"0a7bb28f-bf89-4b0e-883f-7c256eafa37f"],

Cell["Example: run-length encoding", "ItemNumbered",
 CellChangeTimes->{3.939844141696343*^9},
 CellID->1818741053,ExpressionUUID->"be93bdd7-29ec-4afa-80af-b6f771a7ae2c"],

Cell["\<\
One standard application of Split is a run-length encoding. Given a list of \
possibly repetitive numbers, this encoding consists of replacing this list \
with a list of elements like {{num1,freq1},...}, where <freqk> gives the \
total number of consecutive copies of <numk>. For instance, take the result \
of our first example: all we need to do is to change each sublist to the form \
just described, which can be done for example like this:\
\>", "Text",
 CellChangeTimes->{{3.939844149539711*^9, 3.939844170754834*^9}},
 CellID->298646373,ExpressionUUID->"4e175e9b-2971-466b-be63-5bc9cefaa8a1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "funEncodeSplit", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"runEncodeSplit", "[", "spl_List", "]"}], ":=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"spl", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", 
        RowBox[{"Length", "[", 
         RowBox[{"spl", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"Length", "[", "spl", "]"}]}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "runEncode", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"runEncode", "[", "x_List", "]"}], ":=", 
   RowBox[{"runEncodeSplit", "[", 
    RowBox[{"Split", "[", "x", "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.939844174300708*^9, 3.939844233199992*^9}},
 CellLabel->"In[383]:=",
 CellID->1786524654,ExpressionUUID->"9afd3f18-95f3-47fa-a1e0-36de21899283"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.939844235317913*^9, 3.939844236414445*^9}},
 CellID->28410175,ExpressionUUID->"c384bab1-defd-46d2-99f3-975235f719be"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"runEncode", "[", "sorted", "]"}]], "Input",
 CellChangeTimes->{{3.9398442376858807`*^9, 3.939844240983856*^9}},
 CellLabel->"In[387]:=",
 CellID->288515433,ExpressionUUID->"18f8cce4-8088-43b7-a2d3-e1d42f6be838"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939844241351873*^9},
 CellLabel->"Out[387]=",
 CellID->1683109989,ExpressionUUID->"b10dec12-7f97-4d1a-b1a9-671091f3f8e8"]
}, Open  ]],

Cell["\<\
With the functional programming, we can eliminate the need of an auxiliary \
function runEncodeSplit:\
\>", "Text",
 CellChangeTimes->{3.939844332292677*^9},
 CellID->1240479625,ExpressionUUID->"f76a3a27-3694-4ca2-8cb4-518ce32e778d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "runEncodeFP", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"runEncodeFP", "[", "x_List", "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"First", "[", "#", "]"}], ",", 
        RowBox[{"Length", "[", "#", "]"}]}], "}"}], "&"}], ",", 
     RowBox[{"Split", "[", "x", "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.939844337125745*^9, 3.939844366613468*^9}},
 CellLabel->"In[389]:=",
 CellID->234428563,ExpressionUUID->"b512784d-4a6a-4b91-8997-fea2724f2a4c"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.939844369223217*^9, 3.939844370046155*^9}},
 CellID->1459449107,ExpressionUUID->"ef0cd1d3-f45b-4e81-9259-932123869e06"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"runEncodeFP", "[", "testlist", "]"}]], "Input",
 CellChangeTimes->{{3.9398443710828133`*^9, 3.939844374315469*^9}},
 CellLabel->"In[391]:=",
 CellID->1127901772,ExpressionUUID->"a1ee3215-7944-4b1c-98bd-fcd026adb06b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.939844374632588*^9},
 CellLabel->"Out[391]=",
 CellID->1240021831,ExpressionUUID->"c345a84e-7308-4eb6-bc84-4b071a5e1ae4"]
}, Open  ]],

Cell["Example: computing frequencies of identical list elements", \
"ItemNumbered",
 CellChangeTimes->{3.939844422609173*^9},
 CellTags->"3.10.3.4",
 CellID->177516941,ExpressionUUID->"5cec6da9-1d79-45f5-baec-a061f7675cbd"],

Cell["\<\
As another related application of Split, we will use it in conjunction with \
Sort to implement a function which will count frequencies of the identical \
elements in a list. This is extremely easy to do if we notice that we just \
have to Sort the original list and the use the <runEncode> function on a \
sorted list:\
\>", "Text",
 CellChangeTimes->{{3.9398444340658083`*^9, 3.939844443848229*^9}},
 CellID->1914041609,ExpressionUUID->"97e60e6f-7d7d-4e29-a2a3-3240935e4bb7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "frequencies", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"frequencies", "[", "x_List", "]"}], ":=", 
   RowBox[{"runEncode", "[", 
    RowBox[{"Sort", "[", "x", "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.939844446969792*^9, 3.939844478542506*^9}},
 CellLabel->"In[397]:=",
 CellID->1003843963,ExpressionUUID->"8f4d087d-454e-42c6-a328-87273201159c"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.939844466140232*^9, 3.939844466904657*^9}},
 CellID->484065631,ExpressionUUID->"ae58fad6-0e40-4b79-8453-c53eb9257ac2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"frequencies", "[", "testlist", "]"}]], "Input",
 CellChangeTimes->{{3.9398444702188187`*^9, 3.939844472907257*^9}},
 CellLabel->"In[399]:=",
 CellID->279043415,ExpressionUUID->"d37a4701-1a03-4a53-952b-ff42ff91c6d7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.939844473252343*^9, 3.939844480829702*^9}},
 CellLabel->"Out[399]=",
 CellID->372591633,ExpressionUUID->"28b0f347-fbcd-4867-9f6a-76cecc132871"]
}, Open  ]],

Cell["\<\
In fact, in essentially the same way the function Frequencies is implemented \
in the \[OpenCurlyQuote]Statistics\[OpenCurlyQuote]DataManipulation add-on \
package.\
\>", "Text",
 CellChangeTimes->{{3.939844490721834*^9, 3.939844501482032*^9}},
 CellID->85261179,ExpressionUUID->"995bfa10-fe9f-469f-add1-52737846b0ca"],

Cell["\<\
There are many other situations where Split is quite useful - we will give \
further examples of its use in the subsequent chapters.\
\>", "Text",
 CellChangeTimes->{{3.939844509472123*^9, 3.939844512115039*^9}},
 CellID->613042904,ExpressionUUID->"70aab6a9-baf0-467a-8356-a1499a1c9bba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{
   "testlist", ",", "sorted", ",", "mod3sorted", ",", "listDivide", ",", 
    "frequencies", ",", "runEncodeFP", ",", "runEncodeSplit", ",", 
    "runEncode"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.9398445151309967`*^9, 3.939844544948083*^9}},
 CellLabel->"In[400]:=",
 CellID->2139535432,ExpressionUUID->"dcbaa09c-2f1f-4904-8599-058f37a4c1b6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Summary", "Subsection",
 CellChangeTimes->{3.939844555732788*^9},
 CellID->265584550,ExpressionUUID->"a4d952f1-9a76-4ce5-ad6b-f8e65dad856f"],

Cell["\<\
In this chapter we introduced lists - the main building blocks of data \
structures in Mathematica. We considered various operations on lists such as \
list generation, element extraction, addition, replacement and deletion, \
locating elements with certain properties in the list, and also several \
specialized commands for fast structural operations on one or several lists, \
as well as those related to sorting of lists. The following built-in \
functions were considered in detail: Range,Table,Part, Extract, Take, Drop, \
First, Rest, Most, Last, Position, Length, Append, Prepend, AppendTo, \
PrependTo, Partition, Transpose, Flatten, Join, Union, Intersection, \
Complement, Sort, Split.\
\>", "Text",
 CellChangeTimes->{{3.939844563308361*^9, 3.939844582854014*^9}},
 CellID->1208513384,ExpressionUUID->"ffb3208d-50b3-49d5-8c70-fdbf4231a369"],

Cell["\<\
Armed with these functions, we can already go a long way in solving various \
problems. However, we need another major component for serious program \
building - an understanding of functions in Mathematica: what they are, how \
to define them, etc. This is a topic of the next chapter.\
\>", "Text",
 CellChangeTimes->{{3.93984458985592*^9, 3.93984459947504*^9}},
 CellID->488009219,ExpressionUUID->"4c07b8e2-27d3-4f48-8769-41204b74be9f"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{960, 1027},
WindowMargins->{{Automatic, 0}, {Automatic, 72}},
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (July 16, 2024)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "BookToolsStyles.nb", 
  CharacterEncoding -> "UTF-8"],
ExpressionUUID->"3f70cf8a-2069-4046-b1a8-f0caff5fc4d6"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "3.4.3"->{
  Cell[12675, 345, 205, 3, 66, "Subsubsection",ExpressionUUID->"b9847a09-d3e2-429a-a777-68fbb92ea886",
   CellTags->"3.4.3",
   CellID->1934630218]},
 "3.4.5.2"->{
  Cell[34742, 982, 251, 6, 38, "ItemNumbered",ExpressionUUID->"ef68e417-0048-4ca6-9b20-3fa9782efccc",
   CellTags->"3.4.5.2",
   CellID->1773148907]},
 "3.4.5.3"->{
  Cell[38437, 1080, 214, 3, 38, "ItemNumbered",ExpressionUUID->"53ab4eb9-5585-46e0-8a7c-841853d6da6a",
   CellTags->"3.4.5.3",
   CellID->628340854]},
 "3.6.6.2"->{
  Cell[82869, 2371, 211, 3, 38, "ItemNumbered",ExpressionUUID->"bdcdb5d6-fe3f-4974-a368-e23ff052cfcf",
   CellTags->"3.6.6.2",
   CellID->1872131614]},
 "3.6.8.4"->{
  Cell[107567, 3032, 238, 5, 38, "ItemNumbered",ExpressionUUID->"c42c3548-bb7a-47c8-9d6d-d47d4cf236d0",
   CellTags->"3.6.8.4",
   CellID->330159301]},
 "3.8.1.2"->{
  Cell[147673, 4193, 245, 5, 38, "ItemNumbered",ExpressionUUID->"be4d3a74-64a6-4d58-9026-bfb7b342ff0a",
   CellTags->"3.8.1.2",
   CellID->1015829813]},
 "3.8.3.3"->{
  Cell[187451, 5397, 269, 7, 63, "ItemNumbered",ExpressionUUID->"02145ee7-86c3-4535-ac48-a44374598fcf",
   CellTags->"3.8.3.3",
   CellID->729900717]},
 "3.10.2"->{
  Cell[226399, 6502, 221, 4, 66, "Subsubsection",ExpressionUUID->"f939b970-f25f-41c1-b6bf-9beeac21eafd",
   CellTags->"3.10.2",
   CellID->158783674]},
 "3.10.3"->{
  Cell[231872, 6654, 222, 4, 66, "Subsubsection",ExpressionUUID->"9643fc8f-bb04-4827-af80-a26a67afb378",
   CellTags->"3.10.3",
   CellID->50304241]},
 "3.10.3.4"->{
  Cell[246455, 7060, 223, 4, 38, "ItemNumbered",ExpressionUUID->"5cec6da9-1d79-45f5-baec-a061f7675cbd",
   CellTags->"3.10.3.4",
   CellID->177516941]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"3.4.3", 251747, 7196},
 {"3.4.5.2", 251911, 7200},
 {"3.4.5.3", 252076, 7204},
 {"3.6.6.2", 252241, 7208},
 {"3.6.8.4", 252407, 7212},
 {"3.8.1.2", 252573, 7216},
 {"3.8.3.3", 252740, 7220},
 {"3.10.2", 252905, 7224},
 {"3.10.3", 253070, 7228},
 {"3.10.3.4", 253236, 7232}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[554, 20, 3516, 92, 130, "Text",ExpressionUUID->"bd0bea70-a121-40ca-9836-4c84ae7df73e",
 CellID->912160115],
Cell[CellGroupData[{
Cell[4095, 116, 328, 10, 135, "Section",ExpressionUUID->"76472712-eadd-44eb-98de-42fb8a27a2d4",
 CounterAssignments->{{"Section", 2}},
 CellID->919055616],
Cell[CellGroupData[{
Cell[4448, 130, 154, 2, 68, "Subsection",ExpressionUUID->"0ced549c-1195-4094-b143-6cb1aaab8da3",
 CellID->1334210680],
Cell[4605, 134, 578, 12, 163, "Text",ExpressionUUID->"19a918a4-669d-4732-b0ee-8ee6978832ca",
 CellID->54656786],
Cell[5186, 148, 755, 11, 222, "Text",ExpressionUUID->"4a126f08-d44d-4870-a55e-9015452c45ac",
 CellID->849705552]
}, Open  ]],
Cell[CellGroupData[{
Cell[5978, 164, 208, 4, 68, "Subsection",ExpressionUUID->"0c671e56-8186-4222-8d78-ce48fe96b10b",
 CellID->610703252],
Cell[6189, 170, 827, 13, 222, "Text",ExpressionUUID->"82f316a9-ec8a-4141-bac1-b2a041afc07b",
 CellID->1265207351]
}, Open  ]],
Cell[CellGroupData[{
Cell[7053, 188, 161, 2, 68, "Subsection",ExpressionUUID->"fc21000b-1ccd-4183-82a4-ad08ca093de3",
 CellID->238968988],
Cell[7217, 192, 534, 8, 163, "Text",ExpressionUUID->"f5200853-cfb7-4db6-8af1-abf70236055d",
 CellID->557361426],
Cell[CellGroupData[{
Cell[7776, 204, 427, 10, 54, "Input",ExpressionUUID->"8b2e623b-9cca-4338-8a19-745dd0d6031c",
 CellID->365345351],
Cell[8206, 216, 317, 8, 45, "Output",ExpressionUUID->"e7d31de2-7f73-4423-91be-fcef953d0cc3",
 CellID->382254241]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[8572, 230, 161, 2, 68, "Subsection",ExpressionUUID->"a08efdb1-28e4-486a-8cb4-ef7be4e13518",
 CellID->1423440310],
Cell[8736, 234, 173, 2, 45, "Text",ExpressionUUID->"a4848f25-0530-42c6-90e4-30e69988ec42",
 CellID->793462590],
Cell[CellGroupData[{
Cell[8934, 240, 170, 2, 66, "Subsubsection",ExpressionUUID->"98b8b983-c39c-4b90-9733-910aec2ed6f3",
 CellID->1999785907],
Cell[9107, 244, 326, 6, 75, "Text",ExpressionUUID->"4665725a-12ef-4693-9ca0-58cdcc170b5c",
 CellID->135179752],
Cell[CellGroupData[{
Cell[9458, 254, 522, 12, 78, "Input",ExpressionUUID->"79a94ece-2e3a-492c-9f91-da64a66991ec",
 CellID->137878516],
Cell[9983, 268, 245, 5, 45, "Output",ExpressionUUID->"17dc6e4a-0c6f-4e52-b08e-85955bc4e3f6",
 CellID->1199301931]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[10277, 279, 216, 4, 66, "Subsubsection",ExpressionUUID->"038e8624-06a5-41e0-920f-5cfb26456fa8",
 CellID->2109646076],
Cell[10496, 285, 431, 7, 104, "Text",ExpressionUUID->"bba9e24e-b290-4270-8b82-f1cb9e842b0b",
 CellID->1866587362],
Cell[CellGroupData[{
Cell[10952, 296, 498, 10, 101, "Input",ExpressionUUID->"f56c5c21-b41b-4897-857a-2e0fe5282bc1",
 CellID->1777994463],
Cell[11453, 308, 242, 5, 45, "Output",ExpressionUUID->"61ff5ef2-ea8a-41cd-9d60-2a9319fb52ce",
 CellID->75016856],
Cell[11698, 315, 294, 7, 45, "Output",ExpressionUUID->"3a6c245d-cf50-4a8c-aab7-55fe20d177c7",
 CellID->235398003],
Cell[11995, 324, 235, 5, 45, "Output",ExpressionUUID->"6dc05c73-9259-42b2-b91b-4b986c157c3e",
 CellID->669358647],
Cell[12233, 331, 393, 8, 45, "Output",ExpressionUUID->"ba412535-9190-4ab7-9ba4-1d2f0b3f842f",
 CellID->1391437143]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[12675, 345, 205, 3, 66, "Subsubsection",ExpressionUUID->"b9847a09-d3e2-429a-a777-68fbb92ea886",
 CellTags->"3.4.3",
 CellID->1934630218],
Cell[12883, 350, 277, 5, 75, "Text",ExpressionUUID->"7d07ccb9-b28a-4ba5-abf1-58e4588dfee9",
 CellID->280174699],
Cell[CellGroupData[{
Cell[13185, 359, 1439, 43, 151, "Input",ExpressionUUID->"cf7d9e56-0466-4e18-9aa4-6960f3f46781",
 CellID->1522118056],
Cell[14627, 404, 301, 7, 45, "Output",ExpressionUUID->"6e979ec9-fc0f-4d43-87af-12a92c0f1c52",
 CellID->182345328],
Cell[14931, 413, 309, 7, 45, "Output",ExpressionUUID->"39da8487-1c89-4461-ae05-2a83e17d2217",
 CellID->218763427],
Cell[15243, 422, 403, 11, 45, "Output",ExpressionUUID->"649d4c1d-c5d6-4d6c-b3af-c579d1400c9c",
 CellID->264913925],
Cell[15649, 435, 434, 12, 45, "Output",ExpressionUUID->"5c84d823-857e-419c-95e8-1c434a2240ac",
 CellID->674737244],
Cell[16086, 449, 711, 21, 45, "Output",ExpressionUUID->"0cde4531-59d1-4606-8ec8-f0a611892023",
 CellID->1595203748],
Cell[16800, 472, 607, 15, 45, "Output",ExpressionUUID->"942b5470-16bd-4b13-9a7a-35ca72fc3521",
 CellID->1403543488]
}, Open  ]],
Cell[17422, 490, 934, 13, 281, "Text",ExpressionUUID->"8f22394e-fdd5-472a-a552-396c78736865",
 CellID->1395024168],
Cell[CellGroupData[{
Cell[18381, 507, 438, 11, 58, "Input",ExpressionUUID->"a556d969-41c2-46ce-a3a9-f28b1c5d953d",
 CellID->1790533662],
Cell[18822, 520, 521, 14, 49, "Output",ExpressionUUID->"4a5e59bc-3278-444f-b65d-18e6658edb4c",
 CellID->828493899]
}, Open  ]],
Cell[19358, 537, 191, 2, 45, "Text",ExpressionUUID->"b2f44677-8b41-4870-b623-0dcd24d3b4f5",
 CellID->212993345],
Cell[CellGroupData[{
Cell[19574, 543, 539, 14, 58, "Input",ExpressionUUID->"b85afa1a-e052-4bc3-b782-36f424d1afa9",
 CellID->1053371474],
Cell[20116, 559, 646, 20, 49, "Output",ExpressionUUID->"cb6b447f-ed5d-4ce7-8b35-edd70f5a2c5b",
 CellID->2105872124]
}, Open  ]],
Cell[20777, 582, 631, 10, 163, "Text",ExpressionUUID->"a4c5fa77-39f7-4d02-8177-47322bca5447",
 CellID->714801861],
Cell[CellGroupData[{
Cell[21433, 596, 494, 13, 81, "Input",ExpressionUUID->"5624563c-fc88-402f-ac9d-6bc7e40b397d",
 CellID->1679433966],
Cell[21930, 611, 248, 5, 45, "Output",ExpressionUUID->"1e9e31ad-befc-4435-b364-828e4ca30f80",
 CellID->1624114657]
}, Open  ]],
Cell[22193, 619, 207, 2, 45, "Text",ExpressionUUID->"7e295eb9-b67e-47ee-a11f-1fe599cf951f",
 CellID->1977886829],
Cell[CellGroupData[{
Cell[22425, 625, 170, 3, 31, "Input",ExpressionUUID->"16eb5259-5a2e-4179-96ad-98a9fae5adea",
 CellID->1469224295],
Cell[22598, 630, 173, 3, 45, "Output",ExpressionUUID->"28eb5229-3b1e-46b4-aada-79d42535389c",
 CellID->1718514223]
}, Open  ]],
Cell[22786, 636, 351, 6, 104, "Text",ExpressionUUID->"2b62830e-7b66-4932-9d93-bb850b96ee2a",
 CellID->1560977458],
Cell[CellGroupData[{
Cell[23162, 646, 419, 11, 31, "Input",ExpressionUUID->"03ed2e59-3f88-4297-8ecd-c64ad7c7c80f",
 CellID->196009309],
Cell[23584, 659, 497, 12, 45, "Output",ExpressionUUID->"a0b227cd-9b63-4010-9733-8202e73dca5a",
 CellID->131831707]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[24130, 677, 177, 2, 66, "Subsubsection",ExpressionUUID->"e3b31785-b470-4c17-a8e9-96d239670d68",
 CellID->1639859492],
Cell[24310, 681, 292, 5, 75, "Text",ExpressionUUID->"7d7a9351-8e34-4df2-8de6-5978f00384f2",
 CellID->313356446],
Cell[CellGroupData[{
Cell[24627, 690, 335, 7, 61, "Input",ExpressionUUID->"3f17a7c9-1de3-4d6d-af53-8e3fc854bb91",
 CellID->733839252],
Cell[24965, 699, 303, 7, 45, "Output",ExpressionUUID->"a457a5dd-7323-458e-b9cd-125c16964604",
 CellID->1382526386],
Cell[25271, 708, 309, 7, 45, "Output",ExpressionUUID->"7d82ca0b-c541-475e-a2d5-62ded6fbfcae",
 CellID->347908962]
}, Open  ]],
Cell[25595, 718, 238, 5, 75, "Text",ExpressionUUID->"7fceaeb8-f39d-433f-93ff-ed10a61bb3e7",
 CellID->1855437200],
Cell[CellGroupData[{
Cell[25858, 727, 350, 9, 31, "Input",ExpressionUUID->"9d8566fa-d15d-4e3d-80de-32707672520b",
 CellID->684296319],
Cell[26211, 738, 402, 11, 45, "Output",ExpressionUUID->"3afe0033-5e11-4a55-a352-4dbc7cf85447",
 CellID->887117072]
}, Open  ]],
Cell[CellGroupData[{
Cell[26650, 754, 379, 10, 31, "Input",ExpressionUUID->"32cf126d-f2a6-4824-b593-cf2076f747c7",
 CellID->1019887129],
Cell[27032, 766, 437, 12, 45, "Output",ExpressionUUID->"95c91a4c-0d89-4cc4-9805-f9ff8c4d2cd2",
 CellID->1855394060]
}, Open  ]],
Cell[CellGroupData[{
Cell[27506, 783, 412, 10, 31, "Input",ExpressionUUID->"65ea8f76-b8c7-4bca-b31d-7b925089c850",
 CellID->1688714730],
Cell[27921, 795, 712, 21, 45, "Output",ExpressionUUID->"3bb3558e-f84e-4831-a698-c7507e689bd0",
 CellID->1006731815]
}, Open  ]],
Cell[CellGroupData[{
Cell[28670, 821, 281, 6, 31, "Input",ExpressionUUID->"101c97b5-61d5-4a52-8aa7-cff68ec6173d",
 CellID->426179363],
Cell[28954, 829, 607, 15, 45, "Output",ExpressionUUID->"595a38fa-0566-4240-b721-1deacaf733c0",
 CellID->1425313914]
}, Open  ]],
Cell[CellGroupData[{
Cell[29598, 849, 331, 7, 58, "Input",ExpressionUUID->"ac8652cc-5ddd-4e91-a329-38ef2f4a829f",
 CellID->1411410153],
Cell[29932, 858, 524, 14, 49, "Output",ExpressionUUID->"48ceb991-94e7-4ddc-b1c0-44f89c4dfe08",
 CellID->1348249820]
}, Open  ]],
Cell[30471, 875, 694, 10, 222, "Text",ExpressionUUID->"4d2d3b5f-fac3-45b0-9f70-85535bd30e08",
 CellID->1934765243]
}, Open  ]],
Cell[CellGroupData[{
Cell[31202, 890, 174, 2, 66, "Subsubsection",ExpressionUUID->"5865d26f-9031-4d70-a325-51c99e76892b",
 CellID->736909015],
Cell[31379, 894, 179, 2, 38, "ItemNumbered",ExpressionUUID->"cef4427c-eb76-4d93-9fb9-157c51ce5044",
 CellID->691622856],
Cell[31561, 898, 819, 12, 252, "Text",ExpressionUUID->"9697dd12-d50d-43d3-9a6f-c201fd025fab",
 CellID->1923843228],
Cell[CellGroupData[{
Cell[32405, 914, 638, 17, 78, "Input",ExpressionUUID->"25ab8ed5-a158-44e3-8b08-67014770aeab",
 CellID->591100848],
Cell[33046, 933, 607, 15, 45, "Output",ExpressionUUID->"2c0df467-455a-4770-b13e-360c40355e28",
 CellID->1661389970]
}, Open  ]],
Cell[33668, 951, 166, 2, 45, "Text",ExpressionUUID->"433c4403-1dcd-4261-b721-7e1bd4c7035e",
 CellID->1398847496],
Cell[CellGroupData[{
Cell[33859, 957, 258, 5, 31, "Input",ExpressionUUID->"398dfe07-8d22-4572-a151-d541754261c7",
 CellID->1231467169],
Cell[34120, 964, 607, 15, 45, "Output",ExpressionUUID->"c51d1cd1-56df-4164-a99e-06a9172217b6",
 CellID->1084920148]
}, Open  ]],
Cell[34742, 982, 251, 6, 38, "ItemNumbered",ExpressionUUID->"ef68e417-0048-4ca6-9b20-3fa9782efccc",
 CellTags->"3.4.5.2",
 CellID->1773148907],
Cell[34996, 990, 346, 6, 75, "Text",ExpressionUUID->"656fb0a0-cdec-4ea9-a485-ca1db67e2dbe",
 CellID->2116764406],
Cell[35345, 998, 2734, 72, 359, "Input",ExpressionUUID->"f6e44bff-d770-4b34-9ed9-c56f759775a5",
 CellID->14190841],
Cell[38082, 1072, 352, 6, 104, "Text",ExpressionUUID->"7c188a81-8f47-4f62-9a35-1e0759dff997",
 CellID->1326379041],
Cell[38437, 1080, 214, 3, 38, "ItemNumbered",ExpressionUUID->"53ab4eb9-5585-46e0-8a7c-841853d6da6a",
 CellTags->"3.4.5.3",
 CellID->628340854],
Cell[38654, 1085, 260, 6, 104, "Text",ExpressionUUID->"d9b3a01a-6fac-4478-8db6-8ff2d837c8f9",
 CellID->1347640879],
Cell[38917, 1093, 277, 5, 31, "Input",ExpressionUUID->"b412e635-091f-48f0-9e88-bdc70c13b98a",
 CellID->249904465],
Cell[CellGroupData[{
Cell[39219, 1102, 655, 18, 54, "Input",ExpressionUUID->"33fe968e-a1f3-402c-85b7-d230a27bb010",
 CellID->813977250],
Cell[39877, 1122, 224, 5, 45, "Output",ExpressionUUID->"3a687821-819b-4595-ace9-e340e9befd48",
 CellID->868619998]
}, Open  ]],
Cell[CellGroupData[{
Cell[40138, 1132, 321, 7, 31, "Input",ExpressionUUID->"4deaba7e-f577-49dd-9043-c130887301f7",
 CellID->588070111],
Cell[40462, 1141, 249, 5, 45, "Output",ExpressionUUID->"ee538806-7516-402b-a2b7-b6639655cd9a",
 CellID->2031977519]
}, Open  ]],
Cell[40726, 1149, 503, 8, 134, "Text",ExpressionUUID->"8ffbb666-9964-4474-860c-aec9d3758db2",
 CellID->1768562943],
Cell[CellGroupData[{
Cell[41254, 1161, 398, 10, 31, "Input",ExpressionUUID->"6242d686-9aa6-4f46-aea0-521b6ce49aad",
 CellID->712203719],
Cell[41655, 1173, 253, 5, 45, "Output",ExpressionUUID->"b73f5845-bc18-4620-b8b3-f76807a139fb",
 CellID->2012319418]
}, Open  ]],
Cell[41923, 1181, 178, 2, 45, "Text",ExpressionUUID->"4bcaadc7-0ef1-4346-853a-da4439ad5ebf",
 CellID->332501723],
Cell[42104, 1185, 439, 7, 134, "Text",ExpressionUUID->"0fc3eebe-7c17-4bdc-8860-aa6ba8aed247",
 CellID->604008967],
Cell[42546, 1194, 790, 12, 252, "Text",ExpressionUUID->"aa3dc20e-1106-4e79-b5d9-d78cd295c8e2",
 CellID->91532658]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[43385, 1212, 168, 2, 68, "Subsection",ExpressionUUID->"8114e080-fdf6-4ea1-8e99-47f45238a21c",
 CellID->720809093],
Cell[43556, 1216, 757, 16, 104, "Text",ExpressionUUID->"4656aa76-9984-4e89-a0e2-fe14480ca6ce",
 CellID->683173324],
Cell[CellGroupData[{
Cell[44338, 1236, 508, 12, 78, "Input",ExpressionUUID->"3321a582-0a91-4c7e-8679-07f2faf615c9",
 CellID->1265196337],
Cell[44849, 1250, 302, 7, 45, "Output",ExpressionUUID->"345baff2-2f7c-467c-9d88-aa82a8864042",
 CellID->93140903],
Cell[45154, 1259, 531, 15, 45, "Output",ExpressionUUID->"1f0837f9-fb53-4e65-acae-9c3652f93946",
 CellID->2051061705]
}, Open  ]],
Cell[45700, 1277, 165, 2, 45, "Text",ExpressionUUID->"4641fe6a-be01-4019-9a0f-08ac908fe238",
 CellID->786574291],
Cell[CellGroupData[{
Cell[45890, 1283, 238, 4, 31, "Input",ExpressionUUID->"b16b7af9-a3b0-4c69-a6b3-c8afd4d9855b",
 CellID->962972885],
Cell[46131, 1289, 450, 13, 45, "Output",ExpressionUUID->"417d2de1-002f-4ce7-abc3-169fcc6cf90a",
 CellID->466561895]
}, Open  ]],
Cell[CellGroupData[{
Cell[46618, 1307, 246, 4, 31, "Input",ExpressionUUID->"7d4846a4-bca7-45b9-a543-045de60852a2",
 CellID->1503634062],
Cell[46867, 1313, 727, 20, 45, "Output",ExpressionUUID->"6c4ebc73-e5ac-45da-9e57-a6ab29b53200",
 CellID->1264571396]
}, Open  ]],
Cell[47609, 1336, 707, 15, 104, "Text",ExpressionUUID->"2ff67a6e-be72-42b4-b442-aecb4f00a75b",
 CellID->5798213],
Cell[48319, 1353, 290, 6, 31, "Input",ExpressionUUID->"d66104aa-cf06-4c4e-b08c-4c116301456e",
 CellID->1292829029]
}, Open  ]],
Cell[CellGroupData[{
Cell[48646, 1364, 174, 2, 68, "Subsection",ExpressionUUID->"ec5685ef-6001-47d0-998b-3d52863ab502",
 CellID->1185985057],
Cell[CellGroupData[{
Cell[48845, 1370, 203, 3, 66, "Subsubsection",ExpressionUUID->"a1e6b2ce-e205-45c5-94fe-fa2497eb152f",
 CellID->2055125192],
Cell[49051, 1375, 153, 2, 38, "ItemNumbered",ExpressionUUID->"63b950cb-e7a6-4da7-9f9a-0872084eb8fc",
 CellID->362123596],
Cell[49207, 1379, 158, 2, 45, "Text",ExpressionUUID->"f22815a8-7da5-4584-8e3f-2f0edf7e8e03",
 CellID->242622374],
Cell[CellGroupData[{
Cell[49390, 1385, 377, 8, 54, "Input",ExpressionUUID->"bfb6e394-2160-4d52-bfd5-116427950fe9",
 CellID->923426656],
Cell[49770, 1395, 276, 7, 45, "Output",ExpressionUUID->"d7e6f58c-d792-4676-aec7-72884f27ea9e",
 CellID->1781739313]
}, Open  ]],
Cell[50061, 1405, 216, 4, 45, "Text",ExpressionUUID->"cbaeadad-d8df-4d8b-b797-74e04d49522f",
 CellID->1180659823],
Cell[CellGroupData[{
Cell[50302, 1413, 253, 5, 31, "Input",ExpressionUUID->"cf007d24-686d-4208-be78-82c61adbaaac",
 CellID->1432204420],
Cell[50558, 1420, 168, 3, 45, "Output",ExpressionUUID->"4175370e-dccc-42cf-8bca-db31a5e86fc8",
 CellID->24043010]
}, Open  ]],
Cell[50741, 1426, 166, 2, 45, "Text",ExpressionUUID->"161872f2-ed4d-47fa-a965-f6244cc2e813",
 CellID->363943434],
Cell[CellGroupData[{
Cell[50932, 1432, 253, 5, 31, "Input",ExpressionUUID->"9eb27727-994f-49ac-bb9c-b70ad074d4d3",
 CellID->682015908],
Cell[51188, 1439, 170, 3, 45, "Output",ExpressionUUID->"b3f87f32-8d0c-4f4e-b422-4e05ab7e93ba",
 CellID->985155537]
}, Open  ]],
Cell[51373, 1445, 225, 5, 45, "Text",ExpressionUUID->"0aa08921-4075-4de9-b77d-b9aaa7fb572e",
 CellID->410191989],
Cell[CellGroupData[{
Cell[51623, 1454, 310, 7, 31, "Input",ExpressionUUID->"339cbfe2-f8e4-4111-82db-6d9e3ba31a28",
 CellID->2033894599],
Cell[51936, 1463, 228, 5, 45, "Output",ExpressionUUID->"1af13f50-9a1c-48fc-bded-40709c38bf65",
 CellID->1811739127]
}, Open  ]],
Cell[52179, 1471, 155, 2, 45, "Text",ExpressionUUID->"c03a5685-a966-4ad8-874d-755f985e2485",
 CellID->728876676],
Cell[CellGroupData[{
Cell[52359, 1477, 315, 7, 31, "Input",ExpressionUUID->"22949994-126d-4f9f-90cd-d678a51effc3",
 CellID->1696905549],
Cell[52677, 1486, 229, 5, 45, "Output",ExpressionUUID->"0d2d5d0a-62f9-40d4-9835-ce79cea20824",
 CellID->944208100]
}, Open  ]],
Cell[52921, 1494, 287, 5, 75, "Text",ExpressionUUID->"1c678a30-77b7-4fb5-86d5-a7496dad0ba7",
 CellID->1548869017],
Cell[CellGroupData[{
Cell[53233, 1503, 270, 6, 31, "Input",ExpressionUUID->"fbb6df6f-72e7-4c13-a0eb-fb3a15bd2ae7",
 CellID->1349026457],
Cell[53506, 1511, 172, 3, 45, "Output",ExpressionUUID->"8ae55324-be51-43bb-a3be-a1b45813f7c4",
 CellID->2031891540]
}, Open  ]],
Cell[53693, 1517, 165, 2, 38, "ItemNumbered",ExpressionUUID->"ec149892-a195-4a26-862e-e620e5de7c14",
 CellID->716158186],
Cell[53861, 1521, 167, 2, 45, "Text",ExpressionUUID->"208dc0f1-b66d-4554-815d-75e565849085",
 CellID->1972274314],
Cell[CellGroupData[{
Cell[54053, 1527, 448, 12, 31, "Input",ExpressionUUID->"ecf1425e-904c-461f-be43-5aa3863982f1",
 CellID->1879349986],
Cell[54504, 1541, 666, 16, 68, "Output",ExpressionUUID->"8c83c6e8-6fae-4f8a-a8d0-5d493d8e3be8",
 CellID->1333147202]
}, Open  ]],
Cell[55185, 1560, 714, 16, 75, "Text",ExpressionUUID->"0917b443-fcbe-41ef-a6e8-c541ebe34d98",
 CellID->1508134863],
Cell[CellGroupData[{
Cell[55924, 1580, 256, 5, 31, "Input",ExpressionUUID->"413cbaff-d147-4367-ab64-e9ade6525847",
 CellID->1217179393],
Cell[56183, 1587, 253, 6, 45, "Output",ExpressionUUID->"bc4c9398-048c-40a2-8577-2dfae79c1dd2",
 CellID->1087795886]
}, Open  ]],
Cell[CellGroupData[{
Cell[56473, 1598, 317, 7, 31, "Input",ExpressionUUID->"5db18414-2f15-4ea9-886a-ba4246dd0bab",
 CellID->1708700806],
Cell[56793, 1607, 475, 12, 45, "Output",ExpressionUUID->"1e1d583b-c53c-4a70-8c2f-ce5838afa550",
 CellID->106837431]
}, Open  ]],
Cell[57283, 1622, 447, 7, 134, "Text",ExpressionUUID->"36cfe0d4-cec0-4011-8f87-482154a1a43d",
 CellID->320373925],
Cell[CellGroupData[{
Cell[57755, 1633, 282, 6, 31, "Input",ExpressionUUID->"b5193d32-5567-4515-ae5b-0651f286aacf",
 CellID->2074647976],
Cell[58040, 1641, 169, 3, 45, "Output",ExpressionUUID->"723e5276-e487-46d4-8bfa-ea1a2f040f1a",
 CellID->30484584]
}, Open  ]],
Cell[58224, 1647, 478, 8, 104, "Text",ExpressionUUID->"b6a4c55e-0a14-44eb-9345-1902d4b50fcf",
 CellID->1253295302],
Cell[CellGroupData[{
Cell[58727, 1659, 309, 7, 31, "Input",ExpressionUUID->"456f3b34-d63d-492f-a559-a07ffd3c525f",
 CellID->1291366131],
Cell[59039, 1668, 377, 10, 45, "Output",ExpressionUUID->"5390976a-1dfe-49ad-96c7-e9ba10dddaa1",
 CellID->2025521627]
}, Open  ]],
Cell[59431, 1681, 202, 4, 45, "Text",ExpressionUUID->"f1a0fbb2-d444-409f-b542-d1bf2ac54f37",
 CellID->1031212745],
Cell[CellGroupData[{
Cell[59658, 1689, 435, 11, 55, "Input",ExpressionUUID->"0c12ae2e-a7d9-4c23-9ca1-2a04ec9ce08a",
 CellID->1250571884],
Cell[60096, 1702, 253, 6, 45, "Output",ExpressionUUID->"eb42fc2d-9840-45b0-ad42-c9be37454217",
 CellID->1212788954],
Cell[60352, 1710, 174, 3, 45, "Output",ExpressionUUID->"923a4fa4-ba77-4add-9aa2-106ea801dbfb",
 CellID->1576656201]
}, Open  ]],
Cell[60541, 1716, 288, 6, 31, "Input",ExpressionUUID->"d44f8a18-3190-454f-a13b-2db8e8e0b222",
 CellID->733896806]
}, Open  ]],
Cell[CellGroupData[{
Cell[60866, 1727, 173, 2, 66, "Subsubsection",ExpressionUUID->"55654bde-572a-4a63-9eeb-c83af4acacd4",
 CellID->616743194],
Cell[61042, 1731, 751, 11, 222, "Text",ExpressionUUID->"740cafa8-40d5-4666-88e8-48d403029d93",
 CellID->110929692],
Cell[CellGroupData[{
Cell[61818, 1746, 595, 16, 54, "Input",ExpressionUUID->"352b093b-b0b8-485a-b590-105ae03ad013",
 CellID->214631699],
Cell[62416, 1764, 664, 16, 68, "Output",ExpressionUUID->"b89bdea8-265f-4c2e-84f2-0266d602bd45",
 CellID->1079582974]
}, Open  ]],
Cell[CellGroupData[{
Cell[63117, 1785, 506, 11, 78, "Input",ExpressionUUID->"54bb944a-6c34-4268-8a43-d4abd66929de",
 CellID->1110208994],
Cell[63626, 1798, 173, 3, 45, "Output",ExpressionUUID->"0e1db453-0cec-485e-95fa-45b6e114fcca",
 CellID->1205977315],
Cell[63802, 1803, 247, 5, 45, "Output",ExpressionUUID->"a07cad9c-a433-4b5f-b4a5-4467e6806eb0",
 CellID->910072819],
Cell[64052, 1810, 171, 3, 45, "Output",ExpressionUUID->"f2b32b85-908b-4d7a-94e8-25db9179294b",
 CellID->1215334999]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[64272, 1819, 179, 2, 66, "Subsubsection",ExpressionUUID->"de14a43d-9eb6-4da8-87a5-91b2b828b8ef",
 CellID->836662551],
Cell[64454, 1823, 279, 5, 75, "Text",ExpressionUUID->"4572e8f9-fd46-4abc-bf92-3b201ad54f98",
 CellID->45076348],
Cell[CellGroupData[{
Cell[64758, 1832, 601, 16, 54, "Input",ExpressionUUID->"e68cee63-8c0b-4c7d-abd2-921fc84cf295",
 CellID->974775988],
Cell[65362, 1850, 302, 7, 45, "Output",ExpressionUUID->"b7b441ef-4693-4783-9ec5-3c58b2327e5b",
 CellID->1169655155],
Cell[65667, 1859, 689, 16, 68, "Output",ExpressionUUID->"8c7203ef-8bc5-4baa-98f9-99ab5ec647ab",
 CellID->328885447]
}, Open  ]],
Cell[66371, 1878, 181, 2, 45, "Text",ExpressionUUID->"26ce5476-8a1d-4c4a-ac20-78518026f0d6",
 CellID->571050291],
Cell[CellGroupData[{
Cell[66577, 1884, 254, 5, 31, "Input",ExpressionUUID->"ad4e1d06-a6ac-4ce5-bc58-af1f036aa76b",
 CellID->422305735],
Cell[66834, 1891, 225, 5, 45, "Output",ExpressionUUID->"882d6e30-0731-44f7-bccd-2046659405e8",
 CellID->399572579]
}, Open  ]],
Cell[CellGroupData[{
Cell[67096, 1901, 302, 7, 31, "Input",ExpressionUUID->"524f432f-1b96-4be2-a2d8-be4432d1e0e9",
 CellID->524674400],
Cell[67401, 1910, 226, 5, 45, "Output",ExpressionUUID->"78cc40b1-8469-4b69-b227-8879e2ecda46",
 CellID->478367320]
}, Open  ]],
Cell[CellGroupData[{
Cell[67664, 1920, 272, 6, 31, "Input",ExpressionUUID->"cda70387-6d73-4abe-907a-cbc43d624ddc",
 CellID->538710295],
Cell[67939, 1928, 231, 5, 45, "Output",ExpressionUUID->"ab4a0758-06b8-4bcf-9a60-f738de0e4db4",
 CellID->1056742693]
}, Open  ]],
Cell[CellGroupData[{
Cell[68207, 1938, 344, 9, 31, "Input",ExpressionUUID->"f4348920-0e07-4cfa-8a27-b4adae333e70",
 CellID->1017204945],
Cell[68554, 1949, 217, 5, 45, "Output",ExpressionUUID->"626d2706-0416-414f-90f9-56fe44847b1a",
 CellID->171076216]
}, Open  ]],
Cell[CellGroupData[{
Cell[68808, 1959, 253, 5, 31, "Input",ExpressionUUID->"e3609c08-4221-490b-bb77-e4b05ab91c59",
 CellID->121424195],
Cell[69064, 1966, 240, 5, 45, "Output",ExpressionUUID->"eea2af28-7387-42a2-8ad2-75717998da56",
 CellID->1596255208]
}, Open  ]],
Cell[CellGroupData[{
Cell[69341, 1976, 304, 7, 31, "Input",ExpressionUUID->"7abb4464-2167-4c04-9ed8-aaf59a10592a",
 CellID->799572079],
Cell[69648, 1985, 239, 5, 45, "Output",ExpressionUUID->"38141133-d536-4e09-9f60-d14adf140f00",
 CellID->1742630145]
}, Open  ]],
Cell[CellGroupData[{
Cell[69924, 1995, 273, 6, 31, "Input",ExpressionUUID->"309a208e-4873-4c61-a1bb-32cfa2b201f6",
 CellID->1771470147],
Cell[70200, 2003, 237, 5, 45, "Output",ExpressionUUID->"f16dd5df-775a-4d9e-b744-5f613e3b398a",
 CellID->1166533361]
}, Open  ]],
Cell[CellGroupData[{
Cell[70474, 2013, 344, 9, 31, "Input",ExpressionUUID->"ae9c86fe-e748-4400-a057-0ad29b333896",
 CellID->217225843],
Cell[70821, 2024, 250, 5, 45, "Output",ExpressionUUID->"7e3c581a-0200-4148-8e14-880fbc78aedb",
 CellID->1511019501]
}, Open  ]],
Cell[71086, 2032, 425, 7, 104, "Text",ExpressionUUID->"a216648d-1751-4a61-934b-196d19843a43",
 CellID->1710627532]
}, Open  ]],
Cell[CellGroupData[{
Cell[71548, 2044, 195, 2, 66, "Subsubsection",ExpressionUUID->"8813451a-4d32-4631-b50f-99a24bab1f09",
 CellID->1014803087],
Cell[71746, 2048, 454, 7, 134, "Text",ExpressionUUID->"15ae8142-3f5c-411b-83af-71a2b910f0eb",
 CellID->2021445403]
}, Open  ]],
Cell[CellGroupData[{
Cell[72237, 2060, 171, 2, 66, "Subsubsection",ExpressionUUID->"6a93351e-cf95-47ae-ae16-137251e2073a",
 CellID->71905884],
Cell[72411, 2064, 192, 2, 45, "Text",ExpressionUUID->"32701ab4-1a22-42d5-8819-45522c1b2c30",
 CellID->1201955956],
Cell[CellGroupData[{
Cell[72628, 2070, 508, 14, 54, "Input",ExpressionUUID->"b1f6e427-c4c9-4dc0-bfe6-e6fa0d4517fd",
 CellID->2042568810],
Cell[73139, 2086, 275, 7, 45, "Output",ExpressionUUID->"7e238cc4-eae0-4997-bea9-ea6456b3dcbc",
 CellID->1687010769],
Cell[73417, 2095, 662, 16, 68, "Output",ExpressionUUID->"769aaa30-332a-4b23-8988-180717ad196e",
 CellID->363403242]
}, Open  ]],
Cell[CellGroupData[{
Cell[74116, 2116, 327, 7, 31, "Input",ExpressionUUID->"729e36f6-d381-4064-9b52-3327362add78",
 CellID->1628070985],
Cell[74446, 2125, 216, 5, 45, "Output",ExpressionUUID->"9aa3df71-5f5d-40df-bf13-e0ed14ba2213",
 CellID->1884506824]
}, Open  ]],
Cell[74677, 2133, 240, 5, 75, "Text",ExpressionUUID->"fe4e6dc7-6965-460b-b79c-18494f230222",
 CellID->1817365012],
Cell[CellGroupData[{
Cell[74942, 2142, 464, 12, 31, "Input",ExpressionUUID->"1adfa44a-b87e-45e6-9e65-c4c02f886698",
 CellID->1991273057],
Cell[75409, 2156, 248, 5, 45, "Output",ExpressionUUID->"c10f0fcb-5074-4715-a61e-cab11e0e948c",
 CellID->1804989718]
}, Open  ]],
Cell[75672, 2164, 341, 6, 75, "Text",ExpressionUUID->"b5bae18c-fb64-4628-8c6d-993ab5d94801",
 CellID->1108192904]
}, Open  ]],
Cell[CellGroupData[{
Cell[76050, 2175, 211, 4, 66, "Subsubsection",ExpressionUUID->"8962849f-4ed1-43a4-a39a-078778769476",
 CellID->919363875],
Cell[76264, 2181, 160, 2, 38, "ItemNumbered",ExpressionUUID->"4694c47b-2cbc-4f98-8d3c-324ba9674bd3",
 CellID->603806960],
Cell[76427, 2185, 345, 6, 104, "Text",ExpressionUUID->"3bda5d2e-b1f5-42b1-9442-14c8643861c2",
 CellID->1323344645],
Cell[CellGroupData[{
Cell[76797, 2195, 653, 17, 78, "Input",ExpressionUUID->"df263616-a942-4628-9a82-b731c02e9b24",
 CellID->1847473453],
Cell[77453, 2214, 275, 7, 45, "Output",ExpressionUUID->"d2478cec-59d3-4fba-897c-1c1bf82cf4d6",
 CellID->888342794],
Cell[77731, 2223, 664, 16, 68, "Output",ExpressionUUID->"7a8accae-227c-49d0-84bc-c58914ab7e0f",
 CellID->1071024814]
}, Open  ]],
Cell[78410, 2242, 213, 4, 45, "Text",ExpressionUUID->"ba82a046-4bc0-4f93-9cbf-464f1e197166",
 CellID->506119744],
Cell[CellGroupData[{
Cell[78648, 2250, 334, 8, 55, "Input",ExpressionUUID->"baac4ad0-6772-4a3a-aedc-32692f3fa616",
 CellID->1420228719],
Cell[78985, 2260, 274, 7, 45, "Output",ExpressionUUID->"16ecbbdc-29b3-45d4-bfa8-3f6be6c1e6c7",
 CellID->333958852]
}, Open  ]],
Cell[79274, 2270, 241, 5, 75, "Text",ExpressionUUID->"42b692a0-9cdf-4597-8508-712128c29ff0",
 CellID->1471655953],
Cell[CellGroupData[{
Cell[79540, 2279, 748, 20, 78, "Input",ExpressionUUID->"16b909a5-9dc6-438a-95d2-2cf248d37815",
 CellID->2073059201],
Cell[80291, 2301, 658, 16, 68, "Output",ExpressionUUID->"f7d0d6f1-b68e-4033-b9e6-7c712aaa3c9d",
 CellID->920077539]
}, Open  ]],
Cell[80964, 2320, 362, 6, 104, "Text",ExpressionUUID->"a458889a-01ee-4498-aa62-e5a6df235716",
 CellID->1860939573],
Cell[CellGroupData[{
Cell[81351, 2330, 304, 7, 31, "Input",ExpressionUUID->"fb22815e-7dca-46b7-b8b7-389ea8da7c62",
 CellID->1379012114],
Cell[81658, 2339, 420, 9, 32, "Message",ExpressionUUID->"99fdf979-3d72-4859-90da-fa714fa96929",
 CellID->1087786313],
Cell[82081, 2350, 170, 3, 45, "Output",ExpressionUUID->"7e8ed5be-b4a8-4267-9750-a2c2947fc5f5",
 CellID->896275680]
}, Open  ]],
Cell[82266, 2356, 250, 5, 75, "Text",ExpressionUUID->"1e27f4f8-0b92-4b7e-94e1-f9f43e64430b",
 CellID->1255053702],
Cell[82519, 2363, 347, 6, 75, "Text",ExpressionUUID->"1fe8155d-e72f-4799-a0ab-0b4d0847f868",
 CellID->1103188680],
Cell[82869, 2371, 211, 3, 38, "ItemNumbered",ExpressionUUID->"bdcdb5d6-fe3f-4974-a368-e23ff052cfcf",
 CellTags->"3.6.6.2",
 CellID->1872131614],
Cell[83083, 2376, 531, 9, 134, "Text",ExpressionUUID->"1ae51b69-88ba-49c7-a636-8976f7e3e2c0",
 CellID->2133124301],
Cell[CellGroupData[{
Cell[83639, 2389, 442, 10, 54, "Input",ExpressionUUID->"58fdb40f-6caa-4a9e-8493-f61454ffb9c3",
 CellID->134787984],
Cell[84084, 2401, 657, 16, 45, "Output",ExpressionUUID->"4856923b-f5fa-497b-9927-ce01fa0cd378",
 CellID->595460162]
}, Open  ]],
Cell[84756, 2420, 508, 8, 163, "Text",ExpressionUUID->"36b56bd1-e1e2-44e9-9100-8029deea4b6a",
 CellID->625147714]
}, Open  ]],
Cell[CellGroupData[{
Cell[85301, 2433, 180, 2, 66, "Subsubsection",ExpressionUUID->"748199af-d81b-4a3f-a504-9a94d188c383",
 CellID->1207557680],
Cell[85484, 2437, 856, 12, 252, "Text",ExpressionUUID->"71abc4d7-ff3d-414a-9130-6140ba84d012",
 CellID->1248213961],
Cell[CellGroupData[{
Cell[86365, 2453, 372, 8, 54, "Input",ExpressionUUID->"a0d7b231-a0a8-4f12-9522-04a722cb87d1",
 CellID->483930959],
Cell[86740, 2463, 275, 7, 45, "Output",ExpressionUUID->"1a1efde7-2130-4d69-8870-9af9a6ab9274",
 CellID->829667477]
}, Open  ]],
Cell[CellGroupData[{
Cell[87052, 2475, 273, 5, 31, "Input",ExpressionUUID->"78d0fd2d-55da-4c80-a01f-21d91a67df93",
 CellID->1758577045],
Cell[87328, 2482, 274, 7, 45, "Output",ExpressionUUID->"3bbc4819-fe8e-49d2-96e5-687da77beb7f",
 CellID->1905687357]
}, Open  ]],
Cell[87617, 2492, 155, 2, 45, "Text",ExpressionUUID->"afc3e86c-0a75-4414-818f-8711142e5e73",
 CellID->1316297741],
Cell[CellGroupData[{
Cell[87797, 2498, 200, 3, 31, "Input",ExpressionUUID->"3288824c-7397-4370-8624-ea2932d3a050",
 CellID->835341738],
Cell[88000, 2503, 275, 7, 45, "Output",ExpressionUUID->"b2504793-091d-4161-ab1e-4d4ffdc64776",
 CellID->577048094]
}, Open  ]],
Cell[88290, 2513, 277, 5, 75, "Text",ExpressionUUID->"5dc7bde9-fe99-48e7-b13f-2f96f9a67f79",
 CellID->411166006],
Cell[CellGroupData[{
Cell[88592, 2522, 299, 6, 31, "Input",ExpressionUUID->"43c82269-785a-4b60-8ff4-0702c77bed5b",
 CellID->943335804],
Cell[88894, 2530, 304, 7, 45, "Output",ExpressionUUID->"4f6ddb0a-185f-49a3-a1db-6751b8b17c19",
 CellID->2096125859]
}, Open  ]],
Cell[89213, 2540, 254, 5, 75, "Text",ExpressionUUID->"eef41c22-387e-418e-97ce-352d514c6302",
 CellID->118083178],
Cell[89470, 2547, 304, 5, 75, "Text",ExpressionUUID->"4306a133-c7cf-407e-b4b1-a5e5ccbb9090",
 CellID->349082818],
Cell[CellGroupData[{
Cell[89799, 2556, 431, 11, 31, "Input",ExpressionUUID->"d81d0fc1-4833-481c-84a3-8f11d3705d0f",
 CellID->360004469],
Cell[90233, 2569, 330, 7, 45, "Output",ExpressionUUID->"84c0157e-50d8-4aa0-8a2b-adb8ad6be15e",
 CellID->1585545926]
}, Open  ]],
Cell[90578, 2579, 317, 5, 75, "Text",ExpressionUUID->"51a179bd-883a-49e0-afb5-68df09f810b4",
 CellID->145802659],
Cell[90898, 2586, 360, 6, 104, "Text",ExpressionUUID->"4efca506-099e-4d75-b41c-905ceb2f495b",
 CellID->580362418],
Cell[91261, 2594, 763, 11, 252, "Text",ExpressionUUID->"3ddeac45-d59f-4a8f-a600-9fb2913a8cf4",
 CellID->1686074646]
}, Open  ]],
Cell[CellGroupData[{
Cell[92061, 2610, 176, 2, 66, "Subsubsection",ExpressionUUID->"9181ef42-b336-4f48-b836-1fafaf46de0a",
 CellID->377186399],
Cell[92240, 2614, 356, 6, 104, "Text",ExpressionUUID->"2beb3ba3-4ce1-4b4d-9911-6b0ac7ec2c7d",
 CellID->1325897311],
Cell[92599, 2622, 166, 2, 38, "ItemNumbered",ExpressionUUID->"951658a4-e5c5-4a0a-b48e-9e0e8b01f122",
 CellID->2065784705],
Cell[92768, 2626, 276, 5, 75, "Text",ExpressionUUID->"d9c8450c-758e-4a0e-8178-11ef0a94e8e0",
 CellID->1275415886],
Cell[93047, 2633, 164, 2, 45, "Text",ExpressionUUID->"86aa5353-8ee4-479a-b5d0-89323be99185",
 CellID->1303730166],
Cell[CellGroupData[{
Cell[93236, 2639, 508, 14, 54, "Input",ExpressionUUID->"2b69b0be-8d90-4f0e-bada-be32b489a5fc",
 CellID->1017249621],
Cell[93747, 2655, 276, 7, 45, "Output",ExpressionUUID->"316ee8c6-9593-44e0-b568-297085eeee0b",
 CellID->1349651464],
Cell[94026, 2664, 666, 16, 68, "Output",ExpressionUUID->"59c3b815-5d3f-4617-8c36-67bb8c8ad139",
 CellID->1869875834]
}, Open  ]],
Cell[94707, 2683, 299, 5, 75, "Text",ExpressionUUID->"40a161cd-7f74-4d47-a07b-048aa755b149",
 CellID->727451840],
Cell[CellGroupData[{
Cell[95031, 2692, 257, 5, 31, "Input",ExpressionUUID->"554c26c6-0c1e-45b7-8faa-6d9efef8bf09",
 CellID->2028448113],
Cell[95291, 2699, 218, 5, 45, "Output",ExpressionUUID->"0c16b6a2-9864-4d85-9260-f96a38e4313f",
 CellID->1209512686]
}, Open  ]],
Cell[95524, 2707, 193, 2, 45, "Text",ExpressionUUID->"1f9deb00-bef9-42a5-af2a-31eeacd46a20",
 CellID->199511100],
Cell[CellGroupData[{
Cell[95742, 2713, 265, 5, 31, "Input",ExpressionUUID->"daf5d1ac-17fd-469f-a3e0-ef6f34c740a4",
 CellID->1726598444],
Cell[96010, 2720, 242, 6, 45, "Output",ExpressionUUID->"a7dde774-85ae-44b5-b2cd-64929cc6bb47",
 CellID->2144582305]
}, Open  ]],
Cell[96267, 2729, 278, 5, 75, "Text",ExpressionUUID->"b62b7119-3025-4411-992b-85fb77046ee2",
 CellID->677512657],
Cell[96548, 2736, 284, 5, 75, "Text",ExpressionUUID->"7b2b2c39-6f69-4a24-9ced-2f6cffa42aab",
 CellID->731818741],
Cell[CellGroupData[{
Cell[96857, 2745, 340, 7, 31, "Input",ExpressionUUID->"c9119f5f-f211-4f88-9c4c-30ab8f2bc695",
 CellID->1249123748],
Cell[97200, 2754, 193, 4, 45, "Output",ExpressionUUID->"da22ca18-73d3-4ec6-b940-7d44293c9295",
 CellID->511402705]
}, Open  ]],
Cell[97408, 2761, 172, 2, 38, "ItemNumbered",ExpressionUUID->"053c7746-67f5-4030-a6fe-5868287fe51b",
 CellID->915707641],
Cell[97583, 2765, 374, 6, 104, "Text",ExpressionUUID->"6db233e9-f74d-426c-ab55-2c571af2f08e",
 CellID->1430507885],
Cell[CellGroupData[{
Cell[97982, 2775, 323, 7, 31, "Input",ExpressionUUID->"8c2dc06e-6cb1-45aa-88de-a4098404d37e",
 CellID->747239568],
Cell[98308, 2784, 216, 5, 45, "Output",ExpressionUUID->"a15da00d-c6d7-4b30-8a2f-481b8e33d10f",
 CellID->1506685675]
}, Open  ]],
Cell[98539, 2792, 463, 7, 134, "Text",ExpressionUUID->"a682dd5f-88f2-4956-884c-57287f54ae33",
 CellID->1886457948],
Cell[CellGroupData[{
Cell[99027, 2803, 292, 6, 31, "Input",ExpressionUUID->"c1f44fb8-ad95-40b2-8786-129a79a6d94c",
 CellID->1542407442],
Cell[99322, 2811, 628, 17, 45, "Output",ExpressionUUID->"8f91d184-fada-4bca-9ace-e0e9e5926d14",
 CellID->1584681440]
}, Open  ]],
Cell[99965, 2831, 185, 2, 45, "Text",ExpressionUUID->"f27230b1-6697-42ef-a763-92392c065be6",
 CellID->648771986],
Cell[CellGroupData[{
Cell[100175, 2837, 295, 6, 31, "Input",ExpressionUUID->"442e30df-7a6e-4f14-b8b4-790ed56e6421",
 CellID->102411810],
Cell[100473, 2845, 397, 11, 45, "Output",ExpressionUUID->"59d46624-4c2e-4804-b706-73f4555a1094",
 CellID->2001557891]
}, Open  ]],
Cell[100885, 2859, 221, 5, 45, "Text",ExpressionUUID->"148c85b5-1e4b-4e98-a212-012c7505439f",
 CellID->1999627429],
Cell[CellGroupData[{
Cell[101131, 2868, 268, 5, 31, "Input",ExpressionUUID->"5e9045ef-6480-4a0c-915d-230a7b71a469",
 CellID->259987678],
Cell[101402, 2875, 226, 5, 45, "Output",ExpressionUUID->"8279a10f-2283-4958-8687-569dd9406185",
 CellID->1659107859]
}, Open  ]],
Cell[101643, 2883, 371, 6, 104, "Text",ExpressionUUID->"4a7f04db-3b42-4428-b525-d5e266c56e13",
 CellID->1698113565],
Cell[CellGroupData[{
Cell[102039, 2893, 252, 5, 31, "Input",ExpressionUUID->"17d1d0da-fae7-4e8c-a6a3-a02228fb7cb1",
 CellID->764518691],
Cell[102294, 2900, 297, 8, 45, "Output",ExpressionUUID->"f4f52d63-a972-4a54-bf14-e5dcd40f05b6",
 CellID->526607410]
}, Open  ]],
Cell[102606, 2911, 161, 2, 45, "Text",ExpressionUUID->"df9449aa-018c-4450-8562-e87f50d4c89a",
 CellID->910630583],
Cell[CellGroupData[{
Cell[102792, 2917, 328, 7, 31, "Input",ExpressionUUID->"47a80d41-7864-4939-afff-c89534c6544d",
 CellID->1510415363],
Cell[103123, 2926, 466, 12, 45, "Output",ExpressionUUID->"66d305ab-6bce-4ee8-b875-5a1922a31e41",
 CellID->1506177811]
}, Open  ]],
Cell[103604, 2941, 195, 2, 38, "ItemNumbered",ExpressionUUID->"78827053-dbe4-4c53-80c0-f545a2063320",
 CellID->1940722288],
Cell[103802, 2945, 337, 6, 75, "Text",ExpressionUUID->"6392b9fe-a7ab-445b-a383-92891a0d1475",
 CellID->1737863780],
Cell[104142, 2953, 645, 17, 78, "Input",ExpressionUUID->"56609932-be0c-4bce-b6ee-259cacc266e6",
 CellID->897601653],
Cell[104790, 2972, 226, 5, 45, "Text",ExpressionUUID->"800623b2-d28e-4e9f-bd70-d2377d94a72f",
 CellID->117792594],
Cell[CellGroupData[{
Cell[105041, 2981, 276, 5, 31, "Input",ExpressionUUID->"69bf0cd0-ae53-4518-afcf-45ad5df221f3",
 CellID->589282387],
Cell[105320, 2988, 386, 10, 45, "Output",ExpressionUUID->"8c0e8949-9235-44ac-a71f-2c9721600422",
 CellID->571783642]
}, Open  ]],
Cell[105721, 3001, 1156, 17, 340, "Text",ExpressionUUID->"bb7ee2a1-433b-4578-a257-ac9f74635cd6",
 CellID->2125834416],
Cell[106880, 3020, 684, 10, 193, "Text",ExpressionUUID->"e0a1ff86-c735-4efa-946e-0f0a69652781",
 CellID->413548302],
Cell[107567, 3032, 238, 5, 38, "ItemNumbered",ExpressionUUID->"c42c3548-bb7a-47c8-9d6d-d47d4cf236d0",
 CellTags->"3.6.8.4",
 CellID->330159301],
Cell[107808, 3039, 232, 4, 45, "Text",ExpressionUUID->"5f4df91a-ff52-4360-9b32-dbcc1213664d",
 CellID->2037111706],
Cell[108043, 3045, 560, 9, 163, "Text",ExpressionUUID->"5be7de10-6559-4c91-8d7e-7636da416be3",
 CellID->1777432853],
Cell[CellGroupData[{
Cell[108628, 3058, 294, 6, 31, "Input",ExpressionUUID->"58af54ea-b04e-466e-a67c-650fb87bb48d",
 CellID->1102781910],
Cell[108925, 3066, 629, 17, 45, "Output",ExpressionUUID->"3cc9c6b0-668a-4a98-a091-bca035446686",
 CellID->659056005]
}, Open  ]],
Cell[109569, 3086, 216, 4, 45, "Text",ExpressionUUID->"3204e931-87f9-4ca7-88cb-706c8e1d5531",
 CellID->33624809],
Cell[109788, 3092, 231, 6, 45, "Text",ExpressionUUID->"a94f1beb-0a40-442c-b26b-3a9de4176f48",
 CellID->343965702],
Cell[CellGroupData[{
Cell[110044, 3102, 354, 8, 31, "Input",ExpressionUUID->"bff4d020-50e1-4ca4-8708-eab61d8813d3",
 CellID->1370505709],
Cell[110401, 3112, 925, 29, 68, "Output",ExpressionUUID->"7eb275a6-3317-4ca3-84f2-d9adca2ba493",
 CellID->213737062]
}, Open  ]],
Cell[111341, 3144, 363, 6, 104, "Text",ExpressionUUID->"54eab39e-763c-43e3-8dd6-522b21199650",
 CellID->1999618649],
Cell[111707, 3152, 326, 7, 75, "Text",ExpressionUUID->"c23027f3-0819-4298-ac38-85130f52a4fe",
 CellID->470913743],
Cell[CellGroupData[{
Cell[112058, 3163, 458, 11, 31, "Input",ExpressionUUID->"8c783c0a-5fd4-46d0-8251-0b317d944b27",
 CellID->1085733529],
Cell[112519, 3176, 1200, 40, 68, "Output",ExpressionUUID->"58f26895-db8d-4a57-97d9-e710eb34c1d9",
 CellID->967794047]
}, Open  ]],
Cell[113734, 3219, 676, 10, 163, "Text",ExpressionUUID->"1bf30001-af80-4e74-ab13-bfb54e22af3b",
 CellID->1779342715],
Cell[114413, 3231, 238, 6, 45, "Text",ExpressionUUID->"5997bde3-99f6-4aba-a8b5-29d0a4dd0409",
 CellID->2086878280],
Cell[CellGroupData[{
Cell[114676, 3241, 324, 7, 31, "Input",ExpressionUUID->"207e3c71-cc64-41e0-9d50-54db992dd2f5",
 CellID->161523329],
Cell[115003, 3250, 570, 16, 45, "Output",ExpressionUUID->"7e401ef8-e781-45ac-9aec-9342eec2bb15",
 CellID->1507254627]
}, Open  ]],
Cell[115588, 3269, 457, 9, 104, "Text",ExpressionUUID->"1c88cef6-469a-41db-b047-fbd988c5ab96",
 CellID->711415977],
Cell[CellGroupData[{
Cell[116070, 3282, 394, 9, 31, "Input",ExpressionUUID->"87529532-f9ac-41cd-856b-157e03818046",
 CellID->1510753809],
Cell[116467, 3293, 404, 11, 45, "Output",ExpressionUUID->"5983e5ea-31a2-4e7d-8b38-2b6dc705f8d1",
 CellID->1351080791]
}, Open  ]],
Cell[116886, 3307, 307, 5, 75, "Text",ExpressionUUID->"85876c16-638b-42cd-8ee0-14529994c260",
 CellID->122770959],
Cell[117196, 3314, 238, 6, 45, "Text",ExpressionUUID->"ec90c33d-8b69-491f-8ae1-cfb2c54ed7e4",
 CellID->848417851],
Cell[CellGroupData[{
Cell[117459, 3324, 301, 6, 31, "Input",ExpressionUUID->"d237fd99-e5f3-4480-a59a-aca9ab936a02",
 CellID->1163331370],
Cell[117763, 3332, 236, 5, 45, "Output",ExpressionUUID->"96a395a4-dae6-4b17-89b1-ef31bf7402aa",
 CellID->2071828573]
}, Open  ]],
Cell[118014, 3340, 245, 5, 75, "Text",ExpressionUUID->"e70b0eb8-8833-49b4-b66a-42892be447bf",
 CellID->1922973953],
Cell[118262, 3347, 221, 6, 45, "Text",ExpressionUUID->"746a87e1-8c58-49ba-ae0f-3180259f2f7e",
 CellID->1941824368],
Cell[CellGroupData[{
Cell[118508, 3357, 266, 5, 31, "Input",ExpressionUUID->"8c1ec849-1690-4af2-90d8-290dc7efa322",
 CellID->706998178],
Cell[118777, 3364, 479, 13, 45, "Output",ExpressionUUID->"2dfb0948-f126-4cb2-a3f6-6b336b642ec1",
 CellID->727972850]
}, Open  ]],
Cell[119271, 3380, 230, 4, 45, "Text",ExpressionUUID->"3f36935b-e867-4bfd-94a7-2e4b0a8bd9b8",
 CellID->825352991],
Cell[119504, 3386, 187, 2, 45, "Text",ExpressionUUID->"153f9a19-75e5-4743-8aaa-7403fa0f2926",
 CellID->1110843764],
Cell[119694, 3390, 1158, 29, 101, "Input",ExpressionUUID->"19775520-a6e0-4784-83c6-6cc3fd5df2ca",
 CellID->1480022879],
Cell[120855, 3421, 163, 2, 45, "Text",ExpressionUUID->"774c421f-ba92-47ef-9150-e7ec4685e3e6",
 CellID->210814571],
Cell[CellGroupData[{
Cell[121043, 3427, 247, 4, 31, "Input",ExpressionUUID->"2e99ffdc-88d3-4cec-93ea-16f28d05c9f1",
 CellID->628960713],
Cell[121293, 3433, 481, 13, 45, "Output",ExpressionUUID->"f8cfc43b-13ef-427e-9981-313832739437",
 CellID->297927186]
}, Open  ]],
Cell[121789, 3449, 236, 4, 45, "Text",ExpressionUUID->"6b67f890-2f5e-476d-96eb-b55126f09069",
 CellID->1477833945],
Cell[122028, 3455, 350, 6, 104, "Text",ExpressionUUID->"212fcc4f-7876-4f12-b701-ce74de2fdf4a",
 CellID->159252413],
Cell[122381, 3463, 793, 22, 78, "Input",ExpressionUUID->"8a0d6d8d-dcb7-40c0-a541-963084aad853",
 CellID->1793581559],
Cell[123177, 3487, 165, 2, 45, "Text",ExpressionUUID->"8e5a85bc-2cdb-4718-9fe8-f86d4699793d",
 CellID->641264680],
Cell[CellGroupData[{
Cell[123367, 3493, 247, 4, 31, "Input",ExpressionUUID->"e318ccf8-18ad-435c-bec2-252f3cf1b2fe",
 CellID->1868161],
Cell[123617, 3499, 481, 13, 45, "Output",ExpressionUUID->"608823fe-a750-461d-97c3-b4bf3c2e52aa",
 CellID->355472786]
}, Open  ]],
Cell[124113, 3515, 462, 7, 134, "Text",ExpressionUUID->"270c1dfb-2fce-4b91-b4d1-6a0b977f79c8",
 CellID->131608348],
Cell[124578, 3524, 300, 5, 75, "Text",ExpressionUUID->"a65d9485-1053-4b36-8ba8-57e3ecb69ab1",
 CellID->416818108],
Cell[124881, 3531, 217, 4, 45, "Text",ExpressionUUID->"70782728-6677-4771-89fe-c498e266b0b7",
 CellID->2113852735],
Cell[125101, 3537, 240, 5, 75, "Text",ExpressionUUID->"3461e492-6460-446d-bf12-4e0d683ece5c",
 CellID->1700944824],
Cell[125344, 3544, 1934, 54, 172, "Input",ExpressionUUID->"a60bbf55-64e8-499e-b918-437db226738d",
 CellID->1938162383],
Cell[127281, 3600, 165, 2, 45, "Text",ExpressionUUID->"c02ca5cc-ec54-45b6-9f59-3b771cbb6d89",
 CellID->587321984],
Cell[CellGroupData[{
Cell[127471, 3606, 250, 4, 31, "Input",ExpressionUUID->"ce4faa4b-1cf2-42d7-afd2-b2f3fa522580",
 CellID->41802913],
Cell[127724, 3612, 479, 13, 45, "Output",ExpressionUUID->"db14cf08-de70-4289-8bd3-b25a60105168",
 CellID->514781356]
}, Open  ]],
Cell[128218, 3628, 353, 6, 104, "Text",ExpressionUUID->"bc42a042-b4b0-4dd5-943b-f704c3bfee49",
 CellID->1866120176],
Cell[128574, 3636, 445, 9, 54, "Input",ExpressionUUID->"d35f76a8-e479-4102-bc72-b050005b2a50",
 CellID->1806317456]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[129068, 3651, 200, 3, 68, "Subsection",ExpressionUUID->"1690f11e-bbfe-4b90-8d0f-64f3b5d1fc92",
 CellID->140882736],
Cell[CellGroupData[{
Cell[129293, 3658, 182, 2, 66, "Subsubsection",ExpressionUUID->"4e1f28b1-a5b9-453f-9c3d-d135d2595910",
 CellID->1289164958],
Cell[129478, 3662, 305, 5, 75, "Text",ExpressionUUID->"dd80ce96-0162-449c-8eeb-f10732c7ccda",
 CellID->1032934523],
Cell[CellGroupData[{
Cell[129808, 3671, 331, 7, 54, "Input",ExpressionUUID->"a0de7b65-0cf3-4679-ad2d-7826d7ca2d90",
 CellID->124098698],
Cell[130142, 3680, 245, 5, 45, "Output",ExpressionUUID->"531ade9e-e1bf-4a4a-acca-54f1ffbbb969",
 CellID->756608618]
}, Open  ]],
Cell[CellGroupData[{
Cell[130424, 3690, 254, 5, 31, "Input",ExpressionUUID->"f4681033-d388-4c39-a253-36706b993118",
 CellID->218566154],
Cell[130681, 3697, 258, 6, 45, "Output",ExpressionUUID->"dd18fed0-3c75-499f-a400-ac60cb0cfe5b",
 CellID->1688319621]
}, Open  ]],
Cell[CellGroupData[{
Cell[130976, 3708, 257, 5, 31, "Input",ExpressionUUID->"30d3eee6-3e55-45d2-9681-1bc4ae7fa776",
 CellID->1342281913],
Cell[131236, 3715, 258, 6, 45, "Output",ExpressionUUID->"23332004-1c85-4836-b17f-83d6ed657066",
 CellID->957550455]
}, Open  ]],
Cell[CellGroupData[{
Cell[131531, 3726, 203, 3, 31, "Input",ExpressionUUID->"ea84985b-2dbe-451d-afbf-9b3816ff4703",
 CellID->1903062299],
Cell[131737, 3731, 248, 5, 45, "Output",ExpressionUUID->"2e90414b-964a-4406-bde6-78abc4a62adf",
 CellID->1704801764]
}, Open  ]],
Cell[132000, 3739, 481, 8, 134, "Text",ExpressionUUID->"d7fe0061-321a-45fd-b20a-e96c3f5080e2",
 CellID->876429274],
Cell[CellGroupData[{
Cell[132506, 3751, 348, 8, 54, "Input",ExpressionUUID->"abdac3f4-eb11-455e-82ce-36b7fa68f812",
 CellID->304240198],
Cell[132857, 3761, 258, 6, 45, "Output",ExpressionUUID->"33189028-106d-4a3d-9cc2-bb6283693bc0",
 CellID->394489450]
}, Open  ]],
Cell[133130, 3770, 222, 5, 45, "Text",ExpressionUUID->"999f1924-00eb-475a-a99b-baa36b83c858",
 CellID->902167861],
Cell[CellGroupData[{
Cell[133377, 3779, 256, 5, 31, "Input",ExpressionUUID->"fa9b90b9-3aa0-4054-bdc9-31c71e31f415",
 CellID->2082611281],
Cell[133636, 3786, 246, 5, 45, "Output",ExpressionUUID->"fa321a97-23e5-49e6-8c7b-79dd9edf2e36",
 CellID->1940116113]
}, Open  ]],
Cell[CellGroupData[{
Cell[133919, 3796, 316, 7, 54, "Input",ExpressionUUID->"9b99695a-5390-499e-ac16-80328dd5204f",
 CellID->525998583],
Cell[134238, 3805, 259, 6, 45, "Output",ExpressionUUID->"143d9b85-92e8-4c0b-9bd6-72b46542c4a7",
 CellID->1803744622]
}, Open  ]],
Cell[134512, 3814, 449, 7, 134, "Text",ExpressionUUID->"8171f7ba-6e36-4cfd-92de-57011a904dda",
 CellID->1656700902],
Cell[CellGroupData[{
Cell[134986, 3825, 283, 6, 31, "Input",ExpressionUUID->"31068ba2-355c-4ced-80ee-333492ea6515",
 CellID->558340227],
Cell[135272, 3833, 261, 6, 45, "Output",ExpressionUUID->"57313a0f-0554-4466-9bda-01df0c859873",
 CellID->1010133199]
}, Open  ]],
Cell[CellGroupData[{
Cell[135570, 3844, 283, 6, 31, "Input",ExpressionUUID->"641e4c01-d535-4494-bb9b-17bf492fa2da",
 CellID->1560019709],
Cell[135856, 3852, 438, 9, 32, "Message",ExpressionUUID->"c38b6f26-f832-496d-9009-fbab01785033",
 CellID->1902158819],
Cell[136297, 3863, 261, 6, 45, "Output",ExpressionUUID->"f1e5780b-8a2a-49c5-8709-5804dc35d5b3",
 CellID->2141701691]
}, Open  ]],
Cell[136573, 3872, 338, 6, 75, "Text",ExpressionUUID->"98e10074-8f1a-493b-82bf-7c102d2433a9",
 CellID->1606913270],
Cell[136914, 3880, 249, 5, 31, "Input",ExpressionUUID->"9c7fb616-62b2-4282-8e24-9f4875b03b77",
 CellID->253026017]
}, Open  ]],
Cell[CellGroupData[{
Cell[137200, 3890, 159, 2, 66, "Subsubsection",ExpressionUUID->"547e4b0e-7f97-442d-8606-85e5b0cfb05a",
 CellID->848537266],
Cell[137362, 3894, 745, 11, 193, "Text",ExpressionUUID->"5212325d-c360-48e1-b622-024809a86390",
 CellID->2074413582],
Cell[CellGroupData[{
Cell[138132, 3909, 369, 8, 54, "Input",ExpressionUUID->"96f9b8e0-9cb6-4799-9945-564f4c3830b0",
 CellID->26253713],
Cell[138504, 3919, 272, 7, 45, "Output",ExpressionUUID->"3ab698de-d826-4f20-b85f-e25d2190f195",
 CellID->5139335]
}, Open  ]],
Cell[CellGroupData[{
Cell[138813, 3931, 256, 5, 31, "Input",ExpressionUUID->"3f19a796-ad04-4e83-b0e1-0655caa363dd",
 CellID->1628709063],
Cell[139072, 3938, 261, 6, 45, "Output",ExpressionUUID->"e0a5e7ac-9b27-41be-a8f2-3589cb236702",
 CellID->602455305]
}, Open  ]],
Cell[CellGroupData[{
Cell[139370, 3949, 267, 5, 31, "Input",ExpressionUUID->"5ac846ec-413a-4dc6-b24e-40b07e2fa5d3",
 CellID->590164159],
Cell[139640, 3956, 285, 7, 45, "Output",ExpressionUUID->"3520275e-2b56-4ec4-8c78-fc0c92fa2426",
 CellID->460379791]
}, Open  ]],
Cell[139940, 3966, 313, 5, 75, "Text",ExpressionUUID->"b1a5a8ed-8842-49e4-a33d-d8ab433b6b86",
 CellID->219567196],
Cell[CellGroupData[{
Cell[140278, 3975, 201, 3, 31, "Input",ExpressionUUID->"c6959a24-9dfc-48e4-8a60-b5775f9b60e5",
 CellID->1883429081],
Cell[140482, 3980, 276, 7, 45, "Output",ExpressionUUID->"81d3661b-0f37-4ae7-80c2-4325432609b2",
 CellID->797690328]
}, Open  ]],
Cell[140773, 3990, 455, 7, 134, "Text",ExpressionUUID->"38b84f38-2e7e-4991-a675-827cc8985bbe",
 CellID->345030841],
Cell[141231, 3999, 349, 6, 104, "Text",ExpressionUUID->"a8eeee6c-c568-4848-a05a-1d08130b1e9e",
 CellID->1677245460]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[141629, 4011, 165, 2, 68, "Subsection",ExpressionUUID->"840a7ae6-5313-4ca2-9af6-fd343162f49e",
 CellID->2107899961],
Cell[141797, 4015, 601, 9, 163, "Text",ExpressionUUID->"78fd7072-0cec-4af2-bbf6-1f4c4ae40d9d",
 CellID->436919968],
Cell[142401, 4026, 313, 5, 75, "Text",ExpressionUUID->"c8cb3c4f-d79c-4efc-bd21-bb683c440f96",
 CellID->2068433144],
Cell[CellGroupData[{
Cell[142739, 4035, 176, 2, 66, "Subsubsection",ExpressionUUID->"2aa8a54e-1b2a-4ad1-96de-32855fc48a42",
 CellID->1090537575],
Cell[142918, 4039, 622, 9, 163, "Text",ExpressionUUID->"0bd84058-5fb3-4d9d-a598-a50718209790",
 CellID->1740073585],
Cell[143543, 4050, 157, 2, 38, "ItemNumbered",ExpressionUUID->"73a956c0-835b-4221-b8d1-db9ea432a6a4",
 CellID->680235517],
Cell[CellGroupData[{
Cell[143725, 4056, 354, 9, 39, "Input",ExpressionUUID->"375d6d38-5a45-4b24-a190-1b8ee375fb97",
 CellID->692785008],
Cell[144082, 4067, 412, 13, 56, "Output",ExpressionUUID->"4827d489-65d3-46b3-b8a1-28f8c10237b0",
 CellID->646656862]
}, Open  ]],
Cell[CellGroupData[{
Cell[144531, 4085, 258, 5, 31, "Input",ExpressionUUID->"e0a28c79-e05b-4fde-ad54-642fff5bea66",
 CellID->676630627],
Cell[144792, 4092, 519, 18, 56, "Output",ExpressionUUID->"017939c5-30a1-464a-8342-43d3c7802c81",
 CellID->310464698]
}, Open  ]],
Cell[CellGroupData[{
Cell[145348, 4115, 258, 5, 31, "Input",ExpressionUUID->"601a27a6-df41-4a48-bbd4-47a5601a8cc7",
 CellID->1441940969],
Cell[145609, 4122, 362, 11, 56, "Output",ExpressionUUID->"d0b0d80b-062c-4b0e-8d7c-6d9ef86a3f83",
 CellID->1584074708]
}, Open  ]],
Cell[145986, 4136, 342, 6, 75, "Text",ExpressionUUID->"81f88af5-503e-4936-869e-3279b19f49b6",
 CellID->1188845497],
Cell[CellGroupData[{
Cell[146353, 4146, 271, 5, 31, "Input",ExpressionUUID->"4172fe5f-1792-4cde-8d0d-a4c4decdb1b6",
 CellID->1719703633],
Cell[146627, 4153, 1031, 37, 93, "Output",ExpressionUUID->"45151021-a260-4cfe-9a78-e080936d6bc3",
 CellID->1055722361]
}, Open  ]],
Cell[147673, 4193, 245, 5, 38, "ItemNumbered",ExpressionUUID->"be4d3a74-64a6-4d58-9026-bfb7b342ff0a",
 CellTags->"3.8.1.2",
 CellID->1015829813],
Cell[147921, 4200, 212, 3, 45, "Text",ExpressionUUID->"71a8cddf-c21c-49b0-b57e-376981cb2e39",
 CellID->556673441],
Cell[148136, 4205, 208, 4, 45, "Text",ExpressionUUID->"94b5d6eb-ddd5-4352-b39e-2a2104e51f03",
 CellID->1571756555],
Cell[148347, 4211, 583, 9, 163, "Text",ExpressionUUID->"7c9c3a81-6876-4e52-8633-6def589d5a37",
 CellID->316078138],
Cell[148933, 4222, 218, 4, 45, "Text",ExpressionUUID->"168c95da-fc51-486b-95df-f1a5a131cf82",
 CellID->1485668291],
Cell[149154, 4228, 477, 8, 134, "Text",ExpressionUUID->"f1a8b83c-ff80-44d6-9102-e41580570c43",
 CellID->834603168],
Cell[149634, 4238, 491, 12, 54, "Input",ExpressionUUID->"6dd56de6-77d5-4430-9550-5512739123cd",
 CellID->229627653],
Cell[150128, 4252, 287, 5, 75, "Text",ExpressionUUID->"dbc4898f-e45d-4c9c-b807-5b67061d7ecc",
 CellID->1614081921],
Cell[150418, 4259, 182, 2, 45, "Text",ExpressionUUID->"a230365f-1511-4992-8a12-ff966f067349",
 CellID->1654019374],
Cell[150603, 4263, 593, 16, 78, "Input",ExpressionUUID->"0f1904fd-c210-4daa-b449-2797c7c543b7",
 CellID->4089776],
Cell[151199, 4281, 170, 2, 45, "Text",ExpressionUUID->"524137f8-cfed-4eb2-8d39-ea5219f91e1d",
 CellID->586239352],
Cell[CellGroupData[{
Cell[151394, 4287, 261, 5, 31, "Input",ExpressionUUID->"97cb14b8-8f03-4a8a-b24e-ccd1f30a6805",
 CellID->35737644],
Cell[151658, 4294, 905, 32, 93, "Output",ExpressionUUID->"f4b0514f-8f7f-4e36-8644-eb02fba97d6c",
 CellID->82162071]
}, Open  ]],
Cell[152578, 4329, 512, 9, 104, "Text",ExpressionUUID->"b0773bc5-3b6b-43c7-a1a5-19e9eec59ce6",
 CellID->65942276],
Cell[CellGroupData[{
Cell[153115, 4342, 302, 6, 31, "Input",ExpressionUUID->"59fa9427-6206-4818-a552-709c913f44df",
 CellID->1259998457],
Cell[153420, 4350, 1512, 58, 119, "Output",ExpressionUUID->"b246e4c4-3ad9-4fd5-b0ec-9f803bf84d5a",
 CellID->972162103]
}, Open  ]],
Cell[154947, 4411, 227, 4, 45, "Text",ExpressionUUID->"bd557d8d-06c1-4136-b2ef-54c3d059c476",
 CellID->1072878745],
Cell[155177, 4417, 191, 2, 45, "Text",ExpressionUUID->"040fe343-9657-41f8-86b4-eec5eb0c341d",
 CellID->1600367003],
Cell[155371, 4421, 1229, 34, 148, "Input",ExpressionUUID->"c7686af0-bc75-4943-be59-756525fcbce8",
 CellID->1700652202],
Cell[156603, 4457, 222, 5, 45, "Text",ExpressionUUID->"2177e9e2-a156-44f2-b03c-aad750756f48",
 CellID->180081506],
Cell[CellGroupData[{
Cell[156850, 4466, 264, 5, 31, "Input",ExpressionUUID->"2cad240a-8e75-44f8-9f5c-ba8b4cc2ca60",
 CellID->2114692260],
Cell[157117, 4473, 1537, 56, 170, "Output",ExpressionUUID->"8012f3f7-0945-4e1d-a776-2ed39a7698a9",
 CellID->375360205]
}, Open  ]],
Cell[158669, 4532, 262, 5, 45, "Text",ExpressionUUID->"1a99cc13-da2e-4588-a9f9-6daeefff2e0d",
 CellID->1370564269],
Cell[158934, 4539, 317, 5, 75, "Text",ExpressionUUID->"89f95b15-25c7-4708-b700-4bb1cba6f45e",
 CellID->1164071361],
Cell[159254, 4546, 796, 23, 78, "Input",ExpressionUUID->"60a2533c-a83a-4f6f-b286-cc0f6ac9854e",
 CellID->1688815148],
Cell[160053, 4571, 163, 2, 45, "Text",ExpressionUUID->"a0b1d59e-156b-4e28-9f1b-8f08891df4e0",
 CellID->941027624],
Cell[CellGroupData[{
Cell[160241, 4577, 263, 5, 31, "Input",ExpressionUUID->"982ec457-4dc9-4f9b-a70e-9fe0e7166e5f",
 CellID->1673633504],
Cell[160507, 4584, 1491, 55, 170, "Output",ExpressionUUID->"bb2a7d70-263f-481e-925a-a268b2cc76cd",
 CellID->1977408698]
}, Open  ]],
Cell[162013, 4642, 217, 4, 45, "Text",ExpressionUUID->"b10e8ba7-e420-479d-90bb-538c7c4da173",
 CellID->1998549961],
Cell[162233, 4648, 189, 2, 45, "Text",ExpressionUUID->"262b76e7-52bd-41ba-a018-7e3426cc68b8",
 CellID->837471800],
Cell[162425, 4652, 1910, 53, 196, "Input",ExpressionUUID->"d5f1fb5d-472d-4f28-a0e5-2cfa3a0ecc40",
 CellID->438679564],
Cell[164338, 4707, 163, 2, 45, "Text",ExpressionUUID->"8e8cbc6c-e948-46ba-86e9-7231f3f032f4",
 CellID->204464260],
Cell[CellGroupData[{
Cell[164526, 4713, 266, 5, 31, "Input",ExpressionUUID->"c819a72c-c332-48fd-bf77-ee1722e40a2a",
 CellID->1036003604],
Cell[164795, 4720, 1467, 55, 170, "Output",ExpressionUUID->"fc810709-c34a-4646-a7ef-6e94d37b389f",
 CellID->2080167342]
}, Open  ]],
Cell[166277, 4778, 217, 4, 45, "Text",ExpressionUUID->"a114464f-9e87-45a5-b099-528afca56e62",
 CellID->338743834],
Cell[166497, 4784, 433, 7, 104, "Text",ExpressionUUID->"f642d97e-8fe7-4721-bc34-fe232d0ce00e",
 CellID->288469841],
Cell[CellGroupData[{
Cell[166955, 4795, 363, 9, 31, "Input",ExpressionUUID->"32cd2d69-7205-4668-b5ee-cdfb18f5a36a",
 CellID->1354174068],
Cell[167321, 4806, 227, 5, 45, "Output",ExpressionUUID->"af5cf65a-c216-48f1-83fb-5d2d67f4e3cf",
 CellID->1801078924]
}, Open  ]],
Cell[CellGroupData[{
Cell[167585, 4816, 366, 9, 31, "Input",ExpressionUUID->"e6855f56-0e59-4d70-b077-ba5c54acc9b1",
 CellID->2006251837],
Cell[167954, 4827, 227, 5, 45, "Output",ExpressionUUID->"b2e57400-549f-492b-bbfd-d342de3ff0fa",
 CellID->300009028]
}, Open  ]],
Cell[168196, 4835, 617, 9, 193, "Text",ExpressionUUID->"046c15f5-f40b-49e1-9d86-ea8dbf261688",
 CellID->2107614087],
Cell[168816, 4846, 250, 5, 31, "Input",ExpressionUUID->"8dd32d6d-2c7c-433a-b4de-4464e3523228",
 CellID->1421551012]
}, Open  ]],
Cell[CellGroupData[{
Cell[169103, 4856, 176, 2, 66, "Subsubsection",ExpressionUUID->"f02450c7-305e-45b4-b7bf-ba165f01ba0e",
 CellID->296740282],
Cell[169282, 4860, 750, 11, 222, "Text",ExpressionUUID->"186839ea-3bb9-46c6-b540-61c044d135b3",
 CellID->2034063011],
Cell[170035, 4873, 185, 2, 38, "ItemNumbered",ExpressionUUID->"29360193-623c-4b69-b536-26052f58f4eb",
 CellID->1700064911],
Cell[CellGroupData[{
Cell[170245, 4879, 435, 11, 31, "Input",ExpressionUUID->"10e340ca-b194-47e5-a768-268ba165b031",
 CellID->199176473],
Cell[170683, 4892, 333, 9, 45, "Output",ExpressionUUID->"df7be390-4ca4-4d98-842b-3d7d1ff0bfc8",
 CellID->806952419]
}, Open  ]],
Cell[171031, 4904, 163, 2, 45, "Text",ExpressionUUID->"f3902a23-ff5b-425d-8bf8-f2f627337672",
 CellID->1090075328],
Cell[CellGroupData[{
Cell[171219, 4910, 239, 4, 31, "Input",ExpressionUUID->"384b59cf-493f-40a9-8aca-b11fb2a3bebd",
 CellID->261923297],
Cell[171461, 4916, 372, 11, 45, "Output",ExpressionUUID->"3b26fa84-62ef-4dc5-93dd-8ff2dd85e0cb",
 CellID->981465746]
}, Open  ]],
Cell[171848, 4930, 179, 2, 38, "ItemNumbered",ExpressionUUID->"49e9fef4-3de4-4592-a2ab-76c826040172",
 CellID->672900415],
Cell[172030, 4934, 149, 2, 45, "Text",ExpressionUUID->"43bfb341-82a6-487f-b3d2-d76850a5a99a",
 CellID->788389803],
Cell[CellGroupData[{
Cell[172204, 4940, 464, 12, 31, "Input",ExpressionUUID->"8d0ac721-28ea-490d-ba06-fbbfa98a4d70",
 CellID->1892462597],
Cell[172671, 4954, 649, 21, 45, "Output",ExpressionUUID->"80dd6ec4-8839-4bd1-b74c-de003066fd95",
 CellID->212349615]
}, Open  ]],
Cell[173335, 4978, 175, 2, 45, "Text",ExpressionUUID->"f05142b9-a0c1-436b-9210-f4f02ae2956e",
 CellID->1989641638],
Cell[CellGroupData[{
Cell[173535, 4984, 237, 4, 31, "Input",ExpressionUUID->"887cf6a1-50d4-4d8f-ad50-641e47a02e0d",
 CellID->558488042],
Cell[173775, 4990, 691, 23, 45, "Output",ExpressionUUID->"9518a26c-11d2-4e4d-8318-fa68ae764281",
 CellID->1766898845]
}, Open  ]],
Cell[174481, 5016, 179, 2, 38, "ItemNumbered",ExpressionUUID->"5a0d9215-e943-4dc6-87a3-d4ab256e48ad",
 CellID->865017199],
Cell[174663, 5020, 367, 6, 104, "Text",ExpressionUUID->"b2e3386d-813d-43af-b212-8576c095ed51",
 CellID->2027257050],
Cell[175033, 5028, 596, 16, 78, "Input",ExpressionUUID->"1f3ff250-ba85-4836-b80b-76948b1b5e29",
 CellID->939314898],
Cell[175632, 5046, 173, 2, 45, "Text",ExpressionUUID->"2537d397-e44e-46d2-8343-5734f7966e38",
 CellID->994089066],
Cell[CellGroupData[{
Cell[175830, 5052, 286, 6, 31, "Input",ExpressionUUID->"38fbb10e-5ae3-4b82-9f36-e5f79d7e87c4",
 CellID->895202424],
Cell[176119, 5060, 417, 11, 45, "Output",ExpressionUUID->"291df6e7-1cb7-400d-b76d-a80aadbede4c",
 CellID->1056169243]
}, Open  ]],
Cell[176551, 5074, 401, 7, 104, "Text",ExpressionUUID->"d231d381-626d-4cb7-96ef-e56c6bf43c3a",
 CellID->2084124646]
}, Open  ]],
Cell[CellGroupData[{
Cell[176989, 5086, 178, 2, 66, "Subsubsection",ExpressionUUID->"66b4aeb0-9862-4dc0-b456-82e836dfbe48",
 CellID->1364596080],
Cell[177170, 5090, 350, 6, 104, "Text",ExpressionUUID->"ebaf32c3-1465-489e-aecc-d6b91ade2cb5",
 CellID->1728082853],
Cell[177523, 5098, 180, 2, 38, "ItemNumbered",ExpressionUUID->"5353b32c-c941-446e-a2cb-70f7638f18b8",
 CellID->454734585],
Cell[CellGroupData[{
Cell[177728, 5104, 444, 12, 31, "Input",ExpressionUUID->"1c05d51b-40f0-4826-8e48-d75bc023f0e1",
 CellID->1080400358],
Cell[178175, 5118, 652, 21, 45, "Output",ExpressionUUID->"b68557fe-72dc-4fe2-98c5-d4a0388903fa",
 CellID->1206617999]
}, Open  ]],
Cell[CellGroupData[{
Cell[178864, 5144, 234, 4, 31, "Input",ExpressionUUID->"040905c2-9ff1-4c56-b697-f7785ec08fa5",
 CellID->1550898037],
Cell[179101, 5150, 323, 7, 45, "Output",ExpressionUUID->"fa9eb6e7-afa8-410a-bfa6-9be6fe9c8dff",
 CellID->1815406551]
}, Open  ]],
Cell[179439, 5160, 172, 2, 38, "ItemNumbered",ExpressionUUID->"8845eab1-85e9-4215-a179-15d2dc9ae779",
 CellID->90246081],
Cell[179614, 5164, 555, 9, 134, "Text",ExpressionUUID->"eb171a1b-a945-4f60-9f7f-57cdfd92a074",
 CellID->642428585],
Cell[CellGroupData[{
Cell[180194, 5177, 258, 5, 31, "Input",ExpressionUUID->"19ad978e-a4a7-4c99-9a5f-edb80b16649d",
 CellID->561878045],
Cell[180455, 5184, 550, 17, 45, "Output",ExpressionUUID->"443d2505-1fff-4928-b445-4abca0890bdb",
 CellID->1778707074]
}, Open  ]],
Cell[181020, 5204, 245, 4, 45, "Text",ExpressionUUID->"78b3087e-1d29-4544-9f82-ef8ed2c6cb6f",
 CellID->1757426478],
Cell[181268, 5210, 151, 2, 45, "Text",ExpressionUUID->"1e88e2a6-a914-4024-9893-26a8b319e6f5",
 CellID->307675294],
Cell[CellGroupData[{
Cell[181444, 5216, 515, 14, 31, "Input",ExpressionUUID->"eb45a76e-51aa-4635-b209-9ad8e19bd827",
 CellID->1372367437],
Cell[181962, 5232, 1372, 42, 68, "Output",ExpressionUUID->"023180a9-c1f9-4953-86a0-bd9d6ba166fa",
 CellID->283380566]
}, Open  ]],
Cell[CellGroupData[{
Cell[183371, 5279, 257, 5, 31, "Input",ExpressionUUID->"c4bfe000-2dbd-45f6-a129-cdd267bca34d",
 CellID->1834806890],
Cell[183631, 5286, 1227, 37, 68, "Output",ExpressionUUID->"d4f7a93b-a3cb-4c6e-aa43-cbdbdd8446b1",
 CellID->266675472]
}, Open  ]],
Cell[CellGroupData[{
Cell[184895, 5328, 259, 5, 31, "Input",ExpressionUUID->"8ed37d18-a792-4927-9de5-f4e241ae0a2b",
 CellID->1586807581],
Cell[185157, 5335, 1025, 29, 68, "Output",ExpressionUUID->"fb80ec64-99cd-4a34-b265-fb3c0987be8e",
 CellID->514963169]
}, Open  ]],
Cell[CellGroupData[{
Cell[186219, 5369, 258, 5, 31, "Input",ExpressionUUID->"955a093d-9978-49e4-a16c-09288fbb867f",
 CellID->484162029],
Cell[186480, 5376, 575, 10, 45, "Output",ExpressionUUID->"b4c0dd0d-b9a3-450f-b7f8-683288ed728f",
 CellID->1196015074]
}, Open  ]],
Cell[187070, 5389, 378, 6, 104, "Text",ExpressionUUID->"64e2502c-bd2b-4a86-973d-f2099af76ed2",
 CellID->978412798],
Cell[187451, 5397, 269, 7, 63, "ItemNumbered",ExpressionUUID->"02145ee7-86c3-4535-ac48-a44374598fcf",
 CellTags->"3.8.3.3",
 CellID->729900717],
Cell[187723, 5406, 227, 4, 45, "Text",ExpressionUUID->"184cae7e-ed88-4f3f-87a1-353f3578eb8f",
 CellID->1014758955],
Cell[187953, 5412, 430, 7, 104, "Text",ExpressionUUID->"59160e38-9aa5-4d85-b1a7-414f181d705b",
 CellID->1886115858],
Cell[188386, 5421, 488, 12, 54, "Input",ExpressionUUID->"59240eb6-5b72-4d09-aa5d-a6f36b4fbc7a",
 CellID->203172875],
Cell[188877, 5435, 238, 5, 75, "Text",ExpressionUUID->"bf3799c8-9c22-4e17-ba72-e3b7b07dd9ee",
 CellID->1959912723],
Cell[189118, 5442, 209, 4, 45, "Text",ExpressionUUID->"da302c79-f4a2-4706-8155-9a9d4f7f2856",
 CellID->1474128],
Cell[189330, 5448, 215, 4, 45, "Text",ExpressionUUID->"d1fdaf96-d09f-4178-9e82-31fb4efeb8e1",
 CellID->1153349179],
Cell[CellGroupData[{
Cell[189570, 5456, 418, 11, 31, "Input",ExpressionUUID->"3e183f0a-5648-4069-a508-5b8fbb6aca7e",
 CellID->2066731218],
Cell[189991, 5469, 403, 11, 45, "Output",ExpressionUUID->"9a8cfee7-c985-4049-b0aa-5f84f82addd8",
 CellID->1907644628]
}, Open  ]],
Cell[190409, 5483, 534, 8, 163, "Text",ExpressionUUID->"167e4a9e-d79b-43b6-aac4-5da1e883fa53",
 CellID->1999896733],
Cell[CellGroupData[{
Cell[190968, 5495, 223, 4, 31, "Input",ExpressionUUID->"b6c77f54-e929-4b8f-ab4f-788560c2bea4",
 CellID->909943014],
Cell[191194, 5501, 408, 11, 45, "Output",ExpressionUUID->"bb7d1672-137c-4a17-95f0-2268bb95a8fb",
 CellID->258685857]
}, Open  ]],
Cell[191617, 5515, 317, 5, 75, "Text",ExpressionUUID->"e5b722db-2888-4828-bacd-c3c808fa1d50",
 CellID->1226297071],
Cell[CellGroupData[{
Cell[191959, 5524, 256, 5, 31, "Input",ExpressionUUID->"8be8e08d-f5d3-4fe5-a136-72927fcf0c53",
 CellID->944421512],
Cell[192218, 5531, 299, 7, 45, "Output",ExpressionUUID->"708a47f4-5ec1-4f3d-8321-d02e1313fe5f",
 CellID->1419893444]
}, Open  ]],
Cell[192532, 5541, 281, 5, 75, "Text",ExpressionUUID->"555c0bab-9957-42fc-a382-4d271516b8b5",
 CellID->1310827844],
Cell[CellGroupData[{
Cell[192838, 5550, 284, 6, 31, "Input",ExpressionUUID->"a615c6cb-ab4b-4243-8366-86a5d7a8fa90",
 CellID->366854457],
Cell[193125, 5558, 173, 3, 45, "Output",ExpressionUUID->"817134fe-43b4-4768-98ed-bafdfec45819",
 CellID->1795618051]
}, Open  ]],
Cell[193313, 5564, 174, 2, 45, "Text",ExpressionUUID->"2ed169f4-c9a5-42fd-b767-6aae431458cd",
 CellID->364891866],
Cell[CellGroupData[{
Cell[193512, 5570, 318, 7, 31, "Input",ExpressionUUID->"82df5179-333b-4674-89b6-751b874b3d82",
 CellID->2072477638],
Cell[193833, 5579, 206, 5, 50, "Output",ExpressionUUID->"d3097228-dd80-4d7c-8ffd-11f2f657654f",
 CellID->2011746396]
}, Open  ]],
Cell[194054, 5587, 815, 12, 252, "Text",ExpressionUUID->"524aade0-671a-480f-af64-8b8795c5cdbf",
 CellID->1439139204],
Cell[194872, 5601, 285, 6, 31, "Input",ExpressionUUID->"98dea54a-7a74-4624-8fcf-db55aecdb73f",
 CellID->1665938356],
Cell[195160, 5609, 203, 3, 38, "ItemNumbered",ExpressionUUID->"0c2b7e33-6efa-4167-9a2a-53063e47f60d",
 CellID->835952824],
Cell[195366, 5614, 508, 8, 134, "Text",ExpressionUUID->"dcb65f7c-c4f2-41e9-ae15-1e72f2049627",
 CellID->1021094294],
Cell[195877, 5624, 288, 7, 75, "Text",ExpressionUUID->"c038b36f-3dbe-4744-ae19-e95c54ffaf6b",
 CellID->1394535748],
Cell[CellGroupData[{
Cell[196190, 5635, 571, 16, 54, "Input",ExpressionUUID->"77e68e0c-d1ff-4cae-9cb1-fb28a8913eca",
 CellID->1671807143],
Cell[196764, 5653, 871, 27, 45, "Output",ExpressionUUID->"aa68fb2a-bf49-4156-acab-98d91a0d4d3f",
 CellID->37799774]
}, Open  ]],
Cell[197650, 5683, 209, 6, 45, "Text",ExpressionUUID->"deb68775-9c5a-4715-bd3f-290374660523",
 CellID->1793125753],
Cell[CellGroupData[{
Cell[197884, 5693, 233, 4, 31, "Input",ExpressionUUID->"f4417cad-8fc3-494d-805c-5944e9fd0706",
 CellID->885127132],
Cell[198120, 5699, 304, 7, 45, "Output",ExpressionUUID->"d57d60a1-55ab-4344-984f-45c4333fda94",
 CellID->1501072363]
}, Open  ]],
Cell[198439, 5709, 232, 5, 75, "Text",ExpressionUUID->"dea08758-e03b-4a2c-90a6-97814b10b12b",
 CellID->2032803632],
Cell[CellGroupData[{
Cell[198696, 5718, 552, 16, 31, "Input",ExpressionUUID->"b1ff8147-a938-45ad-83f9-59f234449741",
 CellID->1036536397],
Cell[199251, 5736, 227, 5, 45, "Output",ExpressionUUID->"d8f6253e-e906-44dc-8482-52ed0d653643",
 CellID->1777935575]
}, Open  ]],
Cell[199493, 5744, 159, 2, 45, "Text",ExpressionUUID->"1a9deafb-9c29-4b26-b549-32281004bad3",
 CellID->1675744667],
Cell[CellGroupData[{
Cell[199677, 5750, 662, 19, 78, "Input",ExpressionUUID->"9028088d-0b8e-4d9e-b56a-fe826264f465",
 CellID->53995608],
Cell[200342, 5771, 249, 5, 45, "Output",ExpressionUUID->"002e8e1f-4063-4b12-93d4-a2148add920c",
 CellID->392219130]
}, Open  ]],
Cell[200606, 5779, 401, 7, 104, "Text",ExpressionUUID->"483936cd-ac6b-44d0-b09b-d7e40a2d0b28",
 CellID->1399605267],
Cell[201010, 5788, 253, 5, 31, "Input",ExpressionUUID->"2246c6d3-fcbf-4669-8112-9f6128836552",
 CellID->752273106]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[201312, 5799, 166, 2, 68, "Subsection",ExpressionUUID->"5a4fb234-5bca-4781-bdd9-ebfb5d31b5b6",
 CellID->1610127405],
Cell[201481, 5803, 398, 6, 104, "Text",ExpressionUUID->"f00048ac-3888-4fb1-a165-20575ee5b8c7",
 CellID->969859988],
Cell[CellGroupData[{
Cell[201904, 5813, 202, 3, 66, "Subsubsection",ExpressionUUID->"1223e83a-7f3a-4884-9206-95efed1c98a1",
 CellID->1539340028],
Cell[202109, 5818, 536, 8, 163, "Text",ExpressionUUID->"7e6ef6ba-ad4b-4e79-979c-0b7f81489959",
 CellID->952355187],
Cell[CellGroupData[{
Cell[202670, 5830, 509, 13, 54, "Input",ExpressionUUID->"cd2d86be-fb8a-4304-b6cf-d761d86b48ac",
 CellID->334000742],
Cell[203182, 5845, 261, 6, 45, "Output",ExpressionUUID->"60873056-48f3-4476-835d-d1eb0956d76e",
 CellID->1423583113]
}, Open  ]],
Cell[CellGroupData[{
Cell[203480, 5856, 453, 13, 31, "Input",ExpressionUUID->"abdce0a6-acf4-42f8-a824-96eadbee1e52",
 CellID->1979943606],
Cell[203936, 5871, 333, 9, 45, "Output",ExpressionUUID->"f1781dbc-c71c-484a-a896-ee792b6af25b",
 CellID->636872319]
}, Open  ]],
Cell[204284, 5883, 251, 5, 75, "Text",ExpressionUUID->"75cf2a81-a225-401e-9eae-9002033a5e98",
 CellID->854568785]
}, Open  ]],
Cell[CellGroupData[{
Cell[204572, 5893, 207, 3, 66, "Subsubsection",ExpressionUUID->"d9c635b3-77d0-4102-b61e-65a1365cddcc",
 CellID->366938359],
Cell[204782, 5898, 386, 6, 104, "Text",ExpressionUUID->"04bd0227-6f73-4463-b511-c4d14d7bd65a",
 CellID->1707449176],
Cell[CellGroupData[{
Cell[205193, 5908, 529, 13, 54, "Input",ExpressionUUID->"ea3d2da8-ebac-44e4-9b51-f310e4718208",
 CellID->1638796300],
Cell[205725, 5923, 216, 5, 45, "Output",ExpressionUUID->"9703f5e6-49e7-489f-aa44-7e905c187bad",
 CellID->1583180427]
}, Open  ]],
Cell[CellGroupData[{
Cell[205978, 5933, 478, 12, 31, "Input",ExpressionUUID->"437cc2a8-3979-4bc8-a550-c431f95d3fae",
 CellID->1286629326],
Cell[206459, 5947, 193, 4, 45, "Output",ExpressionUUID->"1c396bb0-6770-4915-89c6-a8683ab356b7",
 CellID->1528095718]
}, Open  ]],
Cell[CellGroupData[{
Cell[206689, 5956, 374, 9, 31, "Input",ExpressionUUID->"c7edb815-33c9-4157-8eab-91838bedcb66",
 CellID->1753986272],
Cell[207066, 5967, 188, 4, 45, "Output",ExpressionUUID->"115525a0-09bd-4ee6-8be2-309052d730f9",
 CellID->1527629748]
}, Open  ]],
Cell[207269, 5974, 245, 5, 75, "Text",ExpressionUUID->"ac9e502c-43af-4300-ad6e-c64d34f63b77",
 CellID->1706174751],
Cell[207517, 5981, 710, 11, 163, "Text",ExpressionUUID->"0fb0f77a-639a-4ef6-a7c8-65c6ae61aa78",
 CellID->329901666]
}, Open  ]],
Cell[CellGroupData[{
Cell[208264, 5997, 200, 3, 66, "Subsubsection",ExpressionUUID->"2fea1baa-2958-45f4-86cc-2766266297e5",
 CellID->1358639254],
Cell[208467, 6002, 472, 8, 134, "Text",ExpressionUUID->"5d7152ad-b53c-4515-a207-e82cd91b7e59",
 CellID->456323427],
Cell[CellGroupData[{
Cell[208964, 6014, 405, 10, 31, "Input",ExpressionUUID->"ead331a4-543a-46bc-bb14-1e60aa2b3a4e",
 CellID->2133118013],
Cell[209372, 6026, 225, 5, 45, "Output",ExpressionUUID->"cd09d9ee-5f86-454c-ac31-3973a6fc3264",
 CellID->1756778046]
}, Open  ]],
Cell[CellGroupData[{
Cell[209634, 6036, 473, 12, 31, "Input",ExpressionUUID->"a9ba8083-f4d6-4fbd-9751-cd3fc9d22035",
 CellID->921943848],
Cell[210110, 6050, 192, 4, 45, "Output",ExpressionUUID->"4201e876-3324-4244-be1a-58fdc3fbfde0",
 CellID->1016316825]
}, Open  ]],
Cell[CellGroupData[{
Cell[210339, 6059, 544, 14, 31, "Input",ExpressionUUID->"51b070dd-45bd-4645-b799-f4405d386f56",
 CellID->457812076],
Cell[210886, 6075, 187, 4, 45, "Output",ExpressionUUID->"1e5ca754-d7ea-4cc5-a858-41e35e334899",
 CellID->227253773]
}, Open  ]],
Cell[211088, 6082, 427, 7, 104, "Text",ExpressionUUID->"e036f886-478d-4810-8a78-f5e10738a1d8",
 CellID->1228238445]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[211564, 6095, 173, 2, 68, "Subsection",ExpressionUUID->"d203352b-b075-484d-8808-ab3446047f68",
 CellID->2075653750],
Cell[211740, 6099, 666, 11, 193, "Text",ExpressionUUID->"f74608c8-edd0-44fd-8a8b-6efefacfab76",
 CellID->1788214382],
Cell[CellGroupData[{
Cell[212431, 6114, 196, 3, 66, "Subsubsection",ExpressionUUID->"84420316-ae38-4184-a63c-fcd325891b06",
 CellID->454642342],
Cell[212630, 6119, 153, 2, 38, "ItemNumbered",ExpressionUUID->"aed8f73b-81ed-4832-89b5-114c6fc73cfe",
 CellID->427025968],
Cell[212786, 6123, 186, 2, 45, "Text",ExpressionUUID->"d91b5e34-a4a5-4514-be5f-c6f6f5dc94af",
 CellID->135095902],
Cell[CellGroupData[{
Cell[212997, 6129, 550, 13, 54, "Input",ExpressionUUID->"29cecf3b-bdde-4c75-b74f-528745b53a10",
 CellID->292671846],
Cell[213550, 6144, 322, 7, 45, "Output",ExpressionUUID->"d94bb4fe-2a4f-4a7d-bca1-0d46391b352c",
 CellID->291574318]
}, Open  ]],
Cell[CellGroupData[{
Cell[213909, 6156, 314, 7, 31, "Input",ExpressionUUID->"e891669a-5417-4828-8da3-eb762843a2a4",
 CellID->1866318302],
Cell[214226, 6165, 258, 6, 45, "Output",ExpressionUUID->"fab268aa-afb7-4805-a1cf-378f45c36817",
 CellID->986889579]
}, Open  ]],
Cell[214499, 6174, 485, 8, 134, "Text",ExpressionUUID->"d35b2f20-c075-4cf0-8ada-c77c9b69d720",
 CellID->1636948472],
Cell[214987, 6184, 187, 2, 45, "Text",ExpressionUUID->"ad7d8373-5096-4cc4-befe-20848bd76dc9",
 CellID->668330621],
Cell[CellGroupData[{
Cell[215199, 6190, 589, 16, 31, "Input",ExpressionUUID->"a888e226-adbb-4866-962a-65246d417a34",
 CellID->1362983672],
Cell[215791, 6208, 665, 17, 45, "Output",ExpressionUUID->"9cea906f-6341-4589-942d-a62f6e5e47cb",
 CellID->1766232818]
}, Open  ]],
Cell[CellGroupData[{
Cell[216493, 6230, 228, 4, 31, "Input",ExpressionUUID->"add49cac-8439-4b25-8d4a-20efd9a3e7dc",
 CellID->1386974719],
Cell[216724, 6236, 665, 17, 45, "Output",ExpressionUUID->"9fee725c-9b45-432e-b444-75e41313576b",
 CellID->1108813415]
}, Open  ]],
Cell[217404, 6256, 215, 4, 45, "Text",ExpressionUUID->"d57f07a8-e92b-42c0-93c1-bb667fb211c2",
 CellID->236347533],
Cell[217622, 6262, 183, 2, 38, "ItemNumbered",ExpressionUUID->"7548e7db-6321-42cd-9454-9f626a7377e0",
 CellID->2111460886],
Cell[217808, 6266, 289, 5, 75, "Text",ExpressionUUID->"31aae1ff-72e6-4191-a3a1-0efa4113cf68",
 CellID->155844327],
Cell[CellGroupData[{
Cell[218122, 6275, 348, 8, 31, "Input",ExpressionUUID->"c6ffb409-6c90-4850-9de7-29dd5b64549f",
 CellID->1965168977],
Cell[218473, 6285, 258, 6, 45, "Output",ExpressionUUID->"acd1f23a-9705-4d45-8c45-0f86da636f43",
 CellID->255211622]
}, Open  ]],
Cell[218746, 6294, 249, 5, 75, "Text",ExpressionUUID->"5db2d383-1b64-4418-bcdf-bf7b9a576cc7",
 CellID->816887895],
Cell[218998, 6301, 496, 12, 54, "Input",ExpressionUUID->"f31b9042-475a-4808-9003-5c46d9e64831",
 CellID->1866650833],
Cell[219497, 6315, 174, 2, 45, "Text",ExpressionUUID->"fe6c9fff-6a49-43b4-bd6e-14228c28c4c8",
 CellID->196871904],
Cell[CellGroupData[{
Cell[219696, 6321, 263, 5, 31, "Input",ExpressionUUID->"f89d8ab2-2545-4761-b682-874b0feb0cb7",
 CellID->1470604986],
Cell[219962, 6328, 639, 17, 45, "Output",ExpressionUUID->"676753a9-dcde-42c1-8e38-9fab7169820a",
 CellID->98976009]
}, Open  ]],
Cell[220616, 6348, 172, 2, 38, "ItemNumbered",ExpressionUUID->"397554c5-6eb8-400d-8d4b-533701fc4a6a",
 CellID->1337440485],
Cell[220791, 6352, 545, 9, 134, "Text",ExpressionUUID->"982554ff-efb1-43cd-8a81-3f94b63e87ad",
 CellID->650898246],
Cell[CellGroupData[{
Cell[221361, 6365, 369, 9, 31, "Input",ExpressionUUID->"24b7b845-59b2-4d3c-8ff5-90b24449ca89",
 CellID->851781666],
Cell[221733, 6376, 641, 17, 45, "Output",ExpressionUUID->"99311445-6ee3-420c-a3ce-4cf7360c4759",
 CellID->1546710159]
}, Open  ]],
Cell[222389, 6396, 405, 7, 104, "Text",ExpressionUUID->"23989192-9020-494a-bd57-d1c50f8c4814",
 CellID->268095378],
Cell[222797, 6405, 344, 6, 104, "Text",ExpressionUUID->"f94f60a3-044f-44aa-af2e-2b9b48dd33b6",
 CellID->71996691],
Cell[223144, 6413, 162, 2, 38, "ItemNumbered",ExpressionUUID->"5335747a-bfae-4432-b80d-30fbef38b01f",
 CellID->1047471664],
Cell[223309, 6417, 501, 8, 134, "Text",ExpressionUUID->"93b0f20d-225d-4973-9e83-d14313cbaef4",
 CellID->1932802389],
Cell[223813, 6427, 184, 2, 45, "Text",ExpressionUUID->"2747a227-9245-42cd-8843-75a9a0c35fbc",
 CellID->1889087560],
Cell[CellGroupData[{
Cell[224022, 6433, 380, 8, 31, "Input",ExpressionUUID->"0cb291a8-c612-4b3b-a435-9b878ea55bff",
 CellID->539385287],
Cell[224405, 6443, 324, 7, 45, "Output",ExpressionUUID->"c3dac791-8a74-46ea-8d3c-3e05eb620563",
 CellID->616728982]
}, Open  ]],
Cell[CellGroupData[{
Cell[224766, 6455, 238, 4, 31, "Input",ExpressionUUID->"617d008c-b847-4833-9d7e-b86bf4e4f37d",
 CellID->378100116],
Cell[225007, 6461, 326, 7, 45, "Output",ExpressionUUID->"49da14bc-82f6-4f6c-a623-afe2478f9155",
 CellID->2116254252]
}, Open  ]],
Cell[CellGroupData[{
Cell[225370, 6473, 297, 6, 31, "Input",ExpressionUUID->"2455db5c-02b5-4c3a-b3c8-8a9b234399ad",
 CellID->980650007],
Cell[225670, 6481, 322, 7, 45, "Output",ExpressionUUID->"5a245513-86e9-4926-93bb-c3f9608f0ce6",
 CellID->752557378]
}, Open  ]],
Cell[226007, 6491, 355, 6, 104, "Text",ExpressionUUID->"f9a02a2d-78d9-44ff-9dbd-d8247f0a8ced",
 CellID->1700654863]
}, Open  ]],
Cell[CellGroupData[{
Cell[226399, 6502, 221, 4, 66, "Subsubsection",ExpressionUUID->"f939b970-f25f-41c1-b6bf-9beeac21eafd",
 CellTags->"3.10.2",
 CellID->158783674],
Cell[226623, 6508, 293, 6, 75, "Text",ExpressionUUID->"78bc84db-5315-4b77-a8c8-724b96470862",
 CellID->1502519344],
Cell[226919, 6516, 152, 2, 38, "ItemNumbered",ExpressionUUID->"d65c22c1-4b19-49b9-9c7e-224c9f0e6b66",
 CellID->582409535],
Cell[227074, 6520, 499, 9, 134, "Text",ExpressionUUID->"e61a1957-2dd4-49d9-a28e-4ab3e90a76d1",
 CellID->326591719],
Cell[CellGroupData[{
Cell[227598, 6533, 380, 8, 31, "Input",ExpressionUUID->"907674e5-fbbe-4172-a9e2-bf945e1b7211",
 CellID->131479160],
Cell[227981, 6543, 283, 7, 45, "Output",ExpressionUUID->"e7208765-38ab-4f15-8c9a-21b96bff7a5e",
 CellID->361062643]
}, Open  ]],
Cell[CellGroupData[{
Cell[228301, 6555, 400, 10, 31, "Input",ExpressionUUID->"3f51285e-4422-42f6-a97d-f66e3e8f36a4",
 CellID->947782600],
Cell[228704, 6567, 357, 8, 45, "Output",ExpressionUUID->"870d2221-d9ef-4014-87be-1c59936523c2",
 CellID->1563831704]
}, Open  ]],
Cell[CellGroupData[{
Cell[229098, 6580, 233, 4, 31, "Input",ExpressionUUID->"62bf2e51-6de2-40e2-a4b6-37ce48928f6c",
 CellID->799548235],
Cell[229334, 6586, 296, 7, 45, "Output",ExpressionUUID->"d809ea50-0b6d-4ed0-b53e-199b64b57c0a",
 CellID->2018772660]
}, Open  ]],
Cell[229645, 6596, 511, 8, 134, "Text",ExpressionUUID->"4ed63618-aef9-4ad3-808c-e7612e4cda0d",
 CellID->1417957667],
Cell[230159, 6606, 172, 2, 38, "ItemNumbered",ExpressionUUID->"29fca156-b037-4f62-9c4a-83f61a7bf4d3",
 CellID->67466149],
Cell[230334, 6610, 379, 6, 104, "Text",ExpressionUUID->"3a20f33f-3197-4b4a-832d-69acdfcf828c",
 CellID->32200627],
Cell[CellGroupData[{
Cell[230738, 6620, 464, 13, 31, "Input",ExpressionUUID->"8e48c357-9625-4919-b381-41018927cae3",
 CellID->1764303379],
Cell[231205, 6635, 227, 5, 45, "Output",ExpressionUUID->"8e9e4b84-4add-4f81-bab0-5cc1a7c7b32b",
 CellID->552995427]
}, Open  ]],
Cell[231447, 6643, 388, 6, 104, "Text",ExpressionUUID->"c3b5fff5-06a5-4cff-87db-102c21aa1fce",
 CellID->1173844991]
}, Open  ]],
Cell[CellGroupData[{
Cell[231872, 6654, 222, 4, 66, "Subsubsection",ExpressionUUID->"9643fc8f-bb04-4827-af80-a26a67afb378",
 CellTags->"3.10.3",
 CellID->50304241],
Cell[232097, 6660, 709, 11, 193, "Text",ExpressionUUID->"7a1f010f-0c8c-40ec-832a-a03d997921fa",
 CellID->1502305216],
Cell[232809, 6673, 153, 2, 38, "ItemNumbered",ExpressionUUID->"fa6af333-e191-4165-aec3-ccee3a9606d6",
 CellID->1528591783],
Cell[232965, 6677, 355, 6, 104, "Text",ExpressionUUID->"ed34d1eb-8a33-4395-8ec2-122a7c45b9b2",
 CellID->695227820],
Cell[CellGroupData[{
Cell[233345, 6687, 450, 11, 31, "Input",ExpressionUUID->"09c1a9a6-83fc-4b07-8093-279a4c614c87",
 CellID->1997268380],
Cell[233798, 6700, 486, 9, 45, "Output",ExpressionUUID->"18a474ce-2368-4c21-a760-c44e27752e44",
 CellID->1256015451]
}, Open  ]],
Cell[CellGroupData[{
Cell[234321, 6714, 260, 5, 31, "Input",ExpressionUUID->"6d661533-9b9a-4fef-b697-e14c588501de",
 CellID->382845113],
Cell[234584, 6721, 486, 9, 45, "Output",ExpressionUUID->"65d649a6-0841-4ad3-bd3d-2b21d99e2ceb",
 CellID->1148463450]
}, Open  ]],
Cell[235085, 6733, 304, 5, 75, "Text",ExpressionUUID->"a2f7fd6a-9afd-4efd-a94d-45a1f88f85ae",
 CellID->244593792],
Cell[CellGroupData[{
Cell[235414, 6742, 232, 4, 31, "Input",ExpressionUUID->"86192ff7-5c44-4bdf-9398-66855e75919a",
 CellID->759840911],
Cell[235649, 6748, 869, 25, 68, "Output",ExpressionUUID->"ca3a69af-af7c-4df2-a5a0-d4e77d6b12e4",
 CellID->357490385]
}, Open  ]],
Cell[236533, 6776, 161, 2, 45, "Text",ExpressionUUID->"49a29c12-4e12-4761-a4c0-19336685dedb",
 CellID->1829140036],
Cell[CellGroupData[{
Cell[236719, 6782, 232, 4, 31, "Input",ExpressionUUID->"9e4d0813-e96d-40cb-a813-9b66a97f655b",
 CellID->1158677966],
Cell[236954, 6788, 673, 20, 45, "Output",ExpressionUUID->"c8689d02-a0e8-4d8e-a472-81e5d1a0cc57",
 CellID->1186323196]
}, Open  ]],
Cell[237642, 6811, 184, 2, 38, "ItemNumbered",ExpressionUUID->"285b203e-6e57-481c-9bd7-aec10df526c4",
 CellID->482693941],
Cell[237829, 6815, 506, 8, 134, "Text",ExpressionUUID->"2ef6290a-0037-4b3c-b224-3875399d3947",
 CellID->1591331668],
Cell[CellGroupData[{
Cell[238360, 6827, 457, 12, 31, "Input",ExpressionUUID->"ac3f6547-083f-4dbe-b0fa-15414d9c8d4d",
 CellID->992486631],
Cell[238820, 6841, 412, 8, 45, "Output",ExpressionUUID->"8fb10f03-0e35-439d-b8f3-55133231abcc",
 CellID->810898200]
}, Open  ]],
Cell[239247, 6852, 160, 2, 45, "Text",ExpressionUUID->"99867be4-26dc-4582-bf9b-8528193aefde",
 CellID->834823538],
Cell[CellGroupData[{
Cell[239432, 6858, 424, 11, 31, "Input",ExpressionUUID->"ec2247a3-ec29-43bd-b8be-839ae0ba7867",
 CellID->1456793835],
Cell[239859, 6871, 540, 15, 45, "Output",ExpressionUUID->"f988761b-9d92-414e-9f03-6ba2867bc67a",
 CellID->444010771]
}, Open  ]],
Cell[240414, 6889, 586, 9, 163, "Text",ExpressionUUID->"0a7bb28f-bf89-4b0e-883f-7c256eafa37f",
 CellID->2130838519],
Cell[241003, 6900, 170, 2, 38, "ItemNumbered",ExpressionUUID->"be93bdd7-29ec-4afa-80af-b6f771a7ae2c",
 CellID->1818741053],
Cell[241176, 6904, 609, 9, 193, "Text",ExpressionUUID->"4e175e9b-2971-466b-be63-5bc9cefaa8a1",
 CellID->298646373],
Cell[241788, 6915, 1104, 30, 148, "Input",ExpressionUUID->"9afd3f18-95f3-47fa-a1e0-36de21899283",
 CellID->1786524654],
Cell[242895, 6947, 162, 2, 45, "Text",ExpressionUUID->"c384bab1-defd-46d2-99f3-975235f719be",
 CellID->28410175],
Cell[CellGroupData[{
Cell[243082, 6953, 235, 4, 31, "Input",ExpressionUUID->"18f8cce4-8088-43b7-a2d3-e1d42f6be838",
 CellID->288515433],
Cell[243320, 6959, 669, 21, 45, "Output",ExpressionUUID->"b10dec12-7f97-4d1a-b1a9-671091f3f8e8",
 CellID->1683109989]
}, Open  ]],
Cell[244004, 6983, 243, 5, 75, "Text",ExpressionUUID->"f76a3a27-3694-4ca2-8cb4-518ce32e778d",
 CellID->1240479625],
Cell[244250, 6990, 611, 16, 54, "Input",ExpressionUUID->"b512784d-4a6a-4b91-8997-fea2724f2a4c",
 CellID->234428563],
Cell[244864, 7008, 164, 2, 45, "Text",ExpressionUUID->"ef0cd1d3-f45b-4e81-9259-932123869e06",
 CellID->1459449107],
Cell[CellGroupData[{
Cell[245053, 7014, 240, 4, 31, "Input",ExpressionUUID->"a1ee3215-7944-4b1c-98bd-fcd026adb06b",
 CellID->1127901772],
Cell[245296, 7020, 1144, 37, 68, "Output",ExpressionUUID->"c345a84e-7308-4eb6-bc84-4b071a5e1ae4",
 CellID->1240021831]
}, Open  ]],
Cell[246455, 7060, 223, 4, 38, "ItemNumbered",ExpressionUUID->"5cec6da9-1d79-45f5-baec-a061f7675cbd",
 CellTags->"3.10.3.4",
 CellID->177516941],
Cell[246681, 7066, 487, 8, 134, "Text",ExpressionUUID->"97e60e6f-7d7d-4e29-a2a3-3240935e4bb7",
 CellID->1914041609],
Cell[247171, 7076, 438, 10, 54, "Input",ExpressionUUID->"8f4d087d-454e-42c6-a328-87273201159c",
 CellID->1003843963],
Cell[247612, 7088, 163, 2, 45, "Text",ExpressionUUID->"ae58fad6-0e40-4b79-8453-c53eb9257ac2",
 CellID->484065631],
Cell[CellGroupData[{
Cell[247800, 7094, 239, 4, 31, "Input",ExpressionUUID->"d37a4701-1a03-4a53-952b-ff42ff91c6d7",
 CellID->279043415],
Cell[248042, 7100, 692, 21, 45, "Output",ExpressionUUID->"28b0f347-fbcd-4867-9f6a-76cecc132871",
 CellID->372591633]
}, Open  ]],
Cell[248749, 7124, 328, 6, 75, "Text",ExpressionUUID->"995bfa10-fe9f-469f-add1-52737846b0ca",
 CellID->85261179],
Cell[249080, 7132, 297, 5, 75, "Text",ExpressionUUID->"70aab6a9-baf0-467a-8356-a1499a1c9bba",
 CellID->613042904],
Cell[249380, 7139, 414, 9, 54, "Input",ExpressionUUID->"dcbaa09c-2f1f-4904-8599-058f37a4c1b6",
 CellID->2139535432]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[249843, 7154, 146, 2, 68, "Subsection",ExpressionUUID->"a4d952f1-9a76-4ce5-ad6b-f8e65dad856f",
 CellID->265584550],
Cell[249992, 7158, 862, 13, 281, "Text",ExpressionUUID->"ffb3208d-50b3-49d5-8c70-fdbf4231a369",
 CellID->1208513384],
Cell[250857, 7173, 449, 7, 134, "Text",ExpressionUUID->"4c07b8e2-27d3-4f48-8769-41204b74be9f",
 CellID->488009219]
}, Open  ]]
}, Open  ]]
}
]
*)

