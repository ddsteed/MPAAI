(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[   2158529,      50656]
NotebookOptionsPosition[   1840157,      44322]
NotebookOutlinePosition[   1843264,      44407]
CellTagsIndexPosition[   1842822,      44390]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 StyleBox["Leonid Shifrin",
  FontFamily->"FZLanTingHei-DB-GBK",
  FontSize->12,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.8488288700694285, 0.3848325322346838, 0.1479972533760586]],
 StyleBox["\[LineSeparator]",
  FontSize->12,
  FontColor->RGBColor[1, 0.5, 0]],
 StyleBox["\n",
  FontSize->12,
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0.5, 0]],
 StyleBox["Mathematica programming: an advanced introduction                  \
           ",
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox[ButtonBox["<",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{"."}, "MPAAI-4-Rules-patterns-functions.nb", 
     CharacterEncoding -> "UTF-8"], None},
  ButtonNote->"./MPAAI-4-Rules-patterns-functions.nb"],
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox["    ",
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox[ButtonBox[">",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{"."}, "MPAAI-6-Writing-efficient-programs.nb", 
     CharacterEncoding -> "UTF-8"], None},
  ButtonNote->"./MPAAI-6-Writing-efficient-programs.nb"],
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox["    ",
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox[ButtonBox["\[CapitalXi]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "contents.nb", CharacterEncoding -> "UTF-8"], None},
  
  ButtonNote->"/Users/fengh/Documents/RDS/EDITED/MPAAI/contents.nb"],
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox["\[LineSeparator]\[LineSeparator]",
  FontSize->12,
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0.5, 0]],
 StyleBox["Edited by Hao Feng",
  FontFamily->"Futura",
  FontSize->12,
  FontWeight->"Medium",
  FontSlant->"Italic",
  FontColor->RGBColor[
   0.8488288700694285, 0.3848325322346838, 0.1479972533760586]]
}], "Text",
 CellMargins->{{66, -45}, {4, 12}},
 CellChangeTimes->{{3.9397640484222183`*^9, 3.939764052679113*^9}, 
   3.9397641564677134`*^9, 3.939764214184162*^9, {3.939774845841297*^9, 
   3.9397748486786137`*^9}, 3.9397769383984737`*^9, 3.939777524212697*^9, {
   3.939777679887363*^9, 3.9397776986053457`*^9}, 3.939777748637487*^9, 
   3.939777854556375*^9, {3.939778004745451*^9, 3.939778004752576*^9}, {
   3.939778088573533*^9, 3.9397780885805683`*^9}, {3.9397788326291037`*^9, 
   3.939778842450534*^9}, {3.939784089065812*^9, 3.939784099578835*^9}, {
   3.940303299056095*^9, 3.940303299064081*^9}},
 LineSpacing->{0.6999999999999997, 3},
 Background->RGBColor[
  0.13066300450141147`, 0.12460517280842298`, 0.4353551537346456],
 CellID->912160115,ExpressionUUID->"372eb174-3302-4254-a386-9ba18a4c12c6"],

Cell[CellGroupData[{

Cell[TextData[{
 
 CounterBox["Section"],
 StyleBox[" | ", "SectionBar"],
 "Functions on lists and functional programming"
}], "Section",
 CellChangeTimes->{
  3.652728456208679*^9, 3.652728527108994*^9, {3.939778555160822*^9, 
   3.939778563376391*^9}},
 CounterAssignments->{{"Section", 4}},
 CellID->1087864686,ExpressionUUID->"ff742e1f-471b-43b2-80fd-8d1b6fadf197"],

Cell[CellGroupData[{

Cell["Introduction", "Subsection",
 CellChangeTimes->{3.9400177878461313`*^9},
 CellID->1433556233,ExpressionUUID->"a36bbe05-2f4d-4de7-b468-84b52fef0bbe"],

Cell["\<\
Functional programming is a programming paradigm in which the central role is \
played by application of functions, to both data and other functions. \
Functions themselves are treated as data, and thus can be arguments of other \
functions. Since any data structure can be represented as a (possibly nested) \
list, functional programming then is about application of functions to lists.\
\
\>", "Text",
 CellChangeTimes->{{3.9400177981285686`*^9, 3.940017817122661*^9}},
 CellID->1160572338,ExpressionUUID->"7003e001-ae04-48c1-8c2d-5e27fe604898"],

Cell["\<\
There are important differences between functional programming in Mathematica \
and other functional languages (LISP). One difference is that recursion on \
lists is inefficient in Mathematica since lists are implemented here as \
arrays rather than linked lists. Another difference is induced by the \
rule-based nature of Mathematica in the way it reflects itself in function \
definitions (in the case of pattern-defined functions) and evaluation \
procedure (global rule base, expression rewriting etc).\
\>", "Text",
 CellChangeTimes->{{3.9400177981285686`*^9, 3.940017847798161*^9}},
 CellID->1725222758,ExpressionUUID->"6a405197-62a0-4ed0-9c49-535769103d13"],

Cell["\<\
Apart from being concise, the functional programming style is usually the \
most efficient in Mathematica. Also, although we do not consider it in this \
chapter, in Mathematica it is possible to use functional programming \
techniques on expressions more general than lists - basically, on general \
Mathematica expressions. This is a very powerful capability.\
\>", "Text",
 CellChangeTimes->{{3.9400177981285686`*^9, 3.94001786866236*^9}},
 CellID->2013729038,ExpressionUUID->"454b2177-34ad-42e7-a447-108e7b3109f2"],

Cell["\<\
A few words about the role of this chapter. Perhaps, it will not be an \
overestimation to say that this is the most important chapter of all. Mainly, \
this is because it introduces certain new programming style and a number of \
programming idioms, which will be heavily used in all later chapters and \
which together form a different level of programming in Mathematica, not just \
as technical tricks, but as a new way of thinking about the problems. Those \
who are familiar with functional programming languages may find some of the \
material familiar. However even for them, there will be a lot of new \
information specific to Mathematica, which must be used in order to program \
it most efficiently.\
\>", "Text",
 CellChangeTimes->{{3.9400177981285686`*^9, 3.9400179077370996`*^9}},
 CellID->2011721068,ExpressionUUID->"a9975c41-5950-4f11-b926-e8a92df8187e"],

Cell["\<\
Examples in this chapter play an important role in the overall exposition of \
the material. Many of them are used to illustrate some important concepts or \
subtleties, since I believe that any new idea is best understood when \
illustrated by a few examples. To get a complete grasp of this chapter, it is \
recommended to go through all examples, and pay attention to the annotations \
attached to them. Some of the examples use admittedly rather artificial \
settings. This is because their primary goal is to illustrate a given \
language idiom in a rather simple situation.\
\>", "Text",
 CellChangeTimes->{{3.9400177981285686`*^9, 3.9400179332514*^9}},
 CellID->1877103882,ExpressionUUID->"8ea111f7-187d-4d54-9160-ece5bc46d0b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Core higher-order functions", "Subsection",
 CellChangeTimes->{3.940017947477108*^9},
 CellID->969737998,ExpressionUUID->"9241180b-c276-4b79-be23-570654d4c454"],

Cell[CellGroupData[{

Cell["Introduction", "Subsubsection",
 CellChangeTimes->{3.940017953569512*^9},
 CellID->1133135303,ExpressionUUID->"cbf5205e-ee40-453d-a792-c0c66893efaf"],

Cell["\<\
Roughly speaking, functional programming (FP) in Mathematica consists of \
application of functions to Mathematica normal expressions. A very important \
special case is when the normal expression is a list (i.e, it\
\[CloseCurlyQuote]s Head is List), and we will be mostly concerned with this \
one in this chapter. However, most of what can be done with lists within \
functional programming paradigm, can also be done with general normal \
expressions.\
\>", "Text",
 CellChangeTimes->{{3.9400179647889147`*^9, 3.940017987959238*^9}},
 CellID->909580630,ExpressionUUID->"7f91ca81-c806-4cba-b74b-f62667f009fb"],

Cell["Two things make FP non-trivial:", "Text",
 CellChangeTimes->{{3.9400179647889147`*^9, 3.94001799159099*^9}},
 CellID->1833644328,ExpressionUUID->"c0294870-273f-403b-b932-648bbf65747d"],

Cell["\<\
1. Functions can take other functions as their arguments (this has an analog \
of function pointers in C), but also can create and/or return new functions \
at run-time, be that pure functions or pattern-based ones. The latter \
capability has no direct analog in procedural languages, where the functions \
definitions are determined at compile time.\
\>", "Text",
 CellChangeTimes->{{3.9400179647889147`*^9, 3.940018008299712*^9}},
 CellID->535872733,ExpressionUUID->"76463127-df99-40b5-871d-fedeba210fa0"],

Cell["\<\
2. Lists can be made of arbitrary Mathematica expressions, be those atoms \
(numbers, strings or symbols), or normal expressions. In particular, one may \
consider nested lists which can be used to implement various data structures \
(lists, trees etc). This also means that a single list may contain objects of \
different types.\
\>", "Text",
 CellChangeTimes->{{3.9400179647889147`*^9, 3.9400180184375687`*^9}},
 CellID->760056389,ExpressionUUID->"50ad5476-043e-423a-a728-647721f80048"],

Cell["\<\
There are a few characteristic features of the functional programming style \
which I would like to mention here in order to give a flavor of it. One is \
that side effects (such as variable assignments) are (almost) absent. Another \
is that loops are very rarely used if at all. In Mathematica, this is not an \
absolute restriction however - it is just more natural to use other \
constructs, as we will see below.\
\>", "Text",
 CellChangeTimes->{{3.940018027551152*^9, 3.9400180427926702`*^9}},
 CellID->261720649,ExpressionUUID->"f914b3c7-f2fa-471b-af37-cc1c00e92b46"],

Cell["\<\
Functions which take other functions as their arguments, are called higher \
order functions. On the conceptual level, there are just two most important \
built-in higher order functions in Mathematica - Map and Apply. On the \
practical level, these two are still most frequently used functions, but some \
\[OpenCurlyDoubleQuote]less fundamental\[CloseCurlyDoubleQuote] operations \
are still needed so often that special built-in functions exist for them, and \
are also quite
handy.\
\>", "Text",
 CellChangeTimes->{{3.940018056754717*^9, 3.94001807312316*^9}},
 CellID->671600172,ExpressionUUID->"a1b4fb6e-9fbe-4d9c-9cbf-8905c6db2c10"],

Cell["\<\
We will now go through several most often used built-in higher order \
functions, illustrating their use with examples. Since they serve as building \
blocks of most of functional programs, one can do quite a lot being equipped \
with just these functions.\
\>", "Text",
 CellChangeTimes->{{3.940018081412877*^9, 3.940018087015047*^9}},
 CellID->303761581,ExpressionUUID->"37ce355d-ecd1-4787-9974-e0b2a02355c3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Map", "Subsubsection",
 CellChangeTimes->{3.940018093119401*^9, 3.940543989625513*^9},
 CellID->605542464,ExpressionUUID->"b4804188-7b09-4273-aed9-dc7b0e89474f"],

Cell["\<\
This is one of the two most fundamental built-in higher order functions, and \
by far the most frequently used one. Very roughly, one may say that it is \
used to replace loops within the FP paradigm.\
\>", "Text",
 CellChangeTimes->{{3.940018102635435*^9, 3.940018111260312*^9}},
 CellID->427189315,ExpressionUUID->"6384a2ee-c498-462e-b321-a074a59d5126"],

Cell[TextData[{
 "In it\[CloseCurlyQuote]s simplest form, Map takes two arguments: another \
function - let us call it <f> - of a single argument (I hasten to comment \
that the function may have no name, if it is a pure function (see section ",
 ButtonBox["4.11",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-4-Rules-patterns-functions.nb", 
     CharacterEncoding -> "UTF-8"], "4.11"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-4-Rules-patterns-functions.\
nb"],
 ")), and an expression - let us call it <expr>, on which this function \
should by mapped. If <expr> is an atom, it is returned back. If <expr> is a \
list (or other normal expression), then f is applied to every element of the \
list, and the resulting list is returned."
}], "Text",
 CellChangeTimes->{{3.940018102635435*^9, 3.9400181373405943`*^9}, {
  3.9400181782229557`*^9, 3.940018178231781*^9}},
 CellID->1462517825,ExpressionUUID->"fdcdc18f-e588-4259-a71e-88600a9282e3"],

Cell["Simple examples of use", "ItemNumbered",
 CellChangeTimes->{3.940018191553775*^9},
 CellID->1474830739,ExpressionUUID->"ced3dd6c-5b54-415f-8f5b-d3c9f33ee099"],

Cell["A few simple examples", "Text",
 CellChangeTimes->{3.940018197063875*^9},
 CellID->1223976699,ExpressionUUID->"7f2ac1a3-bf18-46f3-8e8f-e74923478824"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "f", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", "a"}], "]"}]}], "Input",
 CellChangeTimes->{{3.940018198976811*^9, 3.9400182025453377`*^9}},
 CellLabel->"In[72]:=",
 CellID->1557428062,ExpressionUUID->"34736e38-c2b9-4f8d-ade2-cce282f3a94a"],

Cell[BoxData["a"], "Output",
 CellChangeTimes->{3.940018203430094*^9},
 CellLabel->"Out[73]=",
 CellID->961595061,ExpressionUUID->"c83be91d-d255-4e64-ab4c-d6d8c4efff5d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940018204781871*^9, 3.940018207808267*^9}},
 CellLabel->"In[74]:=",
 CellID->887625900,ExpressionUUID->"4c92cedb-661c-48f4-9316-7339c54e85f4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", "a", "]"}], ",", 
   RowBox[{"f", "[", "b", "]"}], ",", 
   RowBox[{"f", "[", "c", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400182081638517`*^9},
 CellLabel->"Out[74]=",
 CellID->161918686,ExpressionUUID->"7850a199-56e8-4329-8251-e55a868c81a4"]
}, Open  ]],

Cell["\<\
In the above, the function <f> did not have any definition yet. Let us define \
it\
\>", "Text",
 CellChangeTimes->{3.9400182155099363`*^9},
 CellID->505574853,ExpressionUUID->"f30e50a5-f95a-41e1-8901-49a5b35a871d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "x_", "]"}], ":=", 
   RowBox[{"x", "^", "2"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9400182173417*^9, 3.94001822078652*^9}},
 CellLabel->"In[75]:=",
 CellID->1942240938,ExpressionUUID->"3644dfde-faa6-4752-9f50-3ede2e5b579f"],

Cell["Now:", "Text",
 CellChangeTimes->{{3.940018223216221*^9, 3.940018223769949*^9}},
 CellID->875395198,ExpressionUUID->"43dd1033-82fa-468f-b3e3-f641c3a2a2a4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9400182247900257`*^9, 3.9400182277904367`*^9}},
 CellLabel->"In[76]:=",
 CellID->1477532037,ExpressionUUID->"81939054-2557-46ae-ab6f-523e4adba8d8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SuperscriptBox["a", "2"], ",", 
   SuperscriptBox["b", "2"], ",", 
   SuperscriptBox["c", "2"]}], "}"}]], "Output",
 CellChangeTimes->{3.9400182281133757`*^9},
 CellLabel->"Out[76]=",
 CellID->1025553251,ExpressionUUID->"80212711-a864-4973-bbcb-9767478dda8e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", "a"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400182320082703`*^9, 3.940018233717782*^9}},
 CellLabel->"In[77]:=",
 CellID->557429617,ExpressionUUID->"8548e76a-e3d8-4665-9808-cb4dfa25ae41"],

Cell[BoxData["a"], "Output",
 CellChangeTimes->{3.9400182340600147`*^9},
 CellLabel->"Out[77]=",
 CellID->373397328,ExpressionUUID->"d06c9d1c-276b-4cf5-98d7-7bb4702de3cc"]
}, Open  ]],

Cell["Map is a replacement for a loop", "ItemNumbered",
 CellChangeTimes->{3.940018243614757*^9},
 CellID->741675162,ExpressionUUID->"924dd4d5-0d6d-4554-acc8-897eeb60a756"],

Cell["\<\
Now we can see how it replaces a loop: in a procedural version, we will need \
something like this\
\>", "Text",
 CellChangeTimes->{3.940018261594488*^9},
 CellID->1339360546,ExpressionUUID->"b881378c-e72f-4315-b705-bfd04454c39e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"i", ",", "len", ",", "expr", ",", "newexpr"}], "}"}], ",", 
   RowBox[{
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"i", "=", "1"}], ";", 
       RowBox[{"expr", "=", 
        RowBox[{"{", 
         RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], ";", 
       RowBox[{"len", "=", 
        RowBox[{"Length", "[", "expr", "]"}]}], ";", 
       RowBox[{"newexpr", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{"{", "len", "}"}]}], "]"}]}]}], ",", 
      RowBox[{"i", "<=", "len"}], ",", 
      RowBox[{"i", "++"}], ",", 
      RowBox[{
       RowBox[{"newexpr", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "=", 
       RowBox[{"f", "[", 
        RowBox[{"expr", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "]"}]}]}], "]"}], ";", "newexpr"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.940018265414641*^9, 3.9400183130193787`*^9}},
 CellLabel->"In[78]:=",
 CellID->1604306573,ExpressionUUID->"a5daa008-4fca-4371-b348-ac1ee67acc0d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SuperscriptBox["a", "2"], ",", 
   SuperscriptBox["b", "2"], ",", 
   SuperscriptBox["c", "2"]}], "}"}]], "Output",
 CellChangeTimes->{3.94001831344972*^9},
 CellLabel->"Out[78]=",
 CellID->631092115,ExpressionUUID->"d98b0200-97df-41c9-b500-2221f4c0d64f"]
}, Open  ]],

Cell["\<\
Notice that I deliberately packaged the code into a Module, to make variables \
like <i>, <expr>, etc local and avoid global side effects.\
\>", "Text",
 CellChangeTimes->{{3.940018324249539*^9, 3.940018331293313*^9}},
 CellID->343444272,ExpressionUUID->"e5ce91a9-ae52-42af-b2cd-8285064f2b55"],

Cell["So, even here we can already see what we win by using Map:", "Text",
 CellChangeTimes->{{3.940018324249539*^9, 3.9400183336624403`*^9}},
 CellID->1419815256,ExpressionUUID->"cf75cc9f-f1a8-45c4-b178-176f1dc85c2f"],

Cell["\<\
1. We don\[CloseCurlyQuote]t need to introduce auxiliary variables
2. We don\[CloseCurlyQuote]t need to know the length of the list beforehand
3. The code is much more concise.
4. It is not obvious at all, but in most cases the code is faster or much \
faster.\
\>", "Text",
 CellChangeTimes->{{3.940018324249539*^9, 3.940018344312798*^9}},
 CellID->757609488,ExpressionUUID->"068d5196-ae2f-46d1-b1e6-3ea706250459"],

Cell["\<\
What really happens is that a copy of the original list is created, and then \
all the operations are performed on the copy. The original list remains \
unchanged.\
\>", "Text",
 CellChangeTimes->{{3.940018324249539*^9, 3.940018346663735*^9}},
 CellID->597546257,ExpressionUUID->"97638251-7b69-4cb7-996b-46932a38f911"],

Cell["Using Map with a pure function", "ItemNumbered",
 CellChangeTimes->{3.940018357933243*^9},
 CellID->2052542270,ExpressionUUID->"ae907bce-63a9-4da5-8626-e2800cb2cbb0"],

Cell["\<\
To see how to use a pure function inside Map, let us just reproduce the \
previous result:\
\>", "Text",
 CellChangeTimes->{3.940018874799787*^9},
 CellID->2048110129,ExpressionUUID->"cfe8ae59-3e43-48f4-a883-b8b67d8d1be0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "^", "2"}], "&"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940018876528054*^9, 3.940018882720343*^9}},
 CellLabel->"In[79]:=",
 CellID->520281349,ExpressionUUID->"cc86fffa-64fc-4c70-a4ae-a7d90589fea5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SuperscriptBox["a", "2"], ",", 
   SuperscriptBox["b", "2"], ",", 
   SuperscriptBox["c", "2"]}], "}"}]], "Output",
 CellChangeTimes->{3.94001888301851*^9},
 CellLabel->"Out[79]=",
 CellID->586124843,ExpressionUUID->"93d17b6b-a1fd-4717-8cb0-885e751144bf"]
}, Open  ]],

Cell["\<\
In this case, there is no need for a function name. Also, pure functions \
(especially when used in Map) may be more efficient that the pattern-defined \
ones, because no pattern-matching is taking place. But this also means less \
protection from the bad input, as we discussed before.\
\>", "Text",
 CellChangeTimes->{{3.94001888956227*^9, 3.940018896926803*^9}},
 CellID->492747512,ExpressionUUID->"b01b0eb8-f183-4cd6-851e-4fe7d0ba80cb"],

Cell["Shorthand notation and precedence", "ItemNumbered",
 CellChangeTimes->{3.940018909342977*^9},
 CellID->1214533002,ExpressionUUID->"67d3f104-7cef-40a2-b6bb-cea885640f2d"],

Cell["\<\
As for many common operations, there is a shorthand notation for Map - a \
symbol /@ (slash-at). The usage is <(function/@expression)>. For example:\
\>", "Text",
 CellChangeTimes->{{3.940018914979227*^9, 3.940018926856428*^9}},
 CellID->824099879,ExpressionUUID->"0824cce0-5374-43d3-841e-be68169ba78b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(", 
  RowBox[{"f", "/@", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], ")"}]], "Input",
 CellChangeTimes->{{3.940018937999803*^9, 3.94001894300811*^9}},
 CellLabel->"In[80]:=",
 CellID->475557236,ExpressionUUID->"e3228801-7ff6-4c28-a8ba-5be74c0d932d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SuperscriptBox["a", "2"], ",", 
   SuperscriptBox["b", "2"], ",", 
   SuperscriptBox["c", "2"]}], "}"}]], "Output",
 CellChangeTimes->{3.940018944669921*^9},
 CellLabel->"Out[80]=",
 CellID->74895110,ExpressionUUID->"97a1095c-f034-4438-8f02-79d906c5bc49"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "^", "2"}], "&"}], "/@", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], ")"}]], "Input",
 CellChangeTimes->{{3.940018946881433*^9, 3.940018953942066*^9}},
 CellLabel->"In[81]:=",
 CellID->1551304509,ExpressionUUID->"e75165a5-bce3-46a3-bd9b-07513da37100"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SuperscriptBox["a", "2"], ",", 
   SuperscriptBox["b", "2"], ",", 
   SuperscriptBox["c", "2"]}], "}"}]], "Output",
 CellChangeTimes->{3.940018954318644*^9},
 CellLabel->"Out[81]=",
 CellID->1630974594,ExpressionUUID->"98e76eea-36fd-46e1-b56e-1cd764a5b1b4"]
}, Open  ]],

Cell["\<\
One may use either literal <Map>, or </@>. Their action is equivalent as long \
as one always keeps the parentheses as shown above. In many cases, like \
above, they can be omitted:\
\>", "Text",
 CellChangeTimes->{{3.940018963403517*^9, 3.9400189675626373`*^9}},
 CellID->1308731050,ExpressionUUID->"14aa58c8-ac02-4de4-aae7-f346123befaa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "/@", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.940018973555285*^9, 3.940018976589834*^9}},
 CellLabel->"In[82]:=",
 CellID->1507306188,ExpressionUUID->"2d190437-1292-4efd-8e33-0e0e6d50a9e4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SuperscriptBox["a", "2"], ",", 
   SuperscriptBox["b", "2"], ",", 
   SuperscriptBox["c", "2"]}], "}"}]], "Output",
 CellChangeTimes->{3.940018976869267*^9},
 CellLabel->"Out[82]=",
 CellID->427106351,ExpressionUUID->"b72be70f-6a55-481a-9bf0-bac8aa61a686"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "^", "2"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.9400189787714777`*^9, 3.940018983414557*^9}},
 CellLabel->"In[83]:=",
 CellID->2059221966,ExpressionUUID->"d26ca3d2-b42d-4146-a25b-4822493e9f11"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SuperscriptBox["a", "2"], ",", 
   SuperscriptBox["b", "2"], ",", 
   SuperscriptBox["c", "2"]}], "}"}]], "Output",
 CellChangeTimes->{3.9400189837068777`*^9},
 CellLabel->"Out[83]=",
 CellID->1957591913,ExpressionUUID->"d11a8ad4-b403-4d92-a6cf-d19a036cc996"]
}, Open  ]],

Cell["\<\
In general however they are needed to avoid precedence-related bugs. For \
instance, in the following example: we want to first map <f> on the list, and \
then square the result. For the latter part , we use a pure function in the \
prefix notation (function@expression). What we should get is {a^4,b^4,c^4}. \
Instead:\
\>", "Text",
 CellChangeTimes->{{3.940018997821069*^9, 3.940019008710096*^9}},
 CellID->1797809751,ExpressionUUID->"ff394740-eb17-42f8-87e4-4cf89ee2983a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"#", "^", "2"}], "&"}], "@", "f"}], "/@", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.9400190137065697`*^9, 3.940019028765464*^9}},
 CellLabel->"In[85]:=",
 CellID->540450152,ExpressionUUID->"d3298735-b863-429b-8c46-d19f97da1754"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SuperscriptBox["f", "2"], "[", "a", "]"}], ",", 
   RowBox[{
    SuperscriptBox["f", "2"], "[", "b", "]"}], ",", 
   RowBox[{
    SuperscriptBox["f", "2"], "[", "c", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.940019020973186*^9, 3.940019029008168*^9}},
 CellLabel->"Out[85]=",
 CellID->404986015,ExpressionUUID->"5668b6c3-28a3-4b4a-a6d4-bfc3fb40811f"]
}, Open  ]],

Cell["\<\
What happens is that the function symbol is squared, and only then Mapped. \
Now:\
\>", "Text",
 CellChangeTimes->{3.940019060541218*^9},
 CellID->1378717027,ExpressionUUID->"cb84fee1-7e91-4d8a-abfb-fc03a5ebde83"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "^", "2"}], "&"}], "@", 
  RowBox[{"(", 
   RowBox[{"f", "/@", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.9400190637763977`*^9, 3.940019073977356*^9}},
 CellLabel->"In[87]:=",
 CellID->863531790,ExpressionUUID->"92155df0-ea9c-46a8-a912-93b39c00fc84"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SuperscriptBox["a", "4"], ",", 
   SuperscriptBox["b", "4"], ",", 
   SuperscriptBox["c", "4"]}], "}"}]], "Output",
 CellChangeTimes->{{3.940019070265624*^9, 3.940019074248447*^9}},
 CellLabel->"Out[87]=",
 CellID->618304858,ExpressionUUID->"5599e3d2-0322-4219-8d50-9f591d6b26e4"]
}, Open  ]],

Cell["\<\
This sort of problem is impossible with the use of literal Map:\
\>", "Text",
 CellChangeTimes->{3.940019084197137*^9},
 CellID->1310792760,ExpressionUUID->"b96dc621-5216-482d-b2d8-3a2f69b0f32f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "^", "2"}], "&"}], "@", 
  RowBox[{"Map", "[", 
   RowBox[{"f", ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9400190863810062`*^9, 3.940019092331615*^9}},
 CellLabel->"In[88]:=",
 CellID->1612152185,ExpressionUUID->"ffe6f2d2-6e73-41f3-8998-0f88110e7931"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SuperscriptBox["a", "4"], ",", 
   SuperscriptBox["b", "4"], ",", 
   SuperscriptBox["c", "4"]}], "}"}]], "Output",
 CellChangeTimes->{3.9400190928235064`*^9},
 CellLabel->"Out[88]=",
 CellID->1241429162,ExpressionUUID->"d5a54ae2-5cf8-4ba4-b4b2-b19b870984f5"]
}, Open  ]],

Cell["\<\
Also, literal Map often makes a program easier to read. So my advice would be \
to use it until you become experienced with it. In practice however, the </@> \
form is often more handy.\
\>", "Text",
 CellChangeTimes->{{3.940019100213491*^9, 3.940019102131571*^9}},
 CellID->1896295129,ExpressionUUID->"49d6eb15-bc54-42f4-9232-98e615776ffe"],

Cell["Associativity", "ItemNumbered",
 CellChangeTimes->{3.940019117855735*^9},
 CellID->2008584619,ExpressionUUID->"0ff03ccf-e716-48bd-ba8c-126531329578"],

Cell["\<\
Map operation is right-associative, which means that parentheses may be \
omitted in the following code:\
\>", "Text",
 CellChangeTimes->{3.9400191237557507`*^9},
 CellID->1149279212,ExpressionUUID->"c0fa9977-2243-4583-a545-00be52a9cc94"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "/@", 
  RowBox[{"g", "/@", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.940019129190545*^9, 3.940019133118923*^9}},
 CellLabel->"In[89]:=",
 CellID->1085340473,ExpressionUUID->"317fa4a5-13e5-44bf-aa92-f2e654247a4b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"g", "[", 
    RowBox[{"g", "[", "a", "]"}], "]"}], ",", 
   RowBox[{"g", "[", 
    RowBox[{"g", "[", "b", "]"}], "]"}], ",", 
   RowBox[{"g", "[", 
    RowBox[{"g", "[", "c", "]"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940019133428712*^9},
 CellLabel->"Out[89]=",
 CellID->2123650991,ExpressionUUID->"afef88bb-aa42-4c6e-91c4-4be33eb656a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "/@", 
  RowBox[{"f", "/@", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.9400191420480013`*^9, 3.940019146348817*^9}},
 CellLabel->"In[90]:=",
 CellID->1509005493,ExpressionUUID->"d64968dc-4cdd-4608-9b3e-98de732fe8c4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SuperscriptBox["a", "4"], ",", 
   SuperscriptBox["b", "4"], ",", 
   SuperscriptBox["c", "4"]}], "}"}]], "Output",
 CellChangeTimes->{3.940019146656323*^9},
 CellLabel->"Out[90]=",
 CellID->1658214285,ExpressionUUID->"a270bb2c-686a-4d05-897f-1abdfd1f6bdc"]
}, Open  ]],

Cell["More examples", "ItemNumbered",
 CellChangeTimes->{3.940019153860156*^9},
 CellID->1712200876,ExpressionUUID->"4b3eda5b-791c-453f-aab0-8fd808624264"],

Cell["Let us now consider a few of the more interesting examples.", "Text",
 CellChangeTimes->{{3.94001916032407*^9, 3.9400191624035063`*^9}},
 CellID->679253132,ExpressionUUID->"09daaaf2-6074-47bb-8862-a9adb6bb93bc"],

Cell["\<\
Here, by mapping Range on a list produced by another Range, we create a \
following list of depth 2.\
\>", "Text",
 CellChangeTimes->{3.94001916032407*^9},
 CellID->1410564829,ExpressionUUID->"97847b5c-39ca-4d13-a456-e8767fc943ac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Range", ",", 
   RowBox[{"Range", "[", "4", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940019167607358*^9, 3.940019171837566*^9}},
 CellLabel->"In[91]:=",
 CellID->374387477,ExpressionUUID->"503c839c-d49b-4a41-a0e8-1a53b7bc2532"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940019172173883*^9},
 CellLabel->"Out[91]=",
 CellID->114015972,ExpressionUUID->"11861a9f-bb18-45e4-97b6-64a101dffcfd"]
}, Open  ]],

Cell["Or equivalently", "Text",
 CellChangeTimes->{3.9400191778745623`*^9},
 CellID->2120785723,ExpressionUUID->"85e99344-5197-4db0-bc99-4458851eabd3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "/@", 
  RowBox[{"Range", "[", "4", "]"}]}]], "Input",
 CellChangeTimes->{{3.940019179579273*^9, 3.940019184056905*^9}},
 CellLabel->"In[92]:=",
 CellID->277080466,ExpressionUUID->"2bcb26b0-78e5-4fc0-9885-e2928ab3c470"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940019184490621*^9},
 CellLabel->"Out[92]=",
 CellID->392687851,ExpressionUUID->"99c3708d-d18a-4838-b5f1-3e09cf926bb3"]
}, Open  ]],

Cell["\<\
This will take a list of lists and return a list of their first elements:\
\>", "Text",
 CellChangeTimes->{3.940019191632059*^9},
 CellID->379954713,ExpressionUUID->"7863d9ea-8bd8-4ecd-99a8-5121051cd903"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"First", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", "d"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"e", ",", "f"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"g", ",", "h"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9400191971276207`*^9, 3.940019206861042*^9}},
 CellLabel->"In[93]:=",
 CellID->1165206443,ExpressionUUID->"9e140a4a-b9a5-40f9-a179-566bae435654"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "c", ",", "e", ",", "g"}], "}"}]], "Output",
 CellChangeTimes->{3.9400192072395887`*^9},
 CellLabel->"Out[93]=",
 CellID->1567689556,ExpressionUUID->"dfb90b99-ea7f-4383-918d-62bee631c403"]
}, Open  ]],

Cell["or", "Text",
 CellChangeTimes->{{3.940019209831113*^9, 3.940019209946553*^9}},
 CellID->1484732292,ExpressionUUID->"4aee903e-7b91-439a-9d1c-1f2df6333583"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "/@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"c", ",", "d"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"e", ",", "f"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"g", ",", "h"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.940019211555758*^9, 3.940019218670333*^9}},
 CellLabel->"In[94]:=",
 CellID->1226987646,ExpressionUUID->"10fc2360-6436-4904-9bf7-b970f123a112"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "c", ",", "e", ",", "g"}], "}"}]], "Output",
 CellChangeTimes->{3.940019219185792*^9},
 CellLabel->"Out[94]=",
 CellID->634350023,ExpressionUUID->"8aff1ff6-3a22-4513-9999-299d5c19574b"]
}, Open  ]],

Cell["\<\
This will take a list of lists, and return a list of lists of all subsets of \
initial lists:\
\>", "Text",
 CellChangeTimes->{3.940019228270503*^9},
 CellID->1452214623,ExpressionUUID->"f800410d-e7a3-4130-8861-8456b63febed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Subsets", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"d", ",", "e"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940019232397324*^9, 3.940019240431127*^9}},
 CellLabel->"In[95]:=",
 CellID->898898074,ExpressionUUID->"a6f51532-4b71-42c9-b58d-c32ba0030948"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "a", "}"}], ",", 
     RowBox[{"{", "b", "}"}], ",", 
     RowBox[{"{", "c", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "c"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "c"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "d", "}"}], ",", 
     RowBox[{"{", "e", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"d", ",", "e"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940019241606679*^9},
 CellLabel->"Out[95]=",
 CellID->455763716,ExpressionUUID->"a969133a-6b23-4f6a-9ade-dbc0b99131c4"]
}, Open  ]],

Cell["\<\
You could have noticed already that all these examples essentially need a \
single loop which is replaced by Map. While by itself this is not a big deal, \
the main profit is another layer of abstraction - we no longer need variables \
and assignments, and thus don\[CloseCurlyQuote]t need to worry about them. \
For example, a problem of checking the array bounds just does not exist in \
this approach, without any toll on performance (apart
from that generally induced by Mathematica\[CloseCurlyQuote]s symbolic \
engine). Another added advantage is that the list of results is produced by \
Map internally, and thus efficiently, while in a procedural version we have \
to do it by hand, which is inefficient in Mathematica as we already discussed \
before.\
\>", "Text",
 CellChangeTimes->{{3.940019256322599*^9, 3.9400192822937307`*^9}},
 CellID->2094089610,ExpressionUUID->"fe05df19-c948-4d0c-a67e-4effbf8c66f8"],

Cell["\<\
Mapping a function of several arguments, with all arguments but one fixed\
\>", "ItemNumbered",
 CellChangeTimes->{3.940019290629657*^9},
 CellTags->"5.2.2.7",
 CellID->222711341,ExpressionUUID->"eb6a6e55-b718-447d-b6f5-023744f4a145"],

Cell["\<\
Let us consider another situation: what if we want to Map a function of more \
than one argument, but where all arguments but one are fixed. For example:\
\>", "Text",
 CellChangeTimes->{{3.940019300950355*^9, 3.9400193026207943`*^9}},
 CellID->969220861,ExpressionUUID->"d65a2b3e-e89d-4d8e-b449-d51366816948"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"f", ",", "a"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
   RowBox[{"Sin", "[", 
    RowBox[{"x", "+", "y"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940019306628604*^9, 3.940019320744688*^9}},
 CellLabel->"In[98]:=",
 CellID->2048812173,ExpressionUUID->"90bd5596-19a7-42f9-b117-c3fc7c242da3"],

Cell["\<\
And we want to Map it on a list {1,2,3,4,5}, with the variable <y> fixed at \
value <a>.\
\>", "Text",
 CellChangeTimes->{3.940019329139821*^9},
 CellID->116058367,ExpressionUUID->"507ec1d1-4019-46de-a575-0a585050fa71"],

Cell["\<\
Perhaps the best solution to this problem is obtained by using the built-in \
<Thread> command. But here, for the sake of example, we will see how we can \
get it with Map. Later we will return to this example again and show a \
solution using Thread.\
\>", "Text",
 CellChangeTimes->{{3.9400193420512323`*^9, 3.9400193526812696`*^9}},
 CellID->222030357,ExpressionUUID->"98d68f1f-7741-4ebf-a0d7-7769e7f42a37"],

Cell["One way is to define an auxiliary function g, as follows:", "Text",
 CellChangeTimes->{{3.9400193420512323`*^9, 3.9400193506072083`*^9}},
 CellID->1976818157,ExpressionUUID->"a489923f-1caf-417f-99a6-1855c2dff65f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "g", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Unprotect", "[", "g", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"g", "[", "x_", "]"}], ":=", 
   RowBox[{"f", "[", 
    RowBox[{"x", ",", "a"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940019355666747*^9, 3.940019412819228*^9}},
 CellLabel->"In[107]:=",
 CellID->2003667404,ExpressionUUID->"96adecd9-05e5-4180-a138-c9866b6be385"],

Cell["Now we can use Map:", "Text",
 CellChangeTimes->{3.940019422773507*^9},
 CellID->2022562511,ExpressionUUID->"fb6c829f-eb2d-4a5a-97a6-592a1075a365"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"g", ",", 
   RowBox[{"Range", "[", "5", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9400194240297823`*^9, 3.9400194277183867`*^9}},
 CellLabel->"In[110]:=",
 CellID->167994086,ExpressionUUID->"02a130b8-1074-4b0d-8266-b0542a25c4db"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"1", "+", "a"}], "]"}], ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"2", "+", "a"}], "]"}], ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"3", "+", "a"}], "]"}], ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"4", "+", "a"}], "]"}], ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"5", "+", "a"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400194293167143`*^9},
 CellLabel->"Out[110]=",
 CellID->1624355591,ExpressionUUID->"9814e9dc-dd2a-4d3c-9983-0fa183690da9"]
}, Open  ]],

Cell["\<\
If we need to solve just this problem, the disadvantage of the present \
solution is that we have to introduce an auxiliary function, which we only \
need once. If, on the other hand, we want to perform this operation more than \
once, the disadvantage is that we make a function <g> implicitly depend on \
the global variable <a> - this is a recipe for disaster. The better solution \
would be to use a pure function:\
\>", "Text",
 CellChangeTimes->{{3.940019443044569*^9, 3.9400194543166113`*^9}},
 CellID->60026375,ExpressionUUID->"f8c326b6-d189-40a5-98f0-995ba25cb549"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "[", 
     RowBox[{"#", ",", "a"}], "]"}], "&"}], ",", 
   RowBox[{"Range", "[", "5", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9400194609147463`*^9, 3.940019470217696*^9}},
 CellLabel->"In[111]:=",
 CellID->2105858755,ExpressionUUID->"6d584626-7dbe-431f-8d6d-ca73d72c5711"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"1", "+", "a"}], "]"}], ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"2", "+", "a"}], "]"}], ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"3", "+", "a"}], "]"}], ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"4", "+", "a"}], "]"}], ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"5", "+", "a"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940019470633748*^9},
 CellLabel->"Out[111]=",
 CellID->761121455,ExpressionUUID->"3e3cbd34-abc6-49ac-9367-841d8842eec8"]
}, Open  ]],

Cell[TextData[{
 "We have essentially created a curried function along the lines of section \
",
 ButtonBox["4.11.1.12",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-4-Rules-patterns-functions.nb", 
     CharacterEncoding -> "UTF-8"], "4.11.1.12"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-4-Rules-patterns-functions.\
nb"],
 ". In this case, the function is constructed on the spot, and no name or \
global definition is associated with it. This may be considered as one of the \
idioms, which is good to remember. However, keep in mind that in many cases \
one can use another built-in function Thread (to be covered soon) which is \
specially designed for this sort of situations and may be faster."
}], "Text",
 CellChangeTimes->{{3.940019478238731*^9, 3.9400194911093884`*^9}, {
  3.940019529429698*^9, 3.9400195294383793`*^9}},
 CellID->1689280969,ExpressionUUID->"6251a9d9-0fae-428b-80f2-21ba9d95e53c"],

Cell["How to prevent Map from mapping on the entire list", "ItemNumbered",
 CellChangeTimes->{3.940019541445684*^9},
 CellID->974872119,ExpressionUUID->"500777b8-cd97-4e7d-8161-1b1d7e3f2e88"],

Cell["\<\
I mentioned before that Map in its simplest form is a replacement for a loop. \
Since it is often useful in procedural approach to exit the loop abnormally \
with a Break[] command, let us discuss its analog for Map.\
\>", "Text",
 CellChangeTimes->{{3.940019548888135*^9, 3.9400195596551123`*^9}},
 CellID->1495846588,ExpressionUUID->"bd3034ea-58e1-4c6f-a887-7960fc808ac1"],

Cell["\<\
In the Mathematica model of computation, the best style of programming \
consists of operating on any composite object as a whole, and avoid breaking \
it into pieces, whenever possible. The functionality of Map is in full \
agreement with this principle - it Maps a given function on an entire list, \
whatever its length is. If however we want it to stop abnormally, the only \
way to do it I am aware of is to throw an exception.
However, if the result one is interested in is a resulting list (up to the \
point where the exception was thrown), then one has to either introduce \
auxiliary variables, or (much better), use a more sophisticated technique \
based on Reap-Sow operators (only version 5 onward).The Reap-Sow technique \
will be covered in detail in part II.\
\>", "Text",
 CellChangeTimes->{{3.940019548888135*^9, 3.940019569354701*^9}, {
  3.940019603353829*^9, 3.940019629239595*^9}},
 CellID->603827902,ExpressionUUID->"01640bd5-a5a3-4da7-85a2-3ab779294a4b"],

Cell["\<\
Consider an example: we want to map a function squaring its argument on a \
list of random numbers, but stop as soon as we encounter first non-positive \
number, and return the part of a list which has been processed.\
\>", "Text",
 CellChangeTimes->{{3.940019548888135*^9, 3.940019569354701*^9}, {
  3.940019603353829*^9, 3.940019638738638*^9}},
 CellID->1108001526,ExpressionUUID->"c330df68-a2aa-4b39-abb2-57263715d1eb"],

Cell["Here is a list:", "Text",
 CellChangeTimes->{{3.940019548888135*^9, 3.940019569354701*^9}, {
  3.940019603353829*^9, 3.940019636210985*^9}},
 CellID->178100551,ExpressionUUID->"44573416-ef8c-43ce-b159-e62c7f028ef7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "15", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940019644134379*^9, 3.9400196544337997`*^9}},
 CellLabel->"In[112]:=",
 CellID->1171708255,ExpressionUUID->"7a5e908c-c2e2-4129-adbe-7978d54d52e5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4", ",", "2", ",", "10", ",", "9", ",", "9", ",", "3", ",", "4", ",", "1", 
   ",", "9", ",", "4", ",", 
   RowBox[{"-", "1"}], ",", "9", ",", "6", ",", "5", ",", "0"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940019654952228*^9},
 CellLabel->"Out[112]=",
 CellID->772971963,ExpressionUUID->"824f36f8-f360-47f7-b820-fbd040927c60"]
}, Open  ]],

Cell["This will be a solution", "Text",
 CellChangeTimes->{3.940019667941371*^9},
 CellID->651506498,ExpressionUUID->"a0ba3fa5-6813-4afe-9c2e-3cc5015ba59f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"result", "=", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"Catch", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"#", ">", "0"}], ",", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"result", ",", 
           RowBox[{"#", "^", "2"}]}], "]"}], ",", 
         RowBox[{"Throw", "[", "result", "]"}]}], "]"}], "&"}], ",", 
      "testlist"}], "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940019679353833*^9, 3.940019708756013*^9}},
 CellLabel->"In[113]:=",
 CellID->1520032221,ExpressionUUID->"1de6df1e-cd69-4fd6-a187-502b7a0bcaca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "16", ",", "4", ",", "100", ",", "81", ",", "81", ",", "9", ",", "16", ",", 
   "1", ",", "81", ",", "16"}], "}"}]], "Output",
 CellChangeTimes->{3.940019709719552*^9},
 CellLabel->"Out[113]=",
 CellID->1913439180,ExpressionUUID->"7c1a1c7d-8734-4bdb-8e25-ee211dfd1930"]
}, Open  ]],

Cell["\<\
While this solution is not ideal in many ways, and uses some operations \
(Catch-Throw) not covered yet, my point here is to illustrate 2 things:\
\>", "Text",
 CellChangeTimes->{{3.940019725061206*^9, 3.940019732333745*^9}},
 CellID->124122568,ExpressionUUID->"1a7b287f-561f-4bb1-8d17-0347734c1a34"],

Cell["\<\
1. It is possible to prevent Map from going through an entire list even \
though Map is a built-in command without such explicit capability (it sweeps \
through an entire list by default).\
\>", "Text",
 CellChangeTimes->{{3.940019725061206*^9, 3.9400197346230717`*^9}},
 CellID->403463440,ExpressionUUID->"09650aa3-0d41-49f9-8af2-00c0cdaa5898"],

Cell["\<\
2. There is a significant price to pay in doing so. Here, we paid by:
a. Introducing a variable <result> (and then the Module construct to make it \
local)
b. Making a function to be Mapped more complicated (now it contains an If  \
statement).
c. <result> is continuously appended in place - this will become inefficient \
for large lists. For this last point, there are workarounds but they will \
make the code more complicated.
d. We loose the natural advantage that Map gives us: Map normally produces \
the resulting list for us. Here we instead create our own resulting list \
(<result> variable), and inevitably do it inefficiently as compared to a \
built-in Map. In fact, in this example the use of <Scan> command instead of \
Map would be more appropriate, but we have not covered it yet.
e. The code is less concise.\
\>", "Text",
 CellChangeTimes->{{3.940019745465869*^9, 3.940019798285432*^9}},
 CellID->1061357424,ExpressionUUID->"d02e63b3-640b-4204-a9ec-81857d339b05"],

Cell["\<\
So, my suggestion would be to try designing a program such that this kind of \
interruption of Map is not needed - it is possible to do this in most cases. \
If there is no other way - then use Throw and Catch as above (avoid however \
appending large lists in place - there are better techniques of list creation \
to be discussed later) . In fact, in many cases it may be more efficient to \
first Map the function on an entire list,
and then pick from that list only certain elements.\
\>", "Text",
 CellChangeTimes->{{3.940019807983922*^9, 3.9400198451459627`*^9}},
 CellID->1457015312,ExpressionUUID->"5907da2d-839a-4ce0-9fd4-869fa773d7c9"],

Cell["Interaction with the procedural code", "ItemNumbered",
 CellChangeTimes->{3.9400198568539743`*^9},
 CellTags->"5.2.2.9",
 CellID->866313141,ExpressionUUID->"3c7f9680-492b-4de9-a57b-5f40f3b24a70"],

Cell["\<\
It is possible to enhance somewhat the functionality of Map by embedding some \
procedural code (essentially, side effects) inside the function being mapped. \
One can also view this as continuous run-time redefinitions of the function \
being mapped. Whatever the interpretation, Mathematica allows for such \
things, which is often handy. A few examples:\
\>", "Text",
 CellChangeTimes->{{3.940019865136361*^9, 3.9400198842681007`*^9}},
 CellID->185834127,ExpressionUUID->"75a8cb85-b85d-44b0-bb73-777b664ca273"],

Cell["Example: partial sums", "SubitemNumbered",
 CellChangeTimes->{3.940019911561154*^9},
 CellID->873312286,ExpressionUUID->"56420f89-b553-4d15-b463-266e40fee6e9"],

Cell["This will create a list of partial sums:", "Text",
 CellChangeTimes->{3.940019917965514*^9, 3.940740612528564*^9},
 CellID->1856347204,ExpressionUUID->"5445f0b0-1a81-4a24-911e-a29e161549b0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"sum", "=", "0"}], "}"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"sum", "+=", "#"}], "&"}], "/@", 
    RowBox[{"Range", "[", "10", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940019920358185*^9, 3.9400199337644176`*^9}},
 CellLabel->"In[114]:=",
 CellID->515204961,ExpressionUUID->"0e84f071-69d8-4837-b31e-a3df8ad826b2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "3", ",", "6", ",", "10", ",", "15", ",", "21", ",", "28", ",", 
   "36", ",", "45", ",", "55"}], "}"}]], "Output",
 CellChangeTimes->{3.940019935004716*^9},
 CellLabel->"Out[114]=",
 CellID->1249863935,ExpressionUUID->"1690bb55-3e7a-4cb3-b4c3-a73704fb4b3c"]
}, Open  ]],

Cell["or, we can define a function", "Text",
 CellChangeTimes->{3.940019945763335*^9},
 CellID->1495245145,ExpressionUUID->"e5411c8e-12d1-4654-99d2-33f0b0a70ece"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "partSum", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"partSum", "[", "x_List", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sum", "=", "0"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"sum", "+=", "#"}], "&"}], "/@", "x"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940019953658812*^9, 3.940019975436886*^9}},
 CellLabel->"In[115]:=",
 CellID->225717472,ExpressionUUID->"19d9a41f-ab69-44e8-bbea-a5ec919ae111"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"partSum", "[", 
  RowBox[{"Range", "[", "15", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.940019977748124*^9, 3.9400199824281263`*^9}},
 CellLabel->"In[117]:=",
 CellID->897372689,ExpressionUUID->"3f98a02e-23fc-45b4-a24c-07033d2a2b8b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "3", ",", "6", ",", "10", ",", "15", ",", "21", ",", "28", ",", 
   "36", ",", "45", ",", "55", ",", "66", ",", "78", ",", "91", ",", "105", 
   ",", "120"}], "}"}]], "Output",
 CellChangeTimes->{3.94001998285324*^9},
 CellLabel->"Out[117]=",
 CellID->1122285509,ExpressionUUID->"2b3e5aa9-e239-4eb8-8f6f-3a1b7616faa7"]
}, Open  ]],

Cell["Example: simulating MapIndexed", "SubitemNumbered",
 CellChangeTimes->{3.940019998291223*^9},
 CellTags->"5.2.2.9.2",
 CellID->467378720,ExpressionUUID->"99bea3dc-ada1-47a5-a467-0f3aec4871fe"],

Cell["\<\
Here we will mimic the action of the MapIndexed function (covered next) in \
its simplest form (when it is used on a flat list) - it supplies the position \
of the element in a list as a second argument to the function being mapped on \
the list.\
\>", "Text",
 CellChangeTimes->{{3.940020004600711*^9, 3.94002001307327*^9}},
 CellID->1886449961,ExpressionUUID->"2cf22631-d550-445f-93f6-64f74dc5f8be"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "f", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"pos", "=", "1"}], "}"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"#", ",", 
       RowBox[{"{", 
        RowBox[{"pos", "++"}], "}"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", 
     RowBox[{"10", ",", "20"}], "]"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.940020017321581*^9, 3.940020044872913*^9}},
 CellLabel->"In[119]:=",
 CellID->1030009957,ExpressionUUID->"b198e4d4-e6d3-45a2-b0f7-2f50ddeebb11"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"10", ",", 
     RowBox[{"{", "1", "}"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"11", ",", 
     RowBox[{"{", "2", "}"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"12", ",", 
     RowBox[{"{", "3", "}"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"13", ",", 
     RowBox[{"{", "4", "}"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"14", ",", 
     RowBox[{"{", "5", "}"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"15", ",", 
     RowBox[{"{", "6", "}"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"16", ",", 
     RowBox[{"{", "7", "}"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"17", ",", 
     RowBox[{"{", "8", "}"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"18", ",", 
     RowBox[{"{", "9", "}"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"19", ",", 
     RowBox[{"{", "10", "}"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"20", ",", 
     RowBox[{"{", "11", "}"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.940020036845214*^9, 3.940020045267255*^9}},
 CellLabel->"Out[120]=",
 CellID->164128919,ExpressionUUID->"07373ff0-94ad-4f17-96d0-06713304f8d5"]
}, Open  ]],

Cell["We can again package this as a function:", "Text",
 CellChangeTimes->{3.940020053722389*^9, 3.940740612553051*^9},
 CellID->755491452,ExpressionUUID->"426822df-4da6-467d-a93c-87a0e4f377fc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "myMapIndexed", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"myMapIndexed", "[", 
    RowBox[{"f_", ",", "x_List"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pos", "=", "1"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"f", "[", 
        RowBox[{"#", ",", 
         RowBox[{"{", 
          RowBox[{"pos", "++"}], "}"}]}], "]"}], "&"}], "/@", "x"}]}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940020056488459*^9, 3.940020092106751*^9}},
 CellLabel->"In[121]:=",
 CellID->1196468470,ExpressionUUID->"34b487e1-7004-4578-a35a-e18122d6f5b9"],

Cell["Example: moving average revisited", "SubitemNumbered",
 CellChangeTimes->{3.9400201070738173`*^9},
 CellID->1276692125,ExpressionUUID->"de3e8f91-730d-45d4-8959-e95ee6efcbb9"],

Cell["\<\
We can implement a version of moving average function by constantly updating \
a \[OpenCurlyDoubleQuote]running\[CloseCurlyDoubleQuote] list of neighbor \
points during mapping. Here we Map a function that does it, on a list of \
first 15 natural numbers, and average each number with 2 neighboring numbers \
on each side:\
\>", "Text",
 CellChangeTimes->{{3.940020114288406*^9, 3.940020122949512*^9}, 
   3.940740612573992*^9},
 CellID->1855427698,ExpressionUUID->"77ea8edd-041d-4c8c-af51-8442f0b57e41"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"avlist", "=", 
      RowBox[{"{", "}"}]}], ",", "result"}], "}"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"CompoundExpression", "[", 
      RowBox[{
       RowBox[{"AppendTo", "[", 
        RowBox[{"avlist", ",", "#"}], "]"}], ";", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "avlist", "]"}], ">=", "5"}], ",", 
         RowBox[{
          RowBox[{"result", "=", 
           RowBox[{
            RowBox[{"Total", "[", "avlist", "]"}], "/", "5"}]}], ";", 
          RowBox[{"avlist", "=", 
           RowBox[{"Rest", "[", "avlist", "]"}]}], ";", "result"}]}], "]"}]}],
       "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", "15", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940020129834964*^9, 3.940020184855483*^9}},
 CellLabel->"In[123]:=",
 CellID->1195888133,ExpressionUUID->"e1a327e9-3eb2-4ac6-8d56-28f7523b8ee5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Null", ",", "Null", ",", "Null", ",", "Null", ",", "3", ",", "4", ",", "5",
    ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", 
   ",", "13"}], "}"}]], "Output",
 CellChangeTimes->{3.940020185796008*^9},
 CellLabel->"Out[123]=",
 CellID->2025697632,ExpressionUUID->"69c36f85-5a49-44dd-8cec-402beaa9b449"]
}, Open  ]],

Cell["\<\
We have to delete the first 2 m results, since they will be Null. Here is the \
resulting function:\
\>", "Text",
 CellChangeTimes->{3.94002019794711*^9, 3.940740612594245*^9},
 CellID->1841845133,ExpressionUUID->"05a64155-0676-4512-9b72-044a6b8cdb58"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "movAverage", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"movAverage", "[", 
     RowBox[{"x_List", ",", "m_Integer"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "x", "]"}], ">", 
     RowBox[{"2", "m"}]}]}], ":=", 
   RowBox[{"Drop", "[", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"avlist", "=", 
          RowBox[{"{", "}"}]}], ",", "result"}], "}"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"CompoundExpression", "[", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"avlist", ",", "#"}], "]"}], ";", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Length", "[", "avlist", "]"}], ">=", 
              RowBox[{
               RowBox[{"2", "m"}], "+", "1"}]}], ",", 
             RowBox[{
              RowBox[{"result", "=", 
               RowBox[{
                RowBox[{"Total", "[", "avlist", "]"}], "/", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"2", "m"}], "+", "1"}], ")"}]}]}], ";", 
              RowBox[{"avlist", "=", 
               RowBox[{"Rest", "[", "avlist", "]"}]}], ";", "result"}]}], 
            "]"}]}], "]"}], "&"}], "/@", "x"}]}], "]"}], ",", 
     RowBox[{"2", "m"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9400202168977213`*^9, 3.9400202869466352`*^9}},
 CellLabel->"In[124]:=",
 CellID->1926455719,ExpressionUUID->"0bf6374c-bc1b-4207-9c78-71a6c1061e3a"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.9400202898144617`*^9, 3.940020290621674*^9}},
 CellID->761130849,ExpressionUUID->"3278bdfb-9bc4-413f-8bde-4c639a08a42a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Range", "[", "10", "]"}], "^", "2"}]], "Input",
 CellChangeTimes->{{3.9400202917350807`*^9, 3.9400202941758213`*^9}},
 CellLabel->"In[126]:=",
 CellID->1789112693,ExpressionUUID->"961ef306-bb86-4130-ad9d-0ea3cdccf4d4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "9", ",", "16", ",", "25", ",", "36", ",", "49", ",", 
   "64", ",", "81", ",", "100"}], "}"}]], "Output",
 CellChangeTimes->{3.940020294572439*^9},
 CellLabel->"Out[126]=",
 CellID->1650298659,ExpressionUUID->"135539d4-902c-4271-a99a-8b6f59b3f2b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"movAverage", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], "^", "2"}], ",", "1"}], "]"}]], "Input",\

 CellChangeTimes->{{3.940020298408242*^9, 3.9400203068244467`*^9}},
 CellLabel->"In[127]:=",
 CellID->817103246,ExpressionUUID->"8a595a7b-be39-4d45-983a-1ec3029acdbd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["14", "3"], ",", 
   FractionBox["29", "3"], ",", 
   FractionBox["50", "3"], ",", 
   FractionBox["77", "3"], ",", 
   FractionBox["110", "3"], ",", 
   FractionBox["149", "3"], ",", 
   FractionBox["194", "3"], ",", 
   FractionBox["245", "3"]}], "}"}]], "Output",
 CellChangeTimes->{3.9400203074642277`*^9},
 CellLabel->"Out[127]=",
 CellID->83677662,ExpressionUUID->"d7b228c4-2e3e-499e-99de-8edaeca98352"]
}, Open  ]],

Cell["\<\
This is another implementation where the idea of using side effects is pushed \
to the extreme:\
\>", "Text",
 CellChangeTimes->{3.940020351455711*^9, 3.940740612614821*^9},
 CellID->1916160096,ExpressionUUID->"649e816b-89e1-40cb-8d17-d5054195a40d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "movAverageAlt", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"movAverageAlt", "[", 
     RowBox[{"x_List", ",", "m_Integer"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "x", "]"}], ">", 
     RowBox[{"2", "m"}]}]}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", "=", "1"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"Total", "[", 
         RowBox[{"Tak", "[", 
          RowBox[{"x", ",", 
           RowBox[{"{", 
            RowBox[{"n", ",", 
             RowBox[{
              RowBox[{"2", "m"}], "+", 
              RowBox[{"n", "++"}]}]}], "}"}]}], "]"}], "]"}], "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", "m"}], "+", "1"}], ")"}]}], "&"}], "/@", 
      RowBox[{"Drop", "[", 
       RowBox[{"x", ",", 
        RowBox[{"2", "m"}]}], "]"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940020357945924*^9, 3.940020406079373*^9}},
 CellLabel->"In[128]:=",
 CellID->1623577284,ExpressionUUID->"10063f6b-8e34-4865-8c2b-f0941e9ebda2"],

Cell[TextData[{
 "Notice that here, it does not use any information from the list on which \
the function is mapped - this is a pure function with zero arguments (see \
section ",
 ButtonBox["4.11.1.11",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-4-Rules-patterns-functions.nb", 
     CharacterEncoding -> "UTF-8"], "4.11.1.11"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-4-Rules-patterns-functions.\
nb"],
 "), so we could just as well map on a list of zeros or ones - it just needs \
to have the right length. C programmers may worry about the line {n,2m+n++}, \
since its value depends on which part of the list is evaluated first. But \
here this is system-independent, since the standard evaluation procedure \
applied to a simple flat list prescribes that the parts of such list will \
always be evaluated from left to right."
}], "Text",
 CellChangeTimes->{{3.940020418358829*^9, 3.940020443301271*^9}, {
  3.940020481299395*^9, 3.940020481308407*^9}},
 CellID->427971199,ExpressionUUID->"b6b7ecd7-a3af-4f02-95e3-9a16b85335bb"],

Cell["We can do some efficiency tests", "Text",
 CellChangeTimes->{{3.940020418358829*^9, 3.940020441331286*^9}},
 CellID->1570148687,ExpressionUUID->"07570d1a-9883-413c-a974-9da7cfdf21bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"movAverage", "[", 
    RowBox[{
     RowBox[{"Range", "[", "10000", "]"}], ",", "10"}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9400204874449253`*^9, 3.940020498552004*^9}},
 CellLabel->"In[130]:=",
 CellID->977788489,ExpressionUUID->"d359f88f-81ca-4878-b368-e33e029311e0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.058052`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940020499428698*^9},
 CellLabel->"Out[130]=",
 CellID->1597397422,ExpressionUUID->"a32e277a-edb5-4b89-a5d7-e109a58f4eb2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"movAverageAlt", "[", 
    RowBox[{
     RowBox[{"Range", "[", "10000", "]"}], ",", "10"}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940020506624967*^9, 3.940020507029725*^9}},
 CellLabel->"In[131]:=",
 CellID->1765400407,ExpressionUUID->"c7c23220-b27a-4b66-a74c-3a37bcadf8e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.030136`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940020507726501*^9},
 CellLabel->"Out[131]=",
 CellID->1417338212,ExpressionUUID->"d4530efb-d7ad-41ce-ad64-6ab8624bd309"]
}, Open  ]],

Cell["\<\
We notice that the second version is about twice faster. Let me mention that \
these implementations are not very efficient, and the purpose of this example \
was to demonstrate the construction used here.\
\>", "Text",
 CellChangeTimes->{{3.940020516990221*^9, 3.9400205267017317`*^9}},
 CellID->2138956895,ExpressionUUID->"b48ff0e6-56e8-467c-931f-8e32c1bed64f"],

Cell[TextData[{
 "This is one of the most efficient implementations, which we covered before \
in section ",
 ButtonBox["3.8.1.2",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-3-Lists.nb", CharacterEncoding -> "UTF-8"], 
    "3.8.1.2"},
  ButtonNote->"/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-3-Lists.nb"],
 ", for comparison:"
}], "Text",
 CellChangeTimes->{{3.940020516990221*^9, 3.9400205302795563`*^9}, {
   3.940020573079707*^9, 3.9400205730881577`*^9}, 3.9407406126359453`*^9},
 CellID->151014196,ExpressionUUID->"d911bfec-a020-47dd-a1cc-ba430db4f8c5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "movingAverage", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"movingAverage", "[", 
    RowBox[{"x_List", ",", "m_Integer"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"Plus", "@@", "#"}], ")"}], "/", 
      RowBox[{"Length", "[", "#", "]"}]}], "&"}], "@", 
    RowBox[{"Partition", "[", 
     RowBox[{"x", ",", 
      RowBox[{
       RowBox[{"Length", "[", "x", "]"}], "-", 
       RowBox[{"2", "*", "m"}]}], ",", "1"}], "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9400205879052877`*^9, 3.940020626860753*^9}},
 CellLabel->"In[132]:=",
 CellID->499434358,ExpressionUUID->"ef307556-910e-46e8-bec2-a8e67fd81f5c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"movingAverage", "[", 
    RowBox[{
     RowBox[{"Range", "[", "10000", "]"}], ",", "10"}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940020628362941*^9, 3.940020638270166*^9}},
 CellLabel->"In[134]:=",
 CellID->1934511919,ExpressionUUID->"e8f414aa-6cf6-4a24-8c42-e4a655590f27"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.01594`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940020638716516*^9},
 CellLabel->"Out[134]=",
 CellID->52810010,ExpressionUUID->"f0c9ec4e-f0a1-49de-817f-cce36d8e7f0c"]
}, Open  ]],

Cell["\<\
Normally, you don\[CloseCurlyQuote] t get a big penalty in efficiency if you \
use just one or two global variables for side effects inside the mapped \
function. But manipulations with entire lists, like those done above, are \
costly and should be avoided.\
\>", "Text",
 CellChangeTimes->{{3.94002065162429*^9, 3.940020659920823*^9}},
 CellID->667091859,ExpressionUUID->"50d693f3-48da-4b7e-9d35-fca4e433fad5"],

Cell["\<\
More general uses of Map - Mapping on a certain level in an expression\
\>", "ItemNumbered",
 CellChangeTimes->{3.9400206978021307`*^9},
 CellID->114629834,ExpressionUUID->"9503d160-0df8-48b3-9c02-2e2920f40379"],

Cell[TextData[{
 "As a third optional argument, Map takes a level specification. This is the \
standard level specification (see section ",
 ButtonBox["1.1.7",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-1-Introduction.nb", CharacterEncoding -> 
     "UTF-8"], "1.1.7"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-1-Introduction.nb"],
 ") used in many Mathematica constructs - here it indicates the level(s) on \
which the function should be mapped. Let me remind that a single integer \
gives the level up to which the function should be mapped, integer in \
parentheses means that mapping should affect only that level, and a pair of \
integers in\nparentheses indicate a range of levels affected by mapping."
}], "Text",
 CellChangeTimes->{{3.940020706736745*^9, 3.940020715902163*^9}, {
  3.9400207520286093`*^9, 3.940020752037058*^9}},
 CellID->290788679,ExpressionUUID->"71c19482-3596-492f-b2b2-5454b32ced2e"],

Cell[CellGroupData[{

Cell["Initial examples", "SubitemNumbered",
 CellChangeTimes->{3.9400207674711943`*^9},
 CellID->624472263,ExpressionUUID->"7563e1a2-b6b8-4d6c-85b3-e3a29b9490db"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"f", ",", "testexpr"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.9400207726209917`*^9, 3.940020781722855*^9}},
 CellLabel->"In[135]:=",
 CellID->29234572,ExpressionUUID->"18ca50bd-ed91-46d1-8360-1612475b7f96"]
}, Open  ]],

Cell["This is our initial list", "Text",
 CellChangeTimes->{3.9400207897361383`*^9},
 CellID->1495825740,ExpressionUUID->"4e8e9961-7ecd-4087-a708-c987c3c50b53"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testexpr", "=", 
  RowBox[{"Outer", "[", 
   RowBox[{"List", ",", 
    RowBox[{"Range", "[", "2", "]"}], ",", 
    RowBox[{"Range", "[", "3", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940020791459008*^9, 3.940020800362543*^9}},
 CellLabel->"In[136]:=",
 CellID->1973566738,ExpressionUUID->"6204741e-f324-417e-a63f-eba57c6a2c56"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940020801380525*^9},
 CellLabel->"Out[136]=",
 CellID->1804770771,ExpressionUUID->"41e4d3e5-3118-43be-996a-31ee7ab44f0e"]
}, Open  ]],

Cell["First, let us use simple Map:", "Text",
 CellChangeTimes->{3.94002080793435*^9},
 CellID->1777903191,ExpressionUUID->"639dc318-1c7a-48d6-a111-c62417159278"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", "testexpr"}], "]"}]], "Input",
 CellChangeTimes->{{3.940020809368186*^9, 3.9400208118937387`*^9}},
 CellLabel->"In[137]:=",
 CellID->594460468,ExpressionUUID->"d897e657-a089-4065-b3ca-a2efff2e5493"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}]}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}]}], "}"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940020812163657*^9},
 CellLabel->"Out[137]=",
 CellID->2054001964,ExpressionUUID->"40fd6afc-9b0c-42e5-8cbc-8a57c1e49957"]
}, Open  ]],

Cell["\<\
The way to think about Map-ping on higher levels is that we effectively \
\[OpenCurlyDoubleQuote]sneak\[CloseCurlyDoubleQuote] through some number of \
curly braces, and then Map.\
\>", "Text",
 CellChangeTimes->{{3.940020819406818*^9, 3.9400208251243362`*^9}},
 CellID->811383423,ExpressionUUID->"e2f1ec16-c14e-4010-853f-0adf6bcc0486"],

Cell["Now we Map on levels 1 and 2:", "Text",
 CellChangeTimes->{{3.940020819406818*^9, 3.940020823709618*^9}},
 CellID->2146302223,ExpressionUUID->"725eddf6-c54d-473d-b421-b954a81765b1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", "testexpr", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400208286441936`*^9, 3.940020831370757*^9}},
 CellLabel->"In[138]:=",
 CellID->215136518,ExpressionUUID->"3c992059-bdc3-4d74-b98d-c9744215038e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], "]"}]}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}], "]"}]}], "}"}], "]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9400208317432404`*^9},
 CellLabel->"Out[138]=",
 CellID->1177298959,ExpressionUUID->"81c1194b-b407-4cc5-b4e8-e9fe1f6db0d0"]
}, Open  ]],

Cell["The same can be achieved by", "Text",
 CellChangeTimes->{3.940020845393733*^9},
 CellID->445878856,ExpressionUUID->"a0409778-d989-42a8-a9f1-2d1dcd278144"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", "testexpr", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9400208470013533`*^9, 3.940020851200535*^9}},
 CellLabel->"In[139]:=",
 CellID->1069544198,ExpressionUUID->"fc99cfb4-e180-4da5-969d-1c5dcc09c296"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], "]"}]}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}], "]"}]}], "}"}], "]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.94002085164869*^9},
 CellLabel->"Out[139]=",
 CellID->1774939182,ExpressionUUID->"d3491c4a-5808-47c4-bcce-e56bebb8f1b0"]
}, Open  ]],

Cell["Now we Map on levels 2 and 3:", "Text",
 CellChangeTimes->{3.9400208575199127`*^9},
 CellID->707491397,ExpressionUUID->"1c821f0f-ce49-44bd-af6f-ebc263b5af53"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", "testexpr", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940020860158869*^9, 3.940020863515069*^9}},
 CellLabel->"In[140]:=",
 CellID->1055914962,ExpressionUUID->"cc72936d-9f2f-4e67-9fa6-339fd64c5d65"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"f", "[", "1", "]"}], ",", 
        RowBox[{"f", "[", "1", "]"}]}], "}"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"f", "[", "1", "]"}], ",", 
        RowBox[{"f", "[", "2", "]"}]}], "}"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"f", "[", "1", "]"}], ",", 
        RowBox[{"f", "[", "3", "]"}]}], "}"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"f", "[", "2", "]"}], ",", 
        RowBox[{"f", "[", "1", "]"}]}], "}"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"f", "[", "2", "]"}], ",", 
        RowBox[{"f", "[", "2", "]"}]}], "}"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"f", "[", "2", "]"}], ",", 
        RowBox[{"f", "[", "3", "]"}]}], "}"}], "]"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9400208638952293`*^9},
 CellLabel->"Out[140]=",
 CellID->1019561024,ExpressionUUID->"6bc83a72-a2fd-4314-b290-770ddd37d607"]
}, Open  ]],

Cell["Now only on level 3:", "Text",
 CellChangeTimes->{3.940020888951447*^9},
 CellID->990110955,ExpressionUUID->"9491080d-5019-4f8a-9c54-39a024d68d4d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", "testexpr", ",", 
   RowBox[{"{", "3", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940020890038838*^9, 3.94002089297855*^9}},
 CellLabel->"In[141]:=",
 CellID->79495560,ExpressionUUID->"52af0d3b-79a1-4815-a79c-394d4b8a9376"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "1", "]"}], ",", 
       RowBox[{"f", "[", "1", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "1", "]"}], ",", 
       RowBox[{"f", "[", "2", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "1", "]"}], ",", 
       RowBox[{"f", "[", "3", "]"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "2", "]"}], ",", 
       RowBox[{"f", "[", "1", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "2", "]"}], ",", 
       RowBox[{"f", "[", "2", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "2", "]"}], ",", 
       RowBox[{"f", "[", "3", "]"}]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400208932863626`*^9},
 CellLabel->"Out[141]=",
 CellID->1867290273,ExpressionUUID->"42f28a67-c625-4a15-b2cd-3d61ff1b9fab"]
}, Open  ]],

Cell["\<\
Negative levels can also be used. In this case negative 1 is equivalent to 3:\
\
\>", "Text",
 CellChangeTimes->{3.9400209024078493`*^9},
 CellID->221601053,ExpressionUUID->"2ff883f9-b924-4e29-9c64-02cacd3d57cf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", "testexpr", ",", 
   RowBox[{"{", 
    RowBox[{"-", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940020904078162*^9, 3.9400209081702423`*^9}},
 CellLabel->"In[142]:=",
 CellID->776995133,ExpressionUUID->"381d85bb-d7e2-403d-86d6-1f0d1369b26e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "1", "]"}], ",", 
       RowBox[{"f", "[", "1", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "1", "]"}], ",", 
       RowBox[{"f", "[", "2", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "1", "]"}], ",", 
       RowBox[{"f", "[", "3", "]"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "2", "]"}], ",", 
       RowBox[{"f", "[", "1", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "2", "]"}], ",", 
       RowBox[{"f", "[", "2", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "2", "]"}], ",", 
       RowBox[{"f", "[", "3", "]"}]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940020908649406*^9},
 CellLabel->"Out[142]=",
 CellID->535750509,ExpressionUUID->"a674aa3b-3b32-4151-b9c3-ba1b7d943ac4"]
}, Open  ]],

Cell["\<\
Be aware however that for general expressions (trees, for example), there is \
no simple connection between negative and positive level specifications. \
Specification {-n} means \[OpenCurlyDoubleQuote]all sub-expressions of depth \
n\[CloseCurlyDoubleQuote], while {n} means all elements at the level <n>. \
Negative level specifications may look exotic, but in practice they are often \
quite useful. One particular example where Map-ping on negative levels is \
useful is
when one has to grow some tree in a breadth-first manner.\
\>", "Text",
 CellChangeTimes->{{3.940020917154751*^9, 3.940020937959176*^9}},
 CellID->177426377,ExpressionUUID->"b5e16ff2-9f58-4035-a622-116406e2f37b"],

Cell["\<\
Specification <-n> without parentheses means \[OpenCurlyDoubleQuote]all \
subexpressions of depth at least n\[CloseCurlyDoubleQuote]. For example,\
\>", "Text",
 CellChangeTimes->{{3.940020917154751*^9, 3.940020933380787*^9}},
 CellID->1542623490,ExpressionUUID->"7a1e612c-03e3-46a6-a9bd-7e7415fc58ab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", "testexpr", ",", 
   RowBox[{"-", "1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940020950309268*^9, 3.9400209536227217`*^9}},
 CellLabel->"In[143]:=",
 CellID->1744383203,ExpressionUUID->"4b0ae063-09f2-476d-b2af-bd00e7a6f7a1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"f", "[", "1", "]"}], ",", 
         RowBox[{"f", "[", "1", "]"}]}], "}"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"f", "[", "1", "]"}], ",", 
         RowBox[{"f", "[", "2", "]"}]}], "}"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"f", "[", "1", "]"}], ",", 
         RowBox[{"f", "[", "3", "]"}]}], "}"}], "]"}]}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"f", "[", "2", "]"}], ",", 
         RowBox[{"f", "[", "1", "]"}]}], "}"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"f", "[", "2", "]"}], ",", 
         RowBox[{"f", "[", "2", "]"}]}], "}"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"f", "[", "2", "]"}], ",", 
         RowBox[{"f", "[", "3", "]"}]}], "}"}], "]"}]}], "}"}], "]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940020954010531*^9},
 CellLabel->"Out[143]=",
 CellID->2027552980,ExpressionUUID->"e05e7a80-ac2b-41d1-9282-5f4894aaee20"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", "testexpr", ",", 
   RowBox[{"-", "2"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9400209567314653`*^9, 3.940020959571212*^9}},
 CellLabel->"In[144]:=",
 CellID->713577422,ExpressionUUID->"eb519b2f-78f6-4888-97c1-27330fd851d1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "3"}], "}"}], "]"}]}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "1"}], "}"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}], "]"}]}], "}"}], "]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9400209599760723`*^9},
 CellLabel->"Out[144]=",
 CellID->1331719583,ExpressionUUID->"5c5340cf-3651-4a63-a717-746e9a084ebf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", "testexpr", ",", 
   RowBox[{"-", "3"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940020965113798*^9, 3.9400209681130667`*^9}},
 CellLabel->"In[145]:=",
 CellID->520970929,ExpressionUUID->"5a4b6167-6011-4e31-b9c7-a9fd71fdc220"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}]}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}]}], "}"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940020968533639*^9},
 CellLabel->"Out[145]=",
 CellID->1646942031,ExpressionUUID->"63eb993c-618e-48ee-960b-ead8dbda56e6"]
}, Open  ]],

Cell["\<\
Once again, for nested lists with the same dimensions of the sublists, we see \
the connection to positive level specification, because on each level all \
elements have the same depth. In general, there is no such connection.\
\>", "Text",
 CellChangeTimes->{{3.940020974265283*^9, 3.940020979035503*^9}},
 CellID->1237988834,ExpressionUUID->"196bba62-e99e-40ca-8eb5-c7f6b277aeb4"],

Cell["\<\
Less trivial example - using Map to sort sublists in a nested list\
\>", "SubitemNumbered",
 CellChangeTimes->{3.940021002398841*^9},
 CellID->1693126585,ExpressionUUID->"beefb183-4a8e-4115-831e-4b39c46273ef"],

Cell["Create a list (table) of depth 4, of random numbers", "Text",
 CellChangeTimes->{3.9400210116764107`*^9},
 CellID->72707698,ExpressionUUID->"9857c7fc-076c-4765-8666-0522288c59cf"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "testexpr", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testexpr", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "3", "}"}], ",", 
    RowBox[{"{", "2", "}"}], ",", 
    RowBox[{"{", "3", "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9400210151432047`*^9, 3.940021047137529*^9}},
 CellLabel->"In[146]:=",
 CellID->1666235379,ExpressionUUID->"2a3b172b-b46e-42a4-b649-2a334d23a0b7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "7", ",", "6"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "7", ",", "10"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "10", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "7", ",", "7"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940021047699198*^9},
 CellLabel->"Out[147]=",
 CellID->1225197839,ExpressionUUID->"7e1f5355-a8c2-4d06-b603-7f34c2e0a692"]
}, Open  ]],

Cell["\<\
Now say we need to sort the sublists of numbers. The way to do it is to Map \
the Sort function on the level {2}:\
\>", "Text",
 CellChangeTimes->{{3.940021060466031*^9, 3.9400210620755787`*^9}},
 CellID->236475384,ExpressionUUID->"adda28ab-3fed-4ff5-8fae-79a67584621b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Sort", ",", "testexpr", ",", 
   RowBox[{"{", "2", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940021065452971*^9, 3.940021070115838*^9}},
 CellLabel->"In[148]:=",
 CellID->1542997506,ExpressionUUID->"4a99559e-8593-4660-a26f-ea2aaad4c3cc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "6", ",", "7"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "6", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "7", ",", "10"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "7", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "7", ",", "9"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400210704992523`*^9},
 CellLabel->"Out[148]=",
 CellID->43680077,ExpressionUUID->"45977a5f-221c-4009-a7a9-e6c897d79987"]
}, Open  ]],

Cell["If we want to sort in decreasing order, then:", "Text",
 CellChangeTimes->{3.94002109679559*^9},
 CellID->1839130512,ExpressionUUID->"e4d95a16-d6f3-413a-8bef-d29afe943e9f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sort", "[", 
     RowBox[{"#", ",", 
      RowBox[{
       RowBox[{"#1", ">=", "#2"}], "&"}]}], "]"}], "&"}], ",", "testexpr", 
   ",", 
   RowBox[{"{", "2", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940021099365542*^9, 3.940021112161489*^9}},
 CellLabel->"In[149]:=",
 CellID->1406792615,ExpressionUUID->"a5bf7819-538c-4b27-b4c3-21f7eaeaac74"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "7", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "7", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "7", ",", "7"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940021112500001*^9},
 CellLabel->"Out[149]=",
 CellID->2070196537,ExpressionUUID->"15795bca-56db-4989-9b51-6158f1fe54f1"]
}, Open  ]],

Cell["\<\
This example is a little tricky and requires some explanation: the point is \
that Sort itself is a higher order function, which takes as a second optional \
argument the sorting criteria function. The criteria function depends on 2 \
variables, and in this case is <#1\[GreaterEqual] #2&>. There is no confusion \
between the first argument of Sort # and the argument #1 from the criteria \
function, because the latter is completely contained in the former. To \
clarify this, let us do the same thing without the use of pure functions:\
\>", "Text",
 CellChangeTimes->{{3.940021121082137*^9, 3.940021148928784*^9}},
 CellID->263148665,ExpressionUUID->"33572a71-4cfc-4085-bd61-7464acfee76b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"sortF", ",", "critF"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"critF", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
   RowBox[{"x", ">=", "y"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"sortF", "[", "x_List", "]"}], ":=", 
   RowBox[{"Sort", "[", 
    RowBox[{"x", ",", "critF"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940021156804777*^9, 3.940021181808652*^9}},
 CellLabel->"In[150]:=",
 CellID->1227766281,ExpressionUUID->"f861edc6-1d1d-4977-92df-c0ad5781f84e"],

Cell["Now we can Map sortF instead of Sort", "Text",
 CellChangeTimes->{3.940021188960305*^9},
 CellID->1868024684,ExpressionUUID->"284f5afd-90a3-4277-b1c8-5966b3212188"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"sortF", ",", "testexpr", ",", 
   RowBox[{"{", "2", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940021190238166*^9, 3.9400211953069773`*^9}},
 CellLabel->"In[153]:=",
 CellID->279596071,ExpressionUUID->"253dd758-4db1-47b6-9707-ff483f304e57"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "7", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "7", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "7", ",", "7"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940021195661837*^9},
 CellLabel->"Out[153]=",
 CellID->544472254,ExpressionUUID->"8d814af6-f05c-4dd8-9147-bcd4b73ce37c"]
}, Open  ]],

Cell["\<\
The price to pay here is that two auxiliary functions have to be introduced \
and given names. As it happens, we can use a built-in function GreaterEqual, \
instead of critF:\
\>", "Text",
 CellChangeTimes->{{3.940021203735618*^9, 3.940021207252462*^9}},
 CellID->491486440,ExpressionUUID->"69ebb388-9a98-41b2-acb5-e298bd4de328"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Sort", "[", 
      RowBox[{"#", ",", "GreaterEqual"}], "]"}], "&"}], ",", "testexpr", ",", 
    
    RowBox[{"{", "2", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940021225369729*^9, 3.940021239770288*^9}},
 CellLabel->"In[154]:=",
 CellID->472358327,ExpressionUUID->"fbe89a21-a84d-4a37-bb7e-87431d1e89db"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "7", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "7", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "7", ",", "7"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400212401067963`*^9},
 CellLabel->"Out[154]=",
 CellID->981544772,ExpressionUUID->"77eda30e-463e-49b3-b19a-8c532d88e586"]
}, Open  ]],

Cell["\<\
The previous two solutions were presented to show how to do things in the \
general case, when no built-in criteria function is available. However, \
whenever the built-in function is available, it is always better to use a \
built-in.\
\>", "Text",
 CellChangeTimes->{{3.940021249046218*^9, 3.940021261959305*^9}},
 CellID->453785707,ExpressionUUID->"88325d73-6528-4e52-bf35-e767679fb512"],

Cell["\<\
As a next step in this example, imagine that the sublists also have to be \
sorted, according to which sublist has a smaller first element. For example, \
sorting the list {{3,1},{5,6,7},{2,8},{4,6}} should give \
{{2,8},{3,1},{4,6},{5,6,7}}. The proper (pure) criteria function will be in \
this case #1[[1]]\[Sterling] #2[[1]]&, and we have to Map Sort on the first \
level now\
\>", "Text",
 CellChangeTimes->{{3.940021249046218*^9, 3.9400212888421087`*^9}},
 CellID->1064116931,ExpressionUUID->"991c5341-c29e-4310-b1cd-912cd6694e01"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result1", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Sort", "[", 
      RowBox[{"#", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"#1", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "<=", 
         RowBox[{"#2", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "&"}]}], "]"}], "&"}], ",", 
    "result"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9400212917483063`*^9, 3.940021311521614*^9}},
 CellLabel->"In[155]:=",
 CellID->1315088691,ExpressionUUID->"4900c521-a2bb-4b9c-ba56-e0e8fc0cb1b6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "2", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "7", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "7", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "7", ",", "1"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940021311977952*^9},
 CellLabel->"Out[155]=",
 CellID->1287958753,ExpressionUUID->"043e7893-47a6-45ed-a2d7-f8ee2fb7f080"]
}, Open  ]],

Cell["\<\
Finally, we may want to reorder the largest sublists, according for instance \
to a total sum of the numbers contained.\
\>", "Text",
 CellChangeTimes->{{3.94002135513408*^9, 3.940021360538021*^9}},
 CellID->87599911,ExpressionUUID->"7b8fd1fe-8767-40f9-9541-5b0c95ae5a3f"],

Cell[TextData[StyleBox["A sub-problem: sum all the numbers contained in a \
nested list",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.94002135513408*^9, 3.94002136712782*^9}},
 CellID->1581906068,ExpressionUUID->"0a2173b8-2c2a-4a96-bbe8-89bc4f08c171"],

Cell["For example, in the first sublist:", "Text",
 CellChangeTimes->{{3.94002135513408*^9, 3.940021358763916*^9}},
 CellID->415362296,ExpressionUUID->"902371cb-7312-4784-9f4a-1c245a8fb5ba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sublist", "=", 
  RowBox[{"result1", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940021372583075*^9, 3.940021376222124*^9}},
 CellLabel->"In[156]:=",
 CellID->1490154165,ExpressionUUID->"3a7cb365-97ab-445d-aecc-c9eb057006a9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"7", ",", "6", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "2", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940021376717503*^9},
 CellLabel->"Out[156]=",
 CellID->1572688486,ExpressionUUID->"636b58a6-e4cb-4f5b-a7c9-c3319f1db06f"]
}, Open  ]],

Cell["\<\
The best way to sum all the numbers here is to first use Flatten, to remove \
internal curly braces and make a list flat. Then use Total on the resulting \
list:\
\>", "Text",
 CellChangeTimes->{{3.940021388013822*^9, 3.94002139369666*^9}},
 CellID->946656926,ExpressionUUID->"5b5e2f87-32a0-49b4-a043-175cb96586b0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numsum", "=", 
  RowBox[{"Total", "[", 
   RowBox[{"Flatten", "[", "sublist", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940021414826253*^9, 3.940021421142777*^9}},
 CellLabel->"In[157]:=",
 CellID->1242082481,ExpressionUUID->"d0927ec5-9ffd-431a-8e83-6e00edaa1f67"],

Cell[BoxData["26"], "Output",
 CellChangeTimes->{3.94002142144729*^9},
 CellLabel->"Out[157]=",
 CellID->540889585,ExpressionUUID->"c4b7b357-47d2-4b68-b431-5f2abb618906"]
}, Open  ]],

Cell["\<\
Now that we know how to sum all the numbers, we can convert this knowledge \
into a pure function (sorting criteria): Total[Flatten[#1-#2]]\[GreaterEqual] \
0& (here we use that the sublists have the same structure and can thus be \
subtracted)\
\>", "Text",
 CellChangeTimes->{{3.940021428306198*^9, 3.940021441450054*^9}},
 CellID->432977344,ExpressionUUID->"0ed5ba20-f01a-489f-a4d9-6294b8322154"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result2", "=", 
  RowBox[{"Sort", "[", 
   RowBox[{"result1", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"Total", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"#1", "-", "#2"}], "]"}], "]"}], ">=", "0"}], "&"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.940021443535139*^9, 3.94002146244775*^9}},
 CellLabel->"In[158]:=",
 CellID->1107613552,ExpressionUUID->"413640b2-96b1-4f17-9ee6-11b552879b2e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "7", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "7", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "7", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "2", ",", "1"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940021463236273*^9},
 CellLabel->"Out[158]=",
 CellID->1841574061,ExpressionUUID->"38774f06-ffa8-496c-8c0a-cbc6e8161bd5"]
}, Open  ]],

Cell["\<\
Notice that in this case there is no Map-ping, since we already operate on \
the level where we should just simply use Sort.\
\>", "Text",
 CellChangeTimes->{{3.9400214994612207`*^9, 3.94002150780013*^9}},
 CellID->1997799016,ExpressionUUID->"a2d9d965-953b-4f69-b4e2-f8c219d6d19b"],

Cell["\<\
Let me summarize the goal and the code once again: we are given a list of \
depth 4 of numbers (think of it as a 3-dimensional grid), which we want to \
sort according to the following rules: the numbers inside the smallest \
sublists are sorted in decreasing order. The smallest sublists inside next \
smallest are sorted such that the sublist with the smallest first element \
comes first. Finally, the largest sublists are sorted by decreasing total of \
all the elements in the sublist. The sorting has to be performed starting \
with the smallest sublists (although in this particular example, the order is \
irrelevant). Here is the code packaged into a function (variables made local):\
\>", "Text",
 CellChangeTimes->{{3.9400214994612207`*^9, 3.940021537360832*^9}},
 CellID->525998574,ExpressionUUID->"108feef2-619a-49e7-9ba6-71ddaf370b21"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "sortNested", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sortNested", "[", "x_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"result", ",", "result1", ",", "result2"}], "}"}], ",", 
    RowBox[{
     RowBox[{"result", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Sort", "[", 
          RowBox[{"#", ",", "GreaterEqual"}], "]"}], "&"}], ",", "x", ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
     RowBox[{"result1", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Sort", "[", 
          RowBox[{"#", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#1", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "<=", 
             RowBox[{"#2", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "&"}]}], "]"}], "&"}], ",", 
        "result"}], "]"}]}], ";", 
     RowBox[{"result2", "=", 
      RowBox[{"Sort", "[", 
       RowBox[{"result1", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Total", "[", 
           RowBox[{"Flatten", "[", 
            RowBox[{"#1", "-", "#2"}], "]"}], "]"}], ">", "0"}], "&"}]}], 
       "]"}]}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940021548566985*^9, 3.940021648662767*^9}},
 CellLabel->"In[162]:=",
 CellID->211571619,ExpressionUUID->"3021f315-6940-4068-ab9e-3e302ed6a448"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940021623282598*^9, 3.940021624090477*^9}},
 CellID->859244794,ExpressionUUID->"f5a2bfe5-e529-40ac-b33d-98b773a56cc6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sortNested", "[", "testexpr", "]"}]], "Input",
 CellChangeTimes->{{3.94002162531334*^9, 3.9400216290617113`*^9}},
 CellLabel->"In[164]:=",
 CellID->1226956899,ExpressionUUID->"924e19c4-9f50-4cb4-94d2-4f6cddb28330"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "7", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "7", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "7", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "2", ",", "1"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.940021629385997*^9, 3.940021651785701*^9}},
 CellLabel->"Out[164]=",
 CellID->747155942,ExpressionUUID->"d11e74eb-ed9b-4749-bf01-e9a79a954d5a"]
}, Open  ]],

Cell["\<\
Notice that we could have avoided the introduction of auxiliary variables by \
nesting the code, but then it would become much less readable:\
\>", "Text",
 CellChangeTimes->{{3.940021665648473*^9, 3.940021667289328*^9}},
 CellID->1113033185,ExpressionUUID->"3588f0ba-dabe-4155-8bd0-bb596b7c1c29"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "sortNestedAlt", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"sortNestedAlt", "[", "x_List", "]"}], ":=", 
   RowBox[{"Sort", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Sort", "[", 
         RowBox[{"#", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"#1", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "<=", 
            RowBox[{"#2", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "&"}]}], "]"}], "&"}], ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Sort", "[", 
           RowBox[{"#", ",", "GreaterEqual"}], "]"}], "&"}], ",", "x", ",", 
         RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Total", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"#1", "-", "#2"}], "]"}], "]"}], ">=", "0"}], "&"}]}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9400216738374662`*^9, 3.940021727321721*^9}},
 CellLabel->"In[165]:=",
 CellID->146604,ExpressionUUID->"43faaa56-fa57-4da9-b21d-d443db08b15a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sortNestedAlt", "[", "testexpr", "]"}]], "Input",
 CellChangeTimes->{{3.940021729290792*^9, 3.940021732037709*^9}},
 CellLabel->"In[167]:=",
 CellID->2023819040,ExpressionUUID->"5dc1ab75-2a22-4298-98f9-a91cfaf718a6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "7", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "7", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "7", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "2", ",", "1"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940021732316587*^9},
 CellLabel->"Out[167]=",
 CellID->1639352728,ExpressionUUID->"99ff74f0-5390-48aa-abb7-3716d69894be"]
}, Open  ]],

Cell["\<\
The lesson here is that often the advantage of readability over weights extra \
code needed. Try to resist a temptation of writing deeply nested functions \
like <sortNestedAlt>.\
\>", "Text",
 CellChangeTimes->{{3.940023510154365*^9, 3.940023530052888*^9}},
 CellID->1579595786,ExpressionUUID->"b82accdc-2655-4fb5-b978-de8126ff8db2"],

Cell["\<\
A general feature illustrated by this example is that pure functions, Map and \
a possibility to use higher-order functions greatly reduce the size of the \
code, and increase its flexibility. Also, in Mathematica this way of doing it \
will be among the most efficient ones.\
\>", "Text",
 CellChangeTimes->{{3.9400235619860888`*^9, 3.940023573940938*^9}},
 CellID->1857374536,ExpressionUUID->"42884cc2-2be7-4601-aed2-740cd2b028a1"],

Cell["\<\
Many more examples of Map in action will follow - Map is truly ubiquitous in \
Mathematica programming.\
\>", "Text",
 CellChangeTimes->{{3.9400235619860888`*^9, 3.940023592140195*^9}},
 CellID->1367782915,ExpressionUUID->"56f22672-9be7-428b-8436-893bf0fd44ce"]
}, Open  ]],

Cell[CellGroupData[{

Cell["MapAt", "Subsubsection",
 CellChangeTimes->{3.9400235989235573`*^9},
 CellID->976881281,ExpressionUUID->"5a0a86c5-bdf4-408e-89ef-e0cbce7f063b"],

Cell["\<\
If Map can be thought of as a machine gun, then MapAt is a precision rifle. \
It Maps the function to specific position(s) rather than on an entire list.\
\>", "Text",
 CellChangeTimes->{{3.940023614029374*^9, 3.940023632663794*^9}},
 CellID->931208452,ExpressionUUID->"7624effa-10f3-4877-b7f4-e5e63a5c57f0"],

Cell["\<\
In the simplest form, MapAt takes 3 arguments: the function to be mapped, the \
expression, and the position of the element of this expression on which to \
map. For mapping on the first-level elements of the list, the position can be \
just the index of the element - a number. In general, the position has to be \
a list of indices. MapAt uses the same position specifications as Position \
and Extract. One can also use MapAt to map a function on several elements at \
once - in this case, a list of positions of these elements, rather than a \
single position, has to be supplied. The elements corresponding to these \
positions, may be at different levels in the expression. Thus, sublists \
representing elements\[CloseCurlyQuote] positions can have different lengths.\
\
\>", "Text",
 CellChangeTimes->{{3.940023614029374*^9, 3.940023664676955*^9}},
 CellID->868008882,ExpressionUUID->"e7112aef-f0b8-4c58-8c71-b623e887e116"],

Cell["Examples", "ItemNumbered",
 CellChangeTimes->{3.940023679700191*^9},
 CellID->1483084509,ExpressionUUID->"96357bd5-4d21-4c99-b793-f303ec3fdb14"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "ourlist", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ourlist", "=", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}]}], "Input",
 CellChangeTimes->{{3.940023690219618*^9, 3.940023699205078*^9}},
 CellLabel->"In[168]:=",
 CellID->1217008811,ExpressionUUID->"d65507f0-1ba1-4b8e-bade-d2350e187243"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]], "Output",
 CellChangeTimes->{3.940023700059187*^9},
 CellLabel->"Out[169]=",
 CellID->934861737,ExpressionUUID->"84827f71-a5e4-4578-b322-90c92db7a995"]
}, Open  ]],

Cell["Say, we want to Map Sine function on the second element:", "Text",
 CellChangeTimes->{3.940023710449588*^9},
 CellID->857983830,ExpressionUUID->"eeaa25b5-7a8d-4e21-a007-8afdad499852"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{"Sin", ",", "ourlist", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400237402977467`*^9, 3.9400237445670643`*^9}},
 CellLabel->"In[170]:=",
 CellID->560068805,ExpressionUUID->"40d3a9b4-622d-47ae-9f25-1d57ebdf99c8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", 
   RowBox[{"Sin", "[", "b", "]"}], ",", "c", ",", "d"}], "}"}]], "Output",
 CellChangeTimes->{3.940023744934237*^9},
 CellLabel->"Out[170]=",
 CellID->1568952000,ExpressionUUID->"fd47617c-5347-45cb-8819-469751151e7b"]
}, Open  ]],

Cell["If we want to Map on second and third elements:", "Text",
 CellChangeTimes->{3.940023752585096*^9},
 CellID->424562487,ExpressionUUID->"c64a9280-ae8d-41d8-9549-fc45f8c2e128"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{"Sin", ",", "ourlist", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", "3", "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9400237551621857`*^9, 3.9400237621033297`*^9}},
 CellLabel->"In[171]:=",
 CellID->1006185793,ExpressionUUID->"464cb688-7ce1-436d-9683-51809071b958"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", 
   RowBox[{"Sin", "[", "b", "]"}], ",", 
   RowBox[{"Sin", "[", "c", "]"}], ",", "d"}], "}"}]], "Output",
 CellChangeTimes->{3.940023763011574*^9},
 CellLabel->"Out[171]=",
 CellID->1192297985,ExpressionUUID->"52783616-cbb9-4af2-a02c-24eef83da115"]
}, Open  ]],

Cell["\<\
Notice the internal curly braces. If we omit them, Mathematica will decide \
that we want to Map Sine on a single element with the position {2,3}. Since \
there is no such element ({2,3} means third element of the second element, \
but the second element is an atom), this will result in an error.\
\>", "Text",
 CellChangeTimes->{{3.94002377132136*^9, 3.940023779278441*^9}},
 CellID->782323738,ExpressionUUID->"11513a3e-e06b-46a8-adc7-14394e2b4a89"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{"Sin", ",", "ourlist", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.94002379164063*^9, 3.940023797906905*^9}},
 CellLabel->"In[172]:=",
 CellID->1375562009,ExpressionUUID->"91023839-064d-4520-a101-7f6f24f08bad"],

Cell[BoxData[
 TemplateBox[{
  "MapAt", "partw", 
   "\"Part \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"2\\\", \\\",\\\", \
\\\"3\\\"}], \\\"}\\\"}]\\) of \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"a\\\", \
\\\",\\\", \\\"b\\\", \\\",\\\", \\\"c\\\", \\\",\\\", \\\"d\\\"}], \
\\\"}\\\"}]\\) does not exist.\"", 2, 172, 14, 26588908877246977716, "Local"},
  
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.940023798352971*^9},
 CellLabel->"During evaluation of In[172]:=",
 CellID->1906823268,ExpressionUUID->"6dd188fa-b336-4a11-9dff-17d0e65a9b3b"],

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{"Sin", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.940023798371675*^9},
 CellLabel->"Out[172]=",
 CellID->1080201095,ExpressionUUID->"37eb4822-26ae-4daa-b7ca-ae304a906155"]
}, Open  ]],

Cell["Let us now create a nested list:", "Text",
 CellChangeTimes->{3.940023809333118*^9},
 CellID->908176623,ExpressionUUID->"f9bd9d77-d500-4d63-8f67-40203992118d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"testexpr", ",", "f"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testexpr", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "3", "}"}], ",", 
    RowBox[{"{", "2", "}"}], ",", 
    RowBox[{"{", "3", "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940023811216663*^9, 3.940023826829805*^9}},
 CellLabel->"In[173]:=",
 CellID->499827159,ExpressionUUID->"6c14fbf0-7bcc-4a20-b3c0-790bf41fac50"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "6", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "7"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "5", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "5", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "7"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940023827273245*^9},
 CellLabel->"Out[174]=",
 CellID->162713917,ExpressionUUID->"bdda1bb6-927e-4146-80f3-41497cf14418"]
}, Open  ]],

Cell["\<\
It is useful to consider a few examples and try to understand why each output \
is as it is:\
\>", "Text",
 CellChangeTimes->{3.9400238365736933`*^9},
 CellID->104374142,ExpressionUUID->"2ae2bf06-38ee-4b7d-b35a-2d143f4b84d4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{"f", ",", "testexpr", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.940023842601409*^9, 3.940023847574255*^9}},
 CellLabel->"In[175]:=",
 CellID->1670786837,ExpressionUUID->"3c095e01-2d05-41ed-8a8e-01fc53b50868"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "6", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "7"}], "}"}]}], "}"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"6", ",", "5", ",", "7"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"6", ",", "5", ",", "3"}], "}"}]}], "}"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "7"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940023847990213*^9},
 CellLabel->"Out[175]=",
 CellID->818336246,ExpressionUUID->"7f83af3f-e4a7-41ca-846f-b396e022b0c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{"f", ",", "testexpr", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", "3", "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940023851882516*^9, 3.940023858090046*^9}},
 CellLabel->"In[176]:=",
 CellID->1623974321,ExpressionUUID->"22599009-504b-4aef-b303-e5c978976003"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "6", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "7"}], "}"}]}], "}"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"6", ",", "5", ",", "7"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"6", ",", "5", ",", "3"}], "}"}]}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"4", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "7"}], "}"}]}], "}"}], "]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940023858473688*^9},
 CellLabel->"Out[176]=",
 CellID->1545992544,ExpressionUUID->"a2c3dbd9-ac24-44d9-901c-383824d3cd33"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{"f", ",", "testexpr", ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940023869791926*^9, 3.940023876091785*^9}},
 CellLabel->"In[177]:=",
 CellID->1553890423,ExpressionUUID->"6317af0f-733a-4b25-af29-8de04875ec86"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "6", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "7"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "5", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "5", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "7"}], "}"}], "]"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940023876458803*^9},
 CellLabel->"Out[177]=",
 CellID->1256062016,ExpressionUUID->"da7ffab3-77be-4186-ae2e-acced2b88350"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{"f", ",", "testexpr", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940023878823386*^9, 3.940023885374506*^9}},
 CellLabel->"In[178]:=",
 CellID->762971491,ExpressionUUID->"2a38d8d0-d353-4d3f-b4d1-821846410838"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "6", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "7"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"{", 
       RowBox[{"6", ",", "5", ",", "7"}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "5", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "7"}], "}"}], "]"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.94002388577592*^9},
 CellLabel->"Out[178]=",
 CellID->589248667,ExpressionUUID->"9910c9bd-a96e-4a1c-9493-cb1f42b3c7f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{"f", ",", "testexpr", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "3"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940023889009685*^9, 3.940023896908265*^9}},
 CellLabel->"In[179]:=",
 CellID->694687581,ExpressionUUID->"1e7ea888-bbde-424c-b61f-7dcf5dbe8eb6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "6", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "7"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "6", "]"}], ",", "5", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "5", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", 
       RowBox[{"f", "[", "7", "]"}]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400238973718863`*^9},
 CellLabel->"Out[179]=",
 CellID->1161675225,ExpressionUUID->"10f8a1fb-02e5-4ab8-9fb8-0f3d2e51b9fe"]
}, Open  ]],

Cell["\<\
Basically, all you have to do to unravel the above examples is to carefully \
trace the position: for example, {2,1,1} means: first element of the first \
element of the second element.\
\>", "Text",
 CellChangeTimes->{{3.9400239302784967`*^9, 3.940023932099678*^9}},
 CellID->1501671698,ExpressionUUID->"2ff8234a-52b0-4c5e-8c24-fbc9ddf16ef3"],

Cell["Use in conjunction with Map", "ItemNumbered",
 CellChangeTimes->{3.940023947224451*^9},
 CellID->197434840,ExpressionUUID->"0926664c-563d-4e50-8669-15919d30c667"],

Cell["\<\
MapAt is often used in conjunction with Map. For example, we want to Map <f> \
on the second element (number) in each small sublist. The code is\
\>", "Text",
 CellChangeTimes->{{3.940023954980665*^9, 3.940023956893149*^9}},
 CellID->425121265,ExpressionUUID->"0b96898e-4703-475b-a2a5-6fef987feed8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"MapAt", "[", 
     RowBox[{"f", ",", "#", ",", "2"}], "]"}], "&"}], ",", "testexpr", ",", 
   RowBox[{"{", "2", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9400239644689207`*^9, 3.940023975927135*^9}},
 CellLabel->"In[180]:=",
 CellID->885375515,ExpressionUUID->"22468270-af2f-4678-b699-0284c15ef45e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", 
       RowBox[{"f", "[", "6", "]"}], ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"f", "[", "1", "]"}], ",", "7"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", 
       RowBox[{"f", "[", "5", "]"}], ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", 
       RowBox[{"f", "[", "5", "]"}], ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", 
       RowBox[{"f", "[", "4", "]"}], ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"f", "[", "3", "]"}], ",", "7"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9400239763876*^9},
 CellLabel->"Out[180]=",
 CellID->1131086,ExpressionUUID->"c20f7f4b-1f16-460f-ac0e-1efd2c135743"]
}, Open  ]],

Cell["\<\
To convince yourself that we needed to Map on the level {2}, think this way: \
we had to bypass 2 external curly braces to use MapAt on the first sublist. \
Should we Map on the first level instead, we\[CloseCurlyQuote] d get the \
following:\
\>", "Text",
 CellChangeTimes->{{3.940023993162367*^9, 3.940023997903809*^9}},
 CellID->809909970,ExpressionUUID->"58794e4b-11b4-4c6d-b366-3ab87be34e53"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"MapAt", "[", 
     RowBox[{"f", ",", "#", ",", "2"}], "]"}], "&"}], ",", "testexpr"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940024005406713*^9, 3.940024013377038*^9}},
 CellLabel->"In[181]:=",
 CellID->1518133439,ExpressionUUID->"e4990a97-5410-49b0-903e-05a48b043a93"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "6", ",", "10"}], "}"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "7"}], "}"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "5", ",", "7"}], "}"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"{", 
       RowBox[{"6", ",", "5", ",", "3"}], "}"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "7"}], "}"}], "]"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9400240138248663`*^9},
 CellLabel->"Out[181]=",
 CellID->1819416513,ExpressionUUID->"7ba79804-6554-411e-a7dc-10d398971bd3"]
}, Open  ]],

Cell[TextData[{
 "which is not what we want (do you see what happened and why?).Notice that \
we created the pure function out of MapAt along the lines of section ",
 ButtonBox["4.11.1.12",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-4-Rules-patterns-functions.nb", 
     CharacterEncoding -> "UTF-8"], "4.11.1.12"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-4-Rules-patterns-functions.\
nb"],
 "."
}], "Text",
 CellChangeTimes->{{3.940024026773326*^9, 3.9400240293280163`*^9}, {
  3.9400240832973022`*^9, 3.9400240833054123`*^9}},
 CellID->597798063,ExpressionUUID->"cde5c254-e65c-4e8b-9811-f0211ca35545"],

Cell["Use in conjunction with Position", "ItemNumbered",
 CellChangeTimes->{3.9400240950186033`*^9},
 CellTags->"5.2.3.3",
 CellID->700287318,ExpressionUUID->"62836ce6-a27c-4132-be1b-671db00b8e4d"],

Cell["\<\
Also, MapAt is often used in conjunction with Position. The logic is this: \
say, we want to Map certain function f on all elements of a given \
expression(possibly restricted to some levels), satisfying certain criteria. \
This can be easily done in a rule-based approach. In FP approach, we use \
Position to find positions of all such elements, and then plug the result \
into MapAt.\
\>", "Text",
 CellChangeTimes->{{3.940024101191361*^9, 3.9400241111080008`*^9}},
 CellID->1518568066,ExpressionUUID->"145e4660-5462-4d72-a4db-a626d729d943"],

Cell["\<\
As an example, say we want to Map f on all even numbers in our list. The code \
is\
\>", "Text",
 CellChangeTimes->{3.940024120336762*^9},
 CellID->1685814354,ExpressionUUID->"3d844a49-0630-4ec1-b4d5-3f98f7610ea8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{"f", ",", "testexpr", ",", 
   RowBox[{"Position", "[", 
    RowBox[{"testexpr", ",", 
     RowBox[{"_", "?", "EvenQ"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940024124206505*^9, 3.940024135286789*^9}},
 CellLabel->"In[182]:=",
 CellID->741226869,ExpressionUUID->"32ae1f6b-d21c-4a89-a46e-b6f4a64d6460"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "6", "]"}], ",", 
       RowBox[{"f", "[", "6", "]"}], ",", 
       RowBox[{"f", "[", "10", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "7"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "6", "]"}], ",", "5", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "6", "]"}], ",", "5", ",", "3"}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "4", "]"}], ",", 
       RowBox[{"f", "[", "4", "]"}], ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "7"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400241365114822`*^9},
 CellLabel->"Out[182]=",
 CellID->941745742,ExpressionUUID->"f8067a09-d97c-4eb5-8b68-84cb52962216"]
}, Open  ]],

Cell["Or, on all multiples of 3", "Text",
 CellChangeTimes->{3.940024197156761*^9},
 CellID->966207404,ExpressionUUID->"49b0250d-01c8-4258-be76-8e97cefdaf83"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{"f", ",", "testexpr", ",", 
   RowBox[{"Position", "[", 
    RowBox[{"testexpr", ",", 
     RowBox[{"x_", "/;", 
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{"x", ",", "3"}], "]"}], "==", "0"}]}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940024198697125*^9, 3.940024212867978*^9}},
 CellLabel->"In[183]:=",
 CellID->8625299,ExpressionUUID->"3c124891-91af-4816-b3f3-8e95214a166f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "6", "]"}], ",", 
       RowBox[{"f", "[", "6", "]"}], ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "7"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "6", "]"}], ",", "5", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", "6", "]"}], ",", "5", ",", 
       RowBox[{"f", "[", "3", "]"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"f", "[", "3", "]"}], ",", "7"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940024213105178*^9},
 CellLabel->"Out[183]=",
 CellID->1861321483,ExpressionUUID->"166ee5f9-c44c-4b1b-8072-e1c73d49699b"]
}, Open  ]],

Cell[TextData[StyleBox["Warning: performance pitfall",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.9400242228576*^9, 3.940024227512726*^9}, 
   3.940740612671852*^9},
 CellID->835878932,ExpressionUUID->"1d0bc299-2067-4dca-8beb-89c4036bf379"],

Cell["\<\
However, be aware of the performance pitfall associated with this technique: \
when you try to use MapAt to map a function on a large number of elements at \
the same time (especially if all of them belong to a single subexpression), \
MapAt can be very slow. Please see Appendix C for a detailed discussion. In \
some cases, the performance of MapAt may be improved (or, rather, a more \
efficient implementation with a basic MapAt functionality can be found) - see \
chapter VI for such an example.\
\>", "Text",
 CellChangeTimes->{{3.9400242228576*^9, 3.940024242044108*^9}},
 CellID->1567448893,ExpressionUUID->"e1799137-b8f5-43de-9aa0-ba99c5624a06"],

Cell["Application: multiple random walks", "ItemNumbered",
 CellChangeTimes->{3.940024251335643*^9, 3.940740612691814*^9},
 CellID->1900929339,ExpressionUUID->"393e4073-7647-48ca-a657-ff7e4aaf8223"],

Cell["\<\
We can use MapAt to implement co-evolving random walkers, for instance. Let \
us say that each walker is updated with the same function, say\
\>", "Text",
 CellChangeTimes->{{3.9400242583522253`*^9, 3.940024265305101*^9}},
 CellID->805184154,ExpressionUUID->"bfc62b82-e6c8-4782-b223-799fd9170a53"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "randomWalk", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"randomWalk", "[", "x_", "]"}], ":=", 
   RowBox[{"x", "+", 
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1"}], "}"}], "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940024270920064*^9, 3.940024288617589*^9}},
 CellLabel->"In[184]:=",
 CellID->1762901395,ExpressionUUID->"841ca1e0-ecfa-4fee-89dd-dbc2987d760b"],

Cell["\<\
Let us say we have n = 5 random walkers, all starting at zero:\
\>", "Text",
 CellChangeTimes->{3.940024296490732*^9, 3.940740612711845*^9},
 CellID->2054130698,ExpressionUUID->"ff4216d0-2cdf-447e-a229-b75a7409b83d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"nwalkers", "=", "5"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"startpositions", "=", 
  RowBox[{"Table", "[", 
   RowBox[{"0", ",", 
    RowBox[{"{", "nwalkers", "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940024301157509*^9, 3.940024317283544*^9}},
 CellLabel->"In[186]:=",
 CellID->1228142026,ExpressionUUID->"4ecacea7-9c4b-4682-a7e8-be4785574b3b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.940024318452335*^9},
 CellLabel->"Out[187]=",
 CellID->991833710,ExpressionUUID->"dd032ca0-4034-47fd-8dd8-8f775104e355"]
}, Open  ]],

Cell["\<\
We may either update them one by one, or in principle, update them at random. \
In the latter case, we will generate an \[OpenCurlyDoubleQuote]update\
\[CloseCurlyDoubleQuote] list of numbers from 1 to n. Each number <k > means \
\[OpenCurlyDoubleQuote]update walker k\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.940024325932143*^9, 3.940024335328373*^9}, 
   3.94027641737608*^9},
 CellID->2013532513,ExpressionUUID->"f907c6a9-b378-4238-b0ca-67862d4cecc2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"totalupdates", "=", "50"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"updatelist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "nwalkers"}], "}"}], "]"}], ",", 
    RowBox[{"{", "totalupdates", "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940024338931137*^9, 3.940024368480147*^9}},
 CellLabel->"In[188]:=",
 CellID->1545338610,ExpressionUUID->"36fca98c-3c0d-4630-9365-5f15ece972aa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4", ",", "2", ",", "5", ",", "5", ",", "2", ",", "5", ",", "1", ",", "5", 
   ",", "5", ",", "3", ",", "2", ",", "3", ",", "1", ",", "1", ",", "1", ",", 
   "1", ",", "3", ",", "1", ",", "4", ",", "4", ",", "3", ",", "4", ",", "4", 
   ",", "2", ",", "1", ",", "5", ",", "3", ",", "2", ",", "2", ",", "2", ",", 
   "3", ",", "3", ",", "5", ",", "2", ",", "5", ",", "4", ",", "4", ",", "4", 
   ",", "4", ",", "4", ",", "4", ",", "2", ",", "3", ",", "4", ",", "2", ",", 
   "5", ",", "1", ",", "4", ",", "3", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{3.940024368868828*^9},
 CellLabel->"Out[189]=",
 CellID->902934273,ExpressionUUID->"24eb8f00-69cc-44aa-be4e-a3411ff1d745"]
}, Open  ]],

Cell["\<\
This gives the total evolution of all the walkers (FoldList will be covered \
shortly):\
\>", "Text",
 CellChangeTimes->{3.9400243892144823`*^9, 3.940740612731842*^9},
 CellID->1786516745,ExpressionUUID->"b3e08359-bfc0-48ea-a358-fb08e5858dc4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Short", "[", 
  RowBox[{
   RowBox[{"result", "=", 
    RowBox[{"FoldList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"MapAt", "[", 
        RowBox[{"randomWalk", ",", "#1", ",", "#2"}], "]"}], "&"}], ",", 
      "startpositions", ",", "updatelist"}], "]"}]}], ",", "10"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940024394958193*^9, 3.940024417767593*^9}},
 CellLabel->"In[190]:=",
 CellID->253465238,ExpressionUUID->"66d1a9c3-0281-465f-956d-2c52a9f9d4b7"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", 
      RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", 
      RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", 
      RowBox[{"-", "1"}], ",", 
      RowBox[{"-", "1"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", 
      RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", 
      RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", 
      RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", 
      RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", 
      RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", 
      RowBox[{"-", "1"}], ",", "2"}], "}"}], ",", 
    RowBox[{"\[LeftSkeleton]", "32", "\[RightSkeleton]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "3"}], ",", "2", ",", 
      RowBox[{"-", "3"}], ",", 
      RowBox[{"-", "4"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "3"}], ",", "2", ",", 
      RowBox[{"-", "4"}], ",", 
      RowBox[{"-", "4"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "3"}], ",", "2", ",", 
      RowBox[{"-", "4"}], ",", 
      RowBox[{"-", "5"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "3"}], ",", "2", ",", 
      RowBox[{"-", "4"}], ",", 
      RowBox[{"-", "5"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "3"}], ",", "2", ",", 
      RowBox[{"-", "4"}], ",", 
      RowBox[{"-", "5"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4"}], ",", "2", ",", 
      RowBox[{"-", "4"}], ",", 
      RowBox[{"-", "5"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4"}], ",", "2", ",", 
      RowBox[{"-", "4"}], ",", 
      RowBox[{"-", "5"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4"}], ",", "2", ",", 
      RowBox[{"-", "5"}], ",", 
      RowBox[{"-", "5"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4"}], ",", "2", ",", 
      RowBox[{"-", "5"}], ",", 
      RowBox[{"-", "4"}], ",", "1"}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Output",
 CellChangeTimes->{3.940024418692504*^9},
 CellLabel->"Out[190]//Short=",
 CellID->1651326796,ExpressionUUID->"4745b45f-3e56-4cf8-92ba-36b104801e44"]
}, Open  ]],

Cell["\<\
To get individual walker\[CloseCurlyQuote] s trajectories, we may Transpose \
the result. \
\>", "Text",
 CellChangeTimes->{{3.940024430964919*^9, 3.940024437973529*^9}, 
   3.940024544850296*^9},
 CellID->1591010303,ExpressionUUID->"6bcd2d0d-11a6-4960-8bb0-75bbaf8ea124"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", "result", "]"}], ",", 
   RowBox[{"Joined", "->", "True"}], ",", 
   RowBox[{"PlotStyle", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"RGBColor", "[", 
       RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"0", ",", "0", ",", "1"}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"1", ",", "0", ",", "1"}], "]"}], ",", 
      RowBox[{"RGBColor", "[", 
       RowBox[{"0", ",", "1", ",", "1"}], "]"}]}], "}"}]}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.940024547280628*^9, 3.9400246497299337`*^9}},
 CellLabel->"In[194]:=",
 CellID->1895412032,ExpressionUUID->"fe0974df-d11b-4438-9d9d-c9c6d1b580d6"],

Cell[BoxData[
 GraphicsBox[{{}, 
   InterpretationBox[{
     TagBox[{{}, {}, 
       TagBox[
        {RGBColor[1, 0, 0], PointSize[0.007333333333333334], 
         AbsoluteThickness[2], LineBox[CompressedData["
1:eJxdzTsKwkAURuEfq5QpLCwsYhAREVET34+MxkRtXYJg7RbcmS7JJajMBJlz
Ybh8nIHbut4vt5qk5Pt+2847kz/GZwCHcB1uwE04Mv7dGG7DHbgL9+A+7g2q
/rR7CI+q/y+7xnDiHDin8ASewjN4Di/gJbyC1/AG3sIZbHw/YO3QYe3RYeXo
sA7osAp0WCU6rCM6rJNz6DqsM/rfH3cXRNo=
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ], 
       TagBox[
        {RGBColor[0, 1, 0], PointSize[0.007333333333333334], 
         AbsoluteThickness[2], LineBox[CompressedData["
1:eJxd0TkKAkEQRuEfI0MDAwMDFREREXXct2l3TT2CYOwV5mZeySOoTBdSr2Ao
Pt4sDVO/P2+PgqTke/12Pu9UfoJnMfj7SnAZruD5KlyDG3ATbsFt+94r3x24
C/fgPjyAh3ACj+AxPIGn8Ayewwt4Ca/gdbTNxnr8H6n1uIN3BmuLbrb37bwz
WHt0WAd0WEd0s53vhPPBOqPDuqDDuqL//QG/bE0N
          "]]},
        Annotation[#, "Charting`Private`Tag#2"]& ], 
       TagBox[
        {RGBColor[0, 0, 1], PointSize[0.007333333333333334], 
         AbsoluteThickness[2], LineBox[CompressedData["
1:eJxdzzkKAkEQRuEfowknmMDAQEVEREQd923aXVOPIBh7hbmZHmmOoNIl0q+g
KD5eJ127Pa73kqT0s9/rp8gUjgsZwTGcwGW4AlfhOtyAm+bi6W8Lbv/ev/zp
wF24B/fhgTkyp/AQHsFjeAJP4Rk8hxfwEl7BaziDndn+mzv0Tegc1hYd1g4d
1h4d1gEd1tEcW4d1Qod1Rod1MSfW/34DNQdA6A==
          "]]},
        Annotation[#, "Charting`Private`Tag#3"]& ], 
       TagBox[
        {RGBColor[1, 0, 1], PointSize[0.007333333333333334], 
         AbsoluteThickness[2], LineBox[CompressedData["
1:eJxdzDsKwkAURuEfq5RTpEhhoSIiIqLG9yvxra1LEKzdgjszS3IJKnOnyBkY
Lt8c5tbvz9ujIin93f/055OpfHJ7f/sZwQ6O4QSuwjW4ATfhFtyGO3AX7sF9
eAAP4RQewWOzCj8m8NQcmWdmZ57DC3gJr+A1vIEzOC/7BWuLDmuHDmtvjq0H
J9YP6LCO2A/rhB4c/p+xH9YFHdYVPdgVX5dDWCs=
          "]]},
        Annotation[#, "Charting`Private`Tag#4"]& ], 
       TagBox[
        {RGBColor[0, 1, 1], PointSize[0.007333333333333334], 
         AbsoluteThickness[2], LineBox[CompressedData["
1:eJxd0D8KwjAYh+EfTo4dHBwcVIqIiFRr639bq2119QhCZ6/gzbxSj6DSBMkb
CB8Pb0Igg8fzXrUkhd/9m82qE7krddmGPeP63cwOehfu2fPmnT48hH1738wR
PIYn8BSewQE8hxdwCC/hCI7hFbyGN/AW3plp/2cPH+AjnMCp6xesEzqsDB3W
GR3WBR1Wjg6rQIdVosO6osO6of/9AZsrRg0=
          "]]},
        Annotation[#, "Charting`Private`Tag#5"]& ]},
      {"WolframDynamicHighlight", <|
       "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>}], 
     StyleBox[
      DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
        Slot["HighlightElements"], 
        Slot["LayoutOptions"], 
        Slot["Meta"], 
        Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
           Annotation[{
             Hue[0.67, 0.6, 0.6], 
             Directive[
              PointSize[0.007333333333333334], 
              AbsoluteThickness[2], 
              RGBColor[1, 0, 0]], 
             Line[CompressedData["
1:eJxdzTsKwkAURuEfq5QpLCwsYhAREVET34+MxkRtXYJg7RbcmS7JJajMBJlz
Ybh8nIHbut4vt5qk5Pt+2847kz/GZwCHcB1uwE04Mv7dGG7DHbgL9+A+7g2q
/rR7CI+q/y+7xnDiHDin8ASewjN4Di/gJbyC1/AG3sIZbHw/YO3QYe3RYeXo
sA7osAp0WCU6rCM6rJNz6DqsM/rfH3cXRNo=
              "]]}, "Charting`Private`Tag#1"], 
           Annotation[{
             Hue[0.9060679774997897, 0.6, 0.6], 
             Directive[
              PointSize[0.007333333333333334], 
              AbsoluteThickness[2], 
              RGBColor[0, 1, 0]], 
             Line[CompressedData["
1:eJxd0TkKAkEQRuEfI0MDAwMDFREREXXct2l3TT2CYOwV5mZeySOoTBdSr2Ao
Pt4sDVO/P2+PgqTke/12Pu9UfoJnMfj7SnAZruD5KlyDG3ATbsFt+94r3x24
C/fgPjyAh3ACj+AxPIGn8Ayewwt4Ca/gdbTNxnr8H6n1uIN3BmuLbrb37bwz
WHt0WAd0WEd0s53vhPPBOqPDuqDDuqL//QG/bE0N
              "]]}, "Charting`Private`Tag#2"], 
           Annotation[{
             Hue[0.1421359549995791, 0.6, 0.6], 
             Directive[
              PointSize[0.007333333333333334], 
              AbsoluteThickness[2], 
              RGBColor[0, 0, 1]], 
             Line[CompressedData["
1:eJxdzzkKAkEQRuEfowknmMDAQEVEREQd923aXVOPIBh7hbmZHmmOoNIl0q+g
KD5eJ127Pa73kqT0s9/rp8gUjgsZwTGcwGW4AlfhOtyAm+bi6W8Lbv/ev/zp
wF24B/fhgTkyp/AQHsFjeAJP4Rk8hxfwEl7BaziDndn+mzv0Tegc1hYd1g4d
1h4d1gEd1tEcW4d1Qod1Rod1MSfW/34DNQdA6A==
              "]]}, "Charting`Private`Tag#3"], 
           Annotation[{
             Hue[0.37820393249936934`, 0.6, 0.6], 
             Directive[
              PointSize[0.007333333333333334], 
              AbsoluteThickness[2], 
              RGBColor[1, 0, 1]], 
             Line[CompressedData["
1:eJxdzDsKwkAURuEfq5RTpEhhoSIiIqLG9yvxra1LEKzdgjszS3IJKnOnyBkY
Lt8c5tbvz9ujIin93f/055OpfHJ7f/sZwQ6O4QSuwjW4ATfhFtyGO3AX7sF9
eAAP4RQewWOzCj8m8NQcmWdmZ57DC3gJr+A1vIEzOC/7BWuLDmuHDmtvjq0H
J9YP6LCO2A/rhB4c/p+xH9YFHdYVPdgVX5dDWCs=
              "]]}, "Charting`Private`Tag#4"], 
           Annotation[{
             Hue[0.6142719099991583, 0.6, 0.6], 
             Directive[
              PointSize[0.007333333333333334], 
              AbsoluteThickness[2], 
              RGBColor[0, 1, 1]], 
             Line[CompressedData["
1:eJxd0D8KwjAYh+EfTo4dHBwcVIqIiFRr639bq2119QhCZ6/gzbxSj6DSBMkb
CB8Pb0Igg8fzXrUkhd/9m82qE7krddmGPeP63cwOehfu2fPmnT48hH1738wR
PIYn8BSewQE8hxdwCC/hCI7hFbyGN/AW3plp/2cPH+AjnMCp6xesEzqsDB3W
GR3WBR1Wjg6rQIdVosO6osO6of/9AZsrRg0=
              "]]}, "Charting`Private`Tag#5"]}}, <|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, "PlotRange" -> {{0., 51.}, {-6., 2.}}, 
            "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0., 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[0.007333333333333334], 
               AbsoluteThickness[2], 
               RGBColor[0, 1, 1]], 
              Directive[
               PointSize[0.007333333333333334], 
               AbsoluteThickness[2], 
               RGBColor[1, 0, 1]], 
              Directive[
               PointSize[0.007333333333333334], 
               AbsoluteThickness[2], 
               RGBColor[0, 0, 1]], 
              Directive[
               PointSize[0.007333333333333334], 
               AbsoluteThickness[2], 
               RGBColor[0, 1, 0]], 
              Directive[
               PointSize[0.007333333333333334], 
               AbsoluteThickness[2], 
               RGBColor[1, 0, 0]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                Identity[
                 Part[#, 1]], 
                Identity[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListPlot, "GroupHighlight" -> False|>|>]]& )[<|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, "PlotRange" -> {{0., 51.}, {-6., 2.}}, 
           "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0., 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              PointSize[0.007333333333333334], 
              AbsoluteThickness[2], 
              RGBColor[0, 1, 1]], 
             Directive[
              PointSize[0.007333333333333334], 
              AbsoluteThickness[2], 
              RGBColor[1, 0, 1]], 
             Directive[
              PointSize[0.007333333333333334], 
              AbsoluteThickness[2], 
              RGBColor[0, 0, 1]], 
             Directive[
              PointSize[0.007333333333333334], 
              AbsoluteThickness[2], 
              RGBColor[0, 1, 0]], 
             Directive[
              PointSize[0.007333333333333334], 
              AbsoluteThickness[2], 
              RGBColor[1, 0, 0]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           ListPlot, "GroupHighlight" -> False|>|>],
       ImageSizeCache->{{69.48224878981543, 
        241.76283961012794`}, {-18.02807617187497, 7.987548828125028}}],
      Selectable->False]},
    Annotation[{{{}, {}, 
       Annotation[{
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.007333333333333334], 
          AbsoluteThickness[2], 
          RGBColor[1, 0, 0]], 
         Line[CompressedData["
1:eJxdzTsKwkAURuEfq5QpLCwsYhAREVET34+MxkRtXYJg7RbcmS7JJajMBJlz
Ybh8nIHbut4vt5qk5Pt+2847kz/GZwCHcB1uwE04Mv7dGG7DHbgL9+A+7g2q
/rR7CI+q/y+7xnDiHDin8ASewjN4Di/gJbyC1/AG3sIZbHw/YO3QYe3RYeXo
sA7osAp0WCU6rCM6rJNz6DqsM/rfH3cXRNo=
          "]]}, "Charting`Private`Tag#1"], 
       Annotation[{
         Hue[0.9060679774997897, 0.6, 0.6], 
         Directive[
          PointSize[0.007333333333333334], 
          AbsoluteThickness[2], 
          RGBColor[0, 1, 0]], 
         Line[CompressedData["
1:eJxd0TkKAkEQRuEfI0MDAwMDFREREXXct2l3TT2CYOwV5mZeySOoTBdSr2Ao
Pt4sDVO/P2+PgqTke/12Pu9UfoJnMfj7SnAZruD5KlyDG3ATbsFt+94r3x24
C/fgPjyAh3ACj+AxPIGn8Ayewwt4Ca/gdbTNxnr8H6n1uIN3BmuLbrb37bwz
WHt0WAd0WEd0s53vhPPBOqPDuqDDuqL//QG/bE0N
          "]]}, "Charting`Private`Tag#2"], 
       Annotation[{
         Hue[0.1421359549995791, 0.6, 0.6], 
         Directive[
          PointSize[0.007333333333333334], 
          AbsoluteThickness[2], 
          RGBColor[0, 0, 1]], 
         Line[CompressedData["
1:eJxdzzkKAkEQRuEfowknmMDAQEVEREQd923aXVOPIBh7hbmZHmmOoNIl0q+g
KD5eJ127Pa73kqT0s9/rp8gUjgsZwTGcwGW4AlfhOtyAm+bi6W8Lbv/ev/zp
wF24B/fhgTkyp/AQHsFjeAJP4Rk8hxfwEl7BaziDndn+mzv0Tegc1hYd1g4d
1h4d1gEd1tEcW4d1Qod1Rod1MSfW/34DNQdA6A==
          "]]}, "Charting`Private`Tag#3"], 
       Annotation[{
         Hue[0.37820393249936934`, 0.6, 0.6], 
         Directive[
          PointSize[0.007333333333333334], 
          AbsoluteThickness[2], 
          RGBColor[1, 0, 1]], 
         Line[CompressedData["
1:eJxdzDsKwkAURuEfq5RTpEhhoSIiIqLG9yvxra1LEKzdgjszS3IJKnOnyBkY
Lt8c5tbvz9ujIin93f/055OpfHJ7f/sZwQ6O4QSuwjW4ATfhFtyGO3AX7sF9
eAAP4RQewWOzCj8m8NQcmWdmZ57DC3gJr+A1vIEzOC/7BWuLDmuHDmtvjq0H
J9YP6LCO2A/rhB4c/p+xH9YFHdYVPdgVX5dDWCs=
          "]]}, "Charting`Private`Tag#4"], 
       Annotation[{
         Hue[0.6142719099991583, 0.6, 0.6], 
         Directive[
          PointSize[0.007333333333333334], 
          AbsoluteThickness[2], 
          RGBColor[0, 1, 1]], 
         Line[CompressedData["
1:eJxd0D8KwjAYh+EfTo4dHBwcVIqIiFRr639bq2119QhCZ6/gzbxSj6DSBMkb
CB8Pb0Igg8fzXrUkhd/9m82qE7krddmGPeP63cwOehfu2fPmnT48hH1738wR
PIYn8BSewQE8hxdwCC/hCI7hFbyGN/AW3plp/2cPH+AjnMCp6xesEzqsDB3W
GR3WBR1Wjg6rQIdVosO6osO6of/9AZsrRg0=
          "]]}, "Charting`Private`Tag#5"]}}, <|
     "HighlightElements" -> <|
       "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
      "LayoutOptions" -> <|
       "PanelPlotLayout" -> <||>, "PlotRange" -> {{0., 51.}, {-6., 2.}}, 
        "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0., 0}, 
        "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
        "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
          Directive[
           PointSize[0.007333333333333334], 
           AbsoluteThickness[2], 
           RGBColor[0, 1, 1]], 
          Directive[
           PointSize[0.007333333333333334], 
           AbsoluteThickness[2], 
           RGBColor[1, 0, 1]], 
          Directive[
           PointSize[0.007333333333333334], 
           AbsoluteThickness[2], 
           RGBColor[0, 0, 1]], 
          Directive[
           PointSize[0.007333333333333334], 
           AbsoluteThickness[2], 
           RGBColor[0, 1, 0]], 
          Directive[
           PointSize[0.007333333333333334], 
           AbsoluteThickness[2], 
           RGBColor[1, 0, 0]]}, 
        "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), 
          "ScalingFunctions" -> {{Identity, Identity}, {
            Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
      "Meta" -> <|
       "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
        ListPlot, "GroupHighlight" -> False|>|>, 
     "DynamicHighlight"]], {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05], 
    "OptimizePlotMarkers" -> True, "IncludeHighlighting" -> "CurrentSet", 
    "HighlightStyle" -> Automatic, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 51.}, {-6., 2.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.9400246182797813`*^9, 3.9400246503493147`*^9},
 CellLabel->"Out[194]=",
 CellID->207234642,ExpressionUUID->"c1d24aeb-6428-499d-8b46-f0e20377a585"]
}, Open  ]],

Cell["Identical positions in the position list", "ItemNumbered",
 CellChangeTimes->{3.94002467486425*^9},
 CellID->456795341,ExpressionUUID->"2821c76e-eeef-45cd-ac62-d1666d8b1ba0"],

Cell["\<\
When some of the positions in the position list in MapAt coincide, the \
function is mapped on that position several times (nested). For instance:\
\>", "Text",
 CellChangeTimes->{{3.9400246816621637`*^9, 3.940024684728323*^9}, 
   3.94074061275961*^9},
 CellID->105258162,ExpressionUUID->"39a00c13-2725-489c-a9a7-561978212026"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "g", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"MapAt", "[", 
  RowBox[{"g", ",", 
   RowBox[{"Range", "[", "5", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", "4", "}"}], ",", 
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", "4", "}"}], ",", 
     RowBox[{"{", "4", "}"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.940024689891212*^9, 3.9400247059823523`*^9}},
 CellLabel->"In[195]:=",
 CellID->884048157,ExpressionUUID->"20afaad9-437a-4c35-a549-862a95fe5bc6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"g", "[", "1", "]"}], ",", 
   RowBox[{"g", "[", 
    RowBox[{"g", "[", "2", "]"}], "]"}], ",", "3", ",", 
   RowBox[{"g", "[", 
    RowBox[{"g", "[", 
     RowBox[{"g", "[", "4", "]"}], "]"}], "]"}], ",", "5"}], "}"}]], "Output",\

 CellChangeTimes->{3.9400247065535707`*^9},
 CellLabel->"Out[196]=",
 CellID->2051717220,ExpressionUUID->"ca6724cc-09e6-40f3-96b3-f2ebb95744b5"]
}, Open  ]],

Cell["\<\
However, the order in which the function is mapped in this case does not \
correspond to the order of positions in the list of positions. The nested \
function calls which correspond to the duplicate positions in the position \
list, are grouped together before the function is evaluated. We can see that \
by introducing a side-effect - the counter n, and trace whether the counter \
values correspond to the order in which mapping positions follow - they don\
\[CloseCurlyQuote] t.\
\>", "Text",
 CellChangeTimes->{{3.940024728250841*^9, 3.9400247433478928`*^9}},
 CellID->1066396661,ExpressionUUID->"dc57b566-4117-468b-9165-29b5305ac672"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"g", "[", 
     RowBox[{"#", ",", 
      RowBox[{"n", "++"}]}], "]"}], "&"}], ",", 
   RowBox[{
    RowBox[{"n", "=", "0"}], ";", 
    RowBox[{"Range", "[", "5", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", "4", "}"}], ",", 
     RowBox[{"{", "2", "}"}], ",", 
     RowBox[{"{", "4", "}"}], ",", 
     RowBox[{"{", "4", "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940024753699942*^9, 3.940024773142392*^9}},
 CellLabel->"In[197]:=",
 CellID->142875389,ExpressionUUID->"cfb3db1d-9a83-4b6f-beec-b92ba5684176"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"g", "[", 
    RowBox[{"1", ",", "0"}], "]"}], ",", 
   RowBox[{"g", "[", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"2", ",", "1"}], "]"}], ",", "2"}], "]"}], ",", "3", ",", 
   RowBox[{"g", "[", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{
       RowBox[{"g", "[", 
        RowBox[{"4", ",", "3"}], "]"}], ",", "4"}], "]"}], ",", "5"}], "]"}], 
   ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.9400247741105757`*^9},
 CellLabel->"Out[197]=",
 CellID->1604405829,ExpressionUUID->"12ff5e0e-2500-48d6-a81b-e8d6e105011b"]
}, Open  ]],

Cell["\<\
This means, in particular, that in the previous example with random walkers \
we won\[CloseCurlyQuote]t be able to obtain the final state of the walkers by \
just feeding the list of update positions to MapAt, because it would apply \
the random <randomWalk > function to the walkers in different order.\
\>", "Text",
 CellChangeTimes->{{3.940024783871542*^9, 3.940024794572966*^9}, 
   3.9402764174008617`*^9},
 CellID->1816697186,ExpressionUUID->"000094da-0056-4881-a699-186d09ef5096"],

Cell["The order of mapping", "ItemNumbered",
 CellChangeTimes->{3.940024802216774*^9},
 CellID->1199026464,ExpressionUUID->"ed408ad0-4cc2-449d-a3a8-b64439fdda13"],

Cell["\<\
Whenever MapAt is used to map a function to a number of elements, we already \
saw that MapAt does not map in the same order in which we supply the \
positions of the element. But what is the order in which mapping happens? The \
answer is that the list of positions is first reordered such that they follow \
as they would in a depth - first expression traversal. The reason is probably \
that this is the only order which is unambiguous, given that the function \
being mapped may in principle do any transformation with the subexpression \
(sub-branch) on which it is mapped, even destroy it.\
\>", "Text",
 CellChangeTimes->{{3.940024810545907*^9, 3.9400248339779873`*^9}},
 CellID->51237000,ExpressionUUID->"59c6e6dd-e0b0-4fdb-8efd-8aaa5696cc2c"],

Cell["Example: imitating DeleteCases", "ItemNumbered",
 CellChangeTimes->{3.940024842807254*^9},
 CellID->1782180283,ExpressionUUID->"6d7edac4-1f2d-487c-a711-802d4e2cc4a6"],

Cell["\<\
One important specific case is when we want to actually delete elements \
subject to some criteria. Usually, we use DeleteCases for that. For example, \
let us delete from all sublists of a nested list all elements that are \
multiples of 3. This will be our test list:\
\>", "Text",
 CellChangeTimes->{{3.940024848944789*^9, 3.94002485404727*^9}},
 CellID->2108025,ExpressionUUID->"832b669a-f0a7-4e4b-9bf2-3589017292c9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "testexpr", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testexpr", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "3", "}"}], ",", 
    RowBox[{"{", "2", "}"}], ",", 
    RowBox[{"{", "3", "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940024857695962*^9, 3.940024872616619*^9}},
 CellLabel->"In[198]:=",
 CellID->2076403143,ExpressionUUID->"2443d9f5-ab45-4e77-a73a-79f43f60cda1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8", ",", "10", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "8"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "5", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "6", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "10", ",", "8"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400248729443007`*^9},
 CellLabel->"Out[199]=",
 CellID->742810719,ExpressionUUID->"8335b3d2-3a49-465b-976e-b9cea16e2797"]
}, Open  ]],

Cell["\<\
We can imitate DeleteCases by Mapping a function #/.#:-> Sequence[]&, which \
effectively deletes an element from the list by replacing it by an \
\[OpenCurlyDoubleQuote]emptiness\[CloseCurlyDoubleQuote] (if you are feeling \
ambitious, try to see why we did not use a simpler form for the function \
being mapped - just Sequence[]&).\
\>", "Text",
 CellChangeTimes->{{3.9400248810085917`*^9, 3.940024922897644*^9}},
 CellID->565866704,ExpressionUUID->"cd1f59ab-2858-4262-a0ab-ea9e8a769b31"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "/.", 
     RowBox[{"#", ":>", 
      RowBox[{"Sequence", "[", "]"}]}]}], "&"}], ",", "testexpr", ",", 
   RowBox[{"Position", "[", 
    RowBox[{"testexpr", ",", 
     RowBox[{"x_", "/;", 
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{"x", ",", "3"}], "]"}], "==", "0"}]}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940024912490305*^9, 3.940024946341085*^9}},
 CellLabel->"In[200]:=",
 CellID->1709759579,ExpressionUUID->"4e6bbe1f-fe50-48b0-8b8d-1d8bb2399a7b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "8"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "5", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "10", ",", "8"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400249489438353`*^9},
 CellLabel->"Out[200]=",
 CellID->96732195,ExpressionUUID->"5d8ee859-ac06-4031-a333-87e985bf7af9"]
}, Open  ]],

Cell["We can package this into a function:", "Text",
 CellChangeTimes->{3.940024973562788*^9, 3.94074061278093*^9},
 CellID->1020619190,ExpressionUUID->"bcddf7bd-18cf-43bf-b133-99aedd250b56"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "myDeleteCases", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"myDeleteCases", "[", 
    RowBox[{"expr_", ",", "patt_"}], "]"}], ":=", 
   RowBox[{"MapAt", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "/.", 
       RowBox[{"#", ":>", 
        RowBox[{"Sequence", "[", "]"}]}]}], "&"}], ",", "expr", ",", 
     RowBox[{"Position", "[", 
      RowBox[{"expr", ",", "patt"}], "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9400249795555162`*^9, 3.940025007902755*^9}},
 CellLabel->"In[201]:=",
 CellID->1694514780,ExpressionUUID->"72e4d648-857c-4816-ac18-c8085d3a16be"],

Cell["Check again:", "Text",
 CellChangeTimes->{{3.9400250100470552`*^9, 3.940025012014723*^9}},
 CellID->1744123382,ExpressionUUID->"854b760b-fbdf-4aab-9df3-fc97c6a79adc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myDeleteCases", "[", 
  RowBox[{"testexpr", ",", 
   RowBox[{"x_", "/;", 
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{"x", ",", "3"}], "]"}], "==", "0"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940025012780761*^9, 3.940025022513383*^9}},
 CellLabel->"In[203]:=",
 CellID->1254166463,ExpressionUUID->"7cd5d3d7-d209-4bab-a27f-a582aa27c541"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "8"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "5", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "10", ",", "8"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400250228018923`*^9},
 CellLabel->"Out[203]=",
 CellID->2023349134,ExpressionUUID->"d2538659-2c80-4731-95c5-92421b743525"]
}, Open  ]],

Cell["\<\
With DeleteCases, it will look like (Infinity means look at all levels)\
\>", "Text",
 CellChangeTimes->{3.940025037900489*^9},
 CellID->1025344893,ExpressionUUID->"a5eafa0c-7bd4-4551-8fca-13787c9e06ef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeleteCases", "[", 
  RowBox[{"testexpr", ",", 
   RowBox[{"x_", "/;", 
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{"x", ",", "3"}], "]"}], "==", "0"}]}], ",", "Infinity"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940025039554304*^9, 3.94002505140723*^9}},
 CellLabel->"In[204]:=",
 CellID->663811804,ExpressionUUID->"9f2c45a6-5e66-4db4-aa0d-83818c6c2d20"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "8"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "5", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "10", ",", "8"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400250516809397`*^9},
 CellLabel->"Out[204]=",
 CellID->1012379854,ExpressionUUID->"a631e3dc-0278-4cb1-8cf2-5976da28b14d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["MapAll", "Subsubsection",
 CellChangeTimes->{3.9400250622303343`*^9},
 CellID->555270997,ExpressionUUID->"12b2895f-27be-4751-8b34-7fa46338f4c0"],

Cell["\<\
This function is equivalent to Map[function,expression,{0,Infinity}]. The \
zero here is necessary to apply the function also to entire expression, since \
this is what MapAll also does. We give just a single example\
\>", "Text",
 CellChangeTimes->{{3.940025069750238*^9, 3.940025074143668*^9}},
 CellID->2037747398,ExpressionUUID->"3a5775c0-ca4d-4893-a9fc-730992d0ac27"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"testexpr", ",", "f"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testexpr", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "3", "}"}], ",", 
    RowBox[{"{", "2", "}"}], ",", 
    RowBox[{"{", "3", "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940025082171096*^9, 3.9400251017275047`*^9}},
 CellLabel->"In[205]:=",
 CellID->467895041,ExpressionUUID->"e9578b87-7361-4ee5-a3c7-dc5b2129a553"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "3", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "7", ",", "6"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "9", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "6"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "8", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "5", ",", "5"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940025102417562*^9},
 CellLabel->"Out[206]=",
 CellID->976988544,ExpressionUUID->"267c64cd-3d1a-4bd4-8ff7-1758c2faa07d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapAll", "[", 
  RowBox[{"f", ",", "testexpr"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400251035584784`*^9, 3.940025107368168*^9}},
 CellLabel->"In[207]:=",
 CellID->255491392,ExpressionUUID->"b58d7809-7d58-43c9-aa71-5f014980425c"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"f", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"f", "[", "5", "]"}], ",", 
          RowBox[{"f", "[", "3", "]"}], ",", 
          RowBox[{"f", "[", "2", "]"}]}], "}"}], "]"}], ",", 
       RowBox[{"f", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"f", "[", "6", "]"}], ",", 
          RowBox[{"f", "[", "7", "]"}], ",", 
          RowBox[{"f", "[", "6", "]"}]}], "}"}], "]"}]}], "}"}], "]"}], ",", 
    RowBox[{"f", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"f", "[", "3", "]"}], ",", 
          RowBox[{"f", "[", "9", "]"}], ",", 
          RowBox[{"f", "[", "6", "]"}]}], "}"}], "]"}], ",", 
       RowBox[{"f", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"f", "[", "1", "]"}], ",", 
          RowBox[{"f", "[", "1", "]"}], ",", 
          RowBox[{"f", "[", "6", "]"}]}], "}"}], "]"}]}], "}"}], "]"}], ",", 
    RowBox[{"f", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"f", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"f", "[", "1", "]"}], ",", 
          RowBox[{"f", "[", "8", "]"}], ",", 
          RowBox[{"f", "[", "7", "]"}]}], "}"}], "]"}], ",", 
       RowBox[{"f", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"f", "[", "7", "]"}], ",", 
          RowBox[{"f", "[", "5", "]"}], ",", 
          RowBox[{"f", "[", "5", "]"}]}], "}"}], "]"}]}], "}"}], "]"}]}], 
   "}"}], "]"}]], "Output",
 CellChangeTimes->{3.94002510776302*^9},
 CellLabel->"Out[207]=",
 CellID->667784228,ExpressionUUID->"85467915-58b6-475d-a67b-3113b4c77aec"]
}, Open  ]],

Cell["MapAll works in a depth-first manner", "ItemNumbered",
 CellChangeTimes->{3.940025121776499*^9},
 CellID->699980774,ExpressionUUID->"60ab102e-9a99-4eec-a9ad-55bb684b042e"],

Cell["\<\
As is easy to demonstrate, MapAll performs the mapping on a general \
Mathematica expression (which, as we recall, can always be represented as a \
tree), in a depth-first manner. To do this, consider the following nested \
list (Fold operation will be covered shortly):\
\>", "Text",
 CellChangeTimes->{{3.9400251298409452`*^9, 3.940025139007494*^9}},
 CellID->661450352,ExpressionUUID->"fed709cf-325d-4cef-bb8c-baee8e7de07e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tst", "=", 
  RowBox[{"Fold", "[", 
   RowBox[{"List", ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940025141649726*^9, 3.9400251487686863`*^9}, 
   3.940025189092724*^9},
 CellLabel->"In[210]:=",
 CellID->441548339,ExpressionUUID->"aef42abe-90dc-4196-b959-1233978a8823"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "a"}], "}"}], ",", "b"}], "}"}], ",", "c"}],
     "}"}], ",", "d"}], "}"}]], "Output",
 CellChangeTimes->{3.940025149138773*^9, 3.940025189379992*^9},
 CellLabel->"Out[210]=",
 CellID->442729258,ExpressionUUID->"b480d032-ec46-4fb4-88df-85db504075cc"]
}, Open  ]],

Cell["\<\
This function prints the value of its argument and then returns the argument.\
\
\>", "Text",
 CellChangeTimes->{3.940025161142529*^9},
 CellID->1008159864,ExpressionUUID->"6688af24-1e64-43d5-9d8a-f1b6f0402c2f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowIt", "[", "x_", "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Print", "[", "x", "]"}], ";", "x"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.940025163307707*^9, 3.940025170731645*^9}},
 CellLabel->"In[209]:=",
 CellID->1299818790,ExpressionUUID->"e145c0ad-5e3c-4a10-b9ba-e56a03aa9f9b"],

Cell["Let us now map it to all levels of our expression:", "Text",
 CellChangeTimes->{3.9400251776563063`*^9, 3.940740612802579*^9},
 CellID->1469603089,ExpressionUUID->"4039f83f-12e9-4def-b9a2-166d502ed4fe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapAll", "[", 
  RowBox[{"ShowIt", ",", "tst"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400251794521027`*^9, 3.9400251859567423`*^9}},
 CellLabel->"In[211]:=",
 CellID->1665211828,ExpressionUUID->"0f0b5034-34e9-4c22-ac24-b576d7de207b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", "}"}]], "Print",
 CellChangeTimes->{3.940025191621419*^9},
 CellLabel->"During evaluation of In[211]:=",
 CellID->232015799,ExpressionUUID->"ec395127-ebf0-45fa-ab55-4cd34e9b7883"],

Cell[BoxData["a"], "Print",
 CellChangeTimes->{3.9400251916406403`*^9},
 CellLabel->"During evaluation of In[211]:=",
 CellID->1806714488,ExpressionUUID->"413c2d50-466f-48a9-96f6-afa1f3f2902c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", "a"}], "}"}]], "Print",
 CellChangeTimes->{3.940025191656234*^9},
 CellLabel->"During evaluation of In[211]:=",
 CellID->31631236,ExpressionUUID->"c2ffdf78-ec8f-45ca-a899-d52976989e0b"],

Cell[BoxData["b"], "Print",
 CellChangeTimes->{3.940025191663314*^9},
 CellLabel->"During evaluation of In[211]:=",
 CellID->1197722643,ExpressionUUID->"53cfdd73-8750-41e9-ba4b-a2b437274609"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "a"}], "}"}], ",", "b"}], "}"}]], "Print",
 CellChangeTimes->{3.9400251916697903`*^9},
 CellLabel->"During evaluation of In[211]:=",
 CellID->1760237570,ExpressionUUID->"eeedbfec-cc0b-4967-97fe-b119180abf66"],

Cell[BoxData["c"], "Print",
 CellChangeTimes->{3.940025191676071*^9},
 CellLabel->"During evaluation of In[211]:=",
 CellID->578117918,ExpressionUUID->"d58f7645-269f-4a05-9a80-3eab31a8d671"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "a"}], "}"}], ",", "b"}], "}"}], ",", "c"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.940025191682181*^9},
 CellLabel->"During evaluation of In[211]:=",
 CellID->1211828798,ExpressionUUID->"7dec115f-af0f-405a-baa2-00cbd54283b3"],

Cell[BoxData["d"], "Print",
 CellChangeTimes->{3.940025191688138*^9},
 CellLabel->"During evaluation of In[211]:=",
 CellID->471699838,ExpressionUUID->"848e29e8-fba5-458a-bf17-d3d2ca37c0f7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "a"}], "}"}], ",", "b"}], "}"}], ",", "c"}],
     "}"}], ",", "d"}], "}"}]], "Print",
 CellChangeTimes->{3.940025191693945*^9},
 CellLabel->"During evaluation of In[211]:=",
 CellID->1497036189,ExpressionUUID->"10972583-b20b-488f-ae2f-8b585a40e248"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "a"}], "}"}], ",", "b"}], "}"}], ",", "c"}],
     "}"}], ",", "d"}], "}"}]], "Output",
 CellChangeTimes->{3.9400251916998653`*^9},
 CellLabel->"Out[211]=",
 CellID->768820271,ExpressionUUID->"20d2f641-9bac-4a7e-843b-b80374821cad"]
}, Open  ]],

Cell["\<\
This clearly demonstrates that Mapping is performed in a depth-first manner. \
In general, MapAll should be used anytime when some function has to be \
applied to all levels of expression and in the depth-first manner (or when \
the order in which the function is applied to different pieces of expression \
does not matter). One example of such use follows.\
\>", "Text",
 CellChangeTimes->{{3.9400252079561567`*^9, 3.940025219993305*^9}},
 CellID->153190698,ExpressionUUID->"02117184-5d85-49b0-88be-355a3501c69e"],

Cell["Use in conjunction with ReplaceAll", "ItemNumbered",
 CellChangeTimes->{3.9400252343536673`*^9},
 CellID->2084566492,ExpressionUUID->"63e3458a-3060-4d50-be95-6ba5e78dce35"],

Cell["\<\
MapAll is not very often used, but there is however at least one instance \
when it is very useful - in conjunction with rule application when rules have \
to be applied to the innermost parts of the expression first. This is not \
what happens by default. Consider the following rule:\
\>", "Text",
 CellChangeTimes->{{3.940025241645973*^9, 3.9400252515221643`*^9}, 
   3.9407406128233547`*^9},
 CellID->1260813886,ExpressionUUID->"01a15c15-3cd6-4a97-911e-cf17b6aecc93"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ourrule", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x_", ",", "y_"}], "}"}], ":>", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"y", "^", "2"}]}], "}"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.94002525419424*^9, 3.940025263356308*^9}},
 CellLabel->"In[212]:=",
 CellID->1200447424,ExpressionUUID->"d9eda413-5e5c-405b-ac51-defdddfc6edd"],

Cell["Now, let us try:", "Text",
 CellChangeTimes->{{3.940025265337318*^9, 3.9400252689505997`*^9}},
 CellID->745115883,ExpressionUUID->"f846eef2-0b79-4c11-9e80-47e4e2207435"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tst", "/.", "ourrule"}]], "Input",
 CellChangeTimes->{{3.94002526997115*^9, 3.9400252726520357`*^9}},
 CellLabel->"In[213]:=",
 CellID->1689338797,ExpressionUUID->"7383ed9d-11ac-47a0-bc12-ace7d46c40ea"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "a"}], "}"}], ",", "b"}], "}"}], ",", "c"}],
     "}"}], ",", 
   SuperscriptBox["d", "2"]}], "}"}]], "Output",
 CellChangeTimes->{3.940025272952766*^9},
 CellLabel->"Out[213]=",
 CellID->497724981,ExpressionUUID->"0331985b-4bfd-4cf3-ba12-0e4d666f0546"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"tst", "/.", "ourrule"}], "/.", "ourrule"}]], "Input",
 CellChangeTimes->{{3.940025283038031*^9, 3.940025285006205*^9}},
 CellLabel->"In[214]:=",
 CellID->814950602,ExpressionUUID->"6cba2eda-966a-4175-8605-f308275d876c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "a"}], "}"}], ",", "b"}], "}"}], ",", "c"}],
     "}"}], ",", 
   SuperscriptBox["d", "4"]}], "}"}]], "Output",
 CellChangeTimes->{3.94002528541532*^9},
 CellLabel->"Out[214]=",
 CellID->118993461,ExpressionUUID->"30e268d8-f0ff-45dd-80c2-c57cbb574ada"]
}, Open  ]],

Cell["\<\
We see that the rule is always being applied to the outermost expression, \
since it matches. One way to proceed is of course to restrict the rule, so \
that, once applied, it won\[CloseCurlyQuote]t apply to the transformed \
expression any more:\
\>", "Text",
 CellChangeTimes->{{3.940025295980089*^9, 3.940025301124045*^9}, 
   3.940740612843255*^9},
 CellID->1513500137,ExpressionUUID->"12cc9d90-5810-4b4b-b55b-9aea2a954912"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ournewrule", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x_", ",", 
      RowBox[{"y_", "/;", 
       RowBox[{"Not", "[", 
        RowBox[{"MatchQ", "[", 
         RowBox[{"y", ",", 
          RowBox[{"Power", "[", 
           RowBox[{"_", ",", "2"}], "]"}]}], "]"}], "]"}]}]}], "}"}], ":>", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"y", "^", "2"}]}], "}"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9400253053472033`*^9, 3.940025324810376*^9}},
 CellLabel->"In[215]:=",
 CellID->1076337207,ExpressionUUID->"02d64c28-04e0-4b7d-bc22-d1faf44d9bb9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tst", "/.", "ournewrule"}]], "Input",
 CellChangeTimes->{{3.940025326909563*^9, 3.940025331056716*^9}},
 CellLabel->"In[216]:=",
 CellID->1443691413,ExpressionUUID->"8376015f-e14c-4f6f-870b-64770674715b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "a"}], "}"}], ",", "b"}], "}"}], ",", "c"}],
     "}"}], ",", 
   SuperscriptBox["d", "2"]}], "}"}]], "Output",
 CellChangeTimes->{3.940025331314934*^9},
 CellLabel->"Out[216]=",
 CellID->1250724599,ExpressionUUID->"adb27cba-5f65-4ea2-98ec-597d40f056cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"tst", "/.", "ournewrule"}], "/.", "ournewrule"}]], "Input",
 CellChangeTimes->{{3.940025338388803*^9, 3.94002534013011*^9}},
 CellLabel->"In[217]:=",
 CellID->1358398557,ExpressionUUID->"56f56c61-270b-4290-8578-8bfcdd62d461"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", "a"}], "}"}], ",", "b"}], "}"}], ",", 
     SuperscriptBox["c", "2"]}], "}"}], ",", 
   SuperscriptBox["d", "2"]}], "}"}]], "Output",
 CellChangeTimes->{3.940025340496155*^9},
 CellLabel->"Out[217]=",
 CellID->163300875,ExpressionUUID->"6700af6d-cea8-4ef2-94bc-056357e7cdd1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tst", "//.", "ournewrule"}]], "Input",
 CellChangeTimes->{{3.940025343969874*^9, 3.9400253466410007`*^9}},
 CellLabel->"In[218]:=",
 CellID->1931325830,ExpressionUUID->"91bddcb2-7019-42d3-ae4d-00f890fc9eb1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         SuperscriptBox["a", "2"]}], "}"}], ",", 
       SuperscriptBox["b", "2"]}], "}"}], ",", 
     SuperscriptBox["c", "2"]}], "}"}], ",", 
   SuperscriptBox["d", "2"]}], "}"}]], "Output",
 CellChangeTimes->{3.940025346967071*^9},
 CellLabel->"Out[218]=",
 CellID->1876339935,ExpressionUUID->"5bb3936b-f0d6-4f41-8bdc-b6c654b73fdf"]
}, Open  ]],

Cell["\<\
In the above case, we had our rule applied to expression starting from the \
outermost level to the innermost. But this behavior is not always the desired \
one. We can use MapAll to change this: now we will do the same by starting \
from the innermost piece, since MapAll maps the function in a depth-first \
manner. We can monitor this by tracing the execution (we restrict the Trace \
command to show only the rule-substitution pieces of the evaluation tree)\
\>", "Text",
 CellChangeTimes->{{3.94002535727556*^9, 3.940025376189412*^9}},
 CellID->1323019929,ExpressionUUID->"1f42a3d9-c258-4204-88b6-59ce5a672edc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Trace", "[", 
  RowBox[{
   RowBox[{"MapAll", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "/.", "ourrule"}], "&"}], ",", "tst"}], "]"}], ",", 
   "ReplaceAll"}], "]"}]], "Input",
 CellChangeTimes->{{3.94002538271655*^9, 3.9400254013400106`*^9}},
 CellLabel->"In[219]:=",
 CellID->461799757,ExpressionUUID->"f769458d-6362-4ea5-8a49-3774d41cce43"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   TagBox[
                    RowBox[{
                    RowBox[{"{", "}"}], "/.", "\[VeryThinSpace]", "ourrule"}],
                    
                    HoldForm], ",", 
                   TagBox[
                    RowBox[{
                    RowBox[{"{", "}"}], "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    SuperscriptBox["y", "2"]}], "}"}]}]}],
                    HoldForm], ",", 
                   TagBox[
                    RowBox[{"{", "}"}],
                    HoldForm]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   TagBox[
                    RowBox[{"a", "/.", "\[VeryThinSpace]", "ourrule"}],
                    HoldForm], ",", 
                   TagBox[
                    RowBox[{"a", "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    SuperscriptBox["y", "2"]}], "}"}]}]}],
                    HoldForm], ",", 
                   TagBox["a",
                    HoldForm]}], "}"}]}], "}"}], ",", 
               TagBox[
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", "}"}], ",", "a"}], "}"}], "/.", 
                 "\[VeryThinSpace]", "ourrule"}],
                HoldForm], ",", 
               TagBox[
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", "}"}], ",", "a"}], "}"}], "/.", 
                 "\[VeryThinSpace]", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
                  RowBox[{"{", 
                   RowBox[{"x", ",", 
                    SuperscriptBox["y", "2"]}], "}"}]}]}],
                HoldForm], ",", 
               TagBox[
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", "}"}], ",", 
                  SuperscriptBox["a", "2"]}], "}"}],
                HoldForm]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               TagBox[
                RowBox[{"b", "/.", "\[VeryThinSpace]", "ourrule"}],
                HoldForm], ",", 
               TagBox[
                RowBox[{"b", "/.", "\[VeryThinSpace]", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
                  RowBox[{"{", 
                   RowBox[{"x", ",", 
                    SuperscriptBox["y", "2"]}], "}"}]}]}],
                HoldForm], ",", 
               TagBox["b",
                HoldForm]}], "}"}]}], "}"}], ",", 
           TagBox[
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 SuperscriptBox["a", "2"]}], "}"}], ",", "b"}], "}"}], "/.", 
             "\[VeryThinSpace]", "ourrule"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 SuperscriptBox["a", "2"]}], "}"}], ",", "b"}], "}"}], "/.", 
             "\[VeryThinSpace]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
              RowBox[{"{", 
               RowBox[{"x", ",", 
                SuperscriptBox["y", "2"]}], "}"}]}]}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", "}"}], ",", 
                SuperscriptBox["a", "2"]}], "}"}], ",", 
              SuperscriptBox["b", "2"]}], "}"}],
            HoldForm]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           TagBox[
            RowBox[{"c", "/.", "\[VeryThinSpace]", "ourrule"}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"c", "/.", "\[VeryThinSpace]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
              RowBox[{"{", 
               RowBox[{"x", ",", 
                SuperscriptBox["y", "2"]}], "}"}]}]}],
            HoldForm], ",", 
           TagBox["c",
            HoldForm]}], "}"}]}], "}"}], ",", 
       TagBox[
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", "}"}], ",", 
               SuperscriptBox["a", "2"]}], "}"}], ",", 
             SuperscriptBox["b", "2"]}], "}"}], ",", "c"}], "}"}], "/.", 
         "\[VeryThinSpace]", "ourrule"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", "}"}], ",", 
               SuperscriptBox["a", "2"]}], "}"}], ",", 
             SuperscriptBox["b", "2"]}], "}"}], ",", "c"}], "}"}], "/.", 
         "\[VeryThinSpace]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            SuperscriptBox["y", "2"]}], "}"}]}]}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              SuperscriptBox["a", "2"]}], "}"}], ",", 
            SuperscriptBox["b", "2"]}], "}"}], ",", 
          SuperscriptBox["c", "2"]}], "}"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"d", "/.", "\[VeryThinSpace]", "ourrule"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"d", "/.", "\[VeryThinSpace]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            SuperscriptBox["y", "2"]}], "}"}]}]}],
        HoldForm], ",", 
       TagBox["d",
        HoldForm]}], "}"}]}], "}"}], ",", 
   TagBox[
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             SuperscriptBox["a", "2"]}], "}"}], ",", 
           SuperscriptBox["b", "2"]}], "}"}], ",", 
         SuperscriptBox["c", "2"]}], "}"}], ",", "d"}], "}"}], "/.", 
     "\[VeryThinSpace]", "ourrule"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             SuperscriptBox["a", "2"]}], "}"}], ",", 
           SuperscriptBox["b", "2"]}], "}"}], ",", 
         SuperscriptBox["c", "2"]}], "}"}], ",", "d"}], "}"}], "/.", 
     "\[VeryThinSpace]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        SuperscriptBox["y", "2"]}], "}"}]}]}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            SuperscriptBox["a", "2"]}], "}"}], ",", 
          SuperscriptBox["b", "2"]}], "}"}], ",", 
        SuperscriptBox["c", "2"]}], "}"}], ",", 
      SuperscriptBox["d", "2"]}], "}"}],
    HoldForm]}], "}"}]], "Output",
 CellChangeTimes->{3.940025401724945*^9},
 CellLabel->"Out[219]=",
 CellID->106836544,ExpressionUUID->"4556c43b-61e7-4caa-a055-861ca408b190"]
}, Open  ]],

Cell["A digression: performance improvements and the use of With", "Subitem",
 CellChangeTimes->{3.940025463031562*^9, 3.940740612865583*^9},
 CellID->492122378,ExpressionUUID->"570cfa91-3e11-4486-a832-bb1da700b3aa"],

Cell["\<\
Trace also reveals that our computation is not entirely efficient since the \
rule definition is evaluated every time afresh. To avoid this we will use \
<With > to embed the rule definition textually:\
\>", "Text",
 CellChangeTimes->{{3.940025471744155*^9, 3.9400254772561083`*^9}, 
   3.940276417424527*^9, 3.940740612885315*^9},
 CellID->1141282449,ExpressionUUID->"92d4c105-29be-4d69-bc08-efd500fa66ed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Trace", "[", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rule", "=", "ourrule"}], "}"}], ",", 
     RowBox[{"MapAll", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "/.", "rule"}], "&"}], ",", "tst"}], "]"}]}], "]"}], ",",
    "ReplaceAll"}], "]"}]], "Input",
 CellChangeTimes->{{3.940025488224317*^9, 3.9400255145626793`*^9}},
 CellLabel->"In[222]:=",
 CellID->1303880480,ExpressionUUID->"92d7f1d1-3d76-4271-b025-e5c9c5980dd8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   TagBox[
                    RowBox[{
                    RowBox[{"{", "}"}], "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    SuperscriptBox["y", "2"]}], "}"}]}]}],
                    HoldForm], ",", 
                   TagBox[
                    RowBox[{"{", "}"}],
                    HoldForm]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   TagBox[
                    RowBox[{"a", "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", 
                    SuperscriptBox["y", "2"]}], "}"}]}]}],
                    HoldForm], ",", 
                   TagBox["a",
                    HoldForm]}], "}"}]}], "}"}], ",", 
               TagBox[
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", "}"}], ",", "a"}], "}"}], "/.", 
                 "\[VeryThinSpace]", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
                  RowBox[{"{", 
                   RowBox[{"x", ",", 
                    SuperscriptBox["y", "2"]}], "}"}]}]}],
                HoldForm], ",", 
               TagBox[
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", "}"}], ",", 
                  SuperscriptBox["a", "2"]}], "}"}],
                HoldForm]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               TagBox[
                RowBox[{"b", "/.", "\[VeryThinSpace]", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
                  RowBox[{"{", 
                   RowBox[{"x", ",", 
                    SuperscriptBox["y", "2"]}], "}"}]}]}],
                HoldForm], ",", 
               TagBox["b",
                HoldForm]}], "}"}]}], "}"}], ",", 
           TagBox[
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 SuperscriptBox["a", "2"]}], "}"}], ",", "b"}], "}"}], "/.", 
             "\[VeryThinSpace]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
              RowBox[{"{", 
               RowBox[{"x", ",", 
                SuperscriptBox["y", "2"]}], "}"}]}]}],
            HoldForm], ",", 
           TagBox[
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", "}"}], ",", 
                SuperscriptBox["a", "2"]}], "}"}], ",", 
              SuperscriptBox["b", "2"]}], "}"}],
            HoldForm]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           TagBox[
            RowBox[{"c", "/.", "\[VeryThinSpace]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
              RowBox[{"{", 
               RowBox[{"x", ",", 
                SuperscriptBox["y", "2"]}], "}"}]}]}],
            HoldForm], ",", 
           TagBox["c",
            HoldForm]}], "}"}]}], "}"}], ",", 
       TagBox[
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", "}"}], ",", 
               SuperscriptBox["a", "2"]}], "}"}], ",", 
             SuperscriptBox["b", "2"]}], "}"}], ",", "c"}], "}"}], "/.", 
         "\[VeryThinSpace]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            SuperscriptBox["y", "2"]}], "}"}]}]}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              SuperscriptBox["a", "2"]}], "}"}], ",", 
            SuperscriptBox["b", "2"]}], "}"}], ",", 
          SuperscriptBox["c", "2"]}], "}"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"d", "/.", "\[VeryThinSpace]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            SuperscriptBox["y", "2"]}], "}"}]}]}],
        HoldForm], ",", 
       TagBox["d",
        HoldForm]}], "}"}]}], "}"}], ",", 
   TagBox[
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             SuperscriptBox["a", "2"]}], "}"}], ",", 
           SuperscriptBox["b", "2"]}], "}"}], ",", 
         SuperscriptBox["c", "2"]}], "}"}], ",", "d"}], "}"}], "/.", 
     "\[VeryThinSpace]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        SuperscriptBox["y", "2"]}], "}"}]}]}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            SuperscriptBox["a", "2"]}], "}"}], ",", 
          SuperscriptBox["b", "2"]}], "}"}], ",", 
        SuperscriptBox["c", "2"]}], "}"}], ",", 
      SuperscriptBox["d", "2"]}], "}"}],
    HoldForm]}], "}"}]], "Output",
 CellChangeTimes->{{3.940025507072342*^9, 3.940025514817648*^9}},
 CellLabel->"Out[222]=",
 CellID->1941193096,ExpressionUUID->"b5e17a91-bd3d-4caf-9f83-bc94012b6f2f"]
}, Open  ]],

Cell["\<\
Note that the use of Module or Block won\[CloseCurlyQuote] t have the same \
effect, and won\[CloseCurlyQuote] t help us here.\
\>", "Text",
 CellChangeTimes->{3.940025555880946*^9},
 CellID->1060799248,ExpressionUUID->"82014670-feb4-4c59-a4c8-11f86000ea4f"],

Cell["\<\
The same functionality can be achieved by using Replace rather than \
ReplaceAll, with the level specification {0, Infinity}:\
\>", "Text",
 CellChangeTimes->{{3.940025564780397*^9, 3.940025567201434*^9}, 
   3.940740612905505*^9},
 CellID->443723742,ExpressionUUID->"9f14e8ad-fa71-4f7e-999c-ef2d8d831dc1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Trace", "[", 
  RowBox[{"Replace", "[", 
   RowBox[{"tst", ",", "ourrule", ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "Infinity"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400255755103207`*^9, 3.94002558448298*^9}},
 CellLabel->"In[223]:=",
 CellID->1079702141,ExpressionUUID->"6a506d18-ef11-4ed9-821f-63b71d07fa4b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     TagBox["tst",
      HoldForm], ",", 
     TagBox[
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "}"}], ",", "a"}], "}"}], ",", "b"}], "}"}], ",", 
          "c"}], "}"}], ",", "d"}], "}"}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox["ourrule",
      HoldForm], ",", 
     TagBox[
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
       RowBox[{"{", 
        RowBox[{"x", ",", 
         SuperscriptBox["y", "2"]}], "}"}]}],
      HoldForm]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TagBox["\[Infinity]",
        HoldForm], ",", 
       TagBox["\[Infinity]",
        HoldForm]}], "}"}], ",", 
     TagBox[
      RowBox[{"{", 
       RowBox[{"0", ",", "\[Infinity]"}], "}"}],
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"Replace", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "}"}], ",", "a"}], "}"}], ",", "b"}], "}"}], ",", 
          "c"}], "}"}], ",", "d"}], "}"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x_", ",", "y_"}], "}"}], "\[RuleDelayed]", 
       RowBox[{"{", 
        RowBox[{"x", ",", 
         SuperscriptBox["y", "2"]}], "}"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "\[Infinity]"}], "}"}]}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            SuperscriptBox["a", "2"]}], "}"}], ",", 
          SuperscriptBox["b", "2"]}], "}"}], ",", 
        SuperscriptBox["c", "2"]}], "}"}], ",", 
      SuperscriptBox["d", "2"]}], "}"}],
    HoldForm]}], "}"}]], "Output",
 CellChangeTimes->{3.940025584784864*^9},
 CellLabel->"Out[223]=",
 CellID->945197404,ExpressionUUID->"e0a87b15-67b4-4f75-afa6-d36bccd720c3"]
}, Open  ]],

Cell["\<\
This is in fact a more efficient solution since more operations are done \
inside the kernel, but without the previous discussion the apparent \
differences in the functionality of ReplaceAll[expr, rules] and Replace[expr, \
rules, {0, Infinity}] may look like a mystery. In many cases the desired \
behavior is in fact the one of the latter operation - that is, apply rules to \
the innermost expressions first.\
\>", "Text",
 CellChangeTimes->{{3.9400256065199213`*^9, 3.9400256289271584`*^9}},
 CellID->82252474,ExpressionUUID->"341df499-0e6b-4a21-93b5-eb9d5c608101"],

Cell["\<\
Also, even in the case above, the use of the construct MapAll[#/.rules&,expr] \
may be advantageous since, being essentially equivalent to Replace[expr, \
rules, {0, Infinity}], it allows for a more detailed tracing and debugging. \
Once the code is tested (and possibly debugged), one can change it back to \
Replace[expr, rules, {0, Infinity}].\
\>", "Text",
 CellChangeTimes->{{3.9400256065199213`*^9, 3.940025647272696*^9}},
 CellID->2060230079,ExpressionUUID->"70e1d83e-5bec-465e-85f9-592c11e18b75"],

Cell["\<\
Finally, it could be necessary that the rules at each level be repeatedly \
applied until the expression stops changing. This is achieved by  \
MapAll[ReplaceRepeated[#, rules]&, expr], but to my knowledge there is no \
simple equivalent with Replace in this case.\
\>", "Text",
 CellChangeTimes->{{3.9400256065199213`*^9, 3.940025715594058*^9}},
 CellID->557176284,ExpressionUUID->"8f15f1c3-df02-4cb1-80d9-ec571c0c1ba6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Scan", "Subsubsection",
 CellChangeTimes->{3.940025704561063*^9},
 CellID->1105604685,ExpressionUUID->"63bd88ec-b982-47bb-9737-d72499940096"],

Cell["\<\
Scan is a function similar to Map, but it does not return a list of values at \
the end. This means that using Scan only makes sense if the function being \
scanned contains side effects such as assignments. The format is:\
\>", "Text",
 CellChangeTimes->{{3.940025723717884*^9, 3.940025732873109*^9}, 
   3.9407406129258327`*^9},
 CellID->1869426951,ExpressionUUID->"0cab5ccf-99af-4d67-8b79-4260706f65b5"],

Cell[BoxData[
 RowBox[{"Scan", "[", 
  RowBox[{"f", ",", "expr", ",", "levspec"}], "]"}]], "Input",
 CellChangeTimes->{{3.940025738182979*^9, 3.9400257426974277`*^9}},
 CellID->795993754,ExpressionUUID->"2a297c51-728d-4b34-868f-e1477ade1fcc"],

Cell["\<\
where <f> is the function being scanned, <expr> is an expression on which we \
scan the function <f>, and <levspec> is an optional level specification - the \
syntax is very similar to that for Map.\
\>", "Text",
 CellChangeTimes->{{3.9400257501623993`*^9, 3.940025752973566*^9}},
 CellID->637803592,ExpressionUUID->"518707cb-339a-4033-b9f9-69796e769076"],

Cell["Simple examples", "ItemNumbered",
 CellChangeTimes->{3.940025762894825*^9},
 CellID->1314366989,ExpressionUUID->"68db035b-a4f6-4ce3-af2f-f3fc0cd03f46"],

Cell["Let us, for example, scan a squaring function on a list:", "Text",
 CellChangeTimes->{3.940025768131196*^9, 3.940740612945705*^9},
 CellID->1549191081,ExpressionUUID->"3a5ace4e-bebd-4bbe-a40d-0bd05a59fb54"],

Cell[BoxData[
 RowBox[{"Scan", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "^", "2"}], "&"}], ",", 
   RowBox[{"Range", "[", "10", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940025772745801*^9, 3.940025777569232*^9}},
 CellLabel->"In[224]:=",
 CellID->442082473,ExpressionUUID->"7e9f0abb-0cff-403b-a7e4-c96d16109698"],

Cell["\<\
We can see that no output has been produced (or, more precisely, Null has \
been produced). To get anything useful, we need some side effects. Here, for \
instance, we will use Scan to compute the sum of squares of the list elements:\
\>", "Text",
 CellChangeTimes->{{3.9400257855327873`*^9, 3.940025793936924*^9}},
 CellID->193619190,ExpressionUUID->"c82f6347-d027-41c9-8c28-a5f206b3c303"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"sumsq", "=", "0"}], "}"}], ",", 
   RowBox[{
    RowBox[{"Scan", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"sumsq", "+=", 
        RowBox[{"#", "^", "2"}]}], "&"}], ",", 
      RowBox[{"Range", "[", "10", "]"}]}], "]"}], ";", "sumsq"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9400258003307743`*^9, 3.9400258207745857`*^9}},
 CellLabel->"In[225]:=",
 CellID->951531440,ExpressionUUID->"a3509e5d-795f-4fbe-ab48-e6a35377317d"],

Cell[BoxData["385"], "Output",
 CellChangeTimes->{3.940025823316147*^9},
 CellLabel->"Out[225]=",
 CellID->442110578,ExpressionUUID->"9fc16357-c70e-4070-a31a-e93a09d2b094"]
}, Open  ]],

Cell["\<\
Since Scan does not produce a list of results, it is somewhat faster than \
Map. However, there is another and perhaps more important difference between \
the two: Scan can be \[OpenCurlyDoubleQuote]stopped\[CloseCurlyDoubleQuote] \
at any moment by using a Return statement inside a function being scanned. \
This is not true for Map - it can be stopped only by throwing an exception. \
For example, we want to compute the sum of the squares but stop as the \
element exceeds 6:\
\>", "Text",
 CellChangeTimes->{{3.940025831444826*^9, 3.940025863300095*^9}, {
  3.940740612965515*^9, 3.9407406129844303`*^9}},
 CellID->259065826,ExpressionUUID->"129c6f64-76c7-41c9-8ce5-5d682cacb921"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"sumsq", "=", "0"}], "}"}], ",", 
   RowBox[{"Scan", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#", "<=", "6"}], ",", 
        RowBox[{"sumsq", "+=", 
         RowBox[{"#", "^", "2"}]}], ",", 
        RowBox[{"Return", "[", "sumsq", "]"}]}], "]"}], "&"}], ",", 
     RowBox[{"Range", "[", "10", "]"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940025870337101*^9, 3.940025897046307*^9}},
 CellLabel->"In[226]:=",
 CellID->1001531898,ExpressionUUID->"ffd46e40-d5da-4b3b-9f7d-26dc4db4d335"],

Cell[BoxData["91"], "Output",
 CellChangeTimes->{3.9400258975452213`*^9},
 CellLabel->"Out[226]=",
 CellID->1111581936,ExpressionUUID->"1aebfee5-2ed4-4397-ab2d-ee50aff290b2"]
}, Open  ]],

Cell["\<\
The Return statement will break only from Scan, but not from any scoping \
construct possibly enclosing Scan, such as Module above.\
\>", "Text",
 CellChangeTimes->{{3.940025904816773*^9, 3.940025906543219*^9}},
 CellID->1397353099,ExpressionUUID->"4221ea7d-6423-41c1-aba2-81a2af140c32"],

Cell["Example: conditional list splitting", "ItemNumbered",
 CellChangeTimes->{3.940025920038163*^9},
 CellID->1927278106,ExpressionUUID->"4eae5b25-eca4-44db-9932-e6dc1519d3c8"],

Cell["\<\
Scan can also be thought of as a replacement for loops. Here, for example, we \
will use it to determine the position where to split a given list in 2 parts \
(this will happen as soon as the condition <cond > will first be satisfied).\
\>", "Text",
 CellChangeTimes->{{3.94002592633418*^9, 3.940025934654241*^9}, 
   3.940276417447626*^9},
 CellID->1267279841,ExpressionUUID->"32803e69-8637-4e58-bbbc-71b9d489577d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "splitWhen", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"splitWhen", "[", 
   RowBox[{"x_List", ",", "cond_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", "=", "0"}], "}"}], ",", 
    RowBox[{
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"cond", "[", "#", "]"}], ",", 
          RowBox[{"Return", "[", "]"}], ",", 
          RowBox[{"n", "++"}]}], "]"}], "&"}], ",", "x"}], "]"}], ";", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Take", "[", 
        RowBox[{"x", ",", "n"}], "]"}], ",", 
       RowBox[{"Drop", "[", 
        RowBox[{"x", ",", "n"}], "]"}]}], "}"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940025936771789*^9, 3.940025971283031*^9}},
 CellLabel->"In[227]:=",
 CellID->555291676,ExpressionUUID->"b6c21c6f-e6a5-4b57-8edf-35f562680539"],

Cell["\<\
Scan is a better device than just a single loop (or nested loops in most \
cases, for that matter), both because it is optimized and because it is more \
general: it receives the standard level specification and works on general \
symbolic trees (Mathematica expressions), not just simple lists . In \
particular, if asked, it traverses an expression depth-first, computing \
whatever side effects we instruct it to.\
\>", "Text",
 CellChangeTimes->{{3.9400259876644993`*^9, 3.940026008168285*^9}},
 CellID->1816531442,ExpressionUUID->"bc24e771-f9d5-4fd8-814e-1c3960dcbd75"]
}, Open  ]],

Cell[CellGroupData[{

Cell["MapIndexed", "Subsubsection",
 CellChangeTimes->{3.940026015636341*^9},
 CellID->1108946741,ExpressionUUID->"21d167dc-17a0-483f-bbab-33ec54ccc60f"],

Cell["\<\
This is a truly useful function, which extends in some sense the capabilities \
of Map. There are situations in which on one hand, a function like Map is \
needed, but on the other hand, which Map can not handle. These are cases when \
the function being mapped has to \[OpenCurlyDoubleQuote]know\
\[CloseCurlyDoubleQuote] where in the list it is \
\[OpenCurlyDoubleQuote]currently\[CloseCurlyDoubleQuote]. Let us consider an \
example.\
\>", "Text",
 CellChangeTimes->{{3.9400260223943167`*^9, 3.940026038722666*^9}},
 CellID->57303674,ExpressionUUID->"f22cb796-e8c7-400f-a667-c6babaea14b9"],

Cell["Starting example and syntax", "ItemNumbered",
 CellChangeTimes->{3.94002605021601*^9},
 CellID->758136648,ExpressionUUID->"edf5a3d1-cc28-48f3-96a1-c3f07910bf1d"],

Cell["Say, we have a simple list of numbers:", "Text",
 CellChangeTimes->{3.9400260557011147`*^9},
 CellID->982165285,ExpressionUUID->"f936b1e4-df03-47b5-ada3-0e2b6ac31a37"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"0", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "15", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940026059725802*^9, 3.9400260679895697`*^9}},
 CellLabel->"In[229]:=",
 CellID->386337662,ExpressionUUID->"1a9e3cf2-b2f5-4f46-b4cd-8887ff2055d4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "8", ",", "0", ",", "7", ",", "2", ",", "2", ",", "0", ",", "7", ",", "3", 
   ",", "0", ",", "3", ",", "7", ",", "5", ",", "5", ",", "0", ",", "2"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940026068396378*^9},
 CellLabel->"Out[229]=",
 CellID->1406077512,ExpressionUUID->"84063cda-3fb5-42c1-981c-3de1c9903b59"]
}, Open  ]],

Cell["\<\
Now, say, we would like to Map on it a function (-1)^n*Sin[x], where <n> is a \
position of the number, and <x> is a number. In this simple case we could use \
Map like this:\
\>", "Text",
 CellChangeTimes->{{3.9400260751477537`*^9, 3.940026079870099*^9}},
 CellID->1034692596,ExpressionUUID->"c3feeb58-e733-45ce-a89c-d6b2e9f48a52"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "0"}], "}"}], ",", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "^", 
        RowBox[{"(", 
         RowBox[{"n", "++"}], ")"}]}], 
       RowBox[{"Sin", "[", "#", "]"}]}], "&"}], ",", "testlist"}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940026083038249*^9, 3.940026100020978*^9}},
 CellLabel->"In[230]:=",
 CellID->801860404,ExpressionUUID->"14ed4157-81d4-4079-bf68-381ebe0a32f5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Sin", "[", "8", "]"}], ",", "0", ",", 
   RowBox[{"Sin", "[", "7", "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", "2", "]"}]}], ",", 
   RowBox[{"Sin", "[", "2", "]"}], ",", "0", ",", 
   RowBox[{"Sin", "[", "7", "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", "3", "]"}]}], ",", "0", ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", "3", "]"}]}], ",", 
   RowBox[{"Sin", "[", "7", "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", "5", "]"}]}], ",", 
   RowBox[{"Sin", "[", "5", "]"}], ",", "0", ",", 
   RowBox[{"Sin", "[", "2", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940026100327518*^9},
 CellLabel->"Out[230]=",
 CellID->1177696742,ExpressionUUID->"20bbd474-3be8-4364-b5ea-84ee16ea7842"]
}, Open  ]],

Cell["\<\
However, this is not an aesthetic solution. Also, it will not work for more \
complicated lists. What MapIndexed does is to provide to a function being \
mapped the position of the current element as a second argument. So, now the \
function being mapped is a function of two arguments. The rest of the syntax \
is the same:\
\>", "Text",
 CellChangeTimes->{{3.9400261314674*^9, 3.9400261448794947`*^9}},
 CellID->1599128427,ExpressionUUID->"a6fe51bc-b37e-4425-aa84-1798a1087cc1"],

Cell[BoxData[
 RowBox[{"MapIndexed", "[", 
  RowBox[{"function", ",", " ", "expression", ",", " ", "level"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940026160033107*^9, 3.940026167196774*^9}},
 CellID->270346487,ExpressionUUID->"c8837a33-1f4a-46f8-8e6b-b967067e76ac"],

Cell["\<\
As before, the level specification is an optional parameter - it is 1 by \
default. In this particular example, we write\
\>", "Text",
 CellChangeTimes->{{3.94002617668931*^9, 3.940026178703361*^9}},
 CellID->1811379942,ExpressionUUID->"aea6db26-0fb7-4cc5-b814-9cf935915a9f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapIndexed", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], "^", 
      RowBox[{"#2", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], "*", 
     RowBox[{"Sin", "[", "#1", "]"}]}], "&"}], ",", "testlist"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940026182247076*^9, 3.94002619867417*^9}},
 CellLabel->"In[231]:=",
 CellID->1487198138,ExpressionUUID->"ed45cd1c-c1a6-43a4-ad59-6acd2f1b9407"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"Sin", "[", "8", "]"}]}], ",", "0", ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", "7", "]"}]}], ",", 
   RowBox[{"Sin", "[", "2", "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", "2", "]"}]}], ",", "0", ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", "7", "]"}]}], ",", 
   RowBox[{"Sin", "[", "3", "]"}], ",", "0", ",", 
   RowBox[{"Sin", "[", "3", "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", "7", "]"}]}], ",", 
   RowBox[{"Sin", "[", "5", "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", "5", "]"}]}], ",", "0", ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", "2", "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.940026198975622*^9},
 CellLabel->"Out[231]=",
 CellID->48716445,ExpressionUUID->"f53ca5b8-ee7f-4f7b-884c-11ed23424a43"]
}, Open  ]],

Cell["\<\
Notice that we again use here a pure function, but this time a pure function \
of the two arguments. Notice also that we take a first part of the second \
argument #2[[1]]: this is because the position is always given as a list of \
indexes, even for a simple list.\
\>", "Text",
 CellChangeTimes->{{3.940026211322632*^9, 3.94002622025359*^9}},
 CellID->122389500,ExpressionUUID->"e2e45efa-fbe9-4653-9dc8-1bea75142003"],

Cell["\<\
In principle, once again, we can use a pattern-defined function of two \
arguments here:\
\>", "Text",
 CellChangeTimes->{3.940026241428248*^9},
 CellID->1247234921,ExpressionUUID->"b8004034-564a-4b38-aa48-618b800d2b03"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "g", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"g", "[", 
    RowBox[{"x_", ",", 
     RowBox[{"{", "n_Integer", "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "^", "n"}], "*", 
    RowBox[{"Sin", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"MapIndexed", "[", 
  RowBox[{"g", ",", "testlist"}], "]"}]}], "Input",
 CellChangeTimes->{{3.9400262446407137`*^9, 3.940026265541519*^9}},
 CellLabel->"In[232]:=",
 CellID->489667849,ExpressionUUID->"15f51d6b-fcef-482c-805a-34f1bba73813"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"Sin", "[", "8", "]"}]}], ",", "0", ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", "7", "]"}]}], ",", 
   RowBox[{"Sin", "[", "2", "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", "2", "]"}]}], ",", "0", ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", "7", "]"}]}], ",", 
   RowBox[{"Sin", "[", "3", "]"}], ",", "0", ",", 
   RowBox[{"Sin", "[", "3", "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", "7", "]"}]}], ",", 
   RowBox[{"Sin", "[", "5", "]"}], ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", "5", "]"}]}], ",", "0", ",", 
   RowBox[{"-", 
    RowBox[{"Sin", "[", "2", "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.940026265830039*^9},
 CellLabel->"Out[234]=",
 CellID->1676231783,ExpressionUUID->"49feb250-35ff-4b99-9717-dde63df6fba6"]
}, Open  ]],

Cell["\<\
Another simple example: let us supply the numbers in the list with their \
positions\
\>", "Text",
 CellChangeTimes->{3.940026285164961*^9},
 CellID->1011161738,ExpressionUUID->"d86d22c0-d90f-4767-81b6-b0eaf9ca7e02"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapIndexed", "[", 
  RowBox[{"List", ",", "testlist"}], "]"}]], "Input",
 CellChangeTimes->{{3.940026287840665*^9, 3.940026291932629*^9}},
 CellLabel->"In[235]:=",
 CellID->1012580996,ExpressionUUID->"f5cef42d-547b-427f-85d8-10a6996c8bde"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"8", ",", 
     RowBox[{"{", "1", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"{", "2", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", 
     RowBox[{"{", "3", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"{", "4", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"{", "5", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"{", "6", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", 
     RowBox[{"{", "7", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", 
     RowBox[{"{", "8", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"{", "9", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", 
     RowBox[{"{", "10", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", 
     RowBox[{"{", "11", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", 
     RowBox[{"{", "12", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", 
     RowBox[{"{", "13", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"{", "14", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"{", "15", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400262922079487`*^9},
 CellLabel->"Out[235]=",
 CellID->1660850496,ExpressionUUID->"6fb7fff9-a23d-4aae-9074-27cbbaac3b40"]
}, Open  ]],

Cell["More examples", "ItemNumbered",
 CellChangeTimes->{3.940026361531125*^9},
 CellID->1643265161,ExpressionUUID->"95cc5d16-c487-4a0b-8409-7754dba20f81"],

Cell["Example: creation of specific matrices", "SubitemNumbered",
 CellChangeTimes->{3.940026373437357*^9},
 CellID->1717860507,ExpressionUUID->"731dd74a-03cf-420f-92f8-55fc7dbf5857"],

Cell["\<\
MapIndexed gets more non-trivial in what can be accomplished with it, as we \
go to nested lists and trees. For example, let us build a matrix (list of \
lists), with elements Sin[i-j], where i and j are column and row numbers \
(say,4x4)\
\>", "Text",
 CellChangeTimes->{{3.940026381003401*^9, 3.940026387777507*^9}},
 CellID->1311390881,ExpressionUUID->"a5f006c9-b5d5-4dc8-a77b-4604fbb075b3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"result", "=", 
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Sin", "[", 
        RowBox[{
         RowBox[{"#2", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "-", 
         RowBox[{"#2", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], ",", 
      RowBox[{"IdentityMatrix", "[", "4", "]"}], ",", 
      RowBox[{"{", "2", "}"}]}], "]"}]}], ")"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.940026392692432*^9, 3.940026431366085*^9}},
 CellLabel->"In[236]:=",
 CellID->1799335218,ExpressionUUID->"16d123c9-d544-4b56-b3c0-a08b1bdc1e9c"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      RowBox[{"-", 
       RowBox[{"Sin", "[", "1", "]"}]}], 
      RowBox[{"-", 
       RowBox[{"Sin", "[", "2", "]"}]}], 
      RowBox[{"-", 
       RowBox[{"Sin", "[", "3", "]"}]}]},
     {
      RowBox[{"Sin", "[", "1", "]"}], "0", 
      RowBox[{"-", 
       RowBox[{"Sin", "[", "1", "]"}]}], 
      RowBox[{"-", 
       RowBox[{"Sin", "[", "2", "]"}]}]},
     {
      RowBox[{"Sin", "[", "2", "]"}], 
      RowBox[{"Sin", "[", "1", "]"}], "0", 
      RowBox[{"-", 
       RowBox[{"Sin", "[", "1", "]"}]}]},
     {
      RowBox[{"Sin", "[", "3", "]"}], 
      RowBox[{"Sin", "[", "2", "]"}], 
      RowBox[{"Sin", "[", "1", "]"}], "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.940026431673223*^9},
 CellLabel->"Out[236]//MatrixForm=",
 CellID->915196705,ExpressionUUID->"5aaa44d7-efa4-4c45-a796-0429b8d078a5"]
}, Open  ]],

Cell["\<\
Notice that here we Map on the level {2}, which corresponds to numbers. Also, \
then, the argument #2 is now a position of the matrix element and has 2 \
indices (i and j). It is really easy to verify that - create a matrix where \
the elements will be just positions:\
\>", "Text",
 CellChangeTimes->{{3.940026458549079*^9, 3.940026472807562*^9}},
 CellID->1433141121,ExpressionUUID->"79d7b92a-6691-4e5c-9d2d-807f9927f4bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapIndexed", "[", 
  RowBox[{
   RowBox[{"#2", "&"}], ",", 
   RowBox[{"IdentityMatrix", "[", "4", "]"}], ",", 
   RowBox[{"{", "2", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940026480217572*^9, 3.940026489408943*^9}},
 CellLabel->"In[237]:=",
 CellID->454343110,ExpressionUUID->"23bca46c-d557-4353-af05-7ce4d0bb2d16"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "4"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940026489786827*^9},
 CellLabel->"Out[237]=",
 CellID->794975597,ExpressionUUID->"562132e2-0053-4d8c-8db2-3fe1b798cd0c"]
}, Open  ]],

Cell["\<\
Now let us say we want to Map a value <a> on the two diagonals above and \
below the main diagonal. Here is the code:\
\>", "Text",
 CellChangeTimes->{{3.9400265206940804`*^9, 3.9400265234149857`*^9}},
 CellID->1867898161,ExpressionUUID->"9836c2a1-0d24-4e07-9c3b-a1fd75c6c6e3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"result1", "=", 
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Abs", "[", 
           RowBox[{
            RowBox[{"#2", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "-", 
            RowBox[{"#2", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "==", "1"}], ",", "a", 
         ",", "#1"}], "]"}], "&"}], ",", "result", ",", 
      RowBox[{"{", "2", "}"}]}], "]"}]}], ")"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.940026527345793*^9, 3.940026552551085*^9}},
 CellLabel->"In[238]:=",
 CellID->2066348099,ExpressionUUID->"0135d47d-1924-452b-a361-16ace32ea188"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "a", 
      RowBox[{"-", 
       RowBox[{"Sin", "[", "2", "]"}]}], 
      RowBox[{"-", 
       RowBox[{"Sin", "[", "3", "]"}]}]},
     {"a", "0", "a", 
      RowBox[{"-", 
       RowBox[{"Sin", "[", "2", "]"}]}]},
     {
      RowBox[{"Sin", "[", "2", "]"}], "a", "0", "a"},
     {
      RowBox[{"Sin", "[", "3", "]"}], 
      RowBox[{"Sin", "[", "2", "]"}], "a", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.94002655280497*^9},
 CellLabel->"Out[238]//MatrixForm=",
 CellID->1122213998,ExpressionUUID->"56e540a8-27a7-4adc-86cc-8d3ec0fe721d"]
}, Open  ]],

Cell["\<\
Not that in this particular case, MapIndexed-based solution is not very \
efficient, since since the majority of matrix element tested by MapIndexed \
were a priori known not to be on the diagonals of interest. Later in this \
chapter we will give a more efficient solution based on MapThread function.\
\>", "Text",
 CellChangeTimes->{{3.940026561347629*^9, 3.940026575396501*^9}},
 CellID->1849276432,ExpressionUUID->"35436102-a8d0-4b4d-b4cf-2dc5f54a2b94"],

Cell["\<\
Note also that in principle this example can be generalized to create any \
matrix we want. All we need is to define a function which will compute a \
matrix element given its position in the matrix. This function will then be \
used by MapIndexed. Also, note that we had to start with some matrix (here we \
used IdentityMatrix).\
\>", "Text",
 CellChangeTimes->{{3.940026561347629*^9, 3.940026599315092*^9}},
 CellID->1907122695,ExpressionUUID->"64d8aacd-0458-46cc-8bdd-e1cfc2043219"],

Cell["Example: creation and manipulation of matrices of functions", \
"SubitemNumbered",
 CellChangeTimes->{3.940026612554389*^9},
 CellID->435796461,ExpressionUUID->"1adc8366-2894-4afc-b4e1-0a66e7febe5d"],

Cell["\<\
We can do more interesting things. In particular, we can construct a matrix \
where all elements will be functions:\
\>", "Text",
 CellChangeTimes->{{3.940026617723547*^9, 3.940026619851701*^9}},
 CellID->1511883757,ExpressionUUID->"678476e5-2b87-4213-883d-149cc831d92b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"result3", "=", 
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"x", "^", 
        RowBox[{"Total", "[", "#2", "]"}]}], "&"}], ",", 
      RowBox[{"IdentityMatrix", "[", "3", "]"}], ",", 
      RowBox[{"{", "2", "}"}]}], "]"}]}], ")"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.9400266309663277`*^9, 3.9400266519693613`*^9}},
 CellLabel->"In[239]:=",
 CellID->848812848,ExpressionUUID->"73e33b06-f4f9-4bec-9a3e-b6c30dfec112"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      SuperscriptBox["x", "2"], 
      SuperscriptBox["x", "3"], 
      SuperscriptBox["x", "4"]},
     {
      SuperscriptBox["x", "3"], 
      SuperscriptBox["x", "4"], 
      SuperscriptBox["x", "5"]},
     {
      SuperscriptBox["x", "4"], 
      SuperscriptBox["x", "5"], 
      SuperscriptBox["x", "6"]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.94002665227168*^9},
 CellLabel->"Out[239]//MatrixForm=",
 CellID->757791731,ExpressionUUID->"e0ca859a-f3f1-475d-a35d-0983f0d4caee"]
}, Open  ]],

Cell["We may compute the determinant symbolically:", "Text",
 CellChangeTimes->{3.940026704110258*^9},
 CellID->1627596207,ExpressionUUID->"f8b99469-bc72-431f-b64f-42442d29c6b0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Det", "[", "result3", "]"}]], "Input",
 CellChangeTimes->{{3.940026705947803*^9, 3.9400267121186132`*^9}},
 CellLabel->"In[240]:=",
 CellID->126673508,ExpressionUUID->"f164ead2-e28e-42f1-baa7-540bfaa488f3"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.940026712387651*^9},
 CellLabel->"Out[240]=",
 CellID->1987214360,ExpressionUUID->"75c03b46-2576-4e7e-b5a1-efb470f98155"]
}, Open  ]],

Cell["\<\
We can , say, differentiate the off-diagonal elements and integrate the \
diagonal elements:\
\>", "Text",
 CellChangeTimes->{3.94002671911716*^9},
 CellID->1446070376,ExpressionUUID->"16ee31b8-e325-4d96-bdc6-cced9419d3b3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"result4", "=", 
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Simplify", "[", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#2", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "==", 
           RowBox[{"#2", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], ",", 
          RowBox[{"Integrate", "[", 
           RowBox[{"#1", ",", "x"}], "]"}], ",", 
          RowBox[{"D", "[", 
           RowBox[{"#1", ",", "x"}], "]"}]}], "]"}], "]"}], "&"}], ",", 
      "result3", ",", 
      RowBox[{"{", "2", "}"}]}], "]"}]}], ")"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.9400267252427607`*^9, 3.940026763029944*^9}, {
  3.940026895195941*^9, 3.940026898928937*^9}},
 CellLabel->"In[242]:=",
 CellID->803530064,ExpressionUUID->"9a3b78d2-b270-4cdd-8874-7d718e016a48"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox[
       SuperscriptBox["x", "3"], "3"], 
      RowBox[{"3", " ", 
       SuperscriptBox["x", "2"]}], 
      RowBox[{"4", " ", 
       SuperscriptBox["x", "3"]}]},
     {
      RowBox[{"3", " ", 
       SuperscriptBox["x", "2"]}], 
      FractionBox[
       SuperscriptBox["x", "5"], "5"], 
      RowBox[{"5", " ", 
       SuperscriptBox["x", "4"]}]},
     {
      RowBox[{"4", " ", 
       SuperscriptBox["x", "3"]}], 
      RowBox[{"5", " ", 
       SuperscriptBox["x", "4"]}], 
      FractionBox[
       SuperscriptBox["x", "7"], "7"]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.940026763401244*^9, 3.9400268995931*^9},
 CellLabel->"Out[242]//MatrixForm=",
 CellID->994758579,ExpressionUUID->"459be646-5314-4892-97a1-0c6cc2c2b8de"]
}, Open  ]],

Cell["Example: imitating the Position command", "SubitemNumbered",
 CellChangeTimes->{3.940033843595791*^9},
 CellID->1052981991,ExpressionUUID->"41221a03-c664-4a8b-8a2e-39b8b67ee704"],

Cell["One can imitate the Position operation with MapIndexed:", "Text",
 CellChangeTimes->{3.940033849194396*^9},
 CellID->55587810,ExpressionUUID->"4a185edb-f55e-4e7f-a1e9-5eb0d4b625b9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "testexpr", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testexpr", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "3", "}"}], ",", 
    RowBox[{"{", "2", "}"}], ",", 
    RowBox[{"{", "3", "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9400338525558233`*^9, 3.940033872372916*^9}},
 CellLabel->"In[243]:=",
 CellID->1235066331,ExpressionUUID->"6a6f28e5-1a44-43cc-8ab7-13b2194060ce"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "4", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "6", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "10"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "7", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6", ",", "2"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940033872697365*^9},
 CellLabel->"Out[244]=",
 CellID->254780480,ExpressionUUID->"2be9f7b3-ddfd-41ce-9b94-48b03c26174b"]
}, Open  ]],

Cell["Let us find positions of all elements divisible by 3:", "Text",
 CellChangeTimes->{3.940033880110691*^9},
 CellID->13135242,ExpressionUUID->"a8d966a8-f697-4578-a4f2-493e488fc209"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{
   RowBox[{"MapIndexed", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"#1", ",", "3"}], "]"}], "==", "0"}], ",", "#2", ",", 
        RowBox[{"#1", "/.", 
         RowBox[{"#", ":>", 
          RowBox[{"Sequence", "[", "]"}]}]}]}], "]"}], "&"}], ",", "testexpr",
      ",", 
     RowBox[{"{", "3", "}"}]}], "]"}], ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400339409103203`*^9, 3.940033968673009*^9}},
 CellLabel->"In[245]:=",
 CellID->1022516676,ExpressionUUID->"63bf42eb-011c-40cb-9ef7-a06574954474"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400339691495047`*^9},
 CellLabel->"Out[245]=",
 CellID->1384536612,ExpressionUUID->"2721790d-46d8-468c-a54d-ef0ad824bd19"]
}, Open  ]],

Cell["Example: imitating a Partition command", "SubitemNumbered",
 CellChangeTimes->{3.94003399970046*^9},
 CellID->10674994,ExpressionUUID->"8eb3db5b-3ab8-4edc-8288-2e6ee5097464"],

Cell["\<\
Say we have a list of numbers, and would like to partition it into some \
sublists (without overlaps for simplicity). This is normally done by a \
Partition command, but we may try to imitate it by MapIndexed.\
\>", "Text",
 CellChangeTimes->{{3.940034013008602*^9, 3.9400340155343523`*^9}},
 CellID->1173481457,ExpressionUUID->"800b7bc2-7e35-4e80-9a6e-3eabb3db9870"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "testlist", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "15", "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9400340249866543`*^9, 3.940034043180444*^9}, 
   3.94003413129757*^9},
 CellLabel->"In[250]:=",
 CellID->872698763,ExpressionUUID->"07f85ae0-3ec5-48f3-ba02-8757a73cdeb0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "6", ",", "3", ",", "4", ",", "3", ",", "9", ",", "10", ",", "1", ",", "5", 
   ",", "6", ",", "7", ",", "9", ",", "6", ",", "1", ",", "5", ",", "10"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940034043608412*^9, 3.9400341319861097`*^9},
 CellLabel->"Out[251]=",
 CellID->627751511,ExpressionUUID->"748aa4ea-37d0-4772-b073-3ae0583455ae"]
}, Open  ]],

Cell["\<\
Say we want to partition this into a sublist of 4 elements each (the last 3 \
elements will be lost then). First, create the proper list structure:\
\>", "Text",
 CellChangeTimes->{{3.940034054212927*^9, 3.940034056126484*^9}},
 CellID->448263146,ExpressionUUID->"2935bbfe-da40-46a4-aa16-fb349f6e94d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"struct", "=", 
  RowBox[{"Table", "[", 
   RowBox[{"0", ",", 
    RowBox[{"{", 
     RowBox[{"IntegerPart", "[", 
      RowBox[{"15", "/", "4"}], "]"}], "}"}], ",", 
    RowBox[{"{", "4", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9400340597251997`*^9, 3.9400340717120447`*^9}},
 CellLabel->"In[248]:=",
 CellID->1850034012,ExpressionUUID->"73774b74-d34c-4c54-97e8-6e972da5810b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400340720821877`*^9},
 CellLabel->"Out[248]=",
 CellID->1844500733,ExpressionUUID->"c9a09937-a277-4433-a84c-5e0670c2f650"]
}, Open  ]],

Cell["Now use MapIndexed", "Text",
 CellChangeTimes->{3.940034080180481*^9},
 CellID->1597375086,ExpressionUUID->"94d4e072-a361-4bea-9818-b9bb5b77013d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapIndexed", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"testlist", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{"#2", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"#2", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ")"}], "*", "4"}]}], 
      "]"}], "]"}], "&"}], ",", "struct", ",", 
   RowBox[{"{", "2", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940034081910726*^9, 3.9400341077728767`*^9}},
 CellLabel->"In[252]:=",
 CellID->1390366719,ExpressionUUID->"2074636e-3711-446f-be15-a1a037b3f786"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"6", ",", "3", ",", "4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "7", ",", "9", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.94003410823575*^9, 3.9400341358181067`*^9}},
 CellLabel->"Out[252]=",
 CellID->219974402,ExpressionUUID->"da5daa25-af61-47fd-818f-ea0ffb7ba5fd"]
}, Open  ]],

Cell["We can now package this into a function:", "Text",
 CellChangeTimes->{3.940034142813911*^9},
 CellID->486378117,ExpressionUUID->"af2fc09a-ad5a-4ae6-9e9a-dac3ce5d314e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "myPartition", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"myPartion", "[", 
   RowBox[{"lst_List", ",", "size_Integer"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"len", "=", 
       RowBox[{"Length", "[", "lst", "]"}]}], ",", "struct"}], "}"}], ",", 
    RowBox[{
     RowBox[{"struct", "=", 
      RowBox[{"Table", "[", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{"IntegerPart", "[", 
          RowBox[{"len", "/", "size"}], "]"}], "}"}], ",", 
        RowBox[{"{", "size", "}"}]}], "]"}]}], ";", 
     RowBox[{"MapIndexed", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"lst", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"#2", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"#2", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ")"}], "*", 
            "size"}]}], "]"}], "]"}], "&"}], ",", "struct", ",", 
       RowBox[{"{", "2", "}"}]}], "]"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.94003414680579*^9, 3.94003421673367*^9}},
 CellLabel->"In[253]:=",
 CellID->1527758786,ExpressionUUID->"0c8db432-d183-44e2-92be-ec24b193455b"],

Cell["Test:", "Text",
 CellChangeTimes->{{3.940034219714837*^9, 3.940034220661277*^9}},
 CellID->968935174,ExpressionUUID->"ac18ed62-2179-463f-9f9b-bf6ec535c352"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myPartion", "[", 
  RowBox[{"teestlist", ",", "4"}], "]"}]], "Input",
 CellChangeTimes->{{3.940034221609782*^9, 3.940034227892871*^9}},
 CellLabel->"In[255]:=",
 CellID->1642802885,ExpressionUUID->"8213fed0-2d50-41a1-997d-9a7053e82873"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10", ",", "10", ",", "7", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "3", ",", "8", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "7", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940034228333374*^9},
 CellLabel->"Out[255]=",
 CellID->460192361,ExpressionUUID->"e656425f-19ca-4ac1-85a9-7c7396bc247b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myPartion", "[", 
  RowBox[{"teestlist", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.94003423097066*^9, 3.9400342349565687`*^9}},
 CellLabel->"In[256]:=",
 CellID->440444694,ExpressionUUID->"40a81fb4-0fe8-42c7-81d0-8583c9b8a97e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10", ",", "10", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "10", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "7", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "6", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940034235457715*^9},
 CellLabel->"Out[256]=",
 CellID->1213857649,ExpressionUUID->"f6df0f38-d749-4a06-944b-5de50b106794"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myPartion", "[", 
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.940034237944193*^9, 3.940034242997347*^9}},
 CellLabel->"In[257]:=",
 CellID->580086551,ExpressionUUID->"c9bf5e4a-2662-4503-970d-b8e9a07bef58"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400342433558397`*^9},
 CellLabel->"Out[257]=",
 CellID->803968096,ExpressionUUID->"39dd2da1-1d97-463a-a060-93b4d165d4ba"]
}, Open  ]],

Cell["\<\
It is interesting to compare the performance of our version vs. the built-in:\
\
\>", "Text",
 CellChangeTimes->{3.940034253150004*^9},
 CellID->334877563,ExpressionUUID->"fb5ca0ad-4d4c-4736-a151-dd17d7d6f5dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"myPartion", "[", 
    RowBox[{
     RowBox[{"Range", "[", "400000", "]"}], ",", "3"}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940034255481645*^9, 3.940034264700838*^9}},
 CellLabel->"In[258]:=",
 CellID->2009601896,ExpressionUUID->"744ef82f-970e-43cf-b899-bade7eb9e35b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.518868`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.9400342655651913`*^9},
 CellLabel->"Out[258]=",
 CellID->2096166408,ExpressionUUID->"dcc96270-f68e-4474-86ae-5654a97461b6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{"Range", "[", "400000", "]"}], ",", "3"}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9400342714418087`*^9, 3.940034281365275*^9}},
 CellLabel->"In[259]:=",
 CellID->1907665068,ExpressionUUID->"72f8f0de-9d72-421a-a2a9-e3683c226266"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.020949`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940034282034361*^9},
 CellLabel->"Out[259]=",
 CellID->452040758,ExpressionUUID->"3f5aa924-2b88-4921-896a-e0b9d9ffdd7f"]
}, Open  ]],

Cell["\<\
As expected, we are not even close (difference more than a hundred times on \
my machine), although there are definitely ways to do it even much worse than \
we did. On the practical side, this once again confirms the rule: use \
built-in functions whenever possible, and design the programs so.\
\>", "Text",
 CellChangeTimes->{{3.9400342905346403`*^9, 3.940034298739119*^9}},
 CellID->1799360267,ExpressionUUID->"71ce423b-9f77-4043-9911-f47833926bfb"],

Cell["Example: computing an unsorted union of a list", "SubitemNumbered",
 CellChangeTimes->{3.940034310910947*^9},
 CellTags->"5.2.6.2.5",
 CellID->625939973,ExpressionUUID->"af0bc87d-8a0a-4954-8d0e-0276397592c0"],

Cell[TextData[{
 "Here we will use MapIndexed to create a set of rules. The problem will be \
to compute an unsorted Union of a list of objects. To remind, Union operation \
returns a sorted list of all distinct elements of an input list (removes \
duplicates plus sorts, see section ",
 ButtonBox["3.10.2",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-3-Lists.nb", CharacterEncoding -> "UTF-8"], 
    "3.10.2"},
  ButtonNote->"/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-3-Lists.nb"],
 "). For example:"
}], "Text",
 CellChangeTimes->{{3.9400343197336493`*^9, 3.940034325512661*^9}, {
  3.940034366361784*^9, 3.940034366370508*^9}},
 CellID->382911027,ExpressionUUID->"dc643799-1e66-42d8-8c99-57c35e4f0639"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{"{", 
   RowBox[{
   "b", ",", "c", ",", "a", ",", "d", ",", "c", ",", "d", ",", "a", ",", "c", 
    ",", "b"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400343732651377`*^9, 3.940034378822796*^9}},
 CellLabel->"In[260]:=",
 CellID->419447946,ExpressionUUID->"696da165-f2ba-4d3b-bf7f-3b2d04cf98c7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]], "Output",
 CellChangeTimes->{3.9400343792462187`*^9},
 CellLabel->"Out[260]=",
 CellID->2055469181,ExpressionUUID->"16befb24-de84-478e-a67a-1c37bcfbf836"]
}, Open  ]],

Cell["\<\
We now want our <unsortedUnion> function to also remove the duplicates but \
not to sort the resulting list. For instance, for the previous input, the \
answer should be\
\>", "Text",
 CellChangeTimes->{{3.940034389570545*^9, 3.940034391440647*^9}},
 CellID->1848579425,ExpressionUUID->"f9da4c3d-0e88-414f-9a95-91146ffc5dec"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]], "Input",
 CellID->1656710769,ExpressionUUID->"b71b0890-d342-42f3-b90a-0be9227bfe26"],

Cell["\<\
Our present implementation will be based on application of rules. There is an \
elegant alternative implementation with the Reap-Sow technique, but this we \
will discuss later.\
\>", "Text",
 CellChangeTimes->{{3.940034405501993*^9, 3.940034411165181*^9}},
 CellID->64927581,ExpressionUUID->"d17e127e-4e5f-494b-bd86-0da5ebd7a1b7"],

Cell["\<\
The idea here will be the following: we can first create a list of rules in \
the form {element1-> position1,...}. Then we will use the standard Union to \
get the sorted union of the input list. We will then apply the rules to it, \
to get a list of positions where these elements are first present in the list \
(since in the case of a list of rules, only the first rule that matches an \
element is applied, and then rules are applied to the next element). We will \
get then a list of positions. What remains is to Sort this list and then \
extract the corresponding elements. So, let us now do this step by step:\
\>", "Text",
 CellChangeTimes->{{3.9400344204144793`*^9, 3.940034457700961*^9}},
 CellID->316161191,ExpressionUUID->"6c24ecee-284f-49ad-ad7c-810507b02d76"],

Cell["This will be our test list:", "Text",
 CellChangeTimes->{{3.9400344204144793`*^9, 3.9400344560757017`*^9}},
 CellID->447716899,ExpressionUUID->"744cdc6c-3c20-4edb-afb8-a744d0fdd5c2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "20", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940034461075268*^9, 3.940034470051269*^9}},
 CellLabel->"In[269]:=",
 CellID->1307339421,ExpressionUUID->"9e5e1513-d5ac-4bee-952d-ff77a837f635"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "6", ",", "1", ",", "7", ",", "7", ",", "4", ",", "5", ",", "2", ",", "4", 
   ",", "4", ",", "5", ",", "2", ",", "6", ",", "10", ",", "7", ",", "2", ",",
    "3", ",", "4", ",", "10", ",", "2", ",", "8"}], "}"}]], "Output",
 CellChangeTimes->{3.940034470305314*^9, 3.940034642170229*^9},
 CellLabel->"Out[269]=",
 CellID->2135977080,ExpressionUUID->"c9396d53-89eb-4b72-b422-ad9e44358143"]
}, Open  ]],

Cell["Now, we will use MapIndexed to create a set of rules:", "Text",
 CellChangeTimes->{3.940034478108778*^9},
 CellID->620738533,ExpressionUUID->"b757787d-e03a-4059-9f43-36bee068bce0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rules", "=", 
  RowBox[{"MapIndexed", "[", 
   RowBox[{"Rule", ",", "testlist"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940034480828957*^9, 3.940034489813321*^9}},
 CellLabel->"In[270]:=",
 CellID->1387389986,ExpressionUUID->"91df6496-377e-4c40-b732-3514973bd39c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"6", "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{"7", "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{"7", "\[Rule]", 
    RowBox[{"{", "4", "}"}]}], ",", 
   RowBox[{"4", "\[Rule]", 
    RowBox[{"{", "5", "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", "6", "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", "7", "}"}]}], ",", 
   RowBox[{"4", "\[Rule]", 
    RowBox[{"{", "8", "}"}]}], ",", 
   RowBox[{"4", "\[Rule]", 
    RowBox[{"{", "9", "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", "10", "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", "11", "}"}]}], ",", 
   RowBox[{"6", "\[Rule]", 
    RowBox[{"{", "12", "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", "13", "}"}]}], ",", 
   RowBox[{"7", "\[Rule]", 
    RowBox[{"{", "14", "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", "15", "}"}]}], ",", 
   RowBox[{"3", "\[Rule]", 
    RowBox[{"{", "16", "}"}]}], ",", 
   RowBox[{"4", "\[Rule]", 
    RowBox[{"{", "17", "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", "18", "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", "19", "}"}]}], ",", 
   RowBox[{"8", "\[Rule]", 
    RowBox[{"{", "20", "}"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.940034493358405*^9, 3.940034644168378*^9},
 CellLabel->"Out[270]=",
 CellID->1577554937,ExpressionUUID->"b4980074-ccf4-466d-8a5d-f5b5fef21d1c"]
}, Open  ]],

Cell["Let us now compute the Union and apply the rules:", "Text",
 CellChangeTimes->{3.9400345362125607`*^9},
 CellID->1177571731,ExpressionUUID->"8bee6ae2-eaf6-49d7-9844-537d160592ee"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"un", "=", 
  RowBox[{"Union", "[", "testlist", "]"}]}]], "Input",
 CellChangeTimes->{{3.940034538309219*^9, 3.9400345416265574`*^9}, 
   3.9400346386292877`*^9},
 CellLabel->"In[271]:=",
 CellID->1880464559,ExpressionUUID->"082735c7-4879-499d-824f-21111adbedf4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.940034542234832*^9, 3.940034646373554*^9},
 CellLabel->"Out[271]=",
 CellID->971200219,ExpressionUUID->"fe396202-c9f3-4a7f-bba0-c5e8638e3b72"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"un", "/.", "rules"}]], "Input",
 CellChangeTimes->{{3.940034544459181*^9, 3.940034546059909*^9}},
 CellLabel->"In[272]:=",
 CellID->1580247519,ExpressionUUID->"e0587b7a-2f18-4527-8b85-821e19f8545c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "7", "}"}], ",", 
   RowBox[{"{", "16", "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", "6", "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "20", "}"}], ",", 
   RowBox[{"{", "13", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940034546546781*^9, 3.940034648620697*^9},
 CellLabel->"Out[272]=",
 CellID->844781049,ExpressionUUID->"ad472e21-6596-43e2-a0b6-09ff91fc7a09"]
}, Open  ]],

Cell["we now Sort this list:", "Text",
 CellChangeTimes->{3.940034572582304*^9},
 CellID->1419413118,ExpressionUUID->"eaaa96d4-6477-4d59-8e7e-4a1936e9dfc6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{"un", "/.", "rules"}], "]"}]], "Input",
 CellChangeTimes->{{3.940034574489645*^9, 3.940034577311715*^9}},
 CellLabel->"In[273]:=",
 CellID->6689468,ExpressionUUID->"c612ccc3-fdc9-40c3-91c3-56554ea33060"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", "6", "}"}], ",", 
   RowBox[{"{", "7", "}"}], ",", 
   RowBox[{"{", "13", "}"}], ",", 
   RowBox[{"{", "16", "}"}], ",", 
   RowBox[{"{", "20", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940034577556694*^9, 3.94003465083751*^9},
 CellLabel->"Out[273]=",
 CellID->1533095345,ExpressionUUID->"c3e2605b-2ffc-45ef-88b7-7ca00e92fdba"]
}, Open  ]],

Cell["All that remains is to Extract the elements:", "Text",
 CellChangeTimes->{3.940034586687484*^9},
 CellID->745137341,ExpressionUUID->"8e6e64d4-5603-41ae-b58b-61eb46215a95"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{"testlist", ",", 
   RowBox[{"Sort", "[", 
    RowBox[{"un", "/.", "rules"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9400345883327*^9, 3.9400346029281807`*^9}},
 CellLabel->"In[274]:=",
 CellID->1498987010,ExpressionUUID->"e3ab579c-96f6-4157-9017-70f8df4640a8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "6", ",", "1", ",", "7", ",", "4", ",", "5", ",", "2", ",", "10", ",", "3", 
   ",", "8"}], "}"}]], "Output",
 CellChangeTimes->{{3.9400345949882402`*^9, 3.940034603172605*^9}, 
   3.940034653048525*^9},
 CellLabel->"Out[274]=",
 CellID->245737891,ExpressionUUID->"b9ba622b-37aa-4bca-95f2-82ac057f6a0d"]
}, Open  ]],

Cell["We can now combine everything together:", "Text",
 CellChangeTimes->{3.9400346642567577`*^9},
 CellID->505680856,ExpressionUUID->"f5c2e97f-bcb0-448e-9696-4301b8013989"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "unsortedUnion", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"unsortedUnion", "[", "x_List", "]"}], ":=", 
   RowBox[{"Extract", "[", 
    RowBox[{"x", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{
       RowBox[{"Union", "[", "x", "]"}], "/.", 
       RowBox[{"Dispatch", "[", 
        RowBox[{"MapIndexed", "[", 
         RowBox[{"Rule", ",", "x"}], "]"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940034666094302*^9, 3.940034691891658*^9}},
 CellLabel->"In[275]:=",
 CellID->654086917,ExpressionUUID->"9becec9e-04d7-4bdc-a26c-3af2518fb044"],

Cell["\<\
The Dispatch command will be covered later. For now, let me just say that \
this command makes the rule application more efficient, by hashing together \
the rules which can not apply simultaneously. This is particularly relevant \
for our present function, since all the rules for duplicate elements will be \
optimized with Dispatch. Once we cover Dispatch, we will revisit this problem \
and make a performance test to see how much we gain from using Dispatch. For \
now, let us just check that the function works correctly:\
\>", "Text",
 CellChangeTimes->{{3.940034700315295*^9, 3.9400347135384007`*^9}},
 CellID->925119529,ExpressionUUID->"6abf9ba1-ac53-4a30-8a71-30b35f3e6ce3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"unsortedUnion", "[", "testlist", "]"}]], "Input",
 CellChangeTimes->{{3.940034715847352*^9, 3.940034721074359*^9}},
 CellLabel->"In[277]:=",
 CellID->185066889,ExpressionUUID->"9f5278c3-60b1-4091-a2dd-893e055dccaf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "6", ",", "1", ",", "7", ",", "4", ",", "5", ",", "2", ",", "10", ",", "3", 
   ",", "8"}], "}"}]], "Output",
 CellChangeTimes->{3.940034721481327*^9},
 CellLabel->"Out[277]=",
 CellID->1896737165,ExpressionUUID->"0fcb213d-c862-4948-9c1b-ad75d14bb8f4"]
}, Open  ]],

Cell["Example: computing frequencies of objects in a list", "SubitemNumbered",
 CellChangeTimes->{3.940034737675912*^9},
 CellID->1214276087,ExpressionUUID->"6bfc9998-6fab-4bdc-9146-9cf02b0626a9"],

Cell[TextData[{
 "The technique based on the combination of MapIndexed , Dispatch and Union, \
used in the previous example, can be used also to compute frequencies of the \
objects in a list (I remark that in versions prior to 6.0 this function can \
be found in Statistics\[OpenCurlyQuote]DataManipulation package and is \
implemented with the use of Split command - we covered this implementation in \
section ",
 ButtonBox["3.10.3.4",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-3-Lists.nb", CharacterEncoding -> "UTF-8"], 
    "3.10.3.4"},
  ButtonNote->"/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-3-Lists.nb"],
 ". In version 6.0, the function Tally takes over this functionality, and \
then of course should be used since it is faster)."
}], "Text",
 CellChangeTimes->{{3.940034744685321*^9, 3.940034766381998*^9}, {
  3.940034801691177*^9, 3.940034801699383*^9}},
 CellID->801096768,ExpressionUUID->"0b46e936-c608-4e09-b324-b182175fa320"],

Cell["\<\
Let us develop the <frequencies> function. Here is our test list:\
\>", "Text",
 CellChangeTimes->{3.940034813828908*^9, 3.94074061301443*^9},
 CellID->108493506,ExpressionUUID->"b9184f53-ec9b-442e-a9e4-39870fe0ffb2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "20"}], "}"}], "]"}], ",", 
    RowBox[{"{", "40", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940034815768146*^9, 3.9400348292495728`*^9}},
 CellLabel->"In[278]:=",
 CellID->1733314229,ExpressionUUID->"772c1371-0e13-4531-a364-74341899f37e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "16", ",", "8", ",", "1", ",", "11", ",", "16", ",", "20", ",", "19", ",", 
   "14", ",", "19", ",", "15", ",", "17", ",", "4", ",", "8", ",", "2", ",", 
   "4", ",", "20", ",", "10", ",", "13", ",", "11", ",", "10", ",", "1", ",", 
   "10", ",", "19", ",", "2", ",", "16", ",", "6", ",", "12", ",", "18", ",", 
   "7", ",", "2", ",", "11", ",", "19", ",", "17", ",", "9", ",", "13", ",", 
   "5", ",", "16", ",", "7", ",", "19", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.940034829525669*^9},
 CellLabel->"Out[278]=",
 CellID->1527097757,ExpressionUUID->"90b8b924-c37d-4b8e-bb25-5d4e04e70d6c"]
}, Open  ]],

Cell["\<\
The first step will be the same as before: create a set of rules <element -> \
position> for the Union of elements in the list, and then use these rules to \
replace all the elements in the initial list with these positions:\
\>", "Text",
 CellChangeTimes->{{3.94003483665438*^9, 3.940034845807436*^9}},
 CellID->1354936602,ExpressionUUID->"d7585108-5f32-4f5f-9d14-d283a9bbb137"],

Cell["Here is the (sorted) Union of our list", "Text",
 CellChangeTimes->{3.940034852844236*^9},
 CellID->1484452712,ExpressionUUID->"e787fb1f-be23-42a7-95cf-0da7b5130c0b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"un", "=", 
  RowBox[{"Union", "[", "testlist", "]"}]}]], "Input",
 CellChangeTimes->{{3.9400348544948807`*^9, 3.940034858083418*^9}},
 CellLabel->"In[279]:=",
 CellID->729295266,ExpressionUUID->"47415178-199b-4cfe-a401-d12de824b966"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", 
   ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", 
   "16", ",", "17", ",", "18", ",", "19", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{3.940034858630949*^9},
 CellLabel->"Out[279]=",
 CellID->1703975630,ExpressionUUID->"9ad9cc1f-5924-47a1-9401-015f3298efad"]
}, Open  ]],

Cell["Here is a set of rules", "Text",
 CellChangeTimes->{3.940034866905087*^9},
 CellID->2023980665,ExpressionUUID->"c1bfd0cb-91b5-4814-ac10-56e11f77ca9c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rules", "=", 
  RowBox[{"MapIndexed", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Rule", "[", 
      RowBox[{"#1", ",", 
       RowBox[{"First", "[", "#2", "]"}]}], "]"}], "&"}], ",", "un"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.9400348685208063`*^9, 3.940034880278995*^9}},
 CellLabel->"In[280]:=",
 CellID->1972753052,ExpressionUUID->"3a1ce360-e5b2-45b1-ab6e-8d49f95f6245"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "1"}], ",", 
   RowBox[{"2", "\[Rule]", "2"}], ",", 
   RowBox[{"4", "\[Rule]", "3"}], ",", 
   RowBox[{"5", "\[Rule]", "4"}], ",", 
   RowBox[{"6", "\[Rule]", "5"}], ",", 
   RowBox[{"7", "\[Rule]", "6"}], ",", 
   RowBox[{"8", "\[Rule]", "7"}], ",", 
   RowBox[{"9", "\[Rule]", "8"}], ",", 
   RowBox[{"10", "\[Rule]", "9"}], ",", 
   RowBox[{"11", "\[Rule]", "10"}], ",", 
   RowBox[{"12", "\[Rule]", "11"}], ",", 
   RowBox[{"13", "\[Rule]", "12"}], ",", 
   RowBox[{"14", "\[Rule]", "13"}], ",", 
   RowBox[{"15", "\[Rule]", "14"}], ",", 
   RowBox[{"16", "\[Rule]", "15"}], ",", 
   RowBox[{"17", "\[Rule]", "16"}], ",", 
   RowBox[{"18", "\[Rule]", "17"}], ",", 
   RowBox[{"19", "\[Rule]", "18"}], ",", 
   RowBox[{"20", "\[Rule]", "19"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940034880504365*^9},
 CellLabel->"Out[280]=",
 CellID->914395560,ExpressionUUID->"15a2dd44-ec36-4da7-bba4-d2ce9e522985"]
}, Open  ]],

Cell["\<\
Here we have replaced all the elements by their positions, using the \
Dispatched version of the rules.\
\>", "Text",
 CellChangeTimes->{{3.940034903879285*^9, 3.94003490942454*^9}},
 CellID->1948848788,ExpressionUUID->"8809e3ef-99b5-47d7-ae31-a4ffcdd23261"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"replaced", "=", 
  RowBox[{"ReplaceAll", "[", 
   RowBox[{"testlist", ",", 
    RowBox[{"Dispatch", "[", "rules", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.94003491241086*^9, 3.9400349231817636`*^9}},
 CellLabel->"In[281]:=",
 CellID->2145358286,ExpressionUUID->"a4af2f1d-3d54-48a4-9ea7-8f541be0188a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "15", ",", "7", ",", "1", ",", "10", ",", "15", ",", "19", ",", "18", ",", 
   "13", ",", "18", ",", "14", ",", "16", ",", "3", ",", "7", ",", "2", ",", 
   "3", ",", "19", ",", "9", ",", "12", ",", "10", ",", "9", ",", "1", ",", 
   "9", ",", "18", ",", "2", ",", "15", ",", "5", ",", "11", ",", "17", ",", 
   "6", ",", "2", ",", "10", ",", "18", ",", "16", ",", "8", ",", "12", ",", 
   "4", ",", "15", ",", "6", ",", "18", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{3.940034923519869*^9},
 CellLabel->"Out[281]=",
 CellID->437875136,ExpressionUUID->"73ea4a04-29cb-41f4-ac5f-3e5d3bd60e2c"]
}, Open  ]],

Cell["Now, the idea is to create an array of counters", "Text",
 CellChangeTimes->{3.940034933194827*^9},
 CellID->469169327,ExpressionUUID->"4cf274a4-d9cf-44f4-aaa6-21a375bfa7e0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"counters", "=", 
  RowBox[{"Array", "[", 
   RowBox[{
    RowBox[{"0", "&"}], ",", 
    RowBox[{"{", 
     RowBox[{"Length", "[", "un", "]"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9400349347466307`*^9, 3.940034941748864*^9}},
 CellLabel->"In[282]:=",
 CellID->1155771158,ExpressionUUID->"f3c26d3a-cfc7-40d4-9d28-65e9282e3ccf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.940034941995225*^9},
 CellLabel->"Out[282]=",
 CellID->2086935781,ExpressionUUID->"c2a563e5-ea37-43f6-a0d5-033a43f0c7b7"]
}, Open  ]],

Cell["\<\
and Scan the increment of the counter with a given position onto the list we \
created in the previous step:\
\>", "Text",
 CellChangeTimes->{3.940034949757484*^9, 3.940740613035571*^9},
 CellID->279264816,ExpressionUUID->"cdd91a68-6420-4c5d-a5f0-816afe86ac36"],

Cell[BoxData[
 RowBox[{"Scan", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"counters", "[", 
      RowBox[{"[", "#", "]"}], "]"}], "++"}], "&"}], ",", "replaced"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940034953725416*^9, 3.94003496157233*^9}},
 CellLabel->"In[283]:=",
 CellID->435613412,ExpressionUUID->"a0f79ff6-2b11-4b4a-b1b0-fda40afb60c2"],

Cell["Now we have counted all the distinct objects:", "Text",
 CellChangeTimes->{3.94003496984816*^9, 3.940740613055563*^9},
 CellID->1412779244,ExpressionUUID->"87ad9548-80b8-4850-bde2-93b5f5185cfe"],

Cell[CellGroupData[{

Cell[BoxData["counters"], "Input",
 CellChangeTimes->{{3.9400349711689262`*^9, 3.940034973947555*^9}},
 CellLabel->"In[284]:=",
 CellID->1911978924,ExpressionUUID->"63a80c8b-a8de-4668-ac86-50045103490c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "3", ",", "2", ",", "2", ",", "1", ",", "2", ",", "2", ",", "1", 
   ",", "3", ",", "3", ",", "1", ",", "2", ",", "1", ",", "1", ",", "4", ",", 
   "2", ",", "1", ",", "5", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{3.940034974297628*^9},
 CellLabel->"Out[284]=",
 CellID->453695529,ExpressionUUID->"b4649cbe-a4e8-43db-8730-bc164b22e9ab"]
}, Open  ]],

Cell["\<\
All that is left is to group together the elements of the <un > and \
respective frequencies. This can be easily accomplished by another \
MapIndexed, given that the frequency of a given element is contained in the \
array <counters > at the same position as position of this element in <un >\
\>", "Text",
 CellChangeTimes->{{3.94003498181211*^9, 3.940034996698241*^9}, {
  3.940276417471366*^9, 3.94027641751642*^9}},
 CellID->1693809053,ExpressionUUID->"b0c98412-8b4b-4bc1-bb33-f55dacad37a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapIndexed", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"#1", ",", 
      RowBox[{"counters", "[", 
       RowBox[{"[", 
        RowBox[{"#2", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], "}"}], "&"}], ",", 
   "un"}], "]"}]], "Input",
 CellChangeTimes->{{3.940034999129562*^9, 3.9400350131517982`*^9}},
 CellLabel->"In[285]:=",
 CellID->1496004690,ExpressionUUID->"508031dc-69f8-4065-8f5a-aa47bde63f68"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"13", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"16", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"18", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"19", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"20", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940035013396201*^9},
 CellLabel->"Out[285]=",
 CellID->1209629736,ExpressionUUID->"64578dc6-8b2e-4ff8-af54-51ebbc00ce8f"]
}, Open  ]],

Cell["We now package everything into a function:", "Text",
 CellChangeTimes->{3.94003502808785*^9, 3.940740613076064*^9},
 CellID->873967826,ExpressionUUID->"78f0dd99-9454-40ad-ae66-790574e68ba2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "frequencies", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"frequencies", "[", "x_List", "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"un", "=", 
       RowBox[{"Union", "[", "x", "]"}]}], "}"}], ",", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"counters", "=", 
         RowBox[{"Array", "[", 
          RowBox[{
           RowBox[{"0", "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"Length", "[", "un", "]"}], "}"}]}], "]"}]}], "}"}], ",", 
       
       RowBox[{
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"counters", "[", 
             RowBox[{"[", "#", "]"}], "]"}], "++"}], "&"}], ",", 
          RowBox[{"ReplaceAll", "[", 
           RowBox[{"x", ",", 
            RowBox[{"Dispatch", "[", 
             RowBox[{"MapIndexed", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Rule", "[", 
                 RowBox[{"#1", ",", 
                  RowBox[{"First", "[", "#2", "]"}]}], "]"}], "&"}], ",", 
               "un"}], "]"}], "]"}]}], "]"}]}], "]"}], ";", 
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"#1", ",", 
             RowBox[{"counters", "[", 
              RowBox[{"[", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], "}"}], "&"}], 
          ",", "un"}], "]"}]}]}], "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940035029832026*^9, 3.940035115591216*^9}},
 CellLabel->"In[286]:=",
 CellID->1589849956,ExpressionUUID->"e15ba3bd-5f74-40ab-9733-5a51b2013d4d"],

Cell["Test:", "Text",
 CellChangeTimes->{{3.940035118378948*^9, 3.940035119218326*^9}},
 CellID->407124477,ExpressionUUID->"cab9e10b-8c16-4e29-9690-acad2910b22a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"frequencies", "[", "testlist", "]"}]], "Input",
 CellChangeTimes->{{3.940035120212488*^9, 3.9400351232895527`*^9}},
 CellLabel->"In[288]:=",
 CellID->892332861,ExpressionUUID->"f04b5b28-0e3b-47d6-888f-8a03463aff58"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"13", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"14", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"16", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"18", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"19", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"20", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.94003512375732*^9},
 CellLabel->"Out[288]=",
 CellID->1617096076,ExpressionUUID->"ac0aa9f7-49dc-4f03-9f4a-f5ca26a36fc3"]
}, Open  ]],

Cell["\<\
For comparison, here is the implementation of frequencies function from the \
Statistics\[OpenCurlyQuote]DataManipulation\[OpenCurlyQuote]package.\
\>", "Text",
 CellChangeTimes->{{3.940035134032221*^9, 3.940035137507115*^9}},
 CellID->2128196547,ExpressionUUID->"71a4fd85-057e-429d-bde7-debe3ed79666"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "frequenciesAlt", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"frequenciesAlt", "[", "x_List", "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"First", "[", "#", "]"}], ",", 
       RowBox[{"Length", "[", "#", "]"}]}], "}"}], "&"}], ",", 
    RowBox[{"Split", "[", 
     RowBox[{"Sort", "[", "x", "]"}], "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940035148127983*^9, 3.9400351749420424`*^9}},
 CellLabel->"In[289]:=",
 CellID->685668004,ExpressionUUID->"be67e61e-9edb-483d-969d-1344808fc352"],

Cell["Let us compare the performance:", "Text",
 CellChangeTimes->{3.9400351830700283`*^9, 3.940740613096737*^9},
 CellID->923480311,ExpressionUUID->"0d880f8d-b415-4d49-81a6-b1583f7ac648"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"testlist", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "200"}], "}"}], "]"}], ",", 
     RowBox[{"{", "1000", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"frequencies", "[", "testlist", "]"}], ";"}], "//", 
  "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"frequenciesAlt", "[", "testlist", "]"}], ";"}], "//", 
  "Timing"}]}], "Input",
 CellChangeTimes->{{3.9400351845477543`*^9, 3.940035207883319*^9}},
 CellLabel->"In[291]:=",
 CellID->1079547060,ExpressionUUID->"4dc0eaa6-a9f6-490d-afe2-09f9bd5f5456"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.002741`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.94003520873275*^9},
 CellLabel->"Out[292]=",
 CellID->776059119,ExpressionUUID->"2257c218-1e1f-41d5-969f-0f13be2ac5c2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000402`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.9400352087517147`*^9},
 CellLabel->"Out[293]=",
 CellID->1557424802,ExpressionUUID->"700d4f51-95a6-4394-a9ae-7f5129c97989"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"testlist", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2000"}], "}"}], "]"}], ",", 
     RowBox[{"{", "1000", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"frequencies", "[", "testlist", "]"}], ";"}], "//", 
  "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"frequenciesAlt", "[", "testlist", "]"}], ";"}], "//", 
  "Timing"}]}], "Input",
 CellChangeTimes->{3.940035226366105*^9},
 CellLabel->"In[294]:=",
 CellID->2107957578,ExpressionUUID->"020ec8c3-d82a-4697-a529-9698f4356cfa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.004389`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940035226683848*^9},
 CellLabel->"Out[295]=",
 CellID->512678737,ExpressionUUID->"c122af14-e22b-4a95-af70-2cee4691aeed"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000856`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.9400352267023697`*^9},
 CellLabel->"Out[296]=",
 CellID->887140995,ExpressionUUID->"84b5e4ac-9fdc-44ae-8147-d0d1212c64fd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"testlist", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "20000"}], "}"}], "]"}], ",", 
     RowBox[{"{", "1000", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"frequencies", "[", "testlist", "]"}], ";"}], "//", 
  "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"frequenciesAlt", "[", "testlist", "]"}], ";"}], "//", 
  "Timing"}]}], "Input",
 CellChangeTimes->{{3.9400352431793747`*^9, 3.940035243314062*^9}},
 CellLabel->"In[297]:=",
 CellID->217396271,ExpressionUUID->"c3cd4226-fba0-4d69-87da-db0a2cfbb796"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.005302`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940035243678846*^9},
 CellLabel->"Out[298]=",
 CellID->1555588360,ExpressionUUID->"9abbd6c9-7778-4e48-9b02-9e124dda2042"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00109`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.9400352436970367`*^9},
 CellLabel->"Out[299]=",
 CellID->1307647942,ExpressionUUID->"a93601ee-aaca-4b9c-83ca-231ba7ad1f86"]
}, Open  ]],

Cell["\<\
We see that the version based on Sort and Split is several times faster. The \
reason that I have included the above more complex and less efficient \
implementation of <frequencies > is twofold. First, it is still a good \
illustration of how one can combine several programming techniques together \
(in this case, procedural (side-effects), functional and rule-based). Second, \
to show once again that it is very hard to outperform certain general \
functions such as Sort (this refers to \[OpenCurlyDoubleQuote]pure\
\[CloseCurlyDoubleQuote] Sort; Sort with a user-defined comparison function \
can be outperformed in some cases), and it is usually advantageous to use \
them if the problem can be reformulated in such a way that they can be used.\
\>", "Text",
 CellChangeTimes->{{3.940035256605691*^9, 3.9400352874623003`*^9}, 
   3.940276417539125*^9},
 CellID->764804219,ExpressionUUID->"9340c1d9-8e8a-4fd4-be2c-84ef077fe9f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Apply", "Subsubsection",
 CellChangeTimes->{3.940035301969605*^9},
 CellID->1269443729,ExpressionUUID->"2d7d2d00-6b12-4e72-8c90-fcb4bd4a4c46"],

Cell["\<\
Apply is the second \
\[OpenCurlyDoubleQuote]fundamental\[CloseCurlyDoubleQuote] higher-order \
function in the FP programming paradigm. Its action is different from that of \
Map or related functions. Apply takes a function <f> as its first argument, \
and an expression <expr>as a second one. It changes the head of <expr> from \
what it was to <f>. Few simple examples:\
\>", "Text",
 CellChangeTimes->{{3.94003530920947*^9, 3.940035317055964*^9}},
 CellID->1434192683,ExpressionUUID->"015c64f6-8c6a-40da-9739-6a9f163d14a7"],

Cell["Simple examples", "ItemNumbered",
 CellChangeTimes->{3.940035325073807*^9},
 CellID->561772453,ExpressionUUID->"0d91a7bc-7616-4085-9e5f-9711442f2817"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"a", ",", "b", ",", "c"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Apply", "[", 
  RowBox[{"List", ",", 
   RowBox[{"a", "+", "b", "+", "c"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.9400353350771723`*^9, 3.940035341926119*^9}},
 CellLabel->"In[300]:=",
 CellID->1948585462,ExpressionUUID->"dd535c9f-2458-4168-b427-ab1ebf8afcd7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c"}], "}"}]], "Output",
 CellChangeTimes->{3.940035342222126*^9},
 CellLabel->"Out[301]=",
 CellID->1035860868,ExpressionUUID->"e9e54794-d5a4-40e4-96ea-e137b816c9c0"]
}, Open  ]],

Cell["\<\
To understand what has happened, recall the internal form of the sum above:\
\>", "Text",
 CellChangeTimes->{3.940035348902485*^9},
 CellID->63682247,ExpressionUUID->"34040c0c-f396-461b-8634-35eba5007a34"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"a", "+", "b", "+", "c"}], "]"}]], "Input",
 CellChangeTimes->{{3.940035350300434*^9, 3.940035353865653*^9}},
 CellLabel->"In[302]:=",
 CellID->1963587716,ExpressionUUID->"0bb92c80-820c-4f59-a69c-c2af0dc97b16"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Plus", "[", 
    RowBox[{"a", ",", "b", ",", "c"}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.940035354148532*^9},
 CellLabel->"Out[302]//FullForm=",
 CellID->1889119203,ExpressionUUID->"0afab875-a8bf-469f-92df-abe941b72707"]
}, Open  ]],

Cell["\<\
So, the head Plus was changed to head List. Let us look at more examples like \
this:\
\>", "Text",
 CellChangeTimes->{3.9400353608977823`*^9},
 CellID->2028207573,ExpressionUUID->"b75c7cab-b647-4576-9fa9-d612de923371"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Plus", ",", 
   RowBox[{"a", "*", "b", "*", "c"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.94003536283849*^9, 3.940035366408326*^9}},
 CellLabel->"In[303]:=",
 CellID->102304791,ExpressionUUID->"b8564083-7500-4856-b842-c0ce4ef8a3b9"],

Cell[BoxData[
 RowBox[{"a", "+", "b", "+", "c"}]], "Output",
 CellChangeTimes->{3.940035366717856*^9},
 CellLabel->"Out[303]=",
 CellID->1723449393,ExpressionUUID->"3afaac07-ccfe-4bef-b907-d80a0d015dba"]
}, Open  ]],

Cell["This time we changed head Times to head Plus. Now consider:", "Text",
 CellChangeTimes->{3.940035374248168*^9},
 CellID->754517415,ExpressionUUID->"1f326969-2bc1-44df-97d9-2874bdd22c64"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.940035379476342*^9, 3.940035381224695*^9}},
 CellLabel->"In[304]:=",
 CellID->1899662838,ExpressionUUID->"ae713407-6bb4-4c22-84f4-0070cebf3eff"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.940035381600021*^9},
 CellLabel->"Out[304]=",
 CellID->1939784052,ExpressionUUID->"95755604-53c1-44e2-8480-dd4bc41d29a2"]
}, Open  ]],

Cell["This will give a sum of the first 10 natural numbers:", "Text",
 CellChangeTimes->{3.940035387135717*^9},
 CellID->1001316857,ExpressionUUID->"947c6e21-4f8b-4cd1-b3a5-b97e9cd73a61"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Plus", ",", 
   RowBox[{"Range", "[", "10", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940035388522582*^9, 3.940035392566998*^9}},
 CellLabel->"In[305]:=",
 CellID->1289020805,ExpressionUUID->"69009248-a379-4d45-b508-daea46581d8d"],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{3.940035393040577*^9},
 CellLabel->"Out[305]=",
 CellID->647482283,ExpressionUUID->"6a5488bd-5c65-442e-9fc2-2f5fbdc3457e"]
}, Open  ]],

Cell["And this will give 10!:", "Text",
 CellChangeTimes->{3.940035398877965*^9},
 CellID->935091032,ExpressionUUID->"ff9e8172-8ad2-4c71-818b-f606627a8e43"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Times", ",", 
   RowBox[{"Range", "[", "10", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9400354018883257`*^9, 3.940035406444323*^9}},
 CellLabel->"In[306]:=",
 CellID->132694486,ExpressionUUID->"654bd869-524c-43d3-80e9-276ab7c8cd37"],

Cell[BoxData["3628800"], "Output",
 CellChangeTimes->{3.940035406767994*^9},
 CellLabel->"Out[306]=",
 CellID->1301919200,ExpressionUUID->"fb21ed29-9427-44d9-9756-fd0bf0b459ca"]
}, Open  ]],

Cell["\<\
It is worth noting that this computation of the factorial is nearly as \
efficient as the built-in command:\
\>", "Text",
 CellChangeTimes->{3.94003541497313*^9},
 CellID->645115117,ExpressionUUID->"67446243-8244-4003-96b4-8b975f07d780"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"Apply", "[", 
    RowBox[{"Times", ",", 
     RowBox[{"Range", "[", "10000", "]"}]}], "]"}], ";"}], "]"}]], "Input",
 CellChangeTimes->{{3.94003541799826*^9, 3.9400354269912558`*^9}},
 CellLabel->"In[307]:=",
 CellID->1262505428,ExpressionUUID->"863daa7a-f3bc-4563-b13e-19b124d0217a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.009263`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940035427888007*^9},
 CellLabel->"Out[307]=",
 CellID->665262204,ExpressionUUID->"b38c766d-154e-4cea-9130-d1891acb8f7f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"10000", "!"}], ";"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400354303877172`*^9, 3.9400354362801733`*^9}},
 CellLabel->"In[308]:=",
 CellID->1824089450,ExpressionUUID->"c10a5187-b674-4183-aabe-2c994f60b4a3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000701`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.9400354365887947`*^9},
 CellLabel->"Out[308]=",
 CellID->353616277,ExpressionUUID->"08365e0e-f441-4ca6-915e-6ce5cf1be3c4"]
}, Open  ]],

Cell["Shorthand notation", "ItemNumbered",
 CellChangeTimes->{3.940035446396181*^9},
 CellID->1141516290,ExpressionUUID->"4fd4df5e-a87c-402a-a682-6647c1e3cc85"],

Cell["\<\
As for other common operations, there is a shorthand notation for Apply: \
<@@>. So, to Apply a function <f> to expression <expr>, one uses\
\>", "Text",
 CellChangeTimes->{{3.940035454695097*^9, 3.9400354576527843`*^9}},
 CellID->1967080241,ExpressionUUID->"c97f312d-74fd-4d4b-9276-c11982c61075"],

Cell[BoxData[
 RowBox[{"(", 
  RowBox[{"f", "@@", "expr"}], ")"}]], "Input",
 CellChangeTimes->{{3.940035459834456*^9, 3.9400354632775307`*^9}},
 CellID->83022614,ExpressionUUID->"c30c0255-725d-4090-839e-c211b230b579"],

Cell["\<\
Once again, parentheses can often be omitted, but are generally necessary to \
avoid precedence-related bugs.\
\>", "Text",
 CellChangeTimes->{{3.940035473232979*^9, 3.940035475384534*^9}},
 CellID->610743969,ExpressionUUID->"a6353d6b-0f56-40ce-a7dc-eead52522354"],

Cell["\<\
By now we saw enough examples to understand in which cases Apply is really \
needed: these are the cases when some function needs the \
\[OpenCurlyDoubleQuote]interior\[CloseCurlyDoubleQuote] of some normal \
expression (i.e., comma-separated elements inside the square brackets, but \
not the head). So, what Apply does is that the present head of an expression \
gets \[OpenCurlyDoubleQuote]eaten up\[CloseCurlyDoubleQuote] by a new head, \
while all the comma-separated elements are \[OpenCurlyDoubleQuote]inherited\
\[CloseCurlyDoubleQuote] by a new head.\
\>", "Text",
 CellChangeTimes->{{3.940035485413128*^9, 3.940035500146594*^9}},
 CellID->1019879466,ExpressionUUID->"6c4f015c-fd40-4309-a2f2-6e3046ad1e01"],

Cell["More examples:", "ItemNumbered",
 CellChangeTimes->{3.9400355069686127`*^9},
 CellID->1276074225,ExpressionUUID->"25a3630b-5845-47da-acf8-ceffbe4003bc"],

Cell["\<\
Example: computing a quadratic norm of a tensor of arbitrary rank\
\>", "SubitemNumbered",
 CellChangeTimes->{3.94003552393463*^9},
 CellID->60316986,ExpressionUUID->"32f7a556-6bb1-4dc4-b82d-5c81126c5b9a"],

Cell[TextData[{
 "This example we have already considered before (see section ",
 ButtonBox["3.8.3.3",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-3-Lists.nb", CharacterEncoding -> "UTF-8"], 
    "3.8.3.3"},
  ButtonNote->"/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-3-Lists.nb"],
 "), but now we can fully understand it. This function computes the quadratic \
norm of the tensor of arbitrary rank:"
}], "Text",
 CellChangeTimes->{{3.940035687393648*^9, 3.9400356963225613`*^9}, {
  3.940035744139331*^9, 3.940035744148337*^9}},
 CellID->135302318,ExpressionUUID->"daab425f-e730-4b22-8536-eecf14cc8e00"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "tensorNorm", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tensorNorm", "[", "tensor_List", "]"}], ":=", 
  RowBox[{"Sqrt", "[", 
   RowBox[{"Plus", "@@", 
    RowBox[{"Flatten", "[", 
     RowBox[{"tensor", "^", "2"}], "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9400357511951647`*^9, 3.940035770394766*^9}},
 CellLabel->"In[309]:=",
 CellID->164561814,ExpressionUUID->"37b4edc1-319e-4cf6-9dba-a580c2a334a7"],

Cell[TextData[{
 "It works as follows: first, the list is squared (many built-in functions, \
and Power in particular, are Listable (section ",
 ButtonBox["4.9.1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-4-Rules-patterns-functions.nb", 
     CharacterEncoding -> "UTF-8"], "4.9.1"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-4-Rules-patterns-functions.\
nb"],
 ") and thus are automatically threaded over lists, so squaring a nested list \
of numbers is equivalent to squaring each number). Then, we use Flatten to \
make the list flat, by removing all the nested list structure (internal curly \
braces). Then we use Apply in the shorthand notation, to change the head from \
List to Plus. Finally, we take a square root of the resulting number."
}], "Text",
 CellChangeTimes->{{3.940035779361227*^9, 3.940035791153173*^9}, {
  3.940035853106207*^9, 3.9400358531148148`*^9}},
 CellID->1515162607,ExpressionUUID->"101d4381-5887-4b8f-9198-8dfb9ab727c9"],

Cell["For example, for a vector (list):", "Text",
 CellChangeTimes->{3.9400358615950727`*^9},
 CellID->362468813,ExpressionUUID->"67e17d43-72af-444b-97f7-955891c4eea3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tensorNorm", "[", 
  RowBox[{"Range", "[", "10", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400358633362007`*^9, 3.940035865954503*^9}},
 CellLabel->"In[311]:=",
 CellID->2003385222,ExpressionUUID->"d57c54ad-608c-4256-bc8d-8583de9d04de"],

Cell[BoxData[
 SqrtBox["385"]], "Output",
 CellChangeTimes->{3.940035866376382*^9},
 CellLabel->"Out[311]=",
 CellID->1055739334,ExpressionUUID->"3cb8e071-8749-480b-9af6-8023e390a7cb"]
}, Open  ]],

Cell["for a 3x4 matrix:", "Text",
 CellChangeTimes->{3.94003587887904*^9},
 CellID->1301095024,ExpressionUUID->"ede03329-32bf-4036-85b3-1231ff134551"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"matrix", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"i", "+", "j"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "4"}], "}"}]}], "]"}]}], ")"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.9400358821750183`*^9, 3.9400358952744827`*^9}},
 CellLabel->"In[312]:=",
 CellID->1752077124,ExpressionUUID->"9f6e49b2-d834-4c60-ac2e-5cfecb601f89"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"2", "3", "4", "5"},
     {"3", "4", "5", "6"},
     {"4", "5", "6", "7"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.9400358955697947`*^9},
 CellLabel->"Out[312]//MatrixForm=",
 CellID->894827997,ExpressionUUID->"a858ea1e-97d2-48cb-82d0-a8a67c3aaa45"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tensorNorm", "[", "matrix", "]"}]], "Input",
 CellChangeTimes->{{3.940035897294279*^9, 3.940035900330055*^9}},
 CellLabel->"In[313]:=",
 CellID->1060770588,ExpressionUUID->"73d13210-b7cc-4e64-99c2-7cedcf0585ef"],

Cell[BoxData[
 SqrtBox["266"]], "Output",
 CellChangeTimes->{3.940035900688614*^9},
 CellLabel->"Out[313]=",
 CellID->89383446,ExpressionUUID->"c9562433-9134-4043-adcb-0878f826cfd7"]
}, Open  ]],

Cell["Example: conditional summing of even numbers in a list", \
"SubitemNumbered",
 CellChangeTimes->{3.940035968407213*^9},
 CellTags->"5.2.7.3.2",
 CellID->1176507669,ExpressionUUID->"df15a7ce-0b3c-4d37-8f6a-b8cdff8642dd"],

Cell["\<\
As a next example, consider the following problem: we have to write a \
function which sums a list of numbers, but it has to work only on a list with \
all numbers even. If this condition is not fulfilled, the function should \
return unevaluated.\
\>", "Text",
 CellChangeTimes->{{3.940035975995126*^9, 3.9400359822757597`*^9}},
 CellID->1682454954,ExpressionUUID->"cbd694c7-1a88-483d-b8c3-06d84cde6c14"],

Cell["To solve a problem, first create a sample list:", "Text",
 CellChangeTimes->{{3.940035975995126*^9, 3.940035980812573*^9}},
 CellID->1960648801,ExpressionUUID->"c2fe99b9-98d6-43c6-be8b-ed068de0f7c7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numlist", "=", 
  RowBox[{"Range", "[", "10", "]"}]}]], "Input",
 CellChangeTimes->{{3.9400359939278793`*^9, 3.940035997656857*^9}},
 CellLabel->"In[314]:=",
 CellID->1308012767,ExpressionUUID->"9f66003e-ce89-445b-a49f-6b0e154bf62f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.940035998058022*^9},
 CellLabel->"Out[314]=",
 CellID->1706707298,ExpressionUUID->"78f51094-44b0-42e1-abf9-6227075f4741"]
}, Open  ]],

Cell["Summing it up is easy:", "Text",
 CellChangeTimes->{3.940036003885109*^9},
 CellID->690484507,ExpressionUUID->"74924753-2a28-43e6-a842-86c5844fd521"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plus", "@@", "numlist"}]], "Input",
 CellChangeTimes->{{3.940036006962552*^9, 3.9400360089467907`*^9}},
 CellLabel->"In[315]:=",
 CellID->486722536,ExpressionUUID->"6aed4afb-51ef-4507-8344-61fd2dd3d014"],

Cell[BoxData["55"], "Output",
 CellChangeTimes->{3.940036009250949*^9},
 CellLabel->"Out[315]=",
 CellID->1261813678,ExpressionUUID->"d94b3416-95b6-4fdf-989c-dec40e97ee16"]
}, Open  ]],

Cell["\<\
we can now define a function which sums up arbitrary list (for the sake of \
example, we will ignore the fact that the built-in Total does exactly that):\
\>", "Text",
 CellChangeTimes->{{3.940036017095047*^9, 3.940036019141748*^9}},
 CellID->499365104,ExpressionUUID->"1e40bde4-c1eb-4d4e-8b20-df800aea5228"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "sumList", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"sumList", "[", "x_List", "]"}], ":=", 
   RowBox[{"Plus", "@@", "x"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940036023316008*^9, 3.940036035223608*^9}},
 CellLabel->"In[316]:=",
 CellID->646126882,ExpressionUUID->"4db4b6ae-5272-4789-9b9a-51bfc082dc0f"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940036037351924*^9, 3.940036039015801*^9}},
 CellID->1214853355,ExpressionUUID->"c18bdf84-0151-460c-a966-a891fc5710cb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sumList", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.940036039964109*^9, 3.9400360430210648`*^9}},
 CellLabel->"In[318]:=",
 CellID->1048027305,ExpressionUUID->"76e05b2e-0681-41f3-a6ef-a3cc1c7aa4fe"],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{3.940036043522037*^9},
 CellLabel->"Out[318]=",
 CellID->1895607107,ExpressionUUID->"ebc3f493-74eb-4720-a75d-893d0625a49d"]
}, Open  ]],

Cell["\<\
Now we need to modify a function so that it checks our condition. Let us \
first work out the condition separately. The built-in function <EvenQ> checks \
whether the number is even. We have to do it for every number in our list, so \
we have to Map EvenQ on the list (again, for the sake of example we will \
ignore the fact that EvenQ gets automatically threaded over the list, and \
will do it manually). For our list:\
\>", "Text",
 CellChangeTimes->{{3.940036051554736*^9, 3.9400360613376904`*^9}},
 CellID->1548744104,ExpressionUUID->"284b6fa3-8592-45ac-b400-80553eae616d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"EvenQ", ",", "numlist"}], "]"}]], "Input",
 CellChangeTimes->{{3.940036064385688*^9, 3.9400360690238447`*^9}},
 CellLabel->"In[319]:=",
 CellID->1603022021,ExpressionUUID->"79d4850b-8b53-43c3-b0e1-4b51de627978"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "False", ",", "True", ",", "False", ",", "True", ",", "False", ",", "True", 
   ",", "False", ",", "True", ",", "False", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.940036070003131*^9},
 CellLabel->"Out[319]=",
 CellID->764808683,ExpressionUUID->"a65e1e9f-d155-449f-8866-62573164cde1"]
}, Open  ]],

Cell["\<\
All that is left is to plug this list into the built-in <And> command. But \
<And> receives not a list of expressions, but a sequence of (comma-separated) \
expressions, i.e, the interior of the list. Thus, the <List> head has to be \
\[OpenCurlyDoubleQuote]eaten up\[CloseCurlyDoubleQuote] by the <And> head, \
which means that we have to use Apply:\
\>", "Text",
 CellChangeTimes->{{3.940036077156231*^9, 3.940036081671363*^9}},
 CellID->1449907886,ExpressionUUID->"07278f57-2cb1-489d-95b2-b6318292c695"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"And", ",", 
   RowBox[{"Map", "[", 
    RowBox[{"EvenQ", ",", "numlist"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940036084705287*^9, 3.940036093417427*^9}},
 CellLabel->"In[320]:=",
 CellID->409631367,ExpressionUUID->"9d2165f5-bfee-4225-a65e-e26767d2c191"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.940036093892139*^9},
 CellLabel->"Out[320]=",
 CellID->1817767782,ExpressionUUID->"3a944560-250b-493b-8c6b-bb39df42377e"]
}, Open  ]],

Cell["or, which is the same,", "Text",
 CellChangeTimes->{3.940036099876636*^9},
 CellID->1441493419,ExpressionUUID->"3dddb788-0ed8-4bb1-8bc9-b9b33d1277eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"Map", "[", 
   RowBox[{"EvenQ", ",", "numlist"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9400361039453373`*^9, 3.940036109212028*^9}},
 CellLabel->"In[321]:=",
 CellID->2057698146,ExpressionUUID->"6309de94-f222-4bd4-a475-a7bdbded356d"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.9400361095149927`*^9},
 CellLabel->"Out[321]=",
 CellID->1531388122,ExpressionUUID->"fe956609-9b57-4563-bc18-7a4e88027856"]
}, Open  ]],

Cell["The final step is to insert the condition into the pattern:", "Text",
 CellChangeTimes->{3.940036116463147*^9},
 CellID->448657159,ExpressionUUID->"0c83f20d-237b-4b3d-bc4a-707fdaa0a383"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "sumListEven", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"sumListEven", "[", "x_List", "]"}], "/;", 
    RowBox[{"And", "@@", 
     RowBox[{"Map", "[", 
      RowBox[{"EvenQ", ",", "x"}], "]"}]}]}], ":=", 
   RowBox[{"Plus", "@@", "x"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940036118825994*^9, 3.940036139222211*^9}},
 CellLabel->"In[322]:=",
 CellID->707503201,ExpressionUUID->"b12cc8dc-fc4f-4ab6-a143-5423af96a910"],

Cell["Check now:", "Text",
 CellChangeTimes->{{3.940036141442389*^9, 3.94003614391768*^9}},
 CellID->698765093,ExpressionUUID->"641475a2-6234-411f-a384-2a6be9510b49"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sumListEven", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400361448794403`*^9, 3.940036151400737*^9}},
 CellLabel->"In[324]:=",
 CellID->824246563,ExpressionUUID->"a2e43ba9-0142-463e-8581-f38b02a6fd15"],

Cell[BoxData["20"], "Output",
 CellChangeTimes->{3.9400361516665173`*^9},
 CellLabel->"Out[324]=",
 CellID->265404722,ExpressionUUID->"7f7756d4-ff05-45d1-b617-bf06142c88e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sumListEven", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "4", ",", "6", ",", "7", ",", "8"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940036154478798*^9, 3.9400361593207817`*^9}},
 CellLabel->"In[325]:=",
 CellID->203220528,ExpressionUUID->"da71a5a3-30a2-4a56-b46a-b131719e6392"],

Cell[BoxData[
 RowBox[{"sumListEven", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "4", ",", "6", ",", "7", ",", "8"}], "}"}], 
  "]"}]], "Output",
 CellChangeTimes->{3.940036160025168*^9},
 CellLabel->"Out[325]=",
 CellID->857825256,ExpressionUUID->"183590cc-1009-4edd-8c0b-1890935c10a6"]
}, Open  ]],

Cell["\<\
Note the location of the condition pattern operator </;> - it is after the \
function parameter list, not inside. This is usually a better practice since \
for functions of more than one argument it allows to put conditions on \
several function parameters. Placing condition check inside a parameter list \
may force Mathematica to take global values for the parameters (instead of \
those passed to the function) to check the condition, which is probably not \
what you want. \
\>", "Text",
 CellChangeTimes->{{3.940036169502399*^9, 3.9400361988484*^9}},
 CellID->1411355281,ExpressionUUID->"d466e7c0-e47a-4f90-971d-5354149d3d61"],

Cell["\<\
If we use the mentioned above Listable property of EvenQ (automatic threading \
over lists), the code will be somewhat more concise, and, more importantly, \
much faster:\
\>", "Text",
 CellChangeTimes->{{3.940036207286726*^9, 3.940036208868162*^9}, 
   3.9407406131237288`*^9},
 CellID->2042225427,ExpressionUUID->"8e49e62f-f0ab-41a7-9250-d7dde1572903"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "sumList1", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"sumList1", "[", "x_List", "]"}], "/;", 
    RowBox[{"And", "@@", 
     RowBox[{"EvenQ", "[", "x", "]"}]}]}], ":=", 
   RowBox[{"Plus", "@@", "x"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9400362311283903`*^9, 3.9400362533291893`*^9}},
 CellLabel->"In[326]:=",
 CellID->1639011724,ExpressionUUID->"1199d0fc-bc90-4c93-b1d5-da78af754d59"],

Cell["\<\
Let us now add one more definition. For instance, for all numbers odd we want \
to multiply them all:\
\>", "Text",
 CellChangeTimes->{3.9400362598768578`*^9},
 CellID->840290016,ExpressionUUID->"982a935a-d7ad-49a8-8d20-62579f196b27"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"sumList1", "[", "x_List", "]"}], "/;", 
    RowBox[{"And", "@@", 
     RowBox[{"OddQ", "[", "x", "]"}]}]}], ":=", 
   RowBox[{"Times", "@@", "x"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.940036263906316*^9, 3.940036276666163*^9}},
 CellLabel->"In[328]:=",
 CellID->222105154,ExpressionUUID->"8e5575f2-d5ae-45fa-8670-38527c1b3580"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "sumList1"}]], "Input",
 CellChangeTimes->{{3.940036278546257*^9, 3.940036280843808*^9}},
 CellLabel->"In[329]:=",
 CellID->838355231,ExpressionUUID->"7a145cd6-de73-4053-aca0-fd875afd6f3d"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox[
             TagBox[
              TooltipBox[
               StyleBox["\<\" Symbol\"\>", "InformationRowLabel",
                StripOnInput->False],
               "\"Symbol\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "Symbol", "Tooltip"]& ], "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`sumList1\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{
                    RowBox[{"sumList1", "[", "x_List", "]"}], "/;", 
                    RowBox[{"And", "@@", 
                    RowBox[{"EvenQ", "[", "x", "]"}]}]}], ":=", 
                    RowBox[{"Plus", "@@", "x"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{
                    RowBox[{"sumList1", "[", "x_List", "]"}], "/;", 
                    RowBox[{"And", "@@", 
                    RowBox[{"OddQ", "[", "x", "]"}]}]}], ":=", 
                    RowBox[{"Times", "@@", "x"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`sumList1\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{12.5, {1.42974853515625, 11.07025146484375}}],
               True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               
               ImageSizeCache->{
                12.5, {1.42974853515625, 11.07025146484375}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox[
             TagBox[
              TooltipBox[
               StyleBox["\<\" Symbol\"\>", "InformationRowLabel",
                StripOnInput->False],
               "\"Symbol\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "Symbol", "Tooltip"]& ], "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`sumList1\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> "Global`sumList1", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, $CellContext`sumList1, {Condition[
         $CellContext`sumList1[
          Pattern[$CellContext`x, 
           Blank[List]]], 
         Apply[And, 
          EvenQ[$CellContext`x]]] :> Apply[Plus, $CellContext`x], Condition[
         $CellContext`sumList1[
          Pattern[$CellContext`x, 
           Blank[List]]], 
         Apply[And, 
          OddQ[$CellContext`x]]] :> Apply[Times, $CellContext`x]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "Global`sumList1"|>, False]]], "Output",
 CellChangeTimes->{3.940036281202015*^9},
 CellLabel->"Out[329]=",
 CellID->1267470611,ExpressionUUID->"34b7688f-0cfe-4409-b70e-9173da16cd08"]
}, Open  ]],

Cell[TextData[{
 "The rule has been added and the old one remained, although naively each \
definition contains the same pattern sumList1[x_List] . To resolve this \
paradox (see section ",
 ButtonBox["4.7.3",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-4-Rules-patterns-functions.nb", 
     CharacterEncoding -> "UTF-8"], "4.7.3"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-4-Rules-patterns-functions.\
nb"],
 "), one has to realize that the condition check here is a part of the \
pattern. Therefore, the patterns for the two definitions really are \
different. This can also be seen very clearly with DownValues:"
}], "Text",
 CellChangeTimes->{{3.9400362905681667`*^9, 3.94003630770459*^9}, {
  3.940036338142145*^9, 3.940036338151026*^9}},
 CellID->1020978639,ExpressionUUID->"edf287b4-1d39-438e-a081-91bca68e173b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DownValues", "[", "sumList1", "]"}]], "Input",
 CellChangeTimes->{{3.94003634588208*^9, 3.940036349469987*^9}},
 CellLabel->"In[330]:=",
 CellID->486951614,ExpressionUUID->"2e8fba31-e91f-46d0-8056-0823b55dd9d9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{
      RowBox[{"sumList1", "[", "x_List", "]"}], "/;", 
      RowBox[{"And", "@@", 
       RowBox[{"EvenQ", "[", "x", "]"}]}]}], "]"}], "\[RuleDelayed]", 
    RowBox[{"Plus", "@@", "x"}]}], ",", 
   RowBox[{
    RowBox[{"HoldPattern", "[", 
     RowBox[{
      RowBox[{"sumList1", "[", "x_List", "]"}], "/;", 
      RowBox[{"And", "@@", 
       RowBox[{"OddQ", "[", "x", "]"}]}]}], "]"}], "\[RuleDelayed]", 
    RowBox[{"Times", "@@", "x"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.940036349706599*^9},
 CellLabel->"Out[330]=",
 CellID->1742723853,ExpressionUUID->"b6ba4151-567c-4f53-acaf-5c9235b29f28"]
}, Open  ]],

Cell["\<\
A final word of caution: the detailed argument checks like the one in this \
problem, may induce a significant overhead in some cases. On the other hand, \
such checks are deceptively easy to write. In the present case, we were \
forced to do this because that\[CloseCurlyQuote]s what is asked in the \
formulation of our model problem. If you are solving a large problem, then \
the design (splitting it into sub-problems/functions) is your decision.
In this case, it is better not to supply each small function with condition \
checks like this (if possible), to avoid redundant checks (that is, in cases \
when the passed arguments are known beforehand to be fine). In terms of our \
\[OpenCurlyDoubleQuote]guiding principles for efficient programming\
\[CloseCurlyDoubleQuote], this refers to principle 4: \
\[OpenCurlyDoubleQuote]avoid complicated patterns\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.940036359892067*^9, 3.9400363964115477`*^9}},
 CellID->1578618006,ExpressionUUID->"3f23a1e6-f8aa-4a74-acea-fddf26be61e4"],

Cell["\<\
Example: words containing given letters - realizing alternative patterns \
programmatically\
\>", "SubitemNumbered",
 CellChangeTimes->{3.940036406934649*^9},
 CellID->250466274,ExpressionUUID->"c0ec9c93-0883-43f7-be6d-d58640df2e99"],

Cell["\<\
For this example we again will need some list of words, like this one (taken \
from the Mathematica book)\
\>", "Text",
 CellChangeTimes->{3.940036414810153*^9},
 CellID->1855209892,ExpressionUUID->"fbaa09a5-7728-4c07-8fd5-4f9e59cdb9bb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"wordlist", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Most\>\"", ",", "\"\<of\>\"", ",", "\"\<this\>\"", ",", 
     "\"\<Part\>\"", ",", "\"\<assumes\>\"", ",", " ", "\"\<no\>\"", ",", 
     " ", "\"\<specific\>\"", ",", " ", "\"\<prior\>\"", ",", " ", 
     "\"\<knowledge\>\"", ",", " ", "\"\<of\>\"", ",", " ", 
     "\"\<computer\>\"", ",", "  ", "\"\<science\>\"", ",", "  ", 
     "\"\<Nevertheless\>\"", ",", " ", "\"\<some\>\"", ",", " ", "\"\<of\>\"",
      ",", "\"\<it\>\"", ",", "\"\<ventures\>\"", ",", "\"\<into\>\"", ",", 
     "\"\<some\>\"", ",", "\"\<fairly\>\"", ",", "\"\<complicated\>\"", ",", 
     "\"\<issues\>\"", ",", "\"\<You\>\"", ",", "\"\<can\>\"", ",", 
     "\"\<probably\>\"", ",", "\"\<ignore\>\"", " ", ",", "\"\<these\>\"", 
     ",", "\"\<issues\>\"", ",", "\"\<unless\>\"", ",", "\"\<they\>\"", ",", 
     "\"\<specifically\>\"", ",", "\"\<affect\>\"", ",", "\"\<programs\>\"", 
     ",", "\"\<you\>\"", ",", "\"\<are\>\"", ",", "\"\<writing\>\""}], 
    "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.940036425760126*^9, 3.94003644731171*^9}, {
  3.94003663440689*^9, 3.940036656747367*^9}, {3.9400366975748453`*^9, 
  3.94003680611287*^9}},
 CellLabel->"In[340]:=",
 CellID->1197584051,ExpressionUUID->"44b7da98-d34d-42f8-888d-d8ea4b7dfcdf"],

Cell["\<\
Now, the problem: we want to pick all the words containing any of the symbols \
given by some symbol list, for instance {\[OpenCurlyDoubleQuote]a\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]n\[CloseCurlyDoubleQuote],\
\[CloseCurlyDoubleQuote]k\[CloseCurlyDoubleQuote]}. To solve it, let us start \
with a simple case when we have only one symbol, say \[OpenCurlyDoubleQuote]a\
\[CloseCurlyDoubleQuote]. And, as a first step, let us work out the code that \
will check for some single word (string), whether it contains the symbol. So, \
let us pick some word:\
\>", "Text",
 CellChangeTimes->{{3.940036456290422*^9, 3.940036465742683*^9}},
 CellID->1847507327,ExpressionUUID->"01a65ab5-ffaf-47df-8aa2-234f97f10453"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ourword", "=", "\"\<fairly\>\""}]], "Input",
 CellChangeTimes->{{3.940036467474042*^9, 3.940036470769292*^9}},
 CellLabel->"In[332]:=",
 CellID->1093796865,ExpressionUUID->"45d8dc68-421d-4ecf-8626-ffdc684053d2"],

Cell[BoxData["\<\"fairly\"\>"], "Output",
 CellChangeTimes->{3.940036471426539*^9},
 CellLabel->"Out[332]=",
 CellID->1691441708,ExpressionUUID->"bb3f5e17-1c90-48f4-9f8b-efc8188db1f4"]
}, Open  ]],

Cell["\<\
Since I don\[CloseCurlyQuote]t want to use the string-matching functions \
here, the first thing we need is to split the word into its letters. This is \
best done by using the built-in <Characters > command:\
\>", "Text",
 CellChangeTimes->{{3.940036478836774*^9, 3.940036480523469*^9}},
 CellID->1819751017,ExpressionUUID->"53c0be24-b586-42bc-b238-4571084ce587"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Characters", "[", "ourword", "]"}]], "Input",
 CellChangeTimes->{{3.9400364861033773`*^9, 3.940036489149453*^9}},
 CellLabel->"In[333]:=",
 CellID->1106006450,ExpressionUUID->"ca619328-ff10-42c9-ad79-ac132fae0797"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"f\"\>", ",", "\<\"a\"\>", ",", "\<\"i\"\>", ",", "\<\"r\"\>", 
   ",", "\<\"l\"\>", ",", "\<\"y\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.940036489429352*^9},
 CellLabel->"Out[333]=",
 CellID->1509589241,ExpressionUUID->"d84bfa66-f95d-4f6a-9704-01f06054882e"]
}, Open  ]],

Cell["\<\
Now we need to test whether a given symbol (\[OpenCurlyDoubleQuote]a\
\[CloseCurlyDoubleQuote]) belongs to this list. This is done best by the \
built-in <MemberQ> command:\
\>", "Text",
 CellChangeTimes->{{3.940036497239306*^9, 3.940036499314587*^9}},
 CellID->1294567829,ExpressionUUID->"b804f0b6-7d3f-4762-a62b-7a4074d3f9bc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MemberQ", "[", 
  RowBox[{
   RowBox[{"Characters", "[", "ourword", "]"}], ",", "\"\<a\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940036501987349*^9, 3.9400365109988117`*^9}},
 CellLabel->"In[334]:=",
 CellID->1148623890,ExpressionUUID->"1704b21a-a85e-4611-8dd2-e9676667673a"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9400365113883677`*^9},
 CellLabel->"Out[334]=",
 CellID->998712639,ExpressionUUID->"993e4978-d372-4792-8e68-b6d6a26f3da7"]
}, Open  ]],

Cell["\<\
Now we want to generalize to the case of several characters. One way would be \
to Map MemberQ on their list, and then use the built-in <Or>. For instance, \
the second character is \[OpenCurlyDoubleQuote]k\[CloseCurlyDoubleQuote]:\
\>", "Text",
 CellChangeTimes->{{3.940036518593686*^9, 3.9400365255481253`*^9}},
 CellID->631138721,ExpressionUUID->"735f3c0a-71ec-4863-a72a-a5cb2a13ce1c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"Characters", "[", "ourword", "]"}], ",", "#"}], "]"}], "&"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\"\<a\>\"", ",", "\"\<k\>\""}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940036527214007*^9, 3.940036540294095*^9}},
 CellLabel->"In[335]:=",
 CellID->1948941558,ExpressionUUID->"d8576d32-7e12-423f-94f5-2d40411e63d9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.9400365409028387`*^9},
 CellLabel->"Out[335]=",
 CellID->1158456395,ExpressionUUID->"6e0b6474-8dd7-4230-86a2-9493f03c2044"]
}, Open  ]],

Cell["\<\
We need to Apply <Or> now (head List has to be \[OpenCurlyDoubleQuote]eaten \
up\[CloseCurlyDoubleQuote] by Or)\
\>", "Text",
 CellChangeTimes->{{3.940036550905471*^9, 3.940036560607452*^9}},
 CellID->1089887063,ExpressionUUID->"c8ae2902-b231-4bd6-ade6-3947291df48a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Or", "@@", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"Characters", "[", "ourword", "]"}], ",", "#"}], "]"}], "&"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"\"\<a\>\"", ",", "\"\<k\>\""}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9400365722645063`*^9, 3.9400365738057203`*^9}},
 CellLabel->"In[336]:=",
 CellID->1082314888,ExpressionUUID->"e9e7857f-29bd-4827-af79-73d7a9f30fb4"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.940036574313362*^9},
 CellLabel->"Out[336]=",
 CellID->9634334,ExpressionUUID->"938877a3-0632-46ca-b99a-40178df269a3"]
}, Open  ]],

Cell["\<\
We are now ready to insert this condition, and use Cases command to find all \
the words containing either \[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote] \
or \[OpenCurlyDoubleQuote]k\[CloseCurlyDoubleQuote] (or both)\
\>", "Text",
 CellChangeTimes->{{3.940036580993641*^9, 3.940036582852613*^9}},
 CellID->862978013,ExpressionUUID->"86015175-dfe3-4f74-9076-46021ee5005c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{"wordlist", ",", 
   RowBox[{"x_String", "/;", 
    RowBox[{"Or", "@@", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"Characters", "[", "x", "]"}], ",", "#"}], "]"}], "&"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"\"\<a\>\"", ",", "\"\<k\>\""}], "}"}]}], "]"}]}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.94003658686071*^9, 3.940036601756671*^9}, 
   3.940036850965274*^9},
 CellLabel->"In[342]:=",
 CellID->1475046669,ExpressionUUID->"b2032e51-1866-4fec-9190-3ff0fa774892"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Part\"\>", ",", "\<\"assumes\"\>", ",", "\<\"knowledge\"\>", 
   ",", "\<\"fairly\"\>", ",", "\<\"complicated\"\>", ",", "\<\"can\"\>", 
   ",", "\<\"probably\"\>", ",", "\<\"specifically\"\>", 
   ",", "\<\"affect\"\>", ",", "\<\"programs\"\>", ",", "\<\"are\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940036603031823*^9, 3.940036783511426*^9, 
  3.940036819709093*^9, 3.940036852786564*^9},
 CellLabel->"Out[342]=",
 CellID->1358066411,ExpressionUUID->"5e2548f5-c352-4495-a726-e545a648476a"]
}, Open  ]],

Cell["\<\
Finally, we package everything into a function, which will take two \
arguments: a list of words and a list of symbols to look for:\
\>", "Text",
 CellChangeTimes->{{3.940036860850895*^9, 3.9400368625142593`*^9}},
 CellID->1240292577,ExpressionUUID->"f31cba1b-7559-4073-b0dc-567bcb5776a0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "findWordsWithSymbols", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"findWordsWithSymbols", "[", 
    RowBox[{"wlist_List", ",", "symbols_List"}], "]"}], ":=", 
   RowBox[{"Cases", "[", 
    RowBox[{"wlist", ",", 
     RowBox[{"x_String", "/;", 
      RowBox[{"Or", "@@", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{
            RowBox[{"Characters", "[", "x", "]"}], ",", "#"}], "]"}], "&"}], 
         ",", "symbols"}], "]"}]}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940036871412655*^9, 3.940036919963632*^9}},
 CellLabel->"In[343]:=",
 CellID->558760337,ExpressionUUID->"692e2bbf-65ae-46b4-aeb7-ea0df2de8069"],

Cell["\<\
Note that we changed the specific symbol list by the function parameter \
<symbols>. To check it, let us find all words containing say \
\[OpenCurlyDoubleQuote]e\[CloseCurlyDoubleQuote] or \[OpenCurlyDoubleQuote]r\
\[CloseCurlyDoubleQuote] letters:\
\>", "Text",
 CellChangeTimes->{{3.94003692663818*^9, 3.9400369289080267`*^9}, 
   3.940740613150893*^9},
 CellID->1391251214,ExpressionUUID->"ccdb2991-c66e-4f89-bd65-09d4f0ebe885"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findWordsWithSymbols", "[", 
  RowBox[{"wordlist", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<e\>\"", ",", "\"\<r\>\""}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940036931007229*^9, 3.9400369391792517`*^9}},
 CellLabel->"In[345]:=",
 CellID->1736672435,ExpressionUUID->"0e3412fc-f078-4fea-aadb-2458e7a4bdcd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Part\"\>", ",", "\<\"assumes\"\>", ",", "\<\"specific\"\>", 
   ",", "\<\"prior\"\>", ",", "\<\"knowledge\"\>", ",", "\<\"computer\"\>", 
   ",", "\<\"science\"\>", ",", "\<\"Nevertheless\"\>", ",", "\<\"some\"\>", 
   ",", "\<\"ventures\"\>", ",", "\<\"some\"\>", ",", "\<\"fairly\"\>", 
   ",", "\<\"complicated\"\>", ",", "\<\"issues\"\>", ",", "\<\"probably\"\>",
    ",", "\<\"ignore\"\>", ",", "\<\"these\"\>", ",", "\<\"issues\"\>", 
   ",", "\<\"unless\"\>", ",", "\<\"they\"\>", ",", "\<\"specifically\"\>", 
   ",", "\<\"affect\"\>", ",", "\<\"programs\"\>", ",", "\<\"are\"\>", 
   ",", "\<\"writing\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.940036939474361*^9},
 CellLabel->"Out[345]=",
 CellID->149097614,ExpressionUUID->"0f4bf333-461c-458d-b0af-ff44e17048f7"]
}, Open  ]],

Cell["\<\
We solved the problem, but rather inefficiently. Even within what we already \
know, there are ways to make it better. The main source of inefficiency which \
we can eliminate now is the Map-ping of <MemberQ[Characters[x],#]&> on a list \
of symbols. We can do better if we recall that the second argument of MemberQ \
is a pattern, and as such, it may be more complicated than just one symbol. \
In particular, we can use alternative patterns like \[OpenCurlyDoubleQuote]r\
\[CloseCurlyDoubleQuote]|\[CloseCurlyDoubleQuote]e\[CloseCurlyDoubleQuote], \
or, which is the same, Alternatives[\[OpenCurlyDoubleQuote]r\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]e\[CloseCurlyDoubleQuote]].\
\>", "Text",
 CellChangeTimes->{{3.9400370115337973`*^9, 3.940037029981708*^9}, 
   3.9402764175624247`*^9},
 CellID->525918084,ExpressionUUID->"e2d2f35c-cd8b-4e81-b398-5a757193788f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MemberQ", "[", 
  RowBox[{
   RowBox[{"Characters", "[", "ourword", "]"}], ",", 
   RowBox[{"Alternatives", "[", 
    RowBox[{"\"\<a\>\"", ",", "\"\<k\>\""}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940037035932687*^9, 3.9400370488625393`*^9}},
 CellLabel->"In[346]:=",
 CellID->735388331,ExpressionUUID->"f42380cc-a9dc-4b14-bc9d-38edd65acffa"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.940037049257433*^9},
 CellLabel->"Out[346]=",
 CellID->1517984315,ExpressionUUID->"69389934-2a8a-4129-a36e-2dbc137af8b1"]
}, Open  ]],

Cell["\<\
Since again our letters are initially in a list, and Alternatives requires a \
sequence of elements, the head <List> has to be eaten up by the head \
\[OpenCurlyDoubleQuote]Alternatives\[CloseCurlyDoubleQuote], and therefore, \
we have to use Apply:\
\>", "Text",
 CellChangeTimes->{{3.94003705774678*^9, 3.940037062150609*^9}},
 CellID->656655845,ExpressionUUID->"40cbc8af-5db0-4061-bb6d-e90c117f814e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MemberQ", "[", 
  RowBox[{
   RowBox[{"Characters", "[", "ourword", "]"}], ",", 
   RowBox[{"Apply", "[", 
    RowBox[{"Alternatives", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<a\>\"", ",", "\"\<k\>\""}], "}"}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940037077989644*^9, 3.940037089694254*^9}},
 CellLabel->"In[347]:=",
 CellID->713988488,ExpressionUUID->"10f86034-d038-4a12-9e75-a3dff6f3c99d"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9400370908220997`*^9},
 CellLabel->"Out[347]=",
 CellID->215638220,ExpressionUUID->"29e209f5-8a31-4fed-a3ac-bd8a59e48cf7"]
}, Open  ]],

Cell["or, which is the same,", "Text",
 CellChangeTimes->{3.9400370970197973`*^9},
 CellID->646553481,ExpressionUUID->"860c5882-395c-4f93-8278-b6605b10227e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MemberQ", "[", 
  RowBox[{
   RowBox[{"Characters", "[", "ourword", "]"}], ",", 
   RowBox[{"Alternatives", "@@", 
    RowBox[{"{", 
     RowBox[{"\"\<a\>\"", ",", "\"\<k\>\""}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940037105803012*^9, 3.940037110337676*^9}},
 CellLabel->"In[348]:=",
 CellID->357101347,ExpressionUUID->"b331d650-40f0-4c2a-bf2a-dc680758caf0"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9400371107709723`*^9},
 CellLabel->"Out[348]=",
 CellID->874126656,ExpressionUUID->"7606a9ce-7258-4a70-85fe-9c7ff442cfa9"]
}, Open  ]],

Cell["we can now rewrite our function:", "Text",
 CellChangeTimes->{3.940037117819578*^9},
 CellID->1787759600,ExpressionUUID->"6af166a3-f42c-4201-a217-b5481a10a527"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "findWordsWithSymbolsAlt", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"findWordsWithSymbolsAlt", "[", 
    RowBox[{"wlist_List", ",", "symbols_List"}], "]"}], ":=", 
   RowBox[{"Cases", "[", 
    RowBox[{"wlist", ",", 
     RowBox[{"x_String", "/;", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"Characters", "[", "x", "]"}], ",", 
        RowBox[{"Alternatives", "@@", "symbols"}]}], "]"}]}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.9400371316756887`*^9, 3.940037165141362*^9}},
 CellLabel->"In[349]:=",
 CellID->1431892023,ExpressionUUID->"2faf048d-63be-4a1c-9dba-09731ef47000"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.9400371675705843`*^9, 3.940037168473281*^9}},
 CellID->1178703886,ExpressionUUID->"d95d5fb7-4a96-43fe-bd3d-b7b4470e0898"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findWordsWithSymbolsAlt", "[", 
  RowBox[{"wordlist", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<n\>\"", ",", "\"\<m\>\""}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940037169495274*^9, 3.940037176194759*^9}},
 CellLabel->"In[351]:=",
 CellID->56630157,ExpressionUUID->"f2f80ae2-b822-4427-8a9f-a06d59c9ccb7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"assumes\"\>", ",", "\<\"no\"\>", ",", "\<\"knowledge\"\>", 
   ",", "\<\"computer\"\>", ",", "\<\"science\"\>", ",", "\<\"some\"\>", 
   ",", "\<\"ventures\"\>", ",", "\<\"into\"\>", ",", "\<\"some\"\>", 
   ",", "\<\"complicated\"\>", ",", "\<\"can\"\>", ",", "\<\"ignore\"\>", 
   ",", "\<\"unless\"\>", ",", "\<\"programs\"\>", ",", "\<\"writing\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9400371767873077`*^9},
 CellLabel->"Out[351]=",
 CellID->1401190764,ExpressionUUID->"7f3bea58-f4aa-48c0-9104-a3157ada8fd6"]
}, Open  ]],

Cell[TextData[{
 "The reason that the latter version is more efficient than the former one is \
the following: in the latter case, the \[OpenCurlyDoubleQuote]decision\
\[CloseCurlyDoubleQuote] about any given word is made already on the level of \
the MemberQ function, while in the former case, it is promoted to another \
function (Or). The rule of thumb is that one has to push as much computation \
as possible inside the built-in function. Basically, MemberQ does not care \
(almost), whether it checks a single character or an alternative pattern with \
many characters (for small numbers of characters such as considered here). On \
the other hand, by Mapping MemberQ on each character, we force it to check \
afresh for every character. Thus, roughly we expect that the difference in \
performance will be a factor of the order of the length of the character \
list. We can check our expectations by measuring the timing for a list of \
symbols being the entire alphabet. We will use the <myTiming> function which \
measures small execution times (section ",
 ButtonBox["3.4.5.2",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-3-Lists.nb", CharacterEncoding -> "UTF-8"], 
    "3.4.5.2"},
  ButtonNote->"/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-3-Lists.nb"],
 "). Now:"
}], "Text",
 CellChangeTimes->{{3.940037187826223*^9, 3.940037226343552*^9}, {
  3.940037265210909*^9, 3.940037265219892*^9}},
 CellID->1628906496,ExpressionUUID->"8d352448-38ed-4585-ba03-1ddd8896ffe3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"alphabet", "=", 
  RowBox[{
  "Characters", "[", "\"\<abcdefghijklmnopqrstuvwxyz\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.940037270367601*^9, 3.940037284472416*^9}},
 CellLabel->"In[352]:=",
 CellID->1239704802,ExpressionUUID->"aea32ec4-7771-4926-bb03-00c8fb2c78dd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", ",", "\<\"h\"\>", 
   ",", "\<\"i\"\>", ",", "\<\"j\"\>", ",", "\<\"k\"\>", ",", "\<\"l\"\>", 
   ",", "\<\"m\"\>", ",", "\<\"n\"\>", ",", "\<\"o\"\>", ",", "\<\"p\"\>", 
   ",", "\<\"q\"\>", ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"v\"\>", ",", "\<\"w\"\>", ",", "\<\"x\"\>", 
   ",", "\<\"y\"\>", ",", "\<\"z\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.9400372866602182`*^9},
 CellLabel->"Out[352]=",
 CellID->1461893337,ExpressionUUID->"59b5a734-7a74-4f99-b97b-c2b973f7e77c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"findWordsWithSymbols", "[", 
   RowBox[{"wordlist", ",", "alphabet"}], "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.9400372920789223`*^9, 3.94003729997497*^9}},
 CellLabel->"In[353]:=",
 CellID->1169835932,ExpressionUUID->"b07c8a40-4154-4572-8631-dc9f31778cfc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000811`", ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Most\"\>", ",", "\<\"of\"\>", ",", "\<\"this\"\>", 
     ",", "\<\"Part\"\>", ",", "\<\"assumes\"\>", ",", "\<\"no\"\>", 
     ",", "\<\"specific\"\>", ",", "\<\"prior\"\>", ",", "\<\"knowledge\"\>", 
     ",", "\<\"of\"\>", ",", "\<\"computer\"\>", ",", "\<\"science\"\>", 
     ",", "\<\"Nevertheless\"\>", ",", "\<\"some\"\>", ",", "\<\"of\"\>", 
     ",", "\<\"it\"\>", ",", "\<\"ventures\"\>", ",", "\<\"into\"\>", 
     ",", "\<\"some\"\>", ",", "\<\"fairly\"\>", ",", "\<\"complicated\"\>", 
     ",", "\<\"issues\"\>", ",", "\<\"You\"\>", ",", "\<\"can\"\>", 
     ",", "\<\"probably\"\>", ",", "\<\"ignore\"\>", ",", "\<\"these\"\>", 
     ",", "\<\"issues\"\>", ",", "\<\"unless\"\>", ",", "\<\"they\"\>", 
     ",", "\<\"specifically\"\>", ",", "\<\"affect\"\>", 
     ",", "\<\"programs\"\>", ",", "\<\"you\"\>", ",", "\<\"are\"\>", 
     ",", "\<\"writing\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400373003566837`*^9},
 CellLabel->"Out[353]=",
 CellID->964895710,ExpressionUUID->"894b165a-97d7-4fb6-81ef-755809c59509"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"findWordsWithSymbolsAlt", "[", 
   RowBox[{"wordlist", ",", "alphabet"}], "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940037309559613*^9, 3.9400373101459017`*^9}},
 CellLabel->"In[354]:=",
 CellID->1187698107,ExpressionUUID->"fa710588-922a-4bbd-8d46-7f148a7cf596"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000229`", ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Most\"\>", ",", "\<\"of\"\>", ",", "\<\"this\"\>", 
     ",", "\<\"Part\"\>", ",", "\<\"assumes\"\>", ",", "\<\"no\"\>", 
     ",", "\<\"specific\"\>", ",", "\<\"prior\"\>", ",", "\<\"knowledge\"\>", 
     ",", "\<\"of\"\>", ",", "\<\"computer\"\>", ",", "\<\"science\"\>", 
     ",", "\<\"Nevertheless\"\>", ",", "\<\"some\"\>", ",", "\<\"of\"\>", 
     ",", "\<\"it\"\>", ",", "\<\"ventures\"\>", ",", "\<\"into\"\>", 
     ",", "\<\"some\"\>", ",", "\<\"fairly\"\>", ",", "\<\"complicated\"\>", 
     ",", "\<\"issues\"\>", ",", "\<\"You\"\>", ",", "\<\"can\"\>", 
     ",", "\<\"probably\"\>", ",", "\<\"ignore\"\>", ",", "\<\"these\"\>", 
     ",", "\<\"issues\"\>", ",", "\<\"unless\"\>", ",", "\<\"they\"\>", 
     ",", "\<\"specifically\"\>", ",", "\<\"affect\"\>", 
     ",", "\<\"programs\"\>", ",", "\<\"you\"\>", ",", "\<\"are\"\>", 
     ",", "\<\"writing\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940037310558864*^9},
 CellLabel->"Out[354]=",
 CellID->240804187,ExpressionUUID->"01fe5995-5621-41d2-a395-e828f2bdd5f4"]
}, Open  ]],

Cell["\<\
We see that we already gain more than an order of magnitude, for this example \
(the difference would be less for smaller list of symbols). As a byproduct, \
our new function is not only more efficient, but also more concise and \
transparent. In Mathematica programming this is very often the case. As one \
of our guiding principles has it, \[OpenCurlyDoubleQuote]Shorter programs \
usually run faster\[CloseCurlyDoubleQuote] (although, of course, there are \
exceptions).
Later we will see how to make this function yet more efficient, for example \
with the help of the Reap-Sow technique.\
\>", "Text",
 CellChangeTimes->{{3.940037322189787*^9, 3.940037339019939*^9}},
 CellID->135524262,ExpressionUUID->"a2e47d48-9eb2-4737-9724-363cc679d2d3"],

Cell["Example: extracting matrix diagonals", "SubitemNumbered",
 CellChangeTimes->{3.940040048655011*^9},
 CellID->1954492976,ExpressionUUID->"1808bc91-793c-4f4e-b47d-c4dcc9134264"],

Cell["\<\
Here we will be concerned with the following problem: given a square matrix, \
we need to extract all of its right diagonals (that is, diagonals going from \
top left to bottom right), and place them in a list. We will consider this \
problem in detail later in chapter VI, where 3 different solutions of it (in \
more general form) will be given. Now let us look at yet another one (not the \
most efficient), based on MapIndexed and using
Apply in few places. In fact, as we will see, this is a good example to show \
many of the techniques discussed so far, and in particular how several \
built-in functions work together.\
\>", "Text",
 CellChangeTimes->{{3.9400400545863323`*^9, 3.940040093616324*^9}},
 CellID->1253583120,ExpressionUUID->"c29ddac4-0504-4482-ae5b-3a02db196c64"],

Cell["This is our test matrix:", "Text",
 CellChangeTimes->{{3.9400400545863323`*^9, 3.940040089540926*^9}, 
   3.940740613173051*^9},
 CellID->1774293490,ExpressionUUID->"f19a2e6a-2836-4896-85bd-e23d99a67a0f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"testmatr", "=", 
   RowBox[{"Array", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"RandomInteger", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "20"}], "}"}], "]"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "5"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testmatr", "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.940040096521194*^9, 3.9400401219189463`*^9}},
 CellLabel->"In[355]:=",
 CellID->411069283,ExpressionUUID->"69b62185-36c4-4749-a63a-03aaf953602e"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"15", "9", "7", "1", "18"},
     {"17", "3", "11", "19", "8"},
     {"7", "6", "13", "1", "10"},
     {"6", "8", "5", "9", "17"},
     {"8", "2", "16", "5", "15"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.940040122448434*^9},
 CellLabel->"Out[356]//MatrixForm=",
 CellID->1612215988,ExpressionUUID->"eecbc7f6-a814-4c5d-8b98-0ecb1533c6aa"]
}, Open  ]],

Cell["\<\
We first note that for any single right diagonal, the difference between its \
elements\[CloseCurlyQuote] indices (which map directly to the position \
indices in a nested list that we use to represent the matrix) is constant for \
all the elements. This means that we can \[OpenCurlyDoubleQuote]tag\
\[CloseCurlyDoubleQuote] matrix elements by these differences and then \
collect together those for which these \[OpenCurlyDoubleQuote]tags\
\[CloseCurlyDoubleQuote] will be the same. The only catch is that we have to \
ensure that the elements
of the diagonals collected this way will be in right order. For our case, \
fortunately, this will be so due to the (depth-first) way how MapIndexed \
traverses the expressions.\
\>", "Text",
 CellChangeTimes->{{3.9400401338010273`*^9, 3.940040150346119*^9}},
 CellID->1712936117,ExpressionUUID->"70fc0f65-0885-4046-a5e6-65062358c456"],

Cell["So, let us start by \[OpenCurlyDoubleQuote]tagging\
\[CloseCurlyDoubleQuote]:", "Text",
 CellChangeTimes->{{3.9400401338010273`*^9, 3.940040147382758*^9}, 
   3.940740613192958*^9},
 CellID->481459614,ExpressionUUID->"16d8ea83-5d1b-4fc1-a813-793947d9b955"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step1", "=", 
  RowBox[{"MapIndexed", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Subtract", "@@", "#2"}], ",", "#1"}], "}"}], "&"}], ",", 
    "testmatr", ",", 
    RowBox[{"{", "2", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940040157334035*^9, 3.9400401757057257`*^9}},
 CellLabel->"In[357]:=",
 CellID->1515742482,ExpressionUUID->"59cf533c-ad2b-406c-90a3-9787ff5496f1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "15"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "2"}], ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "3"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "4"}], ",", "18"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "17"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "11"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "2"}], ",", "19"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "3"}], ",", "8"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "13"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "2"}], ",", "10"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "17"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "16"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "15"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940040176066772*^9},
 CellLabel->"Out[357]=",
 CellID->1374603892,ExpressionUUID->"cf898886-21a7-4c9f-9c8b-7340558b6597"]
}, Open  ]],

Cell["\<\
We used Apply to give to Subtract the interior of the position list for each \
element - that is, a sequence of vertical and horizontal positions rather \
than a list of them (which is the second argument that MapIndexed supplies to \
the function being mapped). We also see that we have to map on level {2}, \
since this is the level of individual matrix elements.\
\>", "Text",
 CellChangeTimes->{{3.9400402091707087`*^9, 3.940040220937441*^9}},
 CellID->1678024965,ExpressionUUID->"e301fea9-1f0e-41b4-b497-9a2ad0a756f2"],

Cell["\<\
There are extra list brackets on level 1 which reflect the original \
separation of elements into rows, but which we don\[CloseCurlyQuote] t need \
any more. Thus, let us use Flatten on level 1:\
\>", "Text",
 CellChangeTimes->{{3.9400402091707087`*^9, 3.940040222881714*^9}, 
   3.940740613212878*^9},
 CellID->2092985420,ExpressionUUID->"927549ec-1f83-4aea-af92-888440bf21d1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step2", "=", 
  RowBox[{"Flatten", "[", 
   RowBox[{"step1", ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940040225645239*^9, 3.940040231102186*^9}},
 CellLabel->"In[358]:=",
 CellID->1349923126,ExpressionUUID->"59293e47-9094-4e95-ba3f-a381036f3c32"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2"}], ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4"}], ",", "18"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "11"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2"}], ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3"}], ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2"}], ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "15"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400402315547256`*^9},
 CellLabel->"Out[358]=",
 CellID->1860314404,ExpressionUUID->"a5282f53-e8b0-4db5-857c-3478590ff69d"]
}, Open  ]],

Cell["\<\
We will now sort this list with respect to the \[OpenCurlyDoubleQuote]tag\
\[CloseCurlyDoubleQuote], to make the elements of the same diagonal be \
adjacent to each other:\
\>", "Text",
 CellChangeTimes->{{3.940040241645533*^9, 3.940040247212487*^9}, 
   3.94074061323271*^9},
 CellID->1089771355,ExpressionUUID->"f4560318-1b14-47a1-b271-a67302963315"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step3", "=", 
  RowBox[{"Sort", "[", 
   RowBox[{"step2", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", "#1", "]"}], ">", 
      RowBox[{"First", "[", "#2", "]"}]}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940040249119965*^9, 3.9400402612963953`*^9}},
 CellLabel->"In[359]:=",
 CellID->1747392270,ExpressionUUID->"17dba1e6-d086-4dcc-8557-8e6ec248fe2b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "11"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2"}], ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2"}], ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2"}], ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3"}], ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4"}], ",", "18"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400402616218643`*^9},
 CellLabel->"Out[359]=",
 CellID->1474358711,ExpressionUUID->"cb928ded-d944-4b74-a5ee-4cd6bc4c84e2"]
}, Open  ]],

Cell["\<\
Notice the use of Sort with a user-defined pure sorting criteria (in this \
case, sorting according to the \[OpenCurlyDoubleQuote]tag\
\[CloseCurlyDoubleQuote] which is a first element of each sublist).\
\>", "Text",
 CellChangeTimes->{{3.940040270906015*^9, 3.940040276443693*^9}},
 CellID->1880536691,ExpressionUUID->"9737f05b-ed49-43d7-8c56-25b20328e4f9"],

Cell["\<\
This was actually a tricky step since here we are dependent on a particular \
way Sort works: there was no guarantee in principle that in the process of \
sorting it will not change the order of elements with the same value of the \
\[OpenCurlyDoubleQuote]tag\[CloseCurlyDoubleQuote]. Fortunately for us, it \
works this way.\
\>", "Text",
 CellChangeTimes->{{3.940040270906015*^9, 3.940040283605792*^9}},
 CellID->889137231,ExpressionUUID->"a65e76b7-5016-40c4-80ed-1d682f725fac"],

Cell["\<\
As a next step, we will use Split to group together the elements \
corresponding to the same diagonal:\
\>", "Text",
 CellChangeTimes->{{3.940040270906015*^9, 3.9400402819387712`*^9}, 
   3.940740613252672*^9},
 CellID->515773488,ExpressionUUID->"01f552bd-6dd9-4243-b0ae-31e21c656f9f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step4", "=", 
  RowBox[{"Split", "[", 
   RowBox[{"step3", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", "#1", "]"}], "==", 
      RowBox[{"First", "[", "#2", "]"}]}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9400402858020563`*^9, 3.940040298376669*^9}},
 CellLabel->"In[360]:=",
 CellID->1705973671,ExpressionUUID->"365d1c57-5afd-42a3-a20e-1b772ec49a81"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"4", ",", "8"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "6"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "16"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "7"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "17"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "15"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "13"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "15"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "17"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "11"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "9"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "2"}], ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "2"}], ",", "19"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "2"}], ",", "7"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "3"}], ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "3"}], ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4"}], ",", "18"}], "}"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940040298655506*^9},
 CellLabel->"Out[360]=",
 CellID->33846901,ExpressionUUID->"47b7259e-2e5e-4bdf-b85c-f691f7cbecc5"]
}, Open  ]],

Cell["\<\
The next thing to do now is to extract the second element of each small \
sublist (which is the original matrix element) while preserving the structure \
of larger sublists which form the diagonals. This can be done by Mapping the \
second element extraction on the level {2} of our nested list:\
\>", "Text",
 CellChangeTimes->{{3.940040309649398*^9, 3.940040316648675*^9}, 
   3.940740613272505*^9},
 CellID->1149780767,ExpressionUUID->"98be897e-3653-49c9-8dcc-bf8e12c61c9a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step5", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"[", "2", "]"}], "]"}], "&"}], ",", "step4", ",", 
    RowBox[{"{", "2", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940040320418407*^9, 3.940040330506315*^9}},
 CellLabel->"In[361]:=",
 CellID->1435915317,ExpressionUUID->"db4df997-1b12-4fef-b39f-10dfbac8803e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "8", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"16", ",", "8", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5", ",", "6", ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "9", ",", "13", ",", "3", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17", ",", "1", ",", "11", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "19", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "1"}], "}"}], ",", 
   RowBox[{"{", "18", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940040330847248*^9},
 CellLabel->"Out[361]=",
 CellID->1539872139,ExpressionUUID->"99c6f963-ac4b-43e0-a6ba-bac8a0a36026"]
}, Open  ]],

Cell["\<\
Another (and more efficient) way to do the same is to use Part with an \
extended functionality given by using the All specification:\
\>", "Text",
 CellChangeTimes->{{3.940040338974888*^9, 3.940040340601055*^9}, 
   3.940740613292186*^9},
 CellID->1305610176,ExpressionUUID->"0558be6f-5e5b-4298-8467-7538a15767ba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step51", "=", 
  RowBox[{"Part", "[", 
   RowBox[{"step4", ",", "All", ",", "All", ",", "2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940040344565358*^9, 3.940040352931222*^9}},
 CellLabel->"In[362]:=",
 CellID->1498071789,ExpressionUUID->"6a8937cd-56a8-4f15-b055-6550f6aa7c5b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "8", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"16", ",", "8", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5", ",", "6", ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "9", ",", "13", ",", "3", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17", ",", "1", ",", "11", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "19", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "1"}], "}"}], ",", 
   RowBox[{"{", "18", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940040353371748*^9},
 CellLabel->"Out[362]=",
 CellID->2070269207,ExpressionUUID->"a6f4d33d-587d-4b75-8c3c-2a546f5647e0"]
}, Open  ]],

Cell["\<\
Since we are learning functional programming, I will keep the variant with \
Map in a final implementation, but again, the last one is more efficient and \
in principle should be used instead (if we were ultimately for efficiency, we \
should have chosen a different method in the first place - see chapter VI for \
details. Also, the use of Sort with a user-defined sorting function like \
above is not optimal). \
\>", "Text",
 CellChangeTimes->{{3.940040362120562*^9, 3.940040378002365*^9}},
 CellID->1484513355,ExpressionUUID->"6e264694-2f68-4c8b-b897-99d5086d300e"],

Cell["\<\
The resulting lists are pretty much the diagonals, as you can see, but the \
elements in them are in reverse order (this is conventional. Our convention \
is that the diagonal starts at the top left corner). So, the last thing we \
have to do is to Map the Reverse function on our diagonal list:\
\>", "Text",
 CellChangeTimes->{{3.940040362120562*^9, 3.940040383322304*^9}, 
   3.940740613311936*^9},
 CellID->110067553,ExpressionUUID->"de6d5e62-c287-400e-9fd2-106b369a9301"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"Reverse", "/@", "step5"}]}]], "Input",
 CellChangeTimes->{{3.9400403882616253`*^9, 3.9400403958332663`*^9}},
 CellLabel->"In[363]:=",
 CellID->326698448,ExpressionUUID->"39c4c21c-4a80-49a4-8823-ea2f74102dfb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "8", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17", ",", "6", ",", "5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "3", ",", "13", ",", "9", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "11", ",", "1", ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "19", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "8"}], "}"}], ",", 
   RowBox[{"{", "18", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.94004039625904*^9},
 CellLabel->"Out[363]=",
 CellID->1812344973,ExpressionUUID->"51a6600d-9536-4985-b649-6fd0cd785711"]
}, Open  ]],

Cell["Now we combine everything into a function:", "Text",
 CellChangeTimes->{3.940040403834539*^9, 3.940740613331566*^9},
 CellID->173912163,ExpressionUUID->"c033b43c-8837-4938-a503-196e0752901f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "matrixRightDiags", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"matrixRightDiags", "[", 
    RowBox[{"matr_", "?", "MatrixQ"}], "]"}], "/;", 
   RowBox[{"Equal", "@@", 
    RowBox[{"Dimensions", "[", "matr", "]"}]}]}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{"Reverse", ",", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "&"}], ",", 
      RowBox[{"Split", "[", 
       RowBox[{
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"MapIndexed", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Subtract", "@@", "#2"}], ",", "#1"}], "}"}], "&"}], 
              ",", "matr", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], ",", "1"}], "]"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"First", "[", "#1", "]"}], ">", 
            RowBox[{"First", "[", "#2", "]"}]}], "&"}]}], "]"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"First", "[", "#1", "]"}], "==", 
          RowBox[{"First", "[", "#2", "]"}]}], "&"}]}], "]"}], ",", 
      RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940040406080821*^9, 3.9400404806605043`*^9}, {
  3.9400406146858597`*^9, 3.9400406149695168`*^9}},
 CellLabel->"In[367]:=",
 CellID->541625000,ExpressionUUID->"76bec474-9e10-4fc5-a740-841baf151760"],

Cell["\<\
Notice that we used the MatrixQ predicate to test that the input is a matrix, \
used a conditional pattern with the condition that the matrix is a square \
matrix, inside the condition used a built-in Dimensions which gives \
dimensions for a tensor, in a list, and used Apply another time to \
\[OpenCurlyDoubleQuote]eat up\[CloseCurlyDoubleQuote] the List head and give \
toEqual the sequence of matrix dimensions rather than a list.\
\>", "Text",
 CellChangeTimes->{{3.940040490641911*^9, 3.940040500597633*^9}},
 CellID->1378086202,ExpressionUUID->"76621907-7b10-42ef-a00b-4f6b1a4c8297"],

Cell["So, we check once again:", "Text",
 CellChangeTimes->{{3.940040490641911*^9, 3.940040499123474*^9}, 
   3.940740613351182*^9},
 CellID->1622141694,ExpressionUUID->"3721c78b-44f3-4a6b-a08d-f7d0605ea0d9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"matrixRightDiags", "[", "testmatr", "]"}]], "Input",
 CellChangeTimes->{{3.940040502994266*^9, 3.940040512479332*^9}},
 CellLabel->"In[369]:=",
 CellID->1038456096,ExpressionUUID->"e23bbf0b-c572-4bd1-a02d-1d4e8f536383"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "8", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17", ",", "6", ",", "5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "3", ",", "13", ",", "9", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "11", ",", "1", ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "19", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "8"}], "}"}], ",", 
   RowBox[{"{", "18", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400405128006983`*^9, 3.940040618664353*^9},
 CellLabel->"Out[369]=",
 CellID->1545250473,ExpressionUUID->"2992e1ef-6a09-4a00-9ddd-834caba31e2f"]
}, Open  ]],

Cell["\<\
This seems like a lot of work for something which can be in principle done \
with a doubly nested loop. But believe it or not, in practice, and with some \
experience, it is quite fast to write functions like this. Also, debugging is \
much easier than for a procedural version, because each line of code does a \
complete transformation and can be tested separately. Also (take it on faith \
for now, or have a look at chapter VI), for this particular problem the loop \
version will be terribly slow in Mathematica, even compared with the present \
one (not the most efficient). And in fact, if we think about it, MapIndexed \
used on level {2} represents exactly a nested loop, but done internally by \
Mathematica. Finally, this is a nice example of the interplay of different \
techniques (conditional patterns, mapping, level specification, Sort and \
Split with user-defined functions, pure functions) that we discussed in \
separation before.\
\>", "Text",
 CellChangeTimes->{{3.940040663432932*^9, 3.9400406993170443`*^9}},
 CellID->1504956540,ExpressionUUID->"f41cecd5-8bb5-4c42-9511-bb1d456590c4"],

Cell["\<\
As an exercise, you may consider the case of left diagonals (that is, those \
which start at bottom left and go to top right).\
\>", "Text",
 CellChangeTimes->{{3.940040663432932*^9, 3.94004070146282*^9}},
 CellID->1328324811,ExpressionUUID->"b33ad7bc-6948-438a-9b0a-4511e60c81d7"],

Cell["Supplying a sequence of arguments to functions", "ItemNumbered",
 CellChangeTimes->{3.940040721247944*^9},
 CellID->1564824696,ExpressionUUID->"9db0d5d3-b1e2-440f-93ea-0935d5695aff"],

Cell["\<\
There is one more very common use of Apply, which we will discuss now. This \
is when we have a partial list of arguments for some function stored in a \
separate list, and want to use that list in a function. As a simple example, \
let us define a function of five variables, which simply sums them up:\
\>", "Text",
 CellChangeTimes->{{3.9400407290804863`*^9, 3.940040733574504*^9}},
 CellID->571810305,ExpressionUUID->"5c2392d3-42f2-4d46-879f-a8c49adfa25f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{
   "addFive", ",", "x", ",", "y", ",", "z", ",", "t", ",", "s", ",", "a", ",",
     "b"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addFive", "[", 
    RowBox[{"x_", ",", "y_", ",", "z_", ",", "t_", ",", "s_"}], "]"}], ":=", 
   RowBox[{"x", "+", "y", "+", "z", "+", "t", "+", "s"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9400407358773203`*^9, 3.9400407546054697`*^9}},
 CellLabel->"In[370]:=",
 CellID->1768319153,ExpressionUUID->"f99afa3b-e860-41f8-af96-cde36f1a5d34"],

Cell["\<\
Suppose that we want to keep the first and the last arguments fixed, say at \
<a> and <b>. Now, say we have a list of 3-number lists:\
\>", "Text",
 CellChangeTimes->{{3.940040763794572*^9, 3.940040765376067*^9}},
 CellID->2103751883,ExpressionUUID->"a4833eb5-157d-4fef-95dd-92e752e30967"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "10", "}"}], ",", 
    RowBox[{"{", "3", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.94004076933813*^9, 3.940040778665238*^9}},
 CellLabel->"In[372]:=",
 CellID->800201466,ExpressionUUID->"de0919ab-3cd1-4b6d-a843-4dabbffaf865"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"8", ",", "10", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "5", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "10", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "1", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "10", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "10", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "6", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "9", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940040778963266*^9},
 CellLabel->"Out[372]=",
 CellID->1383028664,ExpressionUUID->"23739932-1fd5-456c-9a8e-9e9ecab4725c"]
}, Open  ]],

Cell[TextData[{
 "We would like to use our function on each sub-list, so that the numbers in \
the sublist will fill the three slots for the variables in the middle. In \
other words, we would like to Map our function on the list above, but in a \
way somewhat different from what we discussed before. As in the previous \
discussion (section ",
 ButtonBox["5.2.2.7",
  BaseStyle->"Hyperlink",
  ButtonData->"5.2.2.7"],
 "), one solution would be to define an auxiliary function, which takes a \
list of three numbers:"
}], "Text",
 CellChangeTimes->{{3.9400407876596193`*^9, 3.940040820581749*^9}},
 CellID->874303778,ExpressionUUID->"e505681e-b429-4edb-887f-369d5f86038e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "g", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"g", "[", "lst_List", "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "lst", "]"}], "==", "3"}]}], ":=", 
   RowBox[{"addFive", "[", 
    RowBox[{"a", ",", 
     RowBox[{"lst", "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"lst", "[", 
      RowBox[{"[", "2", "]"}], "]"}], ",", 
     RowBox[{"lst", "[", 
      RowBox[{"[", "3", "]"}], "]"}], ",", "b"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940040824703323*^9, 3.94004085306288*^9}},
 CellLabel->"In[373]:=",
 CellID->7478514,ExpressionUUID->"c98f5fa2-b85f-459a-bc7d-b2ec29f068a2"],

Cell["Now we can Map <g>:", "Text",
 CellChangeTimes->{3.940040863472062*^9},
 CellID->1556299326,ExpressionUUID->"a8993476-3154-4c8f-a7a4-3cb507217114"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "/@", "testlist"}]], "Input",
 CellChangeTimes->{{3.940040864991768*^9, 3.940040868129075*^9}},
 CellLabel->"In[375]:=",
 CellID->66014537,ExpressionUUID->"cc85f7c8-0c5e-4ce9-bedf-1470f1e43951"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"19", "+", "a", "+", "b"}], ",", 
   RowBox[{"11", "+", "a", "+", "b"}], ",", 
   RowBox[{"20", "+", "a", "+", "b"}], ",", 
   RowBox[{"24", "+", "a", "+", "b"}], ",", 
   RowBox[{"15", "+", "a", "+", "b"}], ",", 
   RowBox[{"24", "+", "a", "+", "b"}], ",", 
   RowBox[{"15", "+", "a", "+", "b"}], ",", 
   RowBox[{"19", "+", "a", "+", "b"}], ",", 
   RowBox[{"15", "+", "a", "+", "b"}], ",", 
   RowBox[{"19", "+", "a", "+", "b"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940040868432754*^9},
 CellLabel->"Out[375]=",
 CellID->1867415687,ExpressionUUID->"a2d13b8d-1b86-420e-a958-0cab35ec2f16"]
}, Open  ]],

Cell["\<\
The problems with this solution are the same as with its analog that we \
discussed before. Before, we managed to find an alternative by using pure \
functions. Can we do the same here? To answer this, let us make our first \
attempt:\
\>", "Text",
 CellChangeTimes->{{3.940040892964449*^9, 3.9400409004977007`*^9}},
 CellID->1141772707,ExpressionUUID->"95a2df1e-cfe1-42bf-8b62-54b5c09017ce"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"addFive", "[", 
     RowBox[{"a", ",", "#", ",", "b"}], "]"}], "&"}], ",", "testlist"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940040902870491*^9, 3.940040911436322*^9}},
 CellLabel->"In[376]:=",
 CellID->1728702682,ExpressionUUID->"79805158-892e-40cd-9719-7a25e6544037"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"addFive", "[", 
    RowBox[{"a", ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "10", ",", "1"}], "}"}], ",", "b"}], "]"}], ",", 
   RowBox[{"addFive", "[", 
    RowBox[{"a", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "6"}], "}"}], ",", "b"}], "]"}], ",", 
   RowBox[{"addFive", "[", 
    RowBox[{"a", ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "5", ",", "8"}], "}"}], ",", "b"}], "]"}], ",", 
   RowBox[{"addFive", "[", 
    RowBox[{"a", ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "10", ",", "8"}], "}"}], ",", "b"}], "]"}], ",", 
   RowBox[{"addFive", "[", 
    RowBox[{"a", ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "1", ",", "6"}], "}"}], ",", "b"}], "]"}], ",", 
   RowBox[{"addFive", "[", 
    RowBox[{"a", ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "10", ",", "7"}], "}"}], ",", "b"}], "]"}], ",", 
   RowBox[{"addFive", "[", 
    RowBox[{"a", ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "1", ",", "9"}], "}"}], ",", "b"}], "]"}], ",", 
   RowBox[{"addFive", "[", 
    RowBox[{"a", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "10", ",", "7"}], "}"}], ",", "b"}], "]"}], ",", 
   RowBox[{"addFive", "[", 
    RowBox[{"a", ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "6", ",", "3"}], "}"}], ",", "b"}], "]"}], ",", 
   RowBox[{"addFive", "[", 
    RowBox[{"a", ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "9", ",", "4"}], "}"}], ",", "b"}], "]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940040911686946*^9},
 CellLabel->"Out[376]=",
 CellID->75647317,ExpressionUUID->"56fa3563-947d-4d08-88e2-ec224abc34b8"]
}, Open  ]],

Cell["\<\
We see now that we are almost there. The only stumbling block is the presence \
of a List head (curly braces) inside, which we would like to remove. We also \
know that Apply removes the head of an expression. But usually, it \
substitutes it by another (new) head, while here we would like none. It turns \
out that there exists a special head in Mathematica, which means exactly \
\[OpenCurlyDoubleQuote]no head\[CloseCurlyDoubleQuote]. It is <Sequence>. So, \
our solution would be to Apply Sequence:\
\>", "Text",
 CellChangeTimes->{{3.940040921565765*^9, 3.940040934860742*^9}},
 CellID->94137795,ExpressionUUID->"0d264d07-0b05-4e69-82d6-28385fccdf7d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"addFive", "[", 
     RowBox[{"a", ",", 
      RowBox[{"Sequence", "@@", "#"}], ",", "b"}], "]"}], "&"}], ",", 
   "testlist"}], "]"}]], "Input",
 CellChangeTimes->{{3.940040937803728*^9, 3.940040960819437*^9}},
 CellLabel->"In[378]:=",
 CellID->2100718146,ExpressionUUID->"1ac4dd04-1d7c-477f-bfc0-4963d594cc58"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"19", "+", "a", "+", "b"}], ",", 
   RowBox[{"11", "+", "a", "+", "b"}], ",", 
   RowBox[{"20", "+", "a", "+", "b"}], ",", 
   RowBox[{"24", "+", "a", "+", "b"}], ",", 
   RowBox[{"15", "+", "a", "+", "b"}], ",", 
   RowBox[{"24", "+", "a", "+", "b"}], ",", 
   RowBox[{"15", "+", "a", "+", "b"}], ",", 
   RowBox[{"19", "+", "a", "+", "b"}], ",", 
   RowBox[{"15", "+", "a", "+", "b"}], ",", 
   RowBox[{"19", "+", "a", "+", "b"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.9400409497363787`*^9, 3.940040961096614*^9}},
 CellLabel->"Out[378]=",
 CellID->2088669496,ExpressionUUID->"81dfd2f5-e3d1-46f4-bda4-cd7b5452714b"]
}, Open  ]],

Cell[TextData[{
 "Now it works and has the same advantages as the solution discussed before \
(section ",
 ButtonBox["5.2.2.7",
  BaseStyle->"Hyperlink",
  ButtonData->"5.2.2.7"],
 "). I hasten to comment though that if one needs to Map function on a long \
list like here (or much longer still), sometimes there are better solutions \
available, like the one using built-in Thread (to be discussed below)."
}], "Text",
 CellChangeTimes->{{3.940040969790123*^9, 3.940040982910721*^9}},
 CellID->538992261,ExpressionUUID->"bf49a2f7-1170-40c8-8013-b96101fc0990"],

Cell["Using Apply in conjunction with Map", "ItemNumbered",
 CellChangeTimes->{3.940040995571618*^9},
 CellTags->"5.2.7.5",
 CellID->1800072686,ExpressionUUID->"8b1d5b7d-17cd-4004-b5b1-e60c80253f83"],

Cell[TextData[{
 "Apply is often used in conjunction with Map. The typical situation is that \
we need the operation ",
 StyleBox["Apply[function,expression]",
  FontWeight->"Bold"],
 " to be Mapped on some list."
}], "Text",
 CellChangeTimes->{{3.940041002794711*^9, 3.940041010886403*^9}},
 CellID->72014666,ExpressionUUID->"99860c9e-6754-4605-af87-2a176f657708"],

Cell["\<\
As an example, consider the following problem: we have a list of lists of \
numbers. The sublists have various length. We have to multiply all the \
numbers in each sublist. For example:\
\>", "Text",
 CellChangeTimes->{{3.940041002794711*^9, 3.940041012846616*^9}},
 CellID->1813456643,ExpressionUUID->"81bde4e0-7486-4a49-935b-206a4f62a4b6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "testlist", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "10", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "6"}], "}"}], "]"}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9400410154763937`*^9, 3.9400410423972673`*^9}},
 CellLabel->"In[379]:=",
 CellID->1699830755,ExpressionUUID->"5accb956-1949-4935-8c69-4fc749863a26"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"6", ",", "9", ",", "8", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "4", ",", "4", ",", "5", ",", "3"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "1", ",", "10", ",", "3", ",", "2", ",", "2"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "8", ",", "8", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "9", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "4", ",", "9", ",", "7", ",", "3"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "8", ",", "5", ",", "9", ",", "10"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940041043599124*^9},
 CellLabel->"Out[380]=",
 CellID->602455351,ExpressionUUID->"3b2ff281-edca-41a8-956d-3528a14b0855"]
}, Open  ]],

Cell["\<\
To multiply numbers in a single list, we use Apply[Times, list]. Now we have \
to Map it:\
\>", "Text",
 CellChangeTimes->{3.940041052502277*^9, 3.9400411757235622`*^9},
 CellID->1289514180,ExpressionUUID->"59a43009-8c1e-4b8a-8d07-d14c5501bba9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Apply", "[", 
     RowBox[{"Times", ",", "#"}], "]"}], "&"}], ",", "testlist"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940041054728669*^9, 3.9400410624415407`*^9}, 
   3.940041180279792*^9},
 CellLabel->"In[384]:=",
 CellID->35323399,ExpressionUUID->"01358285-a982-4f42-ae02-ab70d9f6984d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2160", ",", "2880", ",", "1200", ",", "16", ",", "2304", ",", "108", ",", 
   "56", ",", "56", ",", "9072", ",", "21600"}], "}"}]], "Output",
 CellChangeTimes->{3.940041062698262*^9, 3.940041180593948*^9},
 CellLabel->"Out[384]=",
 CellID->998770715,ExpressionUUID->"cf7fd903-4a4f-4b45-bbb9-da3d62e226d8"]
}, Open  ]],

Cell["\<\
The same can be done using the extended syntax for Apply, and supplying level \
as a third argument:\
\>", "Text",
 CellChangeTimes->{3.94004107476153*^9, 3.9407406133737097`*^9},
 CellID->2053072804,ExpressionUUID->"2f0b57d8-912b-4284-a9c6-8c13fd3cff7b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Times", ",", "testlist", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.940041076794085*^9, 3.9400410808094482`*^9}, 
   3.940041183474881*^9},
 CellLabel->"In[385]:=",
 CellID->1149007411,ExpressionUUID->"e862e078-b430-4301-b015-6291571e0a15"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2160", ",", "2880", ",", "1200", ",", "16", ",", "2304", ",", "108", ",", 
   "56", ",", "56", ",", "9072", ",", "21600"}], "}"}]], "Output",
 CellChangeTimes->{3.9400410811457872`*^9, 3.940041183804933*^9},
 CellLabel->"Out[385]=",
 CellID->1883063536,ExpressionUUID->"c9befcce-e7fb-464b-94b8-3ffbdd79aad7"]
}, Open  ]],

Cell["\<\
This operation is so common that a special shorthand notation exists for it: \
Map[Apply[f, #]&, expr]==Apply[f, expr, 1]==(f@@@expr). In our case:\
\>", "Text",
 CellChangeTimes->{{3.9400410919948072`*^9, 3.940041110424719*^9}},
 CellID->1948047258,ExpressionUUID->"2b4f68bc-68ab-4a55-8a8c-7b004ec7651f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Times", "@@@", "testlist"}]], "Input",
 CellChangeTimes->{{3.940041114894659*^9, 3.9400411180632057`*^9}, 
   3.940041186789461*^9},
 CellLabel->"In[386]:=",
 CellID->788742137,ExpressionUUID->"c29daf6e-608a-4dbb-be63-ed7472e9ac59"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2160", ",", "2880", ",", "1200", ",", "16", ",", "2304", ",", "108", ",", 
   "56", ",", "56", ",", "9072", ",", "21600"}], "}"}]], "Output",
 CellChangeTimes->{3.940041118319888*^9, 3.940041187092201*^9},
 CellLabel->"Out[386]=",
 CellID->1496418952,ExpressionUUID->"9a459688-6259-4d6b-bd15-eb8692892fb5"]
}, Open  ]],

Cell["\<\
Once again, one should be careful with the precedence, and generally the \
parentheses around the whole expression can not be dropped. For Mapping on \
the level(s) deeper than the first, there is no built-in shorthand notation, \
and one has to use Map with a proper level specification, or Apply with a \
third argument (again with a proper level specification).\
\>", "Text",
 CellChangeTimes->{{3.9400412196160183`*^9, 3.940041235476822*^9}},
 CellID->1054530502,ExpressionUUID->"791312d7-ca28-4da0-bde8-51fe4fd8e1a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["When short-hands let us down: the Heads option", "Subsubsection",
 CellChangeTimes->{3.940041244979721*^9},
 CellID->1690555036,ExpressionUUID->"7dbf247c-90d8-4fee-ac69-8aee2cc92f62"],

Cell["\<\
For all the functions described above, just as for functions such as Cases, \
Position etc. described in the previous chapter, there exists the Heads \
option. This option tells whether or not to make heads of expressions visible \
for these commands. Let me illustrate this on a few examples:\
\>", "Text",
 CellChangeTimes->{{3.940041251776779*^9, 3.940041265421565*^9}, 
   3.940740613393725*^9},
 CellID->1949840242,ExpressionUUID->"a252ffc6-7c73-4f39-abae-41993dafaf04"],

Cell["With Map:", "Text",
 CellChangeTimes->{{3.940041251776779*^9, 3.940041260770091*^9}, 
   3.940740613412839*^9},
 CellID->478782088,ExpressionUUID->"5433d0f5-32bc-4c0a-b95f-bdb21bc8de20"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "}"}], ",", 
   RowBox[{"Heads", "->", "True"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.940041273312435*^9, 3.9400412984202414`*^9}},
 CellLabel->"In[387]:=",
 CellID->1842727320,ExpressionUUID->"cfd47608-6c8d-480b-9e95-ef81223b41a1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "6"}], "}"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400412987856913`*^9},
 CellLabel->"Out[387]=",
 CellID->1378685918,ExpressionUUID->"66b45122-19b7-4895-9280-8171adc4920c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "List", "]"}], "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "6"}], "}"}], "]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.940041298805094*^9},
 CellLabel->"Out[388]=",
 CellID->225672696,ExpressionUUID->"e40362ca-37ae-4781-b1d7-daa293e02183"]
}, Open  ]],

Cell["With MapIndexed", "Text",
 CellChangeTimes->{3.940041328400814*^9},
 CellID->66817669,ExpressionUUID->"16996334-3025-4f52-a550-a5c4172ad440"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"MapIndexed", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"MapIndexed", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "}"}], ",", 
   RowBox[{"Heads", "->", "True"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.9400413355493727`*^9, 3.9400413418383493`*^9}},
 CellLabel->"In[389]:=",
 CellID->2018099149,ExpressionUUID->"d92647b8-43f8-46dc-9610-efa8e0713bdd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", "1", "}"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400413422951097`*^9},
 CellLabel->"Out[389]=",
 CellID->1077466854,ExpressionUUID->"ec053ce6-3bd2-4f5a-9185-8d5e7757d8e2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"List", ",", 
    RowBox[{"{", "0", "}"}]}], "]"}], "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", "1", "}"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.940041342314045*^9},
 CellLabel->"Out[390]=",
 CellID->1403303674,ExpressionUUID->"0e20d4e5-1305-4c41-a41a-7611030b4d0b"]
}, Open  ]],

Cell["With Scan", "Text",
 CellChangeTimes->{3.940041354729129*^9},
 CellID->1390124833,ExpressionUUID->"a5869912-c087-4185-b533-e1265a3f2820"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"parts", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Scan", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"AppendTo", "[", 
      RowBox[{"parts", ",", "#"}], "]"}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "1", "}"}], ",", 
      RowBox[{"{", "2", "}"}]}], "}"}], ",", "Infinity"}], "]"}], 
  ";"}], "\[IndentingNewLine]", "parts"}], "Input",
 CellChangeTimes->{{3.940041359125613*^9, 3.9400413800339317`*^9}},
 CellLabel->"In[391]:=",
 CellID->1665821002,ExpressionUUID->"2f3d63f6-4758-415e-aa24-12b501686540"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"{", "1", "}"}], ",", "2", ",", 
   RowBox[{"{", "2", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940041380642496*^9},
 CellLabel->"Out[393]=",
 CellID->420261781,ExpressionUUID->"97dd5634-2335-45c4-a7c0-e1636c6ddb65"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"parts", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Scan", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"AppendTo", "[", 
      RowBox[{"parts", ",", "#"}], "]"}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "1", "}"}], ",", 
      RowBox[{"{", "2", "}"}]}], "}"}], ",", "Infinity", ",", 
    RowBox[{"Heads", "->", "True"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", "parts"}], "Input",
 CellChangeTimes->{{3.940041391029736*^9, 3.940041393778672*^9}},
 CellLabel->"In[394]:=",
 CellID->266038284,ExpressionUUID->"5aadd86d-1443-47c3-9b82-9021b0b401ef"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"List", ",", "List", ",", "1", ",", 
   RowBox[{"{", "1", "}"}], ",", "List", ",", "2", ",", 
   RowBox[{"{", "2", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400413941235723`*^9},
 CellLabel->"Out[396]=",
 CellID->658126780,ExpressionUUID->"bceb7be5-cb46-49d2-9a6e-474eac1fdce7"]
}, Open  ]],

Cell["\<\
What these examples illustrate is that setting Heads -> True makes the heads \
of (sub) expressions visible to Map, MapIndexed, Scan, MapAll or Apply (the \
latter with explicit levspec given).\
\>", "Text",
 CellChangeTimes->{{3.940041420996831*^9, 3.940041428595203*^9}},
 CellID->1359192971,ExpressionUUID->"94ff8138-81c5-48cf-b121-2bb7ef0fc2a2"],

Cell["\<\
Note that for the above function, the default is Heads -> False. It is not \
possible to set this option when shorthands like /@, @@ , @@@ are used.\
\>", "Text",
 CellChangeTimes->{{3.940041420996831*^9, 3.940041438856786*^9}},
 CellID->984782273,ExpressionUUID->"4853eb37-b781-4d05-8974-35016406e6f0"],

Cell["\<\
If you will be the only user of a particular program you are writing, it is \
perhaps less important to keep track of this option settings since you can \
always correct things yourself. Besides, since the default is Heads -> False, \
which in the overwhelming majority of cases is what is needed, there seems \
nothing to worry about. However, if your program will be used by someone \
else, it is essential to indicate the Heads-> False option explicitly (even \
though this is the default) every time that you use one of the above \
commands. The point is that if you don\[CloseCurlyQuote]t, and the person who \
uses your function (perhaps, yourself a few months later!) has set Heads -> \
True globally by SetOptions command (which is a bad practice by the way), for \
Map or Apply etc, then your program will use that option instead, and \
consequently will probably not work correctly. This issue is especially \
important when writing packages - the custom extensions of Mathematica to \
some domain. And for this reason, it is best to avoid short-hand notation for \
Map, Apply etc in the final version of the code, since you can not set this \
option in the short-hand notation.\
\>", "Text",
 CellChangeTimes->{{3.940041420996831*^9, 3.940041476426601*^9}},
 CellID->917671841,ExpressionUUID->"fcb26bf5-3069-4159-9561-5248e993842d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generalizations", "Subsection",
 CellChangeTimes->{3.940041485708374*^9},
 CellID->2091942566,ExpressionUUID->"11b88833-5c0f-4ea6-8870-e37767532491"],

Cell[CellGroupData[{

Cell["Thread", "Subsubsection",
 CellChangeTimes->{3.9400414911001368`*^9},
 CellID->676438078,ExpressionUUID->"41050359-68f3-4b06-9698-b3f107b446a3"],

Cell["\<\
This function threads a function of several variables over the list in which \
first sublist gives all first arguments, second gives second arguments, etc. \
For example:\
\>", "Text",
 CellChangeTimes->{{3.94004149753843*^9, 3.940041499823618*^9}},
 CellID->116349728,ExpressionUUID->"28228c69-5220-497b-9d29-eca70ad838e3"],

Cell["Initial examples", "ItemNumbered",
 CellChangeTimes->{3.940041510048039*^9},
 CellID->207140778,ExpressionUUID->"8891ad61-e5e3-445c-a5dc-5ed9466321ad"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "f", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Thread", "[", 
  RowBox[{"f", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"11", ",", "20"}], "]"}]}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.940041513958563*^9, 3.940041524708226*^9}},
 CellLabel->"In[397]:=",
 CellID->1658661889,ExpressionUUID->"cfb5c3b7-1820-4993-a949-3b94c9420603"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "11"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"2", ",", "12"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "13"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"4", ",", "14"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"5", ",", "15"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"6", ",", "16"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"7", ",", "17"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"8", ",", "18"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"9", ",", "19"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"10", ",", "20"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940041525471249*^9},
 CellLabel->"Out[398]=",
 CellID->1670675280,ExpressionUUID->"30839499-749d-4502-8f0e-bdb9bdc8263d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Thread", "[", 
  RowBox[{"f", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"11", ",", "20"}], "]"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"21", ",", "30"}], "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400415298754473`*^9, 3.9400415430989523`*^9}},
 CellLabel->"In[399]:=",
 CellID->78737363,ExpressionUUID->"7fbdece5-4a14-4fb4-983a-d0ddd1f54608"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "11", ",", "21"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"2", ",", "12", ",", "22"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "13", ",", "23"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"4", ",", "14", ",", "24"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"5", ",", "15", ",", "25"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"6", ",", "16", ",", "26"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"7", ",", "17", ",", "27"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"8", ",", "18", ",", "28"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"9", ",", "19", ",", "29"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"10", ",", "20", ",", "30"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940041543546832*^9},
 CellLabel->"Out[399]=",
 CellID->1892421831,ExpressionUUID->"5090886c-697c-457a-98e9-fa6a0e8f7c27"]
}, Open  ]],

Cell["\<\
The lists of arguments need not be the same length, and this is in fact quite \
useful at times:\
\>", "Text",
 CellChangeTimes->{3.9400415529348917`*^9},
 CellID->1700901547,ExpressionUUID->"6cb14268-9939-4e79-891e-3153c3d15c48"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Thread", "[", 
  RowBox[{"f", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.940041559428302*^9, 3.9400415635603533`*^9}},
 CellLabel->"In[400]:=",
 CellID->733730134,ExpressionUUID->"beeab4e0-06e0-429a-80b8-ce0ba2f50a2a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"2", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"4", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"5", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"6", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"7", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"8", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"9", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"10", ",", "1"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940041564620207*^9},
 CellLabel->"Out[400]=",
 CellID->2059906225,ExpressionUUID->"32d9c6f7-593d-4526-836f-c36ba40ff456"]
}, Open  ]],

Cell["\<\
When used in cases like above, Thread may be thought of as a generalization \
of Map.\
\>", "Text",
 CellChangeTimes->{{3.940041572441145*^9, 3.940041586260347*^9}},
 CellID->1817167183,ExpressionUUID->"49eca656-e573-45a8-8ee5-cab3e8dd5acb"],

Cell["\<\
However, the input like this is ambiguous, and the system complains:\
\>", "Text",
 CellChangeTimes->{{3.940041572441145*^9, 3.940041587912116*^9}},
 CellID->1615839605,ExpressionUUID->"fde0cdbe-9e95-4b8e-b67d-ca2a1d8d0ce9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Thread", "[", 
  RowBox[{"f", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.940041597777896*^9, 3.9400416046444473`*^9}},
 CellLabel->"In[401]:=",
 CellID->174787682,ExpressionUUID->"29cfd85f-526b-4e25-ac30-1ec07fd73890"],

Cell[BoxData[
 TemplateBox[{
  "Thread", "tdlen", 
   "\"Objects of unequal length in \\!\\(\\*RowBox[{\\\"f\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\", \
\\\",\\\", \\\"3\\\", \\\",\\\", \\\"4\\\", \\\",\\\", \\\"5\\\", \\\",\\\", \
\\\"6\\\", \\\",\\\", \\\"7\\\", \\\",\\\", \\\"8\\\", \\\",\\\", \\\"9\\\", \
\\\",\\\", \\\"10\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"}\\\"}]}], \\\"]\\\"}]\\) \
cannot be combined.\"", 2, 401, 34, 26588908877246977716, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9400416051388197`*^9},
 CellLabel->"During evaluation of In[401]:=",
 CellID->792134658,ExpressionUUID->"e4dbe125-df3a-430e-8a44-702bda14c87e"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "9", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.940041605164291*^9},
 CellLabel->"Out[401]=",
 CellID->1156069253,ExpressionUUID->"c77ea655-d4d8-4d14-888b-a18bd9afb7a1"]
}, Open  ]],

Cell["Example: imitating Thread", "ItemNumbered",
 CellChangeTimes->{3.940041615153647*^9},
 CellID->843609709,ExpressionUUID->"ed919d21-46b0-43ed-a702-6ac8c26ce656"],

Cell["\<\
As an amusing exercise, we may imitate the workings of Thread in the first \
case above. This will also clarify how it works in that case.\
\>", "Text",
 CellChangeTimes->{{3.94004162321502*^9, 3.940041628142581*^9}},
 CellID->861341669,ExpressionUUID->"c8715f9a-c8c4-4cc2-9063-a62fbe9a67cf"],

Cell["\<\
This will imitate Thread for the inputs with equal number of all arguments\
\>", "Text",
 CellChangeTimes->{{3.94004162321502*^9, 3.9400416251695147`*^9}},
 CellID->253433112,ExpressionUUID->"5b17ab5b-89a4-4d77-9c0d-a132d7d405c8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "myThread", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"myThread", "[", 
     RowBox[{"f_", "[", "x__List", "]"}], "]"}], "/;", 
    RowBox[{"Equal", "@@", 
     RowBox[{"Map", "[", 
      RowBox[{"Length", ",", 
       RowBox[{"{", "x", "}"}]}], "]"}]}]}], ":=", 
   RowBox[{"f", "@@@", 
    RowBox[{"Transpose", "[", 
     RowBox[{"{", "x", "}"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"myThread", "[", "x_List", "]"}], ":=", "x"}], ";"}]}], "Input",
 CellChangeTimes->{{3.940041631855509*^9, 3.9400416704090433`*^9}},
 CellLabel->"In[402]:=",
 CellID->2136143478,ExpressionUUID->"345fd24b-d47a-419d-8779-8ee0eb7b9e6d"],

Cell["\<\
In the above, the pattern checks that all elements are lists, and the \
condition checks that all lengths of all lists are the same (the second \
definition is needed to reproduce the behavior of the built-in Thread on \
simple lists). We then Transpose the lists, for instance:\
\>", "Text",
 CellChangeTimes->{{3.940041686869163*^9, 3.940041691484181*^9}},
 CellID->39146966,ExpressionUUID->"eb6c6c11-ce9e-40b3-92d6-53408a9314d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"11", ",", "20"}], "]"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"21", ",", "30"}], "]"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400416954166613`*^9, 3.940041705191482*^9}},
 CellLabel->"In[405]:=",
 CellID->258348261,ExpressionUUID->"2f86bca6-9bce-4b9d-8246-e304dabc3c7f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "11", ",", "21"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "12", ",", "22"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "13", ",", "23"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "14", ",", "24"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "15", ",", "25"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "16", ",", "26"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "17", ",", "27"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "18", ",", "28"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "19", ",", "29"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "20", ",", "30"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940041705533759*^9},
 CellLabel->"Out[405]=",
 CellID->968920471,ExpressionUUID->"0798691e-2d06-4cd8-a2cb-47301de3b84a"]
}, Open  ]],

Cell[TextData[{
 "and we want to Map f on the resulting list of lists containing arguments. \
Since the List head in each sublist has to be substituted by the head <f>, we \
actually Map the Apply[f, #]&, and then use the shorthand notation discussed \
before (see section ",
 ButtonBox["5.2.7.5",
  BaseStyle->"Hyperlink",
  ButtonData->"5.2.7.5"],
 ")."
}], "Text",
 CellChangeTimes->{{3.940041712892001*^9, 3.940041752148438*^9}},
 CellID->277860896,ExpressionUUID->"0414056e-7a78-4e5d-a666-63a14ee731d1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myThread", "[", 
  RowBox[{"f", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"11", ",", "20"}], "]"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"21", ",", "30"}], "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400417559119663`*^9, 3.940041768421783*^9}},
 CellLabel->"In[406]:=",
 CellID->576122374,ExpressionUUID->"7ca03d2b-54e7-48bf-a618-0b1fd0ba33d0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "11", ",", "21"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"2", ",", "12", ",", "22"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "13", ",", "23"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"4", ",", "14", ",", "24"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"5", ",", "15", ",", "25"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"6", ",", "16", ",", "26"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"7", ",", "17", ",", "27"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"8", ",", "18", ",", "28"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"9", ",", "19", ",", "29"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"10", ",", "20", ",", "30"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940041768761456*^9},
 CellLabel->"Out[406]=",
 CellID->1659976808,ExpressionUUID->"301a2d14-2725-4fd7-81bc-33801524d37c"]
}, Open  ]],

Cell["\<\
It is left as an exercise for the reader to imitate the behavior of Thread in \
other cases (like the one where some of the arguments are not lists but \
atoms, like in the second example above).\
\>", "Text",
 CellChangeTimes->{{3.9400417800134897`*^9, 3.9400417857043543`*^9}},
 CellID->1270153879,ExpressionUUID->"db2d3c8b-6d09-4862-9738-da0f1dbeaa87"],

Cell["\<\
Of course, we expect our function to be much slower than the built-in. Let us \
see how much slower:\
\>", "Text",
 CellChangeTimes->{{3.9400417800134897`*^9, 3.9400417816954403`*^9}},
 CellID->357407514,ExpressionUUID->"04ede164-650c-47fb-82a3-785daa12610c"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.940041788882245*^9, 3.940041789763533*^9}},
 CellID->972779082,ExpressionUUID->"edb5a357-9bc9-412d-9fbe-a42aecee8fb8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"myThread", "[", 
     RowBox[{"f", "[", 
      RowBox[{
       RowBox[{"Range", "[", "100", "]"}], ",", 
       RowBox[{"Range", "[", 
        RowBox[{"101", ",", "200"}], "]"}], ",", 
       RowBox[{"Range", "[", 
        RowBox[{"201", ",", "300"}], "]"}]}], "]"}], "]"}], ";"}], ")"}], "//",
   "Timing"}]], "Input",
 CellChangeTimes->{{3.940041796876313*^9, 3.940041818264656*^9}},
 CellLabel->"In[408]:=",
 CellID->583485652,ExpressionUUID->"26c1f5b3-864a-4055-8113-9641fc7393a1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000107`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.940041808296505*^9, 3.940041818630427*^9}},
 CellLabel->"Out[408]=",
 CellID->260090411,ExpressionUUID->"5285dde4-9a55-46a9-ad75-24433a1b66a3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Thread", "[", 
     RowBox[{"f", "[", 
      RowBox[{
       RowBox[{"Range", "[", "100", "]"}], ",", 
       RowBox[{"Range", "[", 
        RowBox[{"101", ",", "200"}], "]"}], ",", 
       RowBox[{"Range", "[", 
        RowBox[{"201", ",", "300"}], "]"}]}], "]"}], "]"}], ";"}], ")"}], "//",
   "Timing"}]], "Input",
 CellChangeTimes->{{3.940041826348901*^9, 3.940041827158915*^9}},
 CellLabel->"In[409]:=",
 CellID->1725489397,ExpressionUUID->"8198d87c-3b07-4481-a38a-2e4571126aa4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000072`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940041827974429*^9},
 CellLabel->"Out[409]=",
 CellID->936785784,ExpressionUUID->"7afecf4d-4b91-494b-9522-f4b4d5c9e72c"]
}, Open  ]],

Cell["\<\
In this case, the difference is about 50-100%, which should mean that we did \
not a bad job (however keep in mind that we did not cover more complicated \
uses of Thread in our function - this is likely to increase the gap in \
performance)\
\>", "Text",
 CellChangeTimes->{{3.940041838497025*^9, 3.940041844109309*^9}},
 CellID->1467733127,ExpressionUUID->"345916dd-e034-4936-85aa-afa8c1b92555"],

Cell["\<\
Performance study: redoing the Mapping-a-function-with-several-arguments \
example with
Thread\
\>", "ItemNumbered",
 CellChangeTimes->{3.940041866122883*^9},
 CellID->693977857,ExpressionUUID->"d906e96a-4e2f-4f57-8638-ea0ca2dd7397"],

Cell["Let us return to the example", "Text",
 CellChangeTimes->{3.9400418727677937`*^9},
 CellID->702155742,ExpressionUUID->"3cac2a45-6aa5-402c-b1e3-c95bd10e4f14"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Thread", "[", 
  RowBox[{"f", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.940041874894281*^9, 3.940041879674562*^9}},
 CellLabel->"In[410]:=",
 CellID->504022347,ExpressionUUID->"a0229a65-c8dd-465a-977f-252d0bccefef"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"2", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"4", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"5", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"6", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"7", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"8", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"9", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"10", ",", "1"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400418805120068`*^9},
 CellLabel->"Out[410]=",
 CellID->174426433,ExpressionUUID->"33bea098-c2a1-47ef-a2a9-4ddc831e5d38"]
}, Open  ]],

Cell["\<\
It shows that one of the cases when Thread is particularly useful is when one \
needs to supply a function with some arguments which are the same (don\
\[CloseCurlyQuote]t change). We already discussed how to do this using Map \
and Apply, and here is an alternative. We may now redo our previous examples \
using Thread:\
\>", "Text",
 CellChangeTimes->{{3.940041888657226*^9, 3.940041899932714*^9}},
 CellID->269881276,ExpressionUUID->"3fc43306-c331-4415-b909-705995cd0a7e"],

Cell[TextData[{
 "In our first example (c.f. section ",
 ButtonBox["5.2.2.7",
  BaseStyle->"Hyperlink",
  ButtonData->"5.2.2.7"],
 ") we have a function:"
}], "Text",
 CellChangeTimes->{{3.940041888657226*^9, 3.94004190945256*^9}},
 CellID->1284510424,ExpressionUUID->"9a13f739-b728-4c9d-a84e-4a1379db163d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"f", ",", "a"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
   RowBox[{"Sin", "[", 
    RowBox[{"x", "+", "y"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940041912615116*^9, 3.940041920833035*^9}},
 CellLabel->"In[411]:=",
 CellID->42521556,ExpressionUUID->"32176236-077f-44cd-bdd7-2084701a9db3"],

Cell["\<\
And we want to Map it on a list {1,2,3,4,5}, with the variable <y> fixed at \
value <a>. This is how we would do it with Thread:\
\>", "Text",
 CellChangeTimes->{{3.940041927593863*^9, 3.940041929600053*^9}},
 CellID->1504442840,ExpressionUUID->"108d57b3-49aa-4294-b9c5-07142b89ced2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Thread", "[", 
  RowBox[{"f", "[", 
   RowBox[{
    RowBox[{"Range", "[", "5", "]"}], ",", "a"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.940041946640517*^9, 3.94004196339049*^9}},
 CellLabel->"In[414]:=",
 CellID->1808633968,ExpressionUUID->"37bfc92f-7c24-43d4-b493-8416b82a376c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"1", "+", "a"}], "]"}], ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"2", "+", "a"}], "]"}], ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"3", "+", "a"}], "]"}], ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"4", "+", "a"}], "]"}], ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"5", "+", "a"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.940041952329026*^9, 3.940041963752845*^9}},
 CellLabel->"Out[414]=",
 CellID->1499662665,ExpressionUUID->"9d9059b3-cd9f-4eb3-9110-1219e393f8f7"]
}, Open  ]],

Cell["\<\
Since this is a more direct use of the built-in commands, we should expect it \
to be more efficient than the previous one with Map.\
\>", "Text",
 CellChangeTimes->{{3.940041971919735*^9, 3.9400419733076878`*^9}},
 CellID->1962329463,ExpressionUUID->"3a36cc81-435a-48ee-9a0d-0890b1b61950"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "[", 
     RowBox[{"#", ",", "a"}], "]"}], "&"}], ",", 
   RowBox[{"Range", "[", "5", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940041974957765*^9, 3.940041981722707*^9}},
 CellLabel->"In[415]:=",
 CellID->306921657,ExpressionUUID->"542280d3-0c99-4806-9f6e-e53c5f928b18"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"1", "+", "a"}], "]"}], ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"2", "+", "a"}], "]"}], ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"3", "+", "a"}], "]"}], ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"4", "+", "a"}], "]"}], ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"5", "+", "a"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940041982078136*^9},
 CellLabel->"Out[415]=",
 CellID->1966316595,ExpressionUUID->"a68d349b-c1d3-4821-838b-ef5d68086055"]
}, Open  ]],

Cell["We may now verify this:", "Text",
 CellChangeTimes->{3.940041990074478*^9},
 CellID->1503276355,ExpressionUUID->"942b8a8e-2ce7-49de-9d70-2d0e91c3ffa0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Thread", "[", 
     RowBox[{"f", "[", 
      RowBox[{
       RowBox[{"Range", "[", "50", "]"}], ",", "a"}], "]"}], "]"}], ";"}], 
   ")"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940041997010437*^9, 3.940042005527059*^9}},
 CellLabel->"In[416]:=",
 CellID->1219663657,ExpressionUUID->"530acb73-d722-4574-99ff-abeb8d8d9f61"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000082`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940042005980096*^9},
 CellLabel->"Out[416]=",
 CellID->1968751593,ExpressionUUID->"e205eccf-fc1b-4d1c-8956-a7103ee2c513"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"f", "[", 
        RowBox[{"#", ",", "a"}], "]"}], "&"}], ",", 
      RowBox[{"Range", "[", "50", "]"}]}], "]"}], ";"}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9400420122041817`*^9, 3.940042018713553*^9}},
 CellLabel->"In[417]:=",
 CellID->1612223182,ExpressionUUID->"7512be16-e4f9-4198-9b5d-7fadfbdfdbce"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000121`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940042019074472*^9},
 CellLabel->"Out[417]=",
 CellID->439871189,ExpressionUUID->"6d1fb9b2-d886-4232-99d4-9412cbfd414e"]
}, Open  ]],

Cell["\<\
We see that we gain about 30-40% here, even though the method with Map is by \
far not the worst.\
\>", "Text",
 CellChangeTimes->{3.940042031307296*^9},
 CellID->1543562148,ExpressionUUID->"24865521-ffee-49ce-9973-f344c82da3d6"],

Cell["\<\
Performance study: redoing a supplying-function-arguments example with Thread\
\
\>", "ItemNumbered",
 CellChangeTimes->{3.940042039333386*^9},
 CellID->1046565676,ExpressionUUID->"a865e655-7223-4265-aada-2b000d5152ec"],

Cell["Let us also redo the second example:", "Text",
 CellChangeTimes->{3.940042048315363*^9},
 CellID->1738247602,ExpressionUUID->"3738056c-ed70-4aee-9ca6-14d2b1408665"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{
   "addFive", ",", "x", ",", "y", ",", "z", ",", "t", ",", "s", ",", "a", ",",
     "b"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"addFive", "[", 
    RowBox[{"x_", ",", "y_", ",", "z_", ",", "t_", ",", "s_"}], "]"}], ":=", 
   RowBox[{"x", "+", "y", "+", "z", "+", "t", "+", "s"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9400420504398327`*^9, 3.940042070971066*^9}},
 CellLabel->"In[418]:=",
 CellID->1744278030,ExpressionUUID->"bcbe7c8e-086e-4f01-8803-4e4e212c44df"],

Cell["\<\
We want to keep the first and the last arguments fixed, say at <a> and <b>. \
Here is the list of other arguments\
\>", "Text",
 CellChangeTimes->{{3.940042077795225*^9, 3.940042079658411*^9}},
 CellID->182927277,ExpressionUUID->"c1315cb1-d2bd-4a97-979b-4ee4c3b6bf07"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "10", "}"}], ",", 
    RowBox[{"{", "3", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.94004208192384*^9, 3.9400420969813423`*^9}, 
   3.9400421600922823`*^9},
 CellLabel->"In[423]:=",
 CellID->162876093,ExpressionUUID->"dbc90414-9398-423a-b14c-4f3966fdca0d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"6", ",", "8", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "10", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "6", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "4", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "9", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "4", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940042097332382*^9, 3.940042160563279*^9},
 CellLabel->"Out[423]=",
 CellID->1362532399,ExpressionUUID->"1448b541-0bb3-4e04-9759-9441bd48e2e7"]
}, Open  ]],

Cell["Version with map and Apply:", "Text",
 CellChangeTimes->{3.9400421045518303`*^9},
 CellID->1986347039,ExpressionUUID->"0e380647-740b-4d21-8956-d50236dda283"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"addFive", "[", 
     RowBox[{"a", ",", 
      RowBox[{"Sequence", "@@", "#"}], ",", "b"}], "]"}], "&"}], ",", 
   "testlist"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400421062388268`*^9, 3.940042121078747*^9}, 
   3.9400421626981363`*^9},
 CellLabel->"In[424]:=",
 CellID->2136290046,ExpressionUUID->"f704a193-df8a-4fc7-8997-54fc48703dca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"15", "+", "a", "+", "b"}], ",", 
   RowBox[{"11", "+", "a", "+", "b"}], ",", 
   RowBox[{"20", "+", "a", "+", "b"}], ",", 
   RowBox[{"17", "+", "a", "+", "b"}], ",", 
   RowBox[{"21", "+", "a", "+", "b"}], ",", 
   RowBox[{"9", "+", "a", "+", "b"}], ",", 
   RowBox[{"12", "+", "a", "+", "b"}], ",", 
   RowBox[{"14", "+", "a", "+", "b"}], ",", 
   RowBox[{"23", "+", "a", "+", "b"}], ",", 
   RowBox[{"13", "+", "a", "+", "b"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400421231999903`*^9, 3.940042163112451*^9},
 CellLabel->"Out[424]=",
 CellID->1183958934,ExpressionUUID->"9be5c309-c030-44d5-bcc1-9cdfc5dcfb37"]
}, Open  ]],

Cell["For the version with Thread:", "Text",
 CellChangeTimes->{3.940042131925672*^9},
 CellID->489497454,ExpressionUUID->"562e96a6-4431-4ad3-8a8a-33ee5ae338e5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Thread", "[", 
  RowBox[{"addFive", "[", 
   RowBox[{"a", ",", 
    RowBox[{"Sequence", "@@", 
     RowBox[{"Transpose", "[", "testlist", "]"}]}], ",", "b"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940042134021779*^9, 3.940042149677754*^9}},
 CellLabel->"In[425]:=",
 CellID->860864482,ExpressionUUID->"5fddf14d-0e08-4596-93ca-899ed9c07001"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"15", "+", "a", "+", "b"}], ",", 
   RowBox[{"11", "+", "a", "+", "b"}], ",", 
   RowBox[{"20", "+", "a", "+", "b"}], ",", 
   RowBox[{"17", "+", "a", "+", "b"}], ",", 
   RowBox[{"21", "+", "a", "+", "b"}], ",", 
   RowBox[{"9", "+", "a", "+", "b"}], ",", 
   RowBox[{"12", "+", "a", "+", "b"}], ",", 
   RowBox[{"14", "+", "a", "+", "b"}], ",", 
   RowBox[{"23", "+", "a", "+", "b"}], ",", 
   RowBox[{"13", "+", "a", "+", "b"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.940042150224394*^9, 3.9400421652691507`*^9}},
 CellLabel->"Out[425]=",
 CellID->1698140045,ExpressionUUID->"98fb72f9-ecb7-4f79-b0f1-43ecd838bae0"]
}, Open  ]],

Cell["\<\
To be able to use Thread, we had here to Transpose the list and then Apply \
Sequence, since the list was already in the form where all arguments for each \
function application are grouped together, while Thread normally works with \
them stored in a separate lists. We can now check the performance:\
\>", "Text",
 CellChangeTimes->{{3.940042174331428*^9, 3.940042185012603*^9}},
 CellID->271062755,ExpressionUUID->"b2c71343-7a26-44b6-bde2-88104e9758c3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"addFive", "[", 
       RowBox[{"a", ",", 
        RowBox[{"Sequence", "@@", "#"}], ",", "b"}], "]"}], "&"}], ",", 
     "testlist"}], "]"}], ";"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.94004219827929*^9, 3.940042203334114*^9}},
 CellLabel->"In[428]:=",
 CellID->701901495,ExpressionUUID->"17959bb2-f51d-48c0-b2d0-3c2d4846962b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000069`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.9400422037198277`*^9, 3.940042227744378*^9}},
 CellLabel->"Out[428]=",
 CellID->500108125,ExpressionUUID->"81d4d658-b272-45b9-a0eb-47cf320e2c2a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Thread", "[", 
    RowBox[{"addFive", "[", 
     RowBox[{"a", ",", 
      RowBox[{"Sequence", "@@", 
       RowBox[{"Transpose", "[", "testlist", "]"}]}], ",", "b"}], "]"}], 
    "]"}], ";"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.9400422116734047`*^9, 3.9400422146413*^9}},
 CellLabel->"In[429]:=",
 CellID->1296521006,ExpressionUUID->"18e975d5-22e2-4840-a648-dba7019e03c6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00008`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.94004221501105*^9, 3.940042229888747*^9}},
 CellLabel->"Out[429]=",
 CellID->1982082205,ExpressionUUID->"13506e10-3d3d-4a24-8aaa-e18e906d9df7"]
}, Open  ]],

Cell["\<\
Notice that the difference is about 4 times, even given an additional command \
had to be executed inside the Thread! So, here we gain an increase in \
performance by several times. Once again, this teaches us that in Mathematica \
programming it is important to choose the right idiom. Here, for instance, \
the length of the code is comparable in both cases, but the solution using \
Thread picked a better idiom for this particular problem. In order to \
understand this behavior, we should realize that in Thread, the parameters \
<a> and <b> are treated internally by Thread. Also, the substitution of the \
middle arguments to f is performed case-by-case in the approach with Map, \
while done internally for all elements in the list by Thread. It basically \
does the same thing that we do with the Map command, but does more of it \
internally, and thus does it faster.\
\>", "Text",
 CellChangeTimes->{{3.9400422512933598`*^9, 3.940042279032476*^9}},
 CellID->1162431749,ExpressionUUID->"39dc5792-17e2-40d6-b47a-2757ab77c096"],

Cell["\<\
In this respect the Mathematica language is more like the natural language \
than one of the more standard programming languages. Like in the natural \
language, there are plenty of ways to express the same thing. And like in the \
natural language, using the most precise idiom is advantageous. It takes some \
time to develop this skill but it pays off - after all, there are not so many \
fundamental commands in Mathematica. Once you get to know how to use them, \
the rest will follow.\
\>", "Text",
 CellChangeTimes->{{3.9400422512933598`*^9, 3.940042290468244*^9}},
 CellID->1075858485,ExpressionUUID->"bbcab62b-c5dd-4453-b908-fe0ab8269e9d"],

Cell["\<\
Example: simple encoding - using Thread to create a list of rules\
\>", "ItemNumbered",
 CellChangeTimes->{3.940042299204833*^9},
 CellTags->"5.3.1.5",
 CellID->2123699886,ExpressionUUID->"b2decd3e-bbcf-48eb-8684-64c83b8ddaa7"],

Cell["\<\
One particular case when Thread is quite useful is when we have to create a \
set of rules. In this example we will build a function which does simple \
encodings, by substituting each letter in a message by some another letter.\
\>", "Text",
 CellChangeTimes->{{3.940042305795846*^9, 3.940042313905007*^9}},
 CellID->1845770862,ExpressionUUID->"30102570-ce29-4687-a0be-29cd76a0b4a1"],

Cell["To start, let us create an alphabet list:", "Text",
 CellChangeTimes->{{3.940042305795846*^9, 3.940042310673336*^9}},
 CellID->93669439,ExpressionUUID->"8103341b-f379-4a63-9a82-c0990592a930"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"alphabet", "=", 
  RowBox[{
  "Characters", "[", "\"\<abcdefghijklmnopqrstuvwxyz\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.9400423173249083`*^9, 3.940042330312276*^9}},
 CellLabel->"In[430]:=",
 CellID->1766673021,ExpressionUUID->"86539097-13f6-4458-abac-ddd44de7ea54"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", ",", "\<\"h\"\>", 
   ",", "\<\"i\"\>", ",", "\<\"j\"\>", ",", "\<\"k\"\>", ",", "\<\"l\"\>", 
   ",", "\<\"m\"\>", ",", "\<\"n\"\>", ",", "\<\"o\"\>", ",", "\<\"p\"\>", 
   ",", "\<\"q\"\>", ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"v\"\>", ",", "\<\"w\"\>", ",", "\<\"x\"\>", 
   ",", "\<\"y\"\>", ",", "\<\"z\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.940042331610738*^9},
 CellLabel->"Out[430]=",
 CellID->1954276544,ExpressionUUID->"24ce5ec2-0e70-4ef1-80f8-33f30f756d1b"]
}, Open  ]],

Cell["Now, let us shift all the letters by, say,10:", "Text",
 CellChangeTimes->{3.940042340445907*^9},
 CellID->1910977790,ExpressionUUID->"55f184ed-cab0-44f6-8929-7382dade6e0d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"shifted", "=", 
  RowBox[{"RotateRight", "[", 
   RowBox[{"alphabet", ",", "10"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9400423422813168`*^9, 3.9400423497190437`*^9}},
 CellLabel->"In[431]:=",
 CellID->1475999933,ExpressionUUID->"dfb68360-b281-44bb-859e-4a1256533b8c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"q\"\>", ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"v\"\>", ",", "\<\"w\"\>", ",", "\<\"x\"\>", 
   ",", "\<\"y\"\>", ",", "\<\"z\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>", 
   ",", "\<\"c\"\>", ",", "\<\"d\"\>", ",", "\<\"e\"\>", ",", "\<\"f\"\>", 
   ",", "\<\"g\"\>", ",", "\<\"h\"\>", ",", "\<\"i\"\>", ",", "\<\"j\"\>", 
   ",", "\<\"k\"\>", ",", "\<\"l\"\>", ",", "\<\"m\"\>", ",", "\<\"n\"\>", 
   ",", "\<\"o\"\>", ",", "\<\"p\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.940042350435616*^9},
 CellLabel->"Out[431]=",
 CellID->902948865,ExpressionUUID->"79bf5e8e-4340-43f6-b516-6ff3da4a60c1"]
}, Open  ]],

Cell["Now we will create the encoding rules:", "Text",
 CellChangeTimes->{3.940042357979224*^9},
 CellID->1742124353,ExpressionUUID->"0c2a986e-8459-48fc-b43a-c901be0dfed5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"coderules", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{"Rule", "[", 
    RowBox[{"alphabet", ",", "shifted"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9400423604636383`*^9, 3.9400423721054487`*^9}},
 CellLabel->"In[432]:=",
 CellID->137362849,ExpressionUUID->"06c2bff7-7478-477f-9370-39b08e5c006c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "\<\"q\"\>"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "\<\"r\"\>"}], ",", 
   RowBox[{"\<\"c\"\>", "\[Rule]", "\<\"s\"\>"}], ",", 
   RowBox[{"\<\"d\"\>", "\[Rule]", "\<\"t\"\>"}], ",", 
   RowBox[{"\<\"e\"\>", "\[Rule]", "\<\"u\"\>"}], ",", 
   RowBox[{"\<\"f\"\>", "\[Rule]", "\<\"v\"\>"}], ",", 
   RowBox[{"\<\"g\"\>", "\[Rule]", "\<\"w\"\>"}], ",", 
   RowBox[{"\<\"h\"\>", "\[Rule]", "\<\"x\"\>"}], ",", 
   RowBox[{"\<\"i\"\>", "\[Rule]", "\<\"y\"\>"}], ",", 
   RowBox[{"\<\"j\"\>", "\[Rule]", "\<\"z\"\>"}], ",", 
   RowBox[{"\<\"k\"\>", "\[Rule]", "\<\"a\"\>"}], ",", 
   RowBox[{"\<\"l\"\>", "\[Rule]", "\<\"b\"\>"}], ",", 
   RowBox[{"\<\"m\"\>", "\[Rule]", "\<\"c\"\>"}], ",", 
   RowBox[{"\<\"n\"\>", "\[Rule]", "\<\"d\"\>"}], ",", 
   RowBox[{"\<\"o\"\>", "\[Rule]", "\<\"e\"\>"}], ",", 
   RowBox[{"\<\"p\"\>", "\[Rule]", "\<\"f\"\>"}], ",", 
   RowBox[{"\<\"q\"\>", "\[Rule]", "\<\"g\"\>"}], ",", 
   RowBox[{"\<\"r\"\>", "\[Rule]", "\<\"h\"\>"}], ",", 
   RowBox[{"\<\"s\"\>", "\[Rule]", "\<\"i\"\>"}], ",", 
   RowBox[{"\<\"t\"\>", "\[Rule]", "\<\"j\"\>"}], ",", 
   RowBox[{"\<\"u\"\>", "\[Rule]", "\<\"k\"\>"}], ",", 
   RowBox[{"\<\"v\"\>", "\[Rule]", "\<\"l\"\>"}], ",", 
   RowBox[{"\<\"w\"\>", "\[Rule]", "\<\"m\"\>"}], ",", 
   RowBox[{"\<\"x\"\>", "\[Rule]", "\<\"n\"\>"}], ",", 
   RowBox[{"\<\"y\"\>", "\[Rule]", "\<\"o\"\>"}], ",", 
   RowBox[{"\<\"z\"\>", "\[Rule]", "\<\"p\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.94004237251206*^9},
 CellLabel->"Out[432]=",
 CellID->1704379514,ExpressionUUID->"b9afdf3a-3d23-4c7e-9717-5922c25ca002"]
}, Open  ]],

Cell["\<\
What happened was that the function Rule was threaded over the lists, \
producing a list of rules, in full agreement with the general way the Thread \
works. It may help to look at the FullForm here:\
\>", "Text",
 CellChangeTimes->{{3.9400423828194*^9, 3.9400423913551893`*^9}},
 CellID->222124465,ExpressionUUID->"6ef60d45-4e6d-40fa-9064-60e140cb9773"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", "coderules", "]"}]], "Input",
 CellChangeTimes->{{3.940042396314486*^9, 3.94004240247272*^9}},
 CellLabel->"In[433]:=",
 CellID->2026632676,ExpressionUUID->"e1060646-1a62-45c9-9393-e75f03bb3f4b"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"List", "[", 
    RowBox[{
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<a\>\"", ",", "\"\<q\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<b\>\"", ",", "\"\<r\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<c\>\"", ",", "\"\<s\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<d\>\"", ",", "\"\<t\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<e\>\"", ",", "\"\<u\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<f\>\"", ",", "\"\<v\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<g\>\"", ",", "\"\<w\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<h\>\"", ",", "\"\<x\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<i\>\"", ",", "\"\<y\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<j\>\"", ",", "\"\<z\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<k\>\"", ",", "\"\<a\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<l\>\"", ",", "\"\<b\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<m\>\"", ",", "\"\<c\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<n\>\"", ",", "\"\<d\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<o\>\"", ",", "\"\<e\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<p\>\"", ",", "\"\<f\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<q\>\"", ",", "\"\<g\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<r\>\"", ",", "\"\<h\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<s\>\"", ",", "\"\<i\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<t\>\"", ",", "\"\<j\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<u\>\"", ",", "\"\<k\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<v\>\"", ",", "\"\<l\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<w\>\"", ",", "\"\<m\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<x\>\"", ",", "\"\<n\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<y\>\"", ",", "\"\<o\>\""}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<z\>\"", ",", "\"\<p\>\""}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.940042402784072*^9},
 CellLabel->"Out[433]//FullForm=",
 CellID->1729373270,ExpressionUUID->"f54fe8ca-90b6-4600-8c68-34287af12c73"]
}, Open  ]],

Cell["To proceed, consider some test message, like", "Text",
 CellChangeTimes->{3.940042411395218*^9},
 CellID->1930499307,ExpressionUUID->"761f195a-1bc4-4941-9469-c8eaa93cb7a2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"message", "=", "\"\<never say never\>\""}]], "Input",
 CellChangeTimes->{{3.9400424130532084`*^9, 3.940042417773465*^9}},
 CellLabel->"In[434]:=",
 CellID->1835444067,ExpressionUUID->"04797394-d168-4032-815b-09120aa81a86"],

Cell[BoxData["\<\"never say never\"\>"], "Output",
 CellChangeTimes->{3.940042418750073*^9},
 CellLabel->"Out[434]=",
 CellID->1396357313,ExpressionUUID->"b93360af-d07c-4422-ade5-7067db15eb81"]
}, Open  ]],

Cell["\<\
To apply the rules, we have to break the message into characters:\
\>", "Text",
 CellChangeTimes->{3.9400424260816727`*^9},
 CellID->876065175,ExpressionUUID->"2150f647-0663-4b1e-ac20-1b3ce7f97c3c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Characters", "[", "message", "]"}]], "Input",
 CellChangeTimes->{{3.940042428487081*^9, 3.9400424316576023`*^9}},
 CellLabel->"In[435]:=",
 CellID->834846850,ExpressionUUID->"b010ebf7-d946-450d-9efc-fe695037c176"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"n\"\>", ",", "\<\"e\"\>", ",", "\<\"v\"\>", ",", "\<\"e\"\>", 
   ",", "\<\"r\"\>", ",", "\<\" \"\>", ",", "\<\"s\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"y\"\>", ",", "\<\" \"\>", ",", "\<\"n\"\>", ",", "\<\"e\"\>", 
   ",", "\<\"v\"\>", ",", "\<\"e\"\>", ",", "\<\"r\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.940042431929858*^9},
 CellLabel->"Out[435]=",
 CellID->1419632953,ExpressionUUID->"58c86a39-89bf-4818-97f8-e15e796eb6e5"]
}, Open  ]],

Cell["We now apply the rules:", "Text",
 CellChangeTimes->{3.9400424394432287`*^9},
 CellID->378656947,ExpressionUUID->"69759c2b-eb51-4ad6-a2f2-4568ec3fb527"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Characters", "[", "message", "]"}], "/.", "coderules"}]], "Input",
 CellChangeTimes->{{3.940042443626107*^9, 3.9400424478264847`*^9}},
 CellLabel->"In[436]:=",
 CellID->587173844,ExpressionUUID->"7ee20603-8efd-4563-a144-8d1631e2aac3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"d\"\>", ",", "\<\"u\"\>", ",", "\<\"l\"\>", ",", "\<\"u\"\>", 
   ",", "\<\"h\"\>", ",", "\<\" \"\>", ",", "\<\"i\"\>", ",", "\<\"q\"\>", 
   ",", "\<\"o\"\>", ",", "\<\" \"\>", ",", "\<\"d\"\>", ",", "\<\"u\"\>", 
   ",", "\<\"l\"\>", ",", "\<\"u\"\>", ",", "\<\"h\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.940042448079677*^9},
 CellLabel->"Out[436]=",
 CellID->941620664,ExpressionUUID->"4640e0a9-0d1c-4084-9764-230680a3a863"]
}, Open  ]],

Cell[TextData[{
 "Finally, we have to assemble the encoded message back. For this, we will \
use the ",
 StyleBox["StringJoin",
  FontWeight->"Bold"],
 " built-in function, and since the head List has to be eaten up, we use \
Apply:"
}], "Text",
 CellChangeTimes->{{3.94004245789892*^9, 3.9400424602570753`*^9}},
 CellID->900130990,ExpressionUUID->"0a9c97dd-a0a4-49fc-ac7c-4097b1f65382"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"StringJoin", ",", 
   RowBox[{
    RowBox[{"Characters", "[", "message", "]"}], "/.", "coderules"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940042468621355*^9, 3.940042479041141*^9}},
 CellLabel->"In[437]:=",
 CellID->1539067668,ExpressionUUID->"2e695a2c-73fc-4f28-8c05-4b0eae90568c"],

Cell[BoxData["\<\"duluh iqo duluh\"\>"], "Output",
 CellChangeTimes->{3.94004247946577*^9},
 CellLabel->"Out[437]=",
 CellID->1425929998,ExpressionUUID->"c23369d0-1b7b-4aa3-855e-d6b419c5395c"]
}, Open  ]],

Cell["Now we can package these steps into an encoding function:", "Text",
 CellChangeTimes->{3.940042494943304*^9},
 CellID->1835459513,ExpressionUUID->"61874bfc-6565-4a14-ba32-2adbf10dcda6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "encode", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"encode", "[", 
    RowBox[{"mes_String", ",", "rules_List"}], "]"}], ":=", 
   RowBox[{"Apply", "[", 
    RowBox[{"StringJoin", ",", 
     RowBox[{
      RowBox[{"Characters", "[", "mes", "]"}], "/.", "rules"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940042497216116*^9, 3.9400425188074913`*^9}},
 CellLabel->"In[438]:=",
 CellID->1495300977,ExpressionUUID->"49a965ae-9068-472b-873f-77dc03c93482"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.9400425210161057`*^9, 3.9400425218856373`*^9}},
 CellID->454176493,ExpressionUUID->"52802c6c-f5f8-49b0-abe1-ce3714e9b48d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"coded", "=", 
  RowBox[{"encode", "[", 
   RowBox[{"message", ",", "coderules"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9400425226983633`*^9, 3.940042529404271*^9}},
 CellLabel->"In[440]:=",
 CellID->1315459604,ExpressionUUID->"12a2df84-ca03-45a6-a980-8a60c7ad9b4d"],

Cell[BoxData["\<\"duluh iqo duluh\"\>"], "Output",
 CellChangeTimes->{3.940042529709279*^9},
 CellLabel->"Out[440]=",
 CellID->488438061,ExpressionUUID->"724bc212-7dff-4117-9e28-16c12fc1c549"]
}, Open  ]],

Cell["\<\
To decode the message back, we don\[CloseCurlyQuote]t need another function. \
All we need to do is to reverse the rules. These are the rules:\
\>", "Text",
 CellChangeTimes->{{3.94004253818395*^9, 3.9400425414748487`*^9}},
 CellID->1495992393,ExpressionUUID->"0d5e5848-9f24-438f-b39a-c8cc88e069f1"],

Cell[CellGroupData[{

Cell[BoxData["coderules"], "Input",
 CellChangeTimes->{{3.940042543771737*^9, 3.940042544945375*^9}},
 CellLabel->"In[441]:=",
 CellID->244993031,ExpressionUUID->"b03e3a77-b271-4a90-96ee-cf891ed35b49"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "\<\"q\"\>"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "\<\"r\"\>"}], ",", 
   RowBox[{"\<\"c\"\>", "\[Rule]", "\<\"s\"\>"}], ",", 
   RowBox[{"\<\"d\"\>", "\[Rule]", "\<\"t\"\>"}], ",", 
   RowBox[{"\<\"e\"\>", "\[Rule]", "\<\"u\"\>"}], ",", 
   RowBox[{"\<\"f\"\>", "\[Rule]", "\<\"v\"\>"}], ",", 
   RowBox[{"\<\"g\"\>", "\[Rule]", "\<\"w\"\>"}], ",", 
   RowBox[{"\<\"h\"\>", "\[Rule]", "\<\"x\"\>"}], ",", 
   RowBox[{"\<\"i\"\>", "\[Rule]", "\<\"y\"\>"}], ",", 
   RowBox[{"\<\"j\"\>", "\[Rule]", "\<\"z\"\>"}], ",", 
   RowBox[{"\<\"k\"\>", "\[Rule]", "\<\"a\"\>"}], ",", 
   RowBox[{"\<\"l\"\>", "\[Rule]", "\<\"b\"\>"}], ",", 
   RowBox[{"\<\"m\"\>", "\[Rule]", "\<\"c\"\>"}], ",", 
   RowBox[{"\<\"n\"\>", "\[Rule]", "\<\"d\"\>"}], ",", 
   RowBox[{"\<\"o\"\>", "\[Rule]", "\<\"e\"\>"}], ",", 
   RowBox[{"\<\"p\"\>", "\[Rule]", "\<\"f\"\>"}], ",", 
   RowBox[{"\<\"q\"\>", "\[Rule]", "\<\"g\"\>"}], ",", 
   RowBox[{"\<\"r\"\>", "\[Rule]", "\<\"h\"\>"}], ",", 
   RowBox[{"\<\"s\"\>", "\[Rule]", "\<\"i\"\>"}], ",", 
   RowBox[{"\<\"t\"\>", "\[Rule]", "\<\"j\"\>"}], ",", 
   RowBox[{"\<\"u\"\>", "\[Rule]", "\<\"k\"\>"}], ",", 
   RowBox[{"\<\"v\"\>", "\[Rule]", "\<\"l\"\>"}], ",", 
   RowBox[{"\<\"w\"\>", "\[Rule]", "\<\"m\"\>"}], ",", 
   RowBox[{"\<\"x\"\>", "\[Rule]", "\<\"n\"\>"}], ",", 
   RowBox[{"\<\"y\"\>", "\[Rule]", "\<\"o\"\>"}], ",", 
   RowBox[{"\<\"z\"\>", "\[Rule]", "\<\"p\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940042545213451*^9},
 CellLabel->"Out[441]=",
 CellID->887593018,ExpressionUUID->"708c6a4c-cc6c-48d3-ae42-e9cc2142fc06"]
}, Open  ]],

Cell["\<\
If you look now at the FullForm (above), it is clear that we have to reverse \
the order of letters inside each Rule. There is a built-in function Reverse. \
Let us check on a single Rule that it will work:\
\>", "Text",
 CellChangeTimes->{{3.94004255589363*^9, 3.940042558138917*^9}},
 CellID->1354441464,ExpressionUUID->"d8f12679-7dab-4c50-bcbd-0dd3af813886"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "a", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Reverse", "[", 
  RowBox[{"\"\<a\>\"", "->", "\"\<q\>\""}], "]"}]}], "Input",
 CellChangeTimes->{{3.9400425628253117`*^9, 3.9400425710259027`*^9}},
 CellLabel->"In[442]:=",
 CellID->1718056706,ExpressionUUID->"1aeb57aa-20b8-4110-8142-6cca928ad15b"],

Cell[BoxData[
 RowBox[{"\<\"q\"\>", "\[Rule]", "\<\"a\"\>"}]], "Output",
 CellChangeTimes->{3.9400425715988407`*^9},
 CellLabel->"Out[443]=",
 CellID->1663232597,ExpressionUUID->"215ce16f-436a-44f8-86ff-55a0a2922d49"]
}, Open  ]],

Cell["All we have to do now is to Map it on our list of rules:", "Text",
 CellChangeTimes->{3.940042578234221*^9},
 CellID->71792876,ExpressionUUID->"5e0d0402-7b07-4f2a-8f7e-eb56bfe6a342"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"revrules", "=", 
  RowBox[{"Reverse", "/@", "coderules"}]}]], "Input",
 CellChangeTimes->{{3.940042579636918*^9, 3.9400425861942587`*^9}},
 CellLabel->"In[444]:=",
 CellID->243689152,ExpressionUUID->"053af016-66ac-4a22-83d3-0455a64d4cba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"q\"\>", "\[Rule]", "\<\"a\"\>"}], ",", 
   RowBox[{"\<\"r\"\>", "\[Rule]", "\<\"b\"\>"}], ",", 
   RowBox[{"\<\"s\"\>", "\[Rule]", "\<\"c\"\>"}], ",", 
   RowBox[{"\<\"t\"\>", "\[Rule]", "\<\"d\"\>"}], ",", 
   RowBox[{"\<\"u\"\>", "\[Rule]", "\<\"e\"\>"}], ",", 
   RowBox[{"\<\"v\"\>", "\[Rule]", "\<\"f\"\>"}], ",", 
   RowBox[{"\<\"w\"\>", "\[Rule]", "\<\"g\"\>"}], ",", 
   RowBox[{"\<\"x\"\>", "\[Rule]", "\<\"h\"\>"}], ",", 
   RowBox[{"\<\"y\"\>", "\[Rule]", "\<\"i\"\>"}], ",", 
   RowBox[{"\<\"z\"\>", "\[Rule]", "\<\"j\"\>"}], ",", 
   RowBox[{"\<\"a\"\>", "\[Rule]", "\<\"k\"\>"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "\<\"l\"\>"}], ",", 
   RowBox[{"\<\"c\"\>", "\[Rule]", "\<\"m\"\>"}], ",", 
   RowBox[{"\<\"d\"\>", "\[Rule]", "\<\"n\"\>"}], ",", 
   RowBox[{"\<\"e\"\>", "\[Rule]", "\<\"o\"\>"}], ",", 
   RowBox[{"\<\"f\"\>", "\[Rule]", "\<\"p\"\>"}], ",", 
   RowBox[{"\<\"g\"\>", "\[Rule]", "\<\"q\"\>"}], ",", 
   RowBox[{"\<\"h\"\>", "\[Rule]", "\<\"r\"\>"}], ",", 
   RowBox[{"\<\"i\"\>", "\[Rule]", "\<\"s\"\>"}], ",", 
   RowBox[{"\<\"j\"\>", "\[Rule]", "\<\"t\"\>"}], ",", 
   RowBox[{"\<\"k\"\>", "\[Rule]", "\<\"u\"\>"}], ",", 
   RowBox[{"\<\"l\"\>", "\[Rule]", "\<\"v\"\>"}], ",", 
   RowBox[{"\<\"m\"\>", "\[Rule]", "\<\"w\"\>"}], ",", 
   RowBox[{"\<\"n\"\>", "\[Rule]", "\<\"x\"\>"}], ",", 
   RowBox[{"\<\"o\"\>", "\[Rule]", "\<\"y\"\>"}], ",", 
   RowBox[{"\<\"p\"\>", "\[Rule]", "\<\"z\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940042586439167*^9},
 CellLabel->"Out[444]=",
 CellID->1081389122,ExpressionUUID->"9756f301-fe3c-4c18-a088-33c91b5daf54"]
}, Open  ]],

Cell["Now we can decode the message back:", "Text",
 CellChangeTimes->{3.940042593927939*^9},
 CellID->752868893,ExpressionUUID->"8defc9d1-d816-4e80-8962-fd7e29c503d9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decoded", "=", 
  RowBox[{"encode", "[", 
   RowBox[{"coded", ",", "revrules"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940042595371408*^9, 3.94004260188634*^9}},
 CellLabel->"In[445]:=",
 CellID->2033697281,ExpressionUUID->"cfb334cf-88ee-4326-bece-9f57166cab99"],

Cell[BoxData["\<\"never say never\"\>"], "Output",
 CellChangeTimes->{3.9400426021742353`*^9},
 CellLabel->"Out[445]=",
 CellID->1727607198,ExpressionUUID->"a133f41d-2f87-443b-822f-57e686b1712f"]
}, Open  ]],

Cell["\<\
This is a simple example where you can see a nice coexistence and \
complementarity of rule-based and functional programming styles.\
\>", "Text",
 CellChangeTimes->{{3.9400426093571863`*^9, 3.9400426112249203`*^9}},
 CellID->589700241,ExpressionUUID->"467fc01a-c313-4e78-972e-7960a557f154"],

Cell["Example: unsorted union problem revisited", "ItemNumbered",
 CellChangeTimes->{3.940042622015953*^9},
 CellID->791631354,ExpressionUUID->"4ef7074f-a002-4fc3-9b81-9bdad63635d7"],

Cell["\<\
One of the past examples for the <MapIndexed> function was to create an \
unsorted union of elements for some list. In particular, a set of rules for \
elements to their positions was constructed using MapIndexed.\
\>", "Text",
 CellChangeTimes->{{3.940042628423235*^9, 3.940042635367625*^9}},
 CellID->1286973513,ExpressionUUID->"77eaa441-5670-4fbc-b691-314aad39752b"],

Cell["The code for the <unsortedUnion> function looked like:", "Text",
 CellChangeTimes->{{3.940042628423235*^9, 3.9400426312182493`*^9}},
 CellID->1115478117,ExpressionUUID->"3e633967-fac6-449d-b10a-7e1bc17d0000"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "unsortedUnion", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"unsortedUnion", "[", "x_List", "]"}], ":=", 
   RowBox[{"Extract", "[", 
    RowBox[{"x", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{
       RowBox[{"Union", "[", "x", "]"}], "/.", 
       RowBox[{"Dispatch", "[", 
        RowBox[{"MapIndexed", "[", 
         RowBox[{"Rule", ",", "x"}], "]"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940042638512459*^9, 3.940042664489819*^9}},
 CellLabel->"In[446]:=",
 CellID->1691827292,ExpressionUUID->"9db4a9f8-cf0a-4dfc-9795-14f7427195ff"],

Cell["\<\
The same rules can be created using Thread, which we will do now. This will \
be our test list:\
\>", "Text",
 CellChangeTimes->{3.940042672792049*^9},
 CellID->1968780925,ExpressionUUID->"ac8f19d9-81dc-4e42-a24c-b1b275f42d20"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "20", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940042674692424*^9, 3.940042683253067*^9}},
 CellLabel->"In[448]:=",
 CellID->457321389,ExpressionUUID->"21e1e44b-e6fc-4e32-a035-621ccc47cfba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "9", ",", "2", ",", "2", ",", "9", ",", "2", ",", "10", ",", "9", ",", "2", 
   ",", "1", ",", "5", ",", "3", ",", "5", ",", "4", ",", "9", ",", "10", ",",
    "7", ",", "6", ",", "10", ",", "5", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{3.9400426835139303`*^9},
 CellLabel->"Out[448]=",
 CellID->192132943,ExpressionUUID->"8db95f3f-a3a5-4c88-9bab-9984f703bb92"]
}, Open  ]],

Cell["\<\
This will create a set of rules similar to the one we have previously created \
by MapIndexed:\
\>", "Text",
 CellChangeTimes->{3.940042690871595*^9},
 CellID->1510451560,ExpressionUUID->"c3aa0620-521f-487f-ad9b-a74308c8f6ea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Thread", "[", 
  RowBox[{"Rule", "[", 
   RowBox[{"testlist", ",", 
    RowBox[{"Range", "[", 
     RowBox[{"Length", "[", "testlist", "]"}], "]"}]}], "]"}], "]"}]], "Input",\

 CellChangeTimes->{{3.9400426936817293`*^9, 3.940042709118433*^9}},
 CellLabel->"In[450]:=",
 CellID->643804761,ExpressionUUID->"ed4d7123-fc89-4fa4-bfc4-c17896539fac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"9", "\[Rule]", "1"}], ",", 
   RowBox[{"2", "\[Rule]", "2"}], ",", 
   RowBox[{"2", "\[Rule]", "3"}], ",", 
   RowBox[{"9", "\[Rule]", "4"}], ",", 
   RowBox[{"2", "\[Rule]", "5"}], ",", 
   RowBox[{"10", "\[Rule]", "6"}], ",", 
   RowBox[{"9", "\[Rule]", "7"}], ",", 
   RowBox[{"2", "\[Rule]", "8"}], ",", 
   RowBox[{"1", "\[Rule]", "9"}], ",", 
   RowBox[{"5", "\[Rule]", "10"}], ",", 
   RowBox[{"3", "\[Rule]", "11"}], ",", 
   RowBox[{"5", "\[Rule]", "12"}], ",", 
   RowBox[{"4", "\[Rule]", "13"}], ",", 
   RowBox[{"9", "\[Rule]", "14"}], ",", 
   RowBox[{"10", "\[Rule]", "15"}], ",", 
   RowBox[{"7", "\[Rule]", "16"}], ",", 
   RowBox[{"6", "\[Rule]", "17"}], ",", 
   RowBox[{"10", "\[Rule]", "18"}], ",", 
   RowBox[{"5", "\[Rule]", "19"}], ",", 
   RowBox[{"2", "\[Rule]", "20"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.9400427055061283`*^9, 3.940042709505558*^9}},
 CellLabel->"Out[450]=",
 CellID->1931504793,ExpressionUUID->"08a83b6c-06e8-41c7-8a9d-d39f5ade79ae"]
}, Open  ]],

Cell["\<\
The only difference is that the positions are not wrapped in curly braces \
(lists), as they were for MapIndexed:\
\>", "Text",
 CellChangeTimes->{{3.940042730680434*^9, 3.940042732243595*^9}},
 CellID->304825322,ExpressionUUID->"bae29dcf-8530-4263-8ae8-77bfdcd91ac2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapIndexed", "[", 
  RowBox[{"Rule", ",", "testlist"}], "]"}]], "Input",
 CellChangeTimes->{{3.940042735142972*^9, 3.940042741982568*^9}},
 CellLabel->"In[451]:=",
 CellID->1380863661,ExpressionUUID->"c3244240-9b5c-4113-9042-6377865b8af7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", "4", "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", "5", "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", "6", "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", "7", "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", "8", "}"}]}], ",", 
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", "9", "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", "10", "}"}]}], ",", 
   RowBox[{"3", "\[Rule]", 
    RowBox[{"{", "11", "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", "12", "}"}]}], ",", 
   RowBox[{"4", "\[Rule]", 
    RowBox[{"{", "13", "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", "14", "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", "15", "}"}]}], ",", 
   RowBox[{"7", "\[Rule]", 
    RowBox[{"{", "16", "}"}]}], ",", 
   RowBox[{"6", "\[Rule]", 
    RowBox[{"{", "17", "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", "18", "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", "19", "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", "20", "}"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.940042742426332*^9},
 CellLabel->"Out[451]=",
 CellID->525390990,ExpressionUUID->"95bda835-e6f3-4e7c-8a2c-3209d16fe1f0"]
}, Open  ]],

Cell["\<\
We could Map List on the result in our Thread-based realization, like this:\
\>", "Text",
 CellChangeTimes->{3.94004275199664*^9},
 CellID->2027908335,ExpressionUUID->"9d65efe1-18d5-4cd7-a49f-a2a7ecd769ba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Thread", "[", 
  RowBox[{"Rule", "[", 
   RowBox[{"testlist", ",", 
    RowBox[{"List", "/@", 
     RowBox[{"Range", "[", 
      RowBox[{"Length", "[", "testlist", "]"}], "]"}]}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940042755750512*^9, 3.9400427710263777`*^9}},
 CellLabel->"In[452]:=",
 CellID->926643227,ExpressionUUID->"73d4d4bb-d03c-46e5-8edb-22df1c7a93f8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", "3", "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", "4", "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", "5", "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", "6", "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", "7", "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", "8", "}"}]}], ",", 
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", "9", "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", "10", "}"}]}], ",", 
   RowBox[{"3", "\[Rule]", 
    RowBox[{"{", "11", "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", "12", "}"}]}], ",", 
   RowBox[{"4", "\[Rule]", 
    RowBox[{"{", "13", "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", "14", "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", "15", "}"}]}], ",", 
   RowBox[{"7", "\[Rule]", 
    RowBox[{"{", "16", "}"}]}], ",", 
   RowBox[{"6", "\[Rule]", 
    RowBox[{"{", "17", "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", "18", "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", "19", "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", "20", "}"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.940042771356217*^9},
 CellLabel->"Out[452]=",
 CellID->233227146,ExpressionUUID->"c31433d0-a10d-47c4-acc7-1514370b5614"]
}, Open  ]],

Cell["\<\
However, there is a more efficient realization - to keep the list as it is, \
but use Part instead of Extract (Part has a somewhat different syntax and in \
particular accepts a simple list of positions like the one generated by \
Thread). So, this is the final version:\
\>", "Text",
 CellChangeTimes->{{3.940042779585308*^9, 3.940042786559298*^9}},
 CellID->252936490,ExpressionUUID->"0f652140-5c1d-4d7c-aede-eea2090561e0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "unsortedUnionNew", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"unsortedUnionNew", "[", "x_List", "]"}], ":=", 
   RowBox[{"Part", "[", 
    RowBox[{"x", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{
       RowBox[{"Union", "[", "x", "]"}], "/.", 
       RowBox[{"Dispatch", "[", 
        RowBox[{"Thread", "[", 
         RowBox[{"Rule", "[", 
          RowBox[{"x", ",", 
           RowBox[{"Range", "[", 
            RowBox[{"Length", "[", "x", "]"}], "]"}]}], "]"}], "]"}], "]"}]}],
       "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940042790389141*^9, 3.940042830029982*^9}},
 CellLabel->"In[453]:=",
 CellID->1088246382,ExpressionUUID->"2866f908-89ab-4c18-942e-c23b1f65c249"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940042832412201*^9, 3.9400428332693377`*^9}},
 CellID->165750705,ExpressionUUID->"3b18214a-eaac-45b7-92a3-734b990b6f09"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"unsortedUnionNew", "[", "testlist", "]"}]], "Input",
 CellChangeTimes->{{3.9400428342776127`*^9, 3.940042837437285*^9}},
 CellLabel->"In[455]:=",
 CellID->1530960067,ExpressionUUID->"7da5e040-9ec1-4daa-8aca-614489a73bc5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "9", ",", "2", ",", "10", ",", "1", ",", "5", ",", "3", ",", "4", ",", "7", 
   ",", "6"}], "}"}]], "Output",
 CellChangeTimes->{3.940042837897677*^9},
 CellLabel->"Out[455]=",
 CellID->791481930,ExpressionUUID->"3d92aab0-11d7-431d-9a29-0a4623add451"]
}, Open  ]],

Cell["We can now compare performance on some large list:", "Text",
 CellChangeTimes->{3.9400428563501377`*^9},
 CellID->923087992,ExpressionUUID->"ebab0241-d546-478a-b23b-e4e9524a625e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testlist", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1000"}], "}"}], "]"}], ",", 
     RowBox[{"{", "4000", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.940042863710202*^9, 3.940042872957473*^9}},
 CellLabel->"In[456]:=",
 CellID->1565938064,ExpressionUUID->"d0243b44-509e-4253-a9fa-1a3a4e325982"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"unsortedUnion", "[", "testlist", "]"}], ";"}], "//", 
  "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"unsortedUnionNew", "[", "testlist", "]"}], ";"}], "//", 
  "Timing"}]}], "Input",
 CellChangeTimes->{{3.940042875003805*^9, 3.940042906876957*^9}},
 CellLabel->"In[459]:=",
 CellID->275656328,ExpressionUUID->"8e902fdd-8939-4f97-b706-1dee7851613a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.004328`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.940042895619575*^9, 3.940042907191966*^9}},
 CellLabel->"Out[459]=",
 CellID->314493847,ExpressionUUID->"7fd0bdca-bc32-4a37-98d0-0be0def18dd5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.003105`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.940042895619575*^9, 3.9400429072095737`*^9}},
 CellLabel->"Out[460]=",
 CellID->740831262,ExpressionUUID->"a26b3355-bddf-4184-bad8-08e1aa41e76e"]
}, Open  ]],

Cell["The performance is roughly the same.", "Text",
 CellChangeTimes->{3.94004291966397*^9},
 CellID->105904064,ExpressionUUID->"35dba781-3ce5-4d5b-b138-b986f907e2b1"],

Cell["\<\
There are more capabilities of the Thread command. Some of them are discussed \
in Mathematica Help. We will eventually discuss them as we get to examples \
where they are useful.\
\>", "Text",
 CellChangeTimes->{{3.940042926039959*^9, 3.940042927802678*^9}},
 CellID->1813143932,ExpressionUUID->"266ad442-76f3-4466-b02b-b9a1621ae5ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell["MapThread", "Subsubsection",
 CellChangeTimes->{3.9400429364042683`*^9},
 CellID->860031594,ExpressionUUID->"f99c070d-a94c-40a5-a897-40d56bce7218"],

Cell["\<\
MapThread is a close cousin of Thread, with several important differences. \
First, the format of the command is somewhat different:\
\>", "Text",
 CellChangeTimes->{{3.9400429438387814`*^9, 3.940042945759911*^9}},
 CellID->1986056048,ExpressionUUID->"0f77961a-dfe6-438e-bf26-ca9c283e6083"],

Cell[BoxData[
 RowBox[{"MapThread", "[", 
  RowBox[{"function", ",", 
   RowBox[{"{", 
    RowBox[{"arglist1", ",", " ", "arglist2", ",", " ", "..."}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9400429516265574`*^9, 3.9400429628081493`*^9}},
 CellID->1465180859,ExpressionUUID->"893f4847-2ff6-4d5f-acd0-e2dd3398bb76"],

Cell["\<\
For MapThread, unlike Thread, the lists of arguments <arglist1,...> should \
all be of the same length.\
\>", "Text",
 CellChangeTimes->{3.9400429731416407`*^9},
 CellID->449386877,ExpressionUUID->"ab742b32-c025-41b9-a253-276e505c94d6"],

Cell["Simple examples", "ItemNumbered",
 CellChangeTimes->{3.940042982995982*^9},
 CellID->145255240,ExpressionUUID->"bd9389f1-a2d9-46ea-b050-4546a93e4123"],

Cell[TextData[StyleBox["Threading",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940042990407387*^9, 3.940042994032051*^9}},
 CellID->1763395688,ExpressionUUID->"82bfe0ef-5ebe-4efb-948f-1d1a9d926198"],

Cell["\<\
This does the same as Thread, for a generic head (function) <f>:\
\>", "Text",
 CellChangeTimes->{3.940042990407387*^9},
 CellID->2122942822,ExpressionUUID->"5b50d47e-5801-412c-85c2-a23a77b5659e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "f", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"MapThread", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Range", "[", "10", "]"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"11", ",", "20"}], "]"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.940042997988408*^9, 3.940043009221449*^9}},
 CellLabel->"In[461]:=",
 CellID->344223337,ExpressionUUID->"26b398b1-716a-4a9f-823e-dded24d1c8b4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "11"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"2", ",", "12"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "13"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"4", ",", "14"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"5", ",", "15"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"6", ",", "16"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"7", ",", "17"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"8", ",", "18"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"9", ",", "19"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"10", ",", "20"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940043010343892*^9},
 CellLabel->"Out[462]=",
 CellID->2004383325,ExpressionUUID->"83707925-7993-4f7c-89c8-4c5f179d1056"]
}, Open  ]],

Cell[TextData[StyleBox["Multiplying numbers pairwise in two lists",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.9400430428170033`*^9, 3.940043048077241*^9}},
 CellID->1664875648,ExpressionUUID->"3a998438-5b83-488e-8f83-aecf0e09360a"],

Cell["\<\
Here we use a concrete function Times to multiply the numbers in the two \
lists pairwise.\
\>", "Text",
 CellChangeTimes->{3.9400430428170033`*^9},
 CellID->905604004,ExpressionUUID->"678e7563-97d7-4581-87fc-4d4ef3f26b92"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapThread", "[", 
  RowBox[{"Times", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Range", "[", "10", "]"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"11", ",", "20"}], "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9400430521976357`*^9, 3.940043062650743*^9}},
 CellLabel->"In[463]:=",
 CellID->1330913887,ExpressionUUID->"38be9a9b-795a-4a16-bfd8-22ea27fac204"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "11", ",", "24", ",", "39", ",", "56", ",", "75", ",", "96", ",", "119", 
   ",", "144", ",", "171", ",", "200"}], "}"}]], "Output",
 CellChangeTimes->{3.9400430630355387`*^9},
 CellLabel->"Out[463]=",
 CellID->2098499577,ExpressionUUID->"0db5044c-b3d0-443d-9736-c226ffdc6d9d"]
}, Open  ]],

Cell["\<\
Notice that this operation is done easier by just multiplying two lists (this \
is possible because Times is a Listable operation):\
\>", "Text",
 CellChangeTimes->{{3.940043072288661*^9, 3.940043073961548*^9}},
 CellID->1670634849,ExpressionUUID->"45c0aeec-99fe-474b-9267-44df0026858c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Range", "[", "10", "]"}], "*", 
  RowBox[{"Range", "[", 
   RowBox[{"11", ",", "20"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9400430759717617`*^9, 3.940043080919585*^9}},
 CellLabel->"In[464]:=",
 CellID->749247776,ExpressionUUID->"9e43589c-8c84-4ed9-93b4-ef13deb1d49f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "11", ",", "24", ",", "39", ",", "56", ",", "75", ",", "96", ",", "119", 
   ",", "144", ",", "171", ",", "200"}], "}"}]], "Output",
 CellChangeTimes->{3.9400430812198277`*^9},
 CellLabel->"Out[464]=",
 CellID->1539394550,ExpressionUUID->"10ab7edf-7b19-4298-b533-096f54c48c49"]
}, Open  ]],

Cell["\<\
As it became a habit, let us digress to measure relative performance:\
\>", "Text",
 CellChangeTimes->{3.940043091504065*^9},
 CellID->1868706441,ExpressionUUID->"712c2cc5-18d0-44ba-8a31-2ccdca301286"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MapThread", "[", 
    RowBox[{"Times", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Range", "[", "100", "]"}], ",", 
       RowBox[{"Range", "[", 
        RowBox[{"101", ",", "200"}], "]"}]}], "}"}]}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940043112902725*^9, 3.940043119740035*^9}},
 CellLabel->"In[465]:=",
 CellID->1133810754,ExpressionUUID->"fe5ed26f-caa8-4c3d-818c-6fdeff69902b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000097`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940043120183832*^9},
 CellLabel->"Out[465]=",
 CellID->671074624,ExpressionUUID->"82e97b71-c76e-4d3d-b5df-37675edfc196"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Range", "[", "100", "]"}], "*", 
    RowBox[{"Range", "[", 
     RowBox[{"101", ",", "200"}], "]"}]}], ";"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940043127617073*^9, 3.940043133177948*^9}},
 CellLabel->"In[466]:=",
 CellID->167091524,ExpressionUUID->"f91f7a27-229d-45ec-a8f1-a3905a9507fe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000043`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940043133543693*^9},
 CellLabel->"Out[466]=",
 CellID->1430345249,ExpressionUUID->"67ff2c2c-89dd-4f55-b435-feb2a865e6df"]
}, Open  ]],

Cell["\<\
Here we find a 15-20 times difference! In fact, by trying smaller and larger \
lists you can convince yourself that this factor is not constant. Instead, \
the performance gap increases even more as the lists get longer. The reason \
is that the operations like list multiplication (also dot product etc) are \
highly optimized in Mathematica, while MapThread is a good, but general \
purpose command. \
\>", "Text",
 CellChangeTimes->{{3.9400431466041822`*^9, 3.940043167270075*^9}},
 CellID->1547863323,ExpressionUUID->"40a10065-c3b1-4753-ae01-a9c739d9cf4a"],

Cell["\<\
For the record, in this particular case, and for machine-size numbers, a \
cheap way to speed-up Map-Thread is to compile the code:\
\>", "Text",
 CellChangeTimes->{{3.9400431466041822`*^9, 3.940043178990137*^9}},
 CellID->1922991410,ExpressionUUID->"91053a4d-1833-435f-9777-faff6fbc30e2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"comp", "=", 
    RowBox[{"Compile", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "_Integer", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", "_Integer", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"MapThread", "[", 
       RowBox[{"Times", ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "y"}], "}"}]}], "]"}]}], "]"}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9400432001784887`*^9, 3.940043229988447*^9}},
 CellLabel->"In[467]:=",
 CellID->2000018609,ExpressionUUID->"3fb064ba-996f-4397-b98d-88793336832d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000152`", ",", 
   InterpretationBox[
    RowBox[{
     TagBox["CompiledFunction",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{
                Thickness[0.038461538461538464`], {
                 FaceForm[{
                   GrayLevel[0.93], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                  25.499999999999996`, 2.5}, {25.499999999999996`, 
                  1.3953100000000003`}, {24.604699999999998`, 
                  0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                  0.49999999999999994`}, {1.3953100000000003`, 
                  0.49999999999999994`}, {0.49999999999999994`, 
                  1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                  0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                  24.604699999999998`}, {1.3953100000000003`, 
                  25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                  25.499999999999996`}, {24.604699999999998`, 
                  25.499999999999996`}, {25.499999999999996`, 
                  24.604699999999998`}, {25.499999999999996`, 23.5}, {
                  25.499999999999996`, 2.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.5, 0.5, 0.5], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                  19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                  16.3832, 20.021499999999996`}, {6.930469999999999, 
                  20.021499999999996`}, {6.930469999999999, 
                  18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                  16.3832, 16.357399999999995`}, {20.5426, 
                  19.116799999999998`}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 
                  13.8391}, {9.46445, 11.079700000000003`}, {9.46445, 
                  12.933999999999997`}, {18.917199999999998`, 
                  12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                  9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4r9qIkoPPog5zJd34+ifoeBwf6HGBfU8aYe0
2dKXhaMEHT77F2xc1CQH52elHtL/aqrg0KrArnpmjpRDvTCXYEG9gsOOYKuI
/6tlHZ5WFpRfO4qQn3ww8NOrXYpw/fNmfE3SCFCG8z8EiLwQ7lSF2w82/44y
nM937b/lmXNKDnK7FuxLZZFwMDfq/3NwgpKDccaL+Q9miDok9Mnt3x6k5FDt
mbylT0ECwk9QhOuXWfO/eIajPCq/WNYh5kh50jV+CYc1eV/nfGGShZsXte2a
OGevDNy8ZqG0W/9KpeD60cMLAIwUgfU=
                  "]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.82453, 
                  5.289294374999999}, {11.960858124999998`, 8.29796625}, {
                  11.080858124999999`, 8.29796625}, {12.417186249999999`, 
                  4.337966249999999}, {13.193201874999998`, 
                  4.337966249999999}, {14.540701874999998`, 8.29796625}, {
                  13.688201874999999`, 8.29796625}, {12.82453, 
                  5.289294374999999}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                   0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIpIGYC4qwFP+fsFjB0WFcz7fnBvSIOLFaTza6GGTjM
l3fj6J+h4GC9PHLBXXc9DH7abOnLwlGCDtPNZKaxndfH4Is8/uOrISAD53uI
GTRGxyP4O4KtIv6fR/BbFdhVz8TIOqj9FNyfdEbfIejt5Y8zXiL4h7TunbCJ
koPzweYvkXP4mfT+6PSlBnD7n25Z/mROiSGcr7S/rqPX1AiuHsaHmQfjw+zz
lubzZjYxgrsHxoe5F8aH+QfGn/B91VROQQQfZr/Ei1viF75j8mHh6eiSdevo
cUM4Hz0+AG0eosQ=
                  "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
               AspectRatio -> 1, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    StyleBox[
                    PaneBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_Integer", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"_Integer", ",", "1"}], "}"}]}], "}"}], 
                    ContentPadding -> False, FrameMargins -> 0, StripOnInput -> 
                    True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{
                Thickness[0.038461538461538464`], {
                 FaceForm[{
                   GrayLevel[0.93], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                  25.499999999999996`, 2.5}, {25.499999999999996`, 
                  1.3953100000000003`}, {24.604699999999998`, 
                  0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                  0.49999999999999994`}, {1.3953100000000003`, 
                  0.49999999999999994`}, {0.49999999999999994`, 
                  1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                  0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                  24.604699999999998`}, {1.3953100000000003`, 
                  25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                  25.499999999999996`}, {24.604699999999998`, 
                  25.499999999999996`}, {25.499999999999996`, 
                  24.604699999999998`}, {25.499999999999996`, 23.5}, {
                  25.499999999999996`, 2.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.5, 0.5, 0.5], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                  19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                  16.3832, 20.021499999999996`}, {6.930469999999999, 
                  20.021499999999996`}, {6.930469999999999, 
                  18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                  16.3832, 16.357399999999995`}, {20.5426, 
                  19.116799999999998`}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 
                  13.8391}, {9.46445, 11.079700000000003`}, {9.46445, 
                  12.933999999999997`}, {18.917199999999998`, 
                  12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                  9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4r9qIkoPPog5zJd34+ifoeBwf6HGBfU8aYe0
2dKXhaMEHT77F2xc1CQH52elHtL/aqrg0KrArnpmjpRDvTCXYEG9gsOOYKuI
/6tlHZ5WFpRfO4qQn3ww8NOrXYpw/fNmfE3SCFCG8z8EiLwQ7lSF2w82/44y
nM937b/lmXNKDnK7FuxLZZFwMDfq/3NwgpKDccaL+Q9miDok9Mnt3x6k5FDt
mbylT0ECwk9QhOuXWfO/eIajPCq/WNYh5kh50jV+CYc1eV/nfGGShZsXte2a
OGevDNy8ZqG0W/9KpeD60cMLAIwUgfU=
                  "]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.82453, 
                  5.289294374999999}, {11.960858124999998`, 8.29796625}, {
                  11.080858124999999`, 8.29796625}, {12.417186249999999`, 
                  4.337966249999999}, {13.193201874999998`, 
                  4.337966249999999}, {14.540701874999998`, 8.29796625}, {
                  13.688201874999999`, 8.29796625}, {12.82453, 
                  5.289294374999999}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                   0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIpIGYC4qwFP+fsFjB0WFcz7fnBvSIOLFaTza6GGTjM
l3fj6J+h4GC9PHLBXXc9DH7abOnLwlGCDtPNZKaxndfH4Is8/uOrISAD53uI
GTRGxyP4O4KtIv6fR/BbFdhVz8TIOqj9FNyfdEbfIejt5Y8zXiL4h7TunbCJ
koPzweYvkXP4mfT+6PSlBnD7n25Z/mROiSGcr7S/rqPX1AiuHsaHmQfjw+zz
lubzZjYxgrsHxoe5F8aH+QfGn/B91VROQQQfZr/Ei1viF75j8mHh6eiSdevo
cUM4Hz0+AG0eosQ=
                  "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
               AspectRatio -> 1, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_Integer", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"_Integer", ",", "1"}], "}"}]}], "}"}], 
                    ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Variables: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"x", ",", "y"}], "}"}], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Expression: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Times", ",", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", "y"}], "}"}]}], "]"}], 
                    ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    CompiledFunction[{11, 14.1, 5470}, {{
       Blank[Integer], 1}, {
       Blank[Integer], 1}}, {{2, 1, 0}, {2, 1, 1}, {2, 1, 
     2}}, {{0, {2, 0, 7}}, {1, {2, 0, 3}}}, {0, 10, 0, 0, 
     3}, {{33, 1, 2}, {6, 7, 6}, {35, 2, 2, 2}, {6, 7, 4}, {3, 5}, {37, 0, 4, 
      2, 8}, {37, 1, 4, 2, 9}, {15, 8, 9, 8}, {36, 6, 8, 2, 2}, {4, 4, 
      2, -4}, {1}}, 
     Function[{$CellContext`x, $CellContext`y}, 
      MapThread[Times, {$CellContext`x, $CellContext`y}]], Evaluate],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.9400432304634027`*^9},
 CellLabel->"Out[467]=",
 CellID->460396010,ExpressionUUID->"dabc5614-8bfd-4580-a98a-56c0b88c594b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"comp", "[", 
    RowBox[{
     RowBox[{"Range", "[", "100", "]"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"101", ",", "200"}], "]"}]}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940043240963194*^9, 3.9400432567538443`*^9}},
 CellLabel->"In[469]:=",
 CellID->1772402106,ExpressionUUID->"feb3f765-2900-4147-a5dd-0722bf95248f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00004`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.9400432523659983`*^9, 3.940043257025696*^9}},
 CellLabel->"Out[469]=",
 CellID->1489970091,ExpressionUUID->"6f416491-570b-4723-bbfe-5287b7b17a65"]
}, Open  ]],

Cell["\<\
As is clear from these timings, this will pay off (as compared to the \
uncompiled version) if many operations such as this are needed, since \
compilation also takes some time. And also, even the compiled version is \
about 3 times slower than the one based on Times being Listable.\
\>", "Text",
 CellChangeTimes->{{3.9400432951595917`*^9, 3.940043301540461*^9}},
 CellID->337112242,ExpressionUUID->"02ea4ba1-67cc-4ea1-9cfa-4c6040e99409"],

Cell["Thread and MapThread: important difference in evaluation", \
"ItemNumbered",
 CellChangeTimes->{3.940043314765358*^9},
 CellID->1435944552,ExpressionUUID->"6d5d182c-1141-42fc-b7e2-551d22a39f60"],

Cell["\<\
There is one more important difference between Thread and MapThread which I \
would like to illustrate now. For this purpose, let us measure also the \
performance of Thread on the same problem:\
\>", "Text",
 CellChangeTimes->{{3.940043321753295*^9, 3.940043325425849*^9}},
 CellID->498860478,ExpressionUUID->"87b6df5a-4ae4-4352-a13f-a9c2ba2fc428"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Thread", "[", 
    RowBox[{"Times", "[", 
     RowBox[{
      RowBox[{"Range", "[", "100", "]"}], ",", 
      RowBox[{"Range", "[", 
       RowBox[{"101", ",", "200"}], "]"}]}], "]"}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940043328290862*^9, 3.9400433425046597`*^9}},
 CellLabel->"In[470]:=",
 CellID->450022990,ExpressionUUID->"2f8fa7d8-d28b-4e18-aed2-668e36ec7893"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000072`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940043342965849*^9},
 CellLabel->"Out[470]=",
 CellID->193871534,ExpressionUUID->"b2198978-16c9-4ba7-b04c-af1e24cd9e5e"]
}, Open  ]],

Cell["\<\
It looks like Thread performs here an order of magnitude faster than \
MapThread. But this is an illusion.To see what really happens, let us Trace \
the execution for small lists:\
\>", "Text",
 CellChangeTimes->{{3.94004336120866*^9, 3.940043363671749*^9}},
 CellID->1249920173,ExpressionUUID->"65f2d028-7747-4d3f-b4fd-d874c1ebb2c6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Thread", "[", 
   RowBox[{"Times", "[", 
    RowBox[{
     RowBox[{"Range", "[", "10", "]"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"11", ",", "20"}], "]"}]}], "]"}], "]"}], "//", 
  "Trace"}]], "Input",
 CellChangeTimes->{{3.940043377937737*^9, 3.9400433892498407`*^9}},
 CellLabel->"In[471]:=",
 CellID->723312657,ExpressionUUID->"0ebb4914-b7ce-404e-a491-5bc09e17eb73"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"Range", "[", "10", "]"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"{", 
         RowBox[{
         "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",",
           "8", ",", "9", ",", "10"}], "}"}],
        HoldForm]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"Range", "[", 
         RowBox[{"11", ",", "20"}], "]"}],
        HoldForm], ",", 
       TagBox[
        RowBox[{"{", 
         RowBox[{
         "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", 
          "17", ",", "18", ",", "19", ",", "20"}], "}"}],
        HoldForm]}], "}"}], ",", 
     TagBox[
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
         "8", ",", "9", ",", "10"}], "}"}], " ", 
       RowBox[{"{", 
        RowBox[{
        "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", 
         "17", ",", "18", ",", "19", ",", "20"}], "}"}]}],
      HoldForm], ",", 
     TagBox[
      RowBox[{"{", 
       RowBox[{
       "11", ",", "24", ",", "39", ",", "56", ",", "75", ",", "96", ",", 
        "119", ",", "144", ",", "171", ",", "200"}], "}"}],
      HoldForm]}], "}"}], ",", 
   TagBox[
    RowBox[{"Thread", "[", 
     RowBox[{"{", 
      RowBox[{
      "11", ",", "24", ",", "39", ",", "56", ",", "75", ",", "96", ",", "119",
        ",", "144", ",", "171", ",", "200"}], "}"}], "]"}],
    HoldForm], ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
     "11", ",", "24", ",", "39", ",", "56", ",", "75", ",", "96", ",", "119", 
      ",", "144", ",", "171", ",", "200"}], "}"}],
    HoldForm]}], "}"}]], "Output",
 CellChangeTimes->{3.9400433899007683`*^9},
 CellLabel->"Out[471]=",
 CellID->714182468,ExpressionUUID->"d4798c6c-7a2f-452a-a896-af702a8a451a"]
}, Open  ]],

Cell["\<\
What we see is that the Times command is evaluated, producing the final list, \
before Thread has any chance to execute. Thus, the role of Thread here is \
just to stay idle. This is why the performance is so close to the one given \
by direct multiplication - the main work is again done by the Times command. \
In fact, what happened was to be expected: the standard evaluation procedure \
consists in evaluating inner expressions before the outer ones. So, Thread \
evaluates its arguments in the standard way.\
\>", "Text",
 CellChangeTimes->{{3.940043405052505*^9, 3.940043428960423*^9}},
 CellID->396930300,ExpressionUUID->"ec8b4ffd-79cc-4609-8477-7e841bd5b926"],

Cell["\<\
While MapThread also evaluates arguments in a standard way, it has a \
different syntax where the function to be threaded is a separate argument of \
MapThread. Thus, the above behavior can not happen here. This constitutes one \
important difference between Thread and MapThread functionality.\
\>", "Text",
 CellChangeTimes->{{3.940043405052505*^9, 3.9400434371271067`*^9}},
 CellID->1347333049,ExpressionUUID->"b91cfd84-b126-49be-a704-1d6c2fd7b8a8"],

Cell["Case study: checking lists for equality", "ItemNumbered",
 CellChangeTimes->{3.9400434465502577`*^9},
 CellTags->"5.3.2.3",
 CellID->1796829426,ExpressionUUID->"29094f2d-49e0-47d9-bb55-c5d8ac528f8c"],

Cell[TextData[StyleBox["Checking lists for equality",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940043452722238*^9, 3.9400434560958443`*^9}},
 CellID->1397118668,ExpressionUUID->"28547271-68dd-4bd8-9849-6bee76eb6778"],

Cell["\<\
One could use MapThread for element-by-element comparison of several lists:\
\>", "Text",
 CellChangeTimes->{3.940043452722238*^9},
 CellID->598795017,ExpressionUUID->"f4c90e6d-98f2-4358-a8ed-537bc9af8be2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapThread", "[", 
  RowBox[{"Equal", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], "}"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.9400434598564463`*^9, 3.94004347746137*^9}},
 CellLabel->"In[472]:=",
 CellID->187538949,ExpressionUUID->"ec533cc6-21e4-487c-9cfe-04e4e870c5bc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", "True", ",", "True", ",", "True", ",", "True"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9400434789415407`*^9},
 CellLabel->"Out[472]=",
 CellID->724225355,ExpressionUUID->"6dc711f1-b11b-423f-ae3f-4c9f3fcb019d"]
}, Open  ]],

Cell["Now,", "Text",
 CellChangeTimes->{{3.9400434824581537`*^9, 3.9400434843496647`*^9}},
 CellID->1677025376,ExpressionUUID->"7be04f5c-3e85-47c4-9851-bd141b03be42"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapThread", "[", 
  RowBox[{"Equal", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "10", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], "}"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.940043494398204*^9, 3.940043494742156*^9}},
 CellLabel->"In[473]:=",
 CellID->1434126948,ExpressionUUID->"13cb7039-b71d-4690-91cd-716a64d6ecaa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", "True", ",", "False", ",", "True", ",", "True"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940043495094598*^9},
 CellLabel->"Out[473]=",
 CellID->1871558415,ExpressionUUID->"9a421c2c-5894-4d53-9a6c-aaf5ff214627"]
}, Open  ]],

Cell["We need to Apply And to get a final result:", "Text",
 CellChangeTimes->{3.940043504437151*^9},
 CellID->193241838,ExpressionUUID->"56151d15-14fd-4f85-b27a-223274fd5f12"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"MapThread", "[", 
   RowBox[{"Equal", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "10", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
     "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940043510902153*^9, 3.940043512416951*^9}},
 CellLabel->"In[474]:=",
 CellID->2034182521,ExpressionUUID->"56e37646-8fa0-4cff-9400-3dd1103709dc"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.940043513231687*^9},
 CellLabel->"Out[474]=",
 CellID->710728758,ExpressionUUID->"4b686335-6fe6-4bf9-9086-3532c996912b"]
}, Open  ]],

Cell[TextData[StyleBox["Making a listEqualQ function",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.9400435205839777`*^9, 3.940043523550295*^9}},
 CellID->1401680585,ExpressionUUID->"3f57c929-3992-4434-aa84-a1adb1fecac1"],

Cell["We can now make a function:", "Text",
 CellChangeTimes->{3.9400435205839777`*^9},
 CellID->93303135,ExpressionUUID->"69d21894-29b6-4f78-8bd0-51743efe81b1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "listEqualQ", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"listEqualQ", "[", "lists__List", "]"}], "/;", 
    RowBox[{"Equal", "@@", 
     RowBox[{"Map", "[", 
      RowBox[{"Length", ",", 
       RowBox[{"{", "lists", "}"}]}], "]"}]}]}], ":=", 
   RowBox[{"And", "@@", 
    RowBox[{"MapThread", "[", 
     RowBox[{"Equal", ",", 
      RowBox[{"{", "lists", "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"listEqualQ", "[", "lists__List", "]"}], ":=", "False"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940043528560049*^9, 3.940043576030439*^9}},
 CellLabel->"In[475]:=",
 CellID->381572170,ExpressionUUID->"f5ea3a38-e23e-4d4f-8ef7-81a9e12d3432"],

Cell["\<\
I have used this opportunity to illustrate several issues. First, the pattern \
<lists__List> immediately ensures that the function is defined on any \
non-zero number of lists, and only lists - otherwise the pattern will not \
match. Next, we attach a condition that all lists are of equal length. If \
this is not so, the conditional pattern in the first line will not match, but \
the pattern in the second definition is more general and will match - we will \
get False then, since we consider the lists of different lengths to be always \
different. At the same time, this condition-checking ensures that MapThread \
on the r.h.s will always receive lists of equal length, which is a \
pre-requisite for MapThread.\
\>", "Text",
 CellChangeTimes->{{3.940043584663053*^9, 3.940043613433956*^9}},
 CellID->1143308411,ExpressionUUID->"2062cbe8-4dab-481f-9eaf-4d62e48f378f"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940043584663053*^9, 3.94004361117815*^9}},
 CellID->695089637,ExpressionUUID->"e6c36051-5828-48ae-b533-9ba5db48a3bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listEqualQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9400436155471992`*^9, 3.9400436208658743`*^9}},
 CellLabel->"In[478]:=",
 CellID->885227822,ExpressionUUID->"dc81b367-4ec5-4dee-ba73-cca4ae5b87ca"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9400436212502337`*^9},
 CellLabel->"Out[478]=",
 CellID->196962998,ExpressionUUID->"84dddca3-d1fc-4887-bf39-52b4e75191fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listEqualQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9400436308486357`*^9, 3.940043631117195*^9}},
 CellLabel->"In[479]:=",
 CellID->1084807359,ExpressionUUID->"437c6dce-109e-4391-ba97-ce03f929bd4e"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.940043631453862*^9},
 CellLabel->"Out[479]=",
 CellID->1394499856,ExpressionUUID->"5c9658f7-c8fb-47ea-8736-846e5e069dd9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listEqualQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "a", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940043637584351*^9, 3.94004363767209*^9}},
 CellLabel->"In[480]:=",
 CellID->1967849965,ExpressionUUID->"f39c2bb5-73cc-4eaa-aff1-e61bb822c5cf"],

Cell[BoxData[
 RowBox[{"listEqualQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "a", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.940043637946868*^9},
 CellLabel->"Out[480]=",
 CellID->326763411,ExpressionUUID->"3272be41-88b2-4654-9ebe-599d6507c54f"]
}, Open  ]],

Cell["\<\
Notice the last case: the function remained unevaluated rather than giving \
False. This behavior is consistent with the general Mathematica ideology that \
whenever the system can not decide, the expression should return unevaluated. \
In particular, we may consider the following code:\
\>", "Text",
 CellChangeTimes->{{3.9400436509488993`*^9, 3.940043661074699*^9}},
 CellID->1276359842,ExpressionUUID->"54e00a3b-fa91-4c33-8c69-2348d9316aec"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "a", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"answer", "=", 
   RowBox[{"listEqualQ", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "a", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", "answer"}], "Input",
 CellChangeTimes->{{3.9400436665288277`*^9, 3.940043687036962*^9}},
 CellLabel->"In[481]:=",
 CellID->2074840278,ExpressionUUID->"45e77062-ad33-4ef0-b927-330fc20447da"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.940043687927909*^9},
 CellLabel->"Out[484]=",
 CellID->1940154013,ExpressionUUID->"00f3daba-a02a-4796-a0f4-7e702a26e868"]
}, Open  ]],

Cell["\<\
At the time when <answer> was computed, the value of <a> was such that there \
was no definite result (<a> had no value). Later <a> received a value, which \
enabled <answer> to evaluate do a definite value (True in this case). I don\
\[CloseCurlyQuote]t want to encourage this style of programming (dependence \
on global variables in this fashion), but just to illustrate that our \
function <listsEqualQ> has a standard behavior, expected normally from \
Mathematica built-in functions. Had we used as a second definition something \
like <listsEqualQ[x_]:=False>, this would produce False on any input not \
matching the pattern of the first definition, and the behavior would be \
different. In general, it is a good practice to try make your own functions \
behave as much as built-in ones, as possible.\
\>", "Text",
 CellChangeTimes->{{3.9400437010127068`*^9, 3.940043728379315*^9}},
 CellID->776800443,ExpressionUUID->"9766d1e1-977d-4bb7-976c-c6746c05df37"],

Cell[TextData[StyleBox["Performance analysis",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.9400437375386477`*^9, 3.94004374026735*^9}},
 CellID->1869124575,ExpressionUUID->"fd32224a-2be8-43d0-bd4c-67907bf5247a"],

Cell["\<\
Let us look now at the performance of our function. An immediate comment here \
is that the built-in Equal works on lists, which means that our function will \
almost certainly be slower or much slower. Let us see how much slower:\
\>", "Text",
 CellChangeTimes->{{3.9400437375386477`*^9, 3.940043745657929*^9}},
 CellID->1536588003,ExpressionUUID->"171fde3c-2190-46d4-be9c-e2277c9bf166"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"listEqualQ", "[", 
    RowBox[{
     RowBox[{"Range", "[", "1000", "]"}], ",", 
     RowBox[{"Range", "[", "1000", "]"}], ",", 
     RowBox[{"Range", "[", "1000", "]"}]}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940043751244625*^9, 3.940043763102147*^9}},
 CellLabel->"In[485]:=",
 CellID->1480813340,ExpressionUUID->"7b11f557-3aa7-4267-b607-ffe3cd3c9616"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000499`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.9400437634277067`*^9},
 CellLabel->"Out[485]=",
 CellID->437479031,ExpressionUUID->"098db87d-847d-4f68-9d32-4cbeec1d659d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Equal", "[", 
    RowBox[{
     RowBox[{"Range", "[", "1000", "]"}], ",", 
     RowBox[{"Range", "[", "1000", "]"}], ",", 
     RowBox[{"Range", "[", "1000", "]"}]}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940043765840115*^9, 3.9400437786755037`*^9}},
 CellLabel->"In[486]:=",
 CellID->856367305,ExpressionUUID->"d07bdf82-da35-40a4-95c5-dda106f03326"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000039`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.9400437789804773`*^9},
 CellLabel->"Out[486]=",
 CellID->1142011531,ExpressionUUID->"b6cbe853-1e16-4258-aaa7-dc79a485a00f"]
}, Open  ]],

Cell["\<\
I get about 100 times difference on my machine, for the length of the lists \
equal 1000. In fact, this coefficient is not constant but depends on the size \
of the lists and will increase with it - here we have different computational \
complexities. Let us see how much faster we can go if we drop the \
equal-length condition and pattern-matching:\
\>", "Text",
 CellChangeTimes->{{3.9400437899869213`*^9, 3.9400438000652742`*^9}},
 CellID->1299349427,ExpressionUUID->"75793a97-ba0e-40d9-8daf-73e715a4d498"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"And", "@@", 
    RowBox[{"MapThread", "[", 
     RowBox[{"Equal", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Range", "[", "1000", "]"}], ",", 
        RowBox[{"Range", "[", "1000", "]"}], ",", 
        RowBox[{"Range", "[", "1000", "]"}]}], "}"}]}], "]"}]}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940043817243102*^9, 3.940043834922621*^9}},
 CellLabel->"In[487]:=",
 CellID->232375424,ExpressionUUID->"557d1571-2102-4505-b6d8-767a69d84432"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000502`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940043835323852*^9},
 CellLabel->"Out[487]=",
 CellID->1196866447,ExpressionUUID->"8372facf-3743-48ce-9dac-bdee845fe958"]
}, Open  ]],

Cell["\<\
We see that we get about 1.5 increase in performance by doing so, but are \
still miles away from the built-in function Equal. In the particular case of \
the present problem, there exists another way of doing this with performance \
roughly equivalent to our previous implementation:\
\>", "Text",
 CellChangeTimes->{{3.940043845780561*^9, 3.940043851412592*^9}},
 CellID->255053280,ExpressionUUID->"7b80570b-19cb-4946-a945-89fc9fa02e2e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"And", ",", 
   RowBox[{"Equal", "@@@", 
    RowBox[{"Transpose", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Range", "[", "10", "]"}], ",", 
       RowBox[{"Range", "[", "10", "]"}], ",", 
       RowBox[{"Range", "[", "10", "]"}]}], "}"}], "]"}]}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.940043864043777*^9, 3.940043889511218*^9}},
 CellLabel->"In[488]:=",
 CellID->812849343,ExpressionUUID->"612aeaeb-dd00-4791-850b-79cf9221f28d"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9400438919495087`*^9},
 CellLabel->"Out[488]=",
 CellID->723952630,ExpressionUUID->"3b5699a4-eaac-4daf-b324-fe904053956c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Apply", "[", 
   RowBox[{"And", ",", 
    RowBox[{"Equal", "@@@", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Range", "[", "1000", "]"}], ",", 
        RowBox[{"Range", "[", "1000", "]"}], ",", 
        RowBox[{"Range", "[", "1000", "]"}]}], "}"}], "]"}]}]}], "]"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940043899861971*^9, 3.940043912780758*^9}},
 CellLabel->"In[490]:=",
 CellID->1976992155,ExpressionUUID->"7fba7317-4d0d-49b7-ba3e-2cbf9ddeb525"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000683`", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{{3.940043907781546*^9, 3.940043913127865*^9}},
 CellLabel->"Out[490]=",
 CellID->1010555364,ExpressionUUID->"283ecca6-e762-4743-a75d-bd268c939add"]
}, Open  ]],

Cell["Do you understand the way the code works in this case?", "Text",
 CellChangeTimes->{{3.940043929387415*^9, 3.940043931740574*^9}},
 CellID->1100630753,ExpressionUUID->"3b58019e-803b-4979-9b08-5648053947bd"],

Cell[TextData[StyleBox["A faster implementation",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940043929387415*^9, 3.940043934349711*^9}},
 CellID->1585545231,ExpressionUUID->"66ab5b27-d16d-45fb-bf92-a01cf031898c"],

Cell["\<\
To complete this story, let me display a solution which is more tricky, still \
much slower than the built-in Equal, but can give a factor of 4-5 increase in \
performance as compared to the above (in fact, the difference is more in \
Mathematica 5.. versions than in Mathematica 6, where the code below seems to \
work about twice slower for some reason):\
\>", "Text",
 CellChangeTimes->{{3.940043929387415*^9, 3.940043942985235*^9}},
 CellID->267476358,ExpressionUUID->"87177a48-3e22-4458-94f5-99e7140ab8a2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "listEqualQNew", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"listEqualQNew", "[", "lists__List", "]"}], "/;", 
    RowBox[{"Equal", "@@", 
     RowBox[{"Map", "[", 
      RowBox[{"Length", ",", 
       RowBox[{"{", "lists", "}"}]}], "]"}]}]}], ":=", 
   RowBox[{
    RowBox[{"Plus", "@@", 
     RowBox[{"Flatten", "[", 
      RowBox[{"Abs", "[", 
       RowBox[{"Apply", "[", 
        RowBox[{"Subtract", ",", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"{", "lists", "}"}], "[", 
            RowBox[{"[", "#", "]"}], "]"}], "&"}], "/@", 
          RowBox[{"Partition", "[", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"Length", "[", 
              RowBox[{"{", "lists", "}"}], "]"}], "]"}], ",", "2", ",", "1"}],
            "]"}]}]}], "]"}], "]"}], "]"}]}], "===", "0"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"listEqualQNew", "[", "lists__List", "]"}], ":=", "False"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940043957344537*^9, 3.940044023207711*^9}},
 CellLabel->"In[491]:=",
 CellID->1524028341,ExpressionUUID->"3cb01c92-d5e3-47e2-bf8f-a63f54ab1ac3"],

Cell["\<\
The idea is that we pairwise subtract the lists, using a high-performance \
Subtract operation which also works on lists of the same length. Then we take \
an absolute values of the results and sum them all. The result has to be zero \
if all lists are equal, otherwise it will be non-zero. To account for \
symbolic expressions, the <SameQ> (===) operator is used. <Partition > \
operator is used to create a list of pairs of
positions, and <{lists}[[#]]&> function extracts from the list {lists} the \
pair of lists corresponding to those positions. It is a good exercise to take \
some small lists and dissect this function, to understand each step.\
\>", "Text",
 CellChangeTimes->{{3.940044031948297*^9, 3.9400440537104197`*^9}},
 CellID->227200366,ExpressionUUID->"29fe8919-c3f9-4d81-bfdd-585d70a8bc3a"],

Cell["We check now:", "Text",
 CellChangeTimes->{{3.940044031948297*^9, 3.940044050371151*^9}},
 CellID->118875998,ExpressionUUID->"4fb95878-9887-4aaa-af44-7d2c986392eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listEqualQNew", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940044055672718*^9, 3.940044063583857*^9}},
 CellLabel->"In[494]:=",
 CellID->354832360,ExpressionUUID->"cb99789f-049a-4847-9ef8-f406df72f1ce"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.940044063983222*^9},
 CellLabel->"Out[494]=",
 CellID->2143389984,ExpressionUUID->"d06aca55-756d-4693-a21a-54be00b08534"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listEqualQNew", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940044071718104*^9, 3.94004407198822*^9}},
 CellLabel->"In[495]:=",
 CellID->2064766310,ExpressionUUID->"7654e144-a4d7-476b-bd67-d62eccb647f2"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.9400440722908487`*^9},
 CellLabel->"Out[495]=",
 CellID->419303823,ExpressionUUID->"46069189-854d-4065-a90d-683de2cd3e56"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"listEqualQNew", "[", 
   RowBox[{
    RowBox[{"Range", "[", "1000", "]"}], ",", 
    RowBox[{"Range", "[", "1000", "]"}], ",", 
    RowBox[{"Range", "[", "1000", "]"}]}], "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940044083760581*^9, 3.940044099929386*^9}},
 CellLabel->"In[496]:=",
 CellID->1286192819,ExpressionUUID->"681503e4-7768-4f90-9dd0-535dc36ba63f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000587`", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.940044100238585*^9},
 CellLabel->"Out[496]=",
 CellID->936858224,ExpressionUUID->"48fe3e6d-1c1b-4f9a-9412-c4b4d2e60752"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Equal", "[", 
   RowBox[{
    RowBox[{"Range", "[", "1000", "]"}], ",", 
    RowBox[{"Range", "[", "1000", "]"}], ",", 
    RowBox[{"Range", "[", "1000", "]"}]}], "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.9400441084959583`*^9, 3.940044109066412*^9}},
 CellLabel->"In[497]:=",
 CellID->1264212850,ExpressionUUID->"3a0983d8-1536-4a8f-8722-f85abc471a75"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000029`", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.940044109548945*^9},
 CellLabel->"Out[497]=",
 CellID->1023363094,ExpressionUUID->"270117fc-4b9e-47a7-83f9-92ffabee4c7e"]
}, Open  ]],

Cell[TextData[StyleBox["A tricky point, and more on attributes",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.9400441196214533`*^9, 3.940044123248973*^9}},
 CellID->11379708,ExpressionUUID->"e190da9d-195f-419a-9935-26df21c61218"],

Cell["\<\
Notice however, that there is one instance in which the latter implementation \
will not work correctly: when the tested lists contain sublists of different \
lengths (well, it sort of works, but generates error messages):\
\>", "Text",
 CellChangeTimes->{{3.9400441196214533`*^9, 3.940044128147916*^9}, 
   3.940740613459916*^9},
 CellID->1996784835,ExpressionUUID->"83457665-7600-47c0-9419-aad5f91664bd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listEqualQNew", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", "1", "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940044131230145*^9, 3.940044142652278*^9}},
 CellLabel->"In[498]:=",
 CellID->1415681293,ExpressionUUID->"9830f23a-434d-4681-bc0f-964e424aaa8b"],

Cell[BoxData[
 TemplateBox[{
  "Subtract", "argr", 
   "\"\\!\\(\\*RowBox[{\\\"Subtract\\\"}]\\) called with 1 argument; \
\\!\\(\\*RowBox[{\\\"2\\\"}]\\) arguments are expected.\"", 2, 498, 38, 
   26588908877246977716, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.940044143900889*^9},
 CellLabel->"During evaluation of In[498]:=",
 CellID->778909336,ExpressionUUID->"1e9d624a-7739-430e-9ccf-c86c4f3bb312"],

Cell[BoxData[
 TemplateBox[{
  "Subtract", "argr", 
   "\"\\!\\(\\*RowBox[{\\\"Subtract\\\"}]\\) called with 1 argument; \
\\!\\(\\*RowBox[{\\\"2\\\"}]\\) arguments are expected.\"", 2, 498, 39, 
   26588908877246977716, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.940044143919553*^9},
 CellLabel->"During evaluation of In[498]:=",
 CellID->68898040,ExpressionUUID->"57e848f9-26d4-46d9-a9b5-784d6a8996d8"],

Cell[BoxData[
 TemplateBox[{
  "Subtract", "argr", 
   "\"\\!\\(\\*RowBox[{\\\"Subtract\\\"}]\\) called with 1 argument; \
\\!\\(\\*RowBox[{\\\"2\\\"}]\\) arguments are expected.\"", 2, 498, 40, 
   26588908877246977716, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9400441439283943`*^9},
 CellLabel->"During evaluation of In[498]:=",
 CellID->475672547,ExpressionUUID->"f089d220-fcb2-40f4-ac53-8576ca6a472f"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Subtract\\\", \
\\\"::\\\", \\\"argr\\\"}], \\\"MessageName\\\"]\\) will be suppressed during \
this calculation.\"", 2, 498, 41, 26588908877246977716, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.940044143936962*^9},
 CellLabel->"During evaluation of In[498]:=",
 CellID->1694363295,ExpressionUUID->"589a4a43-4b4a-4225-a295-98cdd96b469c"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.940044143945867*^9},
 CellLabel->"Out[498]=",
 CellID->1530739845,ExpressionUUID->"cab182e0-0ac6-4edd-b779-2c5a3064cc9c"]
}, Open  ]],

Cell["\<\
This is because the addition and subtraction is defined on lists, but of the \
same length (this is what Listable attribute does). We can get rid of this by \
temporarily removing the Listable attribute for Subtract function - this is \
the first tricky point. The second is that we also have to do the same for \
Plus function (this may not be obvious, but Subtract is really more like a \
wrapper, the real work being done by Plus). Our new
function will look like:\
\>", "Text",
 CellChangeTimes->{{3.9400441557913027`*^9, 3.940044165815802*^9}},
 CellID->232816785,ExpressionUUID->"cfc6f6db-019c-415b-bd69-d0793bb20429"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "listEqualQNew1", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"listEqualQNew1", "[", "lists__List", "]"}], "/;", 
    RowBox[{"Equal", "@@", 
     RowBox[{"Map", "[", 
      RowBox[{"Length", ",", 
       RowBox[{"{", "lists", "}"}]}], "]"}]}]}], ":=", "\[IndentingNewLine]", 
   
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "result", "}"}], ",", 
     RowBox[{
      RowBox[{"ClearAttributes", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Plus", ",", "Subtract"}], "}"}], ",", "Listable"}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"result", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Plus", "@@", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Abs", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Apply", "[", 
               RowBox[{"Subtract", ",", 
                RowBox[{
                 RowBox[{"{", "lists", "}"}], "[", 
                 RowBox[{"[", "#", "]"}], "]"}]}], "]"}], "&"}], "/@", 
             RowBox[{"Partition", "[", 
              RowBox[{
               RowBox[{"Range", "[", 
                RowBox[{"Length", "[", 
                 RowBox[{"{", "lists", "}"}], "]"}], "]"}], ",", "2", ",", 
               "1"}], "]"}]}], "]"}], "]"}]}], "===", "0"}], ")"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{
        RowBox[{"Attributes", "[", "Plus", "]"}], ",", "Listable"}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{
        RowBox[{"Attributes", "[", "Subtract", "]"}], ",", "Listable"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "result", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"listEqualQNew1", "[", "lists__List", "]"}], ":=", "False"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940044179075375*^9, 3.9400442665577383`*^9}, 
   3.940044420907119*^9, 3.940044467405179*^9},
 CellLabel->"In[505]:=",
 CellID->1806630302,ExpressionUUID->"b8fa8ef4-2150-4751-95e8-91358cf16b85"],

Cell["\<\
Notice that we remove the attributes first, with the help of another useful \
command: ClearAttributes. Then we compute the function result proper, and \
then restore the attributes. Notice that we did not use the SetAttributes \
function to change attributes in this example. In fact, if we try to use \
SetAttributes on Plus, it does not work:\
\>", "Text",
 CellChangeTimes->{{3.9400442772173367`*^9, 3.940044289354271*^9}},
 CellID->1926441291,ExpressionUUID->"63cd1707-da82-4d19-9129-46bee500b254"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"Plus", ",", 
    RowBox[{"DeleteCases", "[", 
     RowBox[{
      RowBox[{"Attributes", "[", "Plus", "]"}], ",", "Listable"}], "]"}]}], 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Attributes", "[", "Plus", "]"}]}], "Input",
 CellChangeTimes->{{3.940044302992756*^9, 3.940044319830872*^9}},
 CellLabel->"In[502]:=",
 CellID->1380408442,ExpressionUUID->"1b965d15-e73d-4036-a453-624355b6f281"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Flat", ",", "Listable", ",", "NumericFunction", ",", "OneIdentity", ",", 
   "Orderless", ",", "Protected"}], "}"}]], "Output",
 CellChangeTimes->{3.940044320141305*^9},
 CellLabel->"Out[503]=",
 CellID->1594109169,ExpressionUUID->"a99f70f9-224f-4d97-a391-747756425a69"]
}, Open  ]],

Cell["\<\
We see that when we attempt to do it in this way, Listable attribute remains.\
\
\>", "Text",
 CellChangeTimes->{{3.940044334339065*^9, 3.94004433741968*^9}},
 CellID->1422128342,ExpressionUUID->"c239a457-e42d-4912-91cc-ebf2f40b6a8d"],

Cell["\<\
Note also that neither did we Unprotect Plus. The idiom Attributes[command] = \
{attribute list} is then rather dangerous because one can easily change the \
behavior of the built - in functions with it, and no warning message will be \
generated. The protection of functions by Protected attribute protects the \
function symbol, but not the function attributes.\
\>", "Text",
 CellChangeTimes->{{3.940044334339065*^9, 3.940044346886407*^9}},
 CellID->127986598,ExpressionUUID->"ff460f6b-e286-4d88-9af6-ca6e153d9ece"],

Cell["Anyway, let us check our function:", "Text",
 CellChangeTimes->{{3.940044334339065*^9, 3.940044344808353*^9}, 
   3.940740613488296*^9},
 CellID->35767062,ExpressionUUID->"2f4f0659-5606-44eb-8825-ee8535fc95f3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"listEqualQNew1", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", "1", "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{3.9400443567330847`*^9},
 CellLabel->"In[508]:=",
 CellID->1989073521,ExpressionUUID->"a143d103-74c7-4335-8746-f2bd28b20932"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.9400443577129374`*^9, 3.940044471626885*^9},
 CellLabel->"Out[508]=",
 CellID->552995828,ExpressionUUID->"8a430b99-1b50-44aa-bd57-5bf106949314"]
}, Open  ]],

Cell["\<\
It works fine now. The above modification leads to a slight decrease in \
performance however:\
\>", "Text",
 CellChangeTimes->{3.940044484832191*^9},
 CellID->2039140627,ExpressionUUID->"1035b5f9-d30e-4619-b087-70e16f60ae39"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"listEqualQNew1", "[", 
   RowBox[{
    RowBox[{"Range", "[", "1000", "]"}], ",", 
    RowBox[{"Range", "[", "1000", "]"}], ",", 
    RowBox[{"Range", "[", "1000", "]"}]}], "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{3.9400444961588*^9},
 CellLabel->"In[509]:=",
 CellID->144995516,ExpressionUUID->"20cd8e22-8838-49e5-9e7e-6783cf8c078a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000554`", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.940044497094699*^9},
 CellLabel->"Out[509]=",
 CellID->1163310364,ExpressionUUID->"43fc4a3a-af18-4672-9765-2f589c2fb4f8"]
}, Open  ]],

Cell["\<\
Again, for some reason this function works 2-3 times faster in version 5.2 \
(where it is then 5-6 times faster than our previous less sophisticated \
implementation), than in version 6. \
\>", "Text",
 CellChangeTimes->{{3.940044509536008*^9, 3.940044525071191*^9}},
 CellID->1892416264,ExpressionUUID->"9860f6dc-ddb5-4732-b6ab-3e92ebbc7311"],

Cell["\<\
We see that our best implementation is still way slower than a built-in. Note \
however that in cases where you need not only a final answer about equality, \
but for example the information about which elements in the list break that \
equality, you will need something like what we implemented above, since the \
built-in Equal does not give you such details.\
\>", "Text",
 CellChangeTimes->{{3.940044509536008*^9, 3.9400445365882473`*^9}},
 CellID->11034425,ExpressionUUID->"0076d177-a532-4a23-9e42-731dd1b4b2b2"],

Cell["More examples", "ItemNumbered",
 CellChangeTimes->{3.9400445458344193`*^9},
 CellID->1034978470,ExpressionUUID->"267a9998-951c-48a2-aa32-5268beb2617f"],

Cell["Example: replacing the main diagonal in the square matrix", \
"SubitemNumbered",
 CellChangeTimes->{3.9400445523951273`*^9},
 CellID->265604590,ExpressionUUID->"67ec12b4-e95e-4dd4-87e5-f43ff304695b"],

Cell["\<\
Consider the following problem: we are given a square matrix of dimension <n> \
(say,5), and a list of the same length. We want to replace the main diagonal \
of the matrix by this list.\
\>", "Text",
 CellChangeTimes->{{3.940047414565197*^9, 3.940047418936318*^9}},
 CellID->1545325664,ExpressionUUID->"f7dbe11d-1682-4397-96db-45d4a7f5f006"],

Cell["Say, this is our matrix:", "Text",
 CellChangeTimes->{{3.940047414565197*^9, 3.94004741677111*^9}},
 CellID->1413671019,ExpressionUUID->"a3601fac-8920-4780-90d3-6c7c02124096"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"matrix", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"RandomInteger", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
      RowBox[{"{", "5", "}"}], ",", 
      RowBox[{"{", "5", "}"}]}], "]"}]}], ")"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.940047421494182*^9, 3.940047435811018*^9}},
 CellLabel->"In[510]:=",
 CellID->519865163,ExpressionUUID->"d062baf3-7bb4-428c-9a38-d64ce69bb296"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"4", "10", "2", "6", "10"},
     {"10", "10", "7", "4", "4"},
     {"4", "4", "4", "8", "1"},
     {"7", "4", "9", "8", "7"},
     {"7", "7", "4", "8", "2"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.9400474360804873`*^9},
 CellLabel->"Out[510]//MatrixForm=",
 CellID->1372780159,ExpressionUUID->"e18d8569-ba16-4c6d-94cd-94a9666da30b"]
}, Open  ]],

Cell["And this is our replacement list:", "Text",
 CellChangeTimes->{3.9400474456094303`*^9},
 CellID->1899312592,ExpressionUUID->"87c33f9f-2ed9-4386-9d4b-c782c584bc21"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"replist", "=", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]}]}], "Input",
 CellChangeTimes->{{3.940047450493054*^9, 3.940047459715083*^9}},
 CellLabel->"In[511]:=",
 CellID->739043489,ExpressionUUID->"cce698c6-1091-49e2-b9a5-41e1f127454e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]], "Output",
 CellChangeTimes->{3.9400474609640427`*^9},
 CellLabel->"Out[512]=",
 CellID->1872125044,ExpressionUUID->"71590903-4dc9-4da1-942d-83ea78cbde38"]
}, Open  ]],

Cell["\<\
To solve the problem, we will use the built-in function ReplacePart, in the \
form in which it takes 3 arguments: the expression, the new value of the \
element, and its position in the expression. For instance,\
\>", "Text",
 CellChangeTimes->{{3.9400474743504257`*^9, 3.940047476981032*^9}},
 CellID->2022702311,ExpressionUUID->"f7b6aae5-d356-4669-9b5d-44eecbb1456e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReplacePart", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", "a", 
   ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.940047482365961*^9, 3.940047488849463*^9}},
 CellLabel->"In[513]:=",
 CellID->131019603,ExpressionUUID->"1d3c436d-43e8-4c2a-98f3-6e019f6e15c8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "a", ",", "4", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.940047490166553*^9},
 CellLabel->"Out[513]=",
 CellID->1217555130,ExpressionUUID->"1b824ef2-7e0e-4a0b-aace-39345cdde89e"]
}, Open  ]],

Cell["Then, this is the code to solve our problem:", "Text",
 CellChangeTimes->{3.940047498589871*^9},
 CellID->77397647,ExpressionUUID->"b0b5af07-fad5-4bbf-bee5-bd32e5bbdc60"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"MapThread", "[", 
   RowBox[{"ReplacePart", ",", 
    RowBox[{"{", 
     RowBox[{"matrix", ",", "replist", ",", 
      RowBox[{"Range", "[", "5", "]"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940047501087249*^9, 3.940047513344248*^9}},
 CellLabel->"In[514]:=",
 CellID->15278399,ExpressionUUID->"e0ee915d-6994-4f9d-9246-a62d4ccc4603"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "10", ",", "2", ",", "6", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "b", ",", "7", ",", "4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4", ",", "c", ",", "8", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "4", ",", "9", ",", "d", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "7", ",", "4", ",", "8", ",", "e"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940047514353777*^9},
 CellLabel->"Out[514]=",
 CellID->1955970954,ExpressionUUID->"fb8167bc-021d-466a-a7c8-0b1a75e703e7"]
}, Open  ]],

Cell["\<\
Be sure to understand how this code works. To display the result in the form \
of the matrix, we use MatrixForm:\
\>", "Text",
 CellChangeTimes->{{3.940047525425394*^9, 3.9400475272447166`*^9}},
 CellID->324155602,ExpressionUUID->"9e8865db-cdc6-486f-9823-c348458bb4bb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.9400475409134283`*^9, 3.94004754450042*^9}},
 CellLabel->"In[515]:=",
 CellID->792039932,ExpressionUUID->"3b593636-e3b4-401e-89f6-6dde48b44fbe"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"a", "10", "2", "6", "10"},
     {"10", "b", "7", "4", "4"},
     {"4", "4", "c", "8", "1"},
     {"7", "4", "9", "d", "7"},
     {"7", "7", "4", "8", "e"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.9400475447703*^9},
 CellLabel->"Out[515]//MatrixForm=",
 CellID->235297661,ExpressionUUID->"e0a69807-2d3f-4749-85f6-b6bb985222f6"]
}, Open  ]],

Cell["\<\
The other way to perform the same operation is using MapIndexed:\
\>", "Text",
 CellChangeTimes->{3.940047553945324*^9},
 CellID->1130394300,ExpressionUUID->"a019aba6-c6f7-49da-b4aa-8560f796a9c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapIndexed", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"Equal", "@@", "#2"}], ",", 
      RowBox[{"replist", "[", 
       RowBox[{"[", 
        RowBox[{"#2", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ",", "#1"}], "]"}], 
    "&"}], ",", "matrix", ",", 
   RowBox[{"{", "2", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940047557254426*^9, 3.940047581185567*^9}},
 CellLabel->"In[516]:=",
 CellID->2043637145,ExpressionUUID->"3aa6128a-2ed2-4ce7-9db8-ff240d90df5d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "10", ",", "2", ",", "6", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "b", ",", "7", ",", "4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4", ",", "c", ",", "8", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "4", ",", "9", ",", "d", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "7", ",", "4", ",", "8", ",", "e"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.94004758162321*^9},
 CellLabel->"Out[516]=",
 CellID->584585702,ExpressionUUID->"36d8d7fd-22d8-4298-ab1f-f9dd97dbe880"]
}, Open  ]],

Cell["\<\
What this does it to Map on every element of the matrix a function which \
changes the element to a corresponding element of the replacement list, if \
the element is on the diagonal, and returns the element back if it is not. \
However, here we know a priori that this implementation will be inefficient \
compared to the previous one, since its complexity is quadratic with the \
matrix size while it is linear for the previous one
(in the former case, it sweeps through all matrix elements, not just the \
diagonal ones).\
\>", "Text",
 CellChangeTimes->{{3.9400475915479403`*^9, 3.940047594207143*^9}, {
  3.9400476629720984`*^9, 3.9400476717479677`*^9}},
 CellID->2136887865,ExpressionUUID->"befa61a4-32a1-4df6-b71d-b428148b9d9d"],

Cell["Finally we package our solution into a function:", "Text",
 CellChangeTimes->{{3.9400475915479403`*^9, 3.940047594207143*^9}, {
  3.9400476629720984`*^9, 3.940047665119145*^9}},
 CellID->1064375382,ExpressionUUID->"5569295c-3942-4f11-b5dd-380abb0c6153"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "replaceDiagonal", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"replaceDiagonal", "[", 
     RowBox[{
      RowBox[{"matrix_", "?", "MatrixQ"}], ",", "replist_List"}], "]"}], "/;", 
    RowBox[{"Equal", "[", 
     RowBox[{
      RowBox[{"Length", "[", "replist", "]"}], ",", 
      RowBox[{"Sequence", "@@", 
       RowBox[{"Dimensions", "[", "matix", "]"}]}]}], "]"}]}], ":=", 
   RowBox[{"MapThread", "[", 
    RowBox[{"ReplacePart", ",", 
     RowBox[{"{", 
      RowBox[{"matrix", ",", "replist", ",", 
       RowBox[{"Range", "[", 
        RowBox[{"Length", "[", "replist", "]"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.9400476774455214`*^9, 3.940047743057733*^9}},
 CellLabel->"In[517]:=",
 CellID->1078718917,ExpressionUUID->"c95892aa-7588-42a1-a06d-7419854054c0"],

Cell[TextData[{
 "I used this opportunity to introduce another two built-in functions: \
<Dimensions>, which gives a list of dimensions of a nested list (a matrix in \
this case), and the predicate <MatrixQ> which determines whether or not an \
object is a matrix. I also used the idiom Apply[Sequence,expression] once \
again (section ",
 ButtonBox["5.2.7.5",
  BaseStyle->"Hyperlink",
  ButtonData->"5.2.7.5"],
 ")."
}], "Text",
 CellChangeTimes->{{3.940047751540085*^9, 3.940047772438911*^9}},
 CellID->203711348,ExpressionUUID->"1c659c7b-9bf1-4eb6-a73b-239a36955614"],

Cell["\<\
Basically, the attached condition checks that both matrix dimensions are the \
same and equal to the length of the replacement list. Let us check now:\
\>", "Text",
 CellChangeTimes->{{3.940047783428653*^9, 3.940047785118003*^9}},
 CellID->357040045,ExpressionUUID->"061e7ba7-12a1-47e0-8da8-7e20a912a741"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"replaceDiagonal", "[", 
   RowBox[{"matrix", ",", 
    RowBox[{
     RowBox[{"Range", "[", "5", "]"}], "^", "3"}]}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.940047788196087*^9, 3.940047798078375*^9}},
 CellLabel->"In[519]:=",
 CellID->512720659,ExpressionUUID->"63153075-1a0d-4574-92fa-49c385228b44"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "10", "2", "6", "10"},
     {"10", "8", "7", "4", "4"},
     {"4", "4", "27", "8", "1"},
     {"7", "4", "9", "64", "7"},
     {"7", "7", "4", "8", "125"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.940047798316592*^9},
 CellLabel->"Out[519]//MatrixForm=",
 CellID->27116491,ExpressionUUID->"83a617b5-94bb-4e4b-820a-af6b108c347e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"replaceDiagonal", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.940047803661306*^9, 3.9400478175033407`*^9}},
 CellLabel->"In[520]:=",
 CellID->533314838,ExpressionUUID->"915fed50-4e0f-45bf-9540-ec20344bdd81"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "2"},
     {"3", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.940047817747156*^9},
 CellLabel->"Out[520]//MatrixForm=",
 CellID->624665252,ExpressionUUID->"800deccb-81b7-4564-a911-d639d0c87aea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"replaceDiagonal", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940047822707713*^9, 3.940047833653716*^9}, {
  3.940047930049157*^9, 3.940047933601942*^9}},
 CellLabel->"In[523]:=",
 CellID->1241188753,ExpressionUUID->"51a3aa7c-c70d-4088-9f3a-c6a038469d35"],

Cell[BoxData[
 TemplateBox[{
  "MapThread", "mptc", 
   "\"Incompatible dimensions of objects at positions {2, \\!\\(\\*RowBox[{\\\
\"1\\\"}]\\)} and {2, \\!\\(\\*RowBox[{\\\"2\\\"}]\\)} of \\!\\(\\*RowBox[{\\\
\"MapThread\\\", \\\"[\\\", RowBox[{\\\"ReplacePart\\\", \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\
\"{\\\", RowBox[{\\\"3\\\", \\\",\\\", \\\"4\\\"}], \\\"}\\\"}]}], \
\\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{\\\"0\\\", \\\",\\\", \
\\\"0\\\", \\\",\\\", \\\"1\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{\\\"1\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"3\\\"}], \
\\\"}\\\"}]}], \\\"}\\\"}]}], \\\"]\\\"}]\\); dimensions are \
\\!\\(\\*RowBox[{\\\"2\\\"}]\\) and \\!\\(\\*RowBox[{\\\"3\\\"}]\\).\"", 2, 
   523, 44, 26588908877246977716, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.940047933935425*^9},
 CellLabel->"During evaluation of In[523]:=",
 CellID->1996570346,ExpressionUUID->"475ab783-a52d-4f52-899f-3e3f5946335d"],

Cell[BoxData[
 RowBox[{"MapThread", "[", 
  RowBox[{"ReplacePart", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.940047834070819*^9, {3.9400479305597258`*^9, 3.9400479339605293`*^9}},
 CellLabel->"Out[523]=",
 CellID->1925820847,ExpressionUUID->"be174d29-7c4b-4db5-83b4-6b29c5ab3d1c"]
}, Open  ]],

Cell["\<\
It is left as an exercise to the reader to package an alternative solution \
with MapIndexed into another function, test it and then study the relative \
performance of the two functions on matrices of various sizes, to confirm our \
expectations of linear vs quadratic complexity of the two solutions.\
\>", "Text",
 CellChangeTimes->{{3.9400478979257593`*^9, 3.9400479044104757`*^9}},
 CellID->775008909,ExpressionUUID->"253b21af-6090-4fa8-8b69-84df7e9fae69"],

Cell["Example: appending sublists of a nested list", "SubitemNumbered",
 CellChangeTimes->{3.940047969701021*^9},
 CellID->1051226894,ExpressionUUID->"01c06b01-90db-4db3-a0c3-6a28a37bceb3"],

Cell["\<\
Here we are concerned with the following problem. Given a nested list of \
numbers (with sublists of generally different length), and a list of separate \
list of numbers of the same length as the nested list, append each number of \
the simple list to the end of the corresponding sublist of the nested list.\
\>", "Text",
 CellChangeTimes->{{3.940047977140236*^9, 3.940047990406653*^9}},
 CellID->622443589,ExpressionUUID->"6c9dc7a9-c180-4b87-a8db-77d5d82a4ae0"],

Cell["This is our nested list", "Text",
 CellChangeTimes->{{3.940047977140236*^9, 3.940047987468864*^9}},
 CellID->1631383923,ExpressionUUID->"5ab41813-79d4-4add-9d8a-a7091b15b36d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "testlist", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "10", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "6"}], "}"}], "]"}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940047992152623*^9, 3.94004801293948*^9}},
 CellLabel->"In[524]:=",
 CellID->1811920923,ExpressionUUID->"b569eb2b-4b77-452e-bc3b-fe7ec690b3aa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "5", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "2", ",", "3", ",", "6", ",", "4"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "10", ",", "3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "5", ",", "4", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "5", ",", "8", ",", "4", ",", "9", ",", "7"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "6", ",", "8", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "8", ",", "6", ",", "5", ",", "9", ",", "8"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "10"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940048013592865*^9},
 CellLabel->"Out[525]=",
 CellID->996758047,ExpressionUUID->"98a34646-c948-4bc3-8861-ab8ad777ff1f"]
}, Open  ]],

Cell["This is our simple list", "Text",
 CellChangeTimes->{3.940048026821527*^9},
 CellID->2140049329,ExpressionUUID->"84af90a1-6739-4de3-95b2-2862c26e6ba0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"addlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "10", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9400480283051662`*^9, 3.9400480351842413`*^9}},
 CellLabel->"In[526]:=",
 CellID->545304236,ExpressionUUID->"73f96994-778d-40bc-93cf-296d8ed55fe2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "5", ",", "10", ",", "6", ",", "9", ",", "3", ",", "2", ",", "9", ",", "3", 
   ",", "5", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{3.94004803547569*^9},
 CellLabel->"Out[526]=",
 CellID->309513390,ExpressionUUID->"a18fb88f-db11-47cd-af8a-d1e980547a9b"]
}, Open  ]],

Cell["This is the code that solves the problem", "Text",
 CellChangeTimes->{3.940048042413877*^9},
 CellID->786152696,ExpressionUUID->"4ad81a40-2888-4469-9517-48cbd5f81fec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"MapThread", "[", 
   RowBox[{"Append", ",", 
    RowBox[{"{", 
     RowBox[{"testlist", ",", "addlist"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940048046377038*^9, 3.9400480588413677`*^9}},
 CellLabel->"In[527]:=",
 CellID->1663498762,ExpressionUUID->"ca9742e3-23b7-4a0d-9eda-9b17e17ec1cc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "5", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", "2", ",", "1", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "2", ",", "3", ",", "6", ",", "4", ",", "6"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "10", ",", "3", ",", "3", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "5", ",", "4", ",", "10", ",", "3"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "5", ",", "8", ",", "4", ",", "9", ",", "7", ",", "2"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "6", ",", "8", ",", "5", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "8", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "8", ",", "6", ",", "5", ",", "9", ",", "8", ",", "5"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "10", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940048060171815*^9},
 CellLabel->"Out[527]=",
 CellID->1122142296,ExpressionUUID->"a25e152e-66d8-4960-8b0e-251b3e362424"]
}, Open  ]],

Cell["This is how the resulting function will look like:", "Text",
 CellChangeTimes->{3.940048068828013*^9, 3.940740613516577*^9},
 CellID->164272004,ExpressionUUID->"e6b44ac8-9b9f-498a-b12f-61cb1af2ed0f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "appendSublists", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"appendSublists", "[", 
     RowBox[{"x_List", ",", "newelems_List"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "x", "]"}], "==", 
     RowBox[{"Length", "[", "newelems", "]"}]}]}], ":=", 
   RowBox[{"MapThread", "[", 
    RowBox[{"Append", ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "newelems"}], "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9400480706781263`*^9, 3.9400481159862137`*^9}},
 CellLabel->"In[528]:=",
 CellID->128860524,ExpressionUUID->"077116c9-31ab-4331-8959-fbad1c631f20"],

Cell["\<\
Example: deleting from each sublist of a nested list given number of elements \
at the beginning\
\>", "SubitemNumbered",
 CellChangeTimes->{{3.940048136415402*^9, 3.940048140722134*^9}},
 CellID->133437914,ExpressionUUID->"689e2180-1cda-4cd2-9273-2d3102633d68"],

Cell["\<\
The problem to solve here is the following: given a list of lists, delete \
from the beginning of each sublist a number of elements given by the element \
of another (single) list.\
\>", "Text",
 CellChangeTimes->{{3.940048154099072*^9, 3.9400481577129383`*^9}},
 CellID->1953349143,ExpressionUUID->"73f320a9-11f7-4be7-84c4-9111ff7077ab"],

Cell["\<\
To prepare the \[OpenCurlyDoubleQuote]delete\[CloseCurlyDoubleQuote] list, we \
first find a list of sublists lengths:\
\>", "Text",
 CellChangeTimes->{{3.940048154099072*^9, 3.940048155980919*^9}},
 CellID->278113320,ExpressionUUID->"01f01012-aaf4-48ad-b3a9-7a8259f74959"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lengths", "=", 
  RowBox[{"Length", "/@", "result"}]}]], "Input",
 CellChangeTimes->{{3.9400481634800367`*^9, 3.940048168909532*^9}},
 CellLabel->"In[530]:=",
 CellID->2074367410,ExpressionUUID->"70ccdd42-1786-43db-b022-fc97f237c31b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4", ",", "5", ",", "7", ",", "5", ",", "6", ",", "7", ",", "5", ",", "3", 
   ",", "7", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.940048169561858*^9},
 CellLabel->"Out[530]=",
 CellID->540502706,ExpressionUUID->"a5486d37-173a-4bd9-8cd8-4ceec5932c9d"]
}, Open  ]],

Cell["\<\
Then we randomly generate a number of elements to be deleted for each list, \
not exceeding the number of elements in it:\
\>", "Text",
 CellChangeTimes->{{3.9400481789518843`*^9, 3.940048180465271*^9}},
 CellID->373152932,ExpressionUUID->"8c4f11ae-cd2c-4e90-aa03-77e3d4bd5eaf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dellist", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Min", "[", 
      RowBox[{
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "4"}], "}"}], "]"}], ",", "#"}], "]"}], "&"}], ",",
     "lengths"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940048185054657*^9, 3.9400482032607317`*^9}},
 CellLabel->"In[531]:=",
 CellID->884508409,ExpressionUUID->"adc12fd0-09af-4aae-86b4-7313ccdd3f6c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "3", ",", "4", ",", "2", ",", "4", ",", "2", ",", "4", ",", "3", 
   ",", "3", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.9400482062538757`*^9},
 CellLabel->"Out[531]=",
 CellID->548904147,ExpressionUUID->"75772bb4-652a-4323-8729-89e77c24f20a"]
}, Open  ]],

Cell["This is the code which does the job:", "Text",
 CellChangeTimes->{3.940048213665537*^9},
 CellID->856827464,ExpressionUUID->"8afe1922-4cc5-40cd-b667-fd308f60b2d9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapThread", "[", 
  RowBox[{"Drop", ",", 
   RowBox[{"{", 
    RowBox[{"result", ",", "dellist"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9400482151287413`*^9, 3.940048222167951*^9}},
 CellLabel->"In[532]:=",
 CellID->933894253,ExpressionUUID->"2f107cf4-a85e-4950-a484-2c1a8ffed86f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "4", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "4", ",", "9", ",", "7", ",", "2"}], "}"}], ",", 
   RowBox[{"{", "9", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "9", ",", "8", ",", "5"}], "}"}], ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.94004822248464*^9},
 CellLabel->"Out[532]=",
 CellID->999898262,ExpressionUUID->"751258c2-d0ea-4a1e-97bf-03b235cd96d2"]
}, Open  ]],

Cell["This is how the function will look:", "Text",
 CellChangeTimes->{3.940048230077427*^9, 3.940740613537558*^9},
 CellID->1230551659,ExpressionUUID->"61b78a48-e227-4ebf-867b-0011b7087ecf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "dropFromSublists", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"dropFromSublists", "[", 
     RowBox[{
      RowBox[{"{", "sublists__List", "}"}], ",", "dellengths_List"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"{", "sublists", "}"}], "]"}], "==", 
     RowBox[{"Length", "[", "dellengths", "]"}]}]}], ":=", 
   RowBox[{"MapThread", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "#1", "]"}], "<", "#2"}], ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"Drop", "[", 
         RowBox[{"#1", ",", "#2"}], "]"}]}], "]"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "sublists", "}"}], ",", "dellengths"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.94004823304023*^9, 3.94004830181472*^9}},
 CellLabel->"In[533]:=",
 CellID->903583270,ExpressionUUID->"58fec46a-6513-4488-98d5-83e805ff7cca"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.9400483041418543`*^9, 3.940048304963764*^9}},
 CellID->1882085439,ExpressionUUID->"64ad96c3-08b0-46df-9919-c2a33aa316d2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dropFromSublists", "[", 
  RowBox[{"result", ",", "dellist"}], "]"}]], "Input",
 CellChangeTimes->{{3.940048306750594*^9, 3.940048310934738*^9}},
 CellLabel->"In[535]:=",
 CellID->1868126435,ExpressionUUID->"80a476b6-eaf5-4d20-8596-fc644893d979"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "4", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "4", ",", "9", ",", "7", ",", "2"}], "}"}], ",", 
   RowBox[{"{", "9", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "9", ",", "8", ",", "5"}], "}"}], ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.94004831137789*^9},
 CellLabel->"Out[535]=",
 CellID->254254523,ExpressionUUID->"4a8815e8-ea04-4817-bc34-06a5f9bfa09d"]
}, Open  ]],

Cell["\<\
Note the pattern used in a function: it guarantees that all the elements of \
the nested list are lists themselves, and the attached condition checks that \
the list of lengths of element sequences to be dropped has the same length as \
a nested list. Also, the function inside MapThread has been modified to \
account for cases when the instructed number of elements to be dropped is \
larger than the length of the sublist - in this case all elements are \
dropped, and an empty list is returned.\
\>", "Text",
 CellChangeTimes->{{3.940048319823181*^9, 3.940048335595323*^9}},
 CellID->1910794178,ExpressionUUID->"64d4f396-7920-4ef8-a2aa-758a8679fe76"],

Cell["A digression: stricter error - checking", "SubitemNumbered",
 CellChangeTimes->{3.940048343541128*^9, 3.940740613558304*^9},
 CellID->1757197477,ExpressionUUID->"51e59bb0-07e1-4bd9-a031-c0b2cfa40dc1"],

Cell["\<\
If this convention is unsatisfactory, and one needs a stricter condition \
which would issue an error message in such an event, then it is best to \
relegate this to patterns by modifying them appropriately:\
\>", "Text",
 CellChangeTimes->{{3.9400485285985413`*^9, 3.940048530784843*^9}, 
   3.940740613578065*^9},
 CellID->1022882395,ExpressionUUID->"90a67145-cf33-4aa2-8114-414a8f853975"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "dropFromSublistsStrict", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"dropFromSublistsStrict", "[", 
     RowBox[{
      RowBox[{"{", "sublists__List", "}"}], ",", "dellengths_List"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"MapThread", "[", 
      RowBox[{"Drop", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "sublists", "}"}], ",", "dellengths"}], "}"}]}], "]"}], 
     "/;", 
     RowBox[{"And", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"{", "sublists", "}"}], "]"}], "==", 
        RowBox[{"Length", "[", "dellengths", "]"}]}], ",", 
       RowBox[{"Sequence", "@@", 
        RowBox[{"Map", "[", 
         RowBox[{"NonNegative", ",", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{"Length", ",", 
             RowBox[{"{", "sublists", "}"}]}], "]"}], "-", "dellengths"}]}], 
         "]"}]}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"dropFromSublistsStrict", "[", 
      RowBox[{
       RowBox[{"{", "sublists__List", "}"}], ",", "dellengths_List"}], "]"}], 
     "/;", 
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"{", "sublists", "}"}], "]"}], "==", 
      RowBox[{"Length", "[", "dellengths", "]"}]}]}], ":=", 
    "\"\<Some of the element numbers to delete larger than the corresponding \
sublist length\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dropFromSublistsStrict", "[", 
    RowBox[{
     RowBox[{"{", "sublists__List", "}"}], ",", "dellengths_List"}], "]"}], 
   ":=", "\"\<The nested list and delete lengths list should be of the same \
length\>\""}], ";"}]}], "Input",
 CellChangeTimes->{{3.940048570379286*^9, 3.940048735258079*^9}, {
  3.9400581440286407`*^9, 3.94005814469761*^9}},
 CellLabel->"In[543]:=",
 CellID->1514683357,ExpressionUUID->"b96d70c9-db71-4043-8366-7a596a239f04"],

Cell["\<\
Note that the other possibility would be to again use the If statement inside \
the MapThread, which should then take the proper action when an erroneous \
input is encountered. But this solution is typically worse for several \
reasons: a) Some part of the evaluation would typically have happened. This \
may be undesirable both because time has been wasted and because side effects \
may have been introduced. b) MapThread, like many other functional \
constructs, can not be normally \[OpenCurlyDoubleQuote]stopped\
\[CloseCurlyDoubleQuote] - thus, one will have to throw an exception. c) A \
minor one: presence of If slows the function down a bit.\
\>", "Text",
 CellChangeTimes->{{3.940048747273348*^9, 3.940048770147112*^9}, 
   3.94074061359802*^9},
 CellID->101623283,ExpressionUUID->"11b51512-a544-4a75-a3d8-5b22e719c1b8"],

Cell["\<\
This sort of solution can be used when the error condition can not be \
determined solely by input data, but instead depends on the results already \
obtained in the course of execution of a given function. However, such \
behavior is not typical for programs designed within the functional \
programming paradigm (at least, in Mathematica), mainly because it is usually \
caused by side-effects such as run-time assignments or in-
place data modifications.\
\>", "Text",
 CellChangeTimes->{{3.940048747273348*^9, 3.940048778856407*^9}},
 CellID->768088879,ExpressionUUID->"28579338-a2cd-4d35-839a-c90533768e05"],

Cell["\<\
Returning to the code above, I used the opportunity to illustrate another \
possible way to attach a condition to the function definition: instead of \
attaching it right after the \[OpenCurlyDoubleQuote]declaration\
\[CloseCurlyDoubleQuote] part, we can attach it at the end, after the right \
hand side of the definition. Also, notice once again that we have exploited \
the way in which Mathematica applies definitions (rules, associated with a \
function) - more specific before more general, to implement error-checking.\
\>", "Text",
 CellChangeTimes->{{3.940048747273348*^9, 3.940048788652466*^9}},
 CellID->2090564683,ExpressionUUID->"025184fb-1457-4f94-a7b1-fb07a562f664"],

Cell["\<\
Be sure to understand the use of Map , Apply and Sequence in the first \
definition above code. Check:\
\>", "Text",
 CellChangeTimes->{{3.940048747273348*^9, 3.940048786666719*^9}, 
   3.940740613617284*^9},
 CellID->393620541,ExpressionUUID->"2141306a-de6a-4113-8b81-47eb832fa56a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dropFromSublistsStrict", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940058054572885*^9, 3.9400580683611727`*^9}},
 CellLabel->"In[540]:=",
 CellID->1499526121,ExpressionUUID->"12c71759-b22e-409c-8eba-5c1a79abbf64"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", "6", "}"}], ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940058068926312*^9},
 CellLabel->"Out[540]=",
 CellID->1572127388,ExpressionUUID->"c2cd2490-c364-4d5e-8729-693eec34a6be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dropFromSublistsStrict", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940058071307007*^9, 3.940058091567103*^9}},
 CellLabel->"In[547]:=",
 CellID->637401739,ExpressionUUID->"a2918b91-48d2-4c30-9d5d-d0d296a9692f"],

Cell[BoxData["\<\"Some of the element numbers to delete larger than the \
corresponding sublist length\"\>"], "Output",
 CellChangeTimes->{3.940058091881865*^9, 3.9400581512937317`*^9},
 CellLabel->"Out[547]=",
 CellID->603668759,ExpressionUUID->"e2a7bfb9-aa29-4a40-922b-221e97b93b8a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dropFromSublistsStrict", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940058106014081*^9, 3.940058106283413*^9}},
 CellLabel->"In[548]:=",
 CellID->597282192,ExpressionUUID->"fd87f2a9-512e-45c5-93e7-1bbd558936f7"],

Cell[BoxData["\<\"The nested list and delete lengths list should be of the \
same length\"\>"], "Output",
 CellChangeTimes->{3.9400581067811747`*^9, 3.940058154873993*^9},
 CellLabel->"Out[548]=",
 CellID->307671838,ExpressionUUID->"171eab9a-2660-4c0d-9402-2a9b46a6634f"]
}, Open  ]],

Cell["\<\
Of course, instead of printing error messages, any other desired action can \
be taken. In fact, returning error messages in the above fashion (or, worse \
yet, printing them with the Print command) may be ok for quick-and-dirty \
functions you write for yourself (say, in the exploratory stage), but not \
when you place your functions into packages. There exists a much better \
mechanism of Messages one should use in
package writing. This topic is generally beyond the scope of our present \
discussion, so consult the books of Maeder and Wagner, as well as Mathematica \
Help and Mathematica Book, for details.\
\>", "Text",
 CellChangeTimes->{{3.940058169041841*^9, 3.9400581985488167`*^9}},
 CellID->2047442937,ExpressionUUID->"c7c41e28-cd1a-4516-9daf-b043661e9df3"],

Cell["\<\
The additional error-checking overhead due to the pattern-matching is usually \
not too considerable if the patterns are mostly syntactic in nature (such as \
{__Integer}), or when they do some simple things like checking the list \
sizes. Of course, error-checking has to be done in any case if one wants to \
have a robust functionality. Sometimes, however, the user of the function \
knows for sure that the supplied data are
correct (for instance, they come as a result of another function), in which \
case error-checking may be redundant. One possibility is to provide an option \
(say, with the name ArgTest) which will tell whether or not to perform the \
error checking:\
\>", "Text",
 CellChangeTimes->{{3.940058169041841*^9, 3.940058253014735*^9}, 
   3.940740613637486*^9},
 CellID->1568832143,ExpressionUUID->"f7f1e22c-82ef-4051-bc11-22544eca1954"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fun", "[", 
    RowBox[{"args__", ",", 
     RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], "/;", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ArgTest", "/.", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", "opts", "}"}], "]"}]}], "/.", 
      RowBox[{"ArgTest", "->", "True"}]}], ",", 
     RowBox[{"code", "-", "to", "-", "check", "-", "arguments"}], ",", 
     "True"}], "]"}]}], ":=", 
  RowBox[{"r", ".", "h", ".", "s"}]}]], "Input",
 CellChangeTimes->{{3.94005825764185*^9, 3.940058300605798*^9}},
 CellID->155445210,ExpressionUUID->"77039199-1065-4bdd-9d09-3b77e727a695"],

Cell["\<\
This is however not completely safe in general, since this assumes a high \
level of competence (with this particular functionality) from the user. This \
sort of solution can be used in functions that are used only by a developer \
to build something on top of them.\
\>", "Text",
 CellChangeTimes->{{3.9400583138062553`*^9, 3.94005832553055*^9}},
 CellID->2053546015,ExpressionUUID->"36d1f98a-10b9-44cd-a567-81e27968aa01"],

Cell["\<\
A safer alternative would be to place several related functions in a package, \
so that the auxiliary ones may exchange information without redundant type \
checks, and the interface ones which are exported to the end user do the type \
checks, but only once.\
\>", "Text",
 CellChangeTimes->{{3.9400583138062553`*^9, 3.940058337460326*^9}},
 CellID->666405011,ExpressionUUID->"7930714b-749f-43b1-b524-84c478f67ada"],

Cell["Example: rotating each sublist in a nested list differently", \
"SubitemNumbered",
 CellChangeTimes->{3.9400583520996733`*^9},
 CellTags->"5.3.2.4.5",
 CellID->105311872,ExpressionUUID->"e52f217b-25d7-4815-8e5c-ebb16bf810cf"],

Cell["\<\
This is our final example of the same logic as the previous ones. Here we \
want to rotate the individual sublists (say, to the right) according to the \
list of rotations. This is our nested list \
\>", "Text",
 CellChangeTimes->{{3.9400583829463587`*^9, 3.940058388142879*^9}},
 CellID->450107576,ExpressionUUID->"e451fe35-cb98-4675-9d8f-241d0c32cac7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "testlist", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "10", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "6"}], "}"}], "]"}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940058527959278*^9, 3.940058554774125*^9}},
 CellLabel->"In[549]:=",
 CellID->240827355,ExpressionUUID->"dc0fc71e-a947-48e4-a72b-a9f554ca1a87"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "10", ",", "7", ",", "9", ",", "1", ",", "2"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "7", ",", "6", ",", "1", ",", "7"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "9", ",", "9", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "8", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "3", ",", "1", ",", "5", ",", "8", ",", "8"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5", ",", "8", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940058555637393*^9},
 CellLabel->"Out[550]=",
 CellID->460207041,ExpressionUUID->"7f3c51b3-3925-4ce0-9661-718aabd3fbde"]
}, Open  ]],

Cell["Here is the list of rotations", "Text",
 CellChangeTimes->{3.940058580658206*^9},
 CellID->1611125240,ExpressionUUID->"8ca1dcd5-57dd-43e4-ac48-f12d7f79a3bc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rotatelist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "6"}], "}"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"Length", "[", "testlist", "]"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940058585017932*^9, 3.940058605313054*^9}},
 CellLabel->"In[551]:=",
 CellID->1054903810,ExpressionUUID->"2d651763-1cd0-4d84-baf3-02125ff4947b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "3", ",", "2", ",", "2", ",", "4", ",", "4", ",", "4", ",", "5", 
   ",", "3", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{3.940058607061983*^9},
 CellLabel->"Out[551]=",
 CellID->1460255832,ExpressionUUID->"0cf391ce-2a9b-47a6-93b5-1d53d124aff2"]
}, Open  ]],

Cell["This code does the job", "Text",
 CellChangeTimes->{3.9400586307865047`*^9},
 CellID->1076650508,ExpressionUUID->"cf7057a0-e3e4-47d9-9585-9f80b60c59e1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapThread", "[", 
  RowBox[{"RotateRight", ",", 
   RowBox[{"{", 
    RowBox[{"testlist", ",", "rotatelist"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940058632899147*^9, 3.940058646641301*^9}},
 CellLabel->"In[552]:=",
 CellID->913832270,ExpressionUUID->"294fc98b-0c7e-4d31-b5dc-70e3a5453b1e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"9", ",", "1", ",", "2", ",", "2", ",", "10", ",", "7"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "1", ",", "7", ",", "9", ",", "10", ",", "7"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "9", ",", "9", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "2", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "8", ",", "8", ",", "5", ",", "3", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "2", ",", "3", ",", "5"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400586469910183`*^9},
 CellLabel->"Out[552]=",
 CellID->1030465192,ExpressionUUID->"302703c3-588b-47da-a42f-a485b57ede07"]
}, Open  ]],

Cell["The function will look like", "Text",
 CellChangeTimes->{3.940058685405251*^9},
 CellID->1720352536,ExpressionUUID->"e7c0768c-6e3e-4595-9b73-d19ab6f14ff4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "rotateSublists", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"rotateSublists", "[", 
     RowBox[{
      RowBox[{"{", "sublists__List", "}"}], ",", 
      RowBox[{"{", "rotatenums__Integer", "}"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"{", "sublists", "}"}], "]"}], "==", 
     RowBox[{"Length", "[", 
      RowBox[{"{", "rotatenums", "}"}], "]"}]}]}], ":=", 
   RowBox[{"MapThread", "[", 
    RowBox[{"RotateRight", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "sublists", "}"}], ",", 
       RowBox[{"{", "rotatenums", "}"}]}], "}"}]}], "]"}]}], ";"}]}], "Input",\

 CellChangeTimes->{{3.940058687411831*^9, 3.940058739395344*^9}},
 CellLabel->"In[553]:=",
 CellID->884606015,ExpressionUUID->"6c3657f2-18b7-4e1b-a6ee-3b178d60db77"],

Cell["\<\
As we will see in chapter VI, for the problem of fast extraction of all \
matrix diagonals, the most efficient solution will be based on this example.\
\>", "Text",
 CellChangeTimes->{{3.940058750760107*^9, 3.940058752942026*^9}},
 CellID->193181887,ExpressionUUID->"5d53e73c-f70f-48f4-a06d-ddf0590106be"],

Cell["\<\
All of the three examples above can be also done using Map and Apply, and \
pure functions, along the lines outlined above. We leave it as an exercise to \
the reader to implement these versions. The point however is that, as we also \
already discussed, doing it with Thread or MapThread may be several times \
more efficient. In fact, this should be precisely the reason why these \
operations were implemented as separate commands - in practice they are \
needed quite frequently, and using Map in such situations in the symbolic \
environment of Mathematica may induce significant overhead.\
\>", "Text",
 CellChangeTimes->{{3.940058762881258*^9, 3.940058774212891*^9}},
 CellID->269086317,ExpressionUUID->"51c3d025-a28d-446d-a731-40015c3d21dd"],

Cell["Example: imitating Transpose", "SubitemNumbered",
 CellChangeTimes->{3.940058784138686*^9},
 CellID->47980337,ExpressionUUID->"d778bc65-32ae-431b-a628-eeafc3882a5f"],

Cell["Consider the following example:", "Text",
 CellChangeTimes->{3.9400587910635643`*^9},
 CellID->1099156334,ExpressionUUID->"b0b85202-acdf-448f-a4eb-a2c2dd5c607d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapThread", "[", 
  RowBox[{"List", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Range", "[", "10", "]"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"11", ",", "20"}], "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940058792857101*^9, 3.940058802259461*^9}},
 CellLabel->"In[555]:=",
 CellID->2142998142,ExpressionUUID->"4853f0a5-166d-4a91-916b-08354b1e2efa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "11"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "12"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "18"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "20"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940058802597726*^9},
 CellLabel->"Out[555]=",
 CellID->376561405,ExpressionUUID->"f98b2eb5-cc39-42ac-9e79-9cdc50a9bdc6"]
}, Open  ]],

Cell["\<\
If we look carefully at the result, we realize that what we obtained is a \
list Transposed with respect to the original input. Indeed:\
\>", "Text",
 CellChangeTimes->{{3.940058811714954*^9, 3.9400588140345592`*^9}},
 CellID->233226126,ExpressionUUID->"95a16997-03e0-4021-812b-058ae8557ab0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"11", ",", "20"}], "]"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400588181368856`*^9, 3.9400588292564774`*^9}},
 CellLabel->"In[556]:=",
 CellID->172935604,ExpressionUUID->"27873949-4ff7-4d92-bb10-aee3c8af712d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "11"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "12"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "14"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "18"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "20"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400588296853037`*^9},
 CellLabel->"Out[556]=",
 CellID->1833760460,ExpressionUUID->"f3ee9183-cb33-4f09-ba75-9007bd9539a9"]
}, Open  ]],

Cell["Thus, we may imitate the action of the Transpose command:", "Text",
 CellChangeTimes->{3.940058840306901*^9},
 CellID->1474233123,ExpressionUUID->"d9f439df-5c6b-4bcf-b7cb-19d02ab24042"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "myTranspose", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"myTranspose", "[", "x_List", "]"}], ":=", 
   RowBox[{"MapThread", "[", 
    RowBox[{"List", ",", "x"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940058843168788*^9, 3.940058864822361*^9}},
 CellLabel->"In[557]:=",
 CellID->444126119,ExpressionUUID->"73170d1a-b320-4865-903d-e6b8013729ef"],

Cell["We can now compare the performance", "Text",
 CellChangeTimes->{3.940058876563097*^9},
 CellID->1304561757,ExpressionUUID->"4f07b440-2adf-476c-93e7-f1c540a73fac"],

Cell[BoxData[
 RowBox[{
  RowBox[{"perfterst", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"i", "+", "j"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "20"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "30"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.940058880909704*^9, 3.940058891974083*^9}},
 CellLabel->"In[559]:=",
 CellID->25646797,ExpressionUUID->"b5486dd2-d199-4279-aa12-a71a58c269e6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"myTranspose", "[", "perfterst", "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940058894603929*^9, 3.94005891222357*^9}},
 CellLabel->"In[561]:=",
 CellID->844597387,ExpressionUUID->"08134c2f-02d8-4ac5-b7ed-4b8eb135025f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000047`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.940058907582847*^9, 3.940058912540423*^9}},
 CellLabel->"Out[561]=",
 CellID->1492219278,ExpressionUUID->"2fb5d17e-f466-4f8e-8847-7aa46170ce03"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Transpose", "[", "perfterst", "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9400589167314*^9, 3.940058922808773*^9}},
 CellLabel->"In[562]:=",
 CellID->542695941,ExpressionUUID->"1f9db159-6d08-4afc-8cff-8a469deb7005"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000053`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.94005892323097*^9},
 CellLabel->"Out[562]=",
 CellID->1994230275,ExpressionUUID->"d332956d-dd88-4437-bc6c-e51eb396fece"]
}, Open  ]],

Cell["\<\
We come to the usual conclusion that the built-in operations are favored. \
However, there is more to it in this particular example. What we compare here \
is not just two realizations - ours vs built-in, but two styles of \
programming: functional vs. structure operations. The typical commands of the \
latter style are: Transpose, Partition, Flatten, perhaps also Inner , Outer \
(although we cover them in this chapter) , RotateRight, RotateLeft, and some \
others. All these commands are extremely fast and efficient. So, if any of \
these can be used, they are usually favored with respect to a functional \
realization, which, in terms of efficiency, comes next. The rule-based \
realization usually comes after functional, and the procedural realization is
very often the last in our performance winners list.\
\>", "Text",
 CellChangeTimes->{{3.940058955629504*^9, 3.9400589865098143`*^9}},
 CellID->1250953196,ExpressionUUID->"c21dedd1-fdf9-4905-84b0-7fbb7ca49977"],

Cell["\<\
Heuristically, this can be understood as follows. Structural operations are \
the most precise, in the sense that the structures they operate on are rather \
specific (for instance, Transpose requires sublists of the same length, etc). \
Also, their role is mostly in rearranging the existing structure, but not \
transforming the pieces. Functional style is still quite precise (since one \
needs to have a clear idea of the structure of an expression before using Map \
and Apply), but somewhat less restrictive. Also, here we can transform pieces \
by Mapping and Applying functions to them. The rule-based approach is less \
precise in the sense that we don\[CloseCurlyQuote]t need to know beforehand \
where in the expression the rule applies - if we construct the rule \
correctly, it will apply to all places where needed. The overhead induced \
here is mostly due to the pattern-matcher
which has to determine for us the correct places where to apply the rules. I \
hastily comment that there are cases when rule-based approach is extremely \
efficient, but this usually means that rules and patterns are very well \
matched to expressions they operate on, by a programmer who has a very good \
and precise idea of how these rules will be applied (so that the \
pattern-matcher \[OpenCurlyDoubleQuote]wastes\[CloseCurlyDoubleQuote] as \
little time as possible on false matches). Finally, in procedural approach we \
don\[CloseCurlyQuote]t use the natural advantage of many Mathematica\
\[CloseCurlyQuote]s functions which work with whole expressions, but break \
them into pieces (e.g. array indexing), which means that we are going in \
directions entirely orthogonal to those for which the system has been \
optimized.\
\>", "Text",
 CellChangeTimes->{{3.940058955629504*^9, 3.940058982620907*^9}, {
  3.940059016328195*^9, 3.940059056934173*^9}},
 CellID->978551909,ExpressionUUID->"5deef237-6f48-4b48-bf0c-e66061b1772b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Inner", "Subsubsection",
 CellChangeTimes->{3.9400590896644382`*^9},
 CellID->1612977153,ExpressionUUID->"2d4a3842-8811-4afc-8272-32cbfe624844"],

Cell["\<\
As it is nicely stated in Mathematica Help, Inner is a generalization of an \
inner product. The format of the command is\
\>", "Text",
 CellChangeTimes->{{3.940059097180282*^9, 3.940059099124639*^9}},
 CellID->1620934390,ExpressionUUID->"2ee8ba67-f5cc-456c-8622-be54e447f0b3"],

Cell[BoxData[
 RowBox[{"Inner", "[", 
  RowBox[{"f", ",", "list1", ",", "list2", ",", "g"}], "]"}]], "Input",
 CellChangeTimes->{{3.940059105173869*^9, 3.9400591094584703`*^9}},
 CellLabel->"In[563]:=",
 CellID->27830626,ExpressionUUID->"c913c050-4d39-4a3d-a16a-15cbb810f2a1"],

Cell["\<\
The lists <list1> and <list2> have to be of the same length. The function f \
plays a role of multiplication, and g - of addition.\
\>", "Text",
 CellChangeTimes->{{3.940059128592073*^9, 3.940059132197763*^9}},
 CellID->1231296416,ExpressionUUID->"2c34ef62-d5b7-4bdc-b06d-fa747d012cfc"],

Cell["Simple examples", "ItemNumbered",
 CellChangeTimes->{3.9400591422270527`*^9},
 CellID->234608055,ExpressionUUID->"07bffe48-08bf-447f-a27a-1684d34f5c02"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Inner", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e", ",", "f"}], "}"}], ",", "g"}], "]"}]], "Input",
 CellChangeTimes->{{3.940059144110713*^9, 3.940059152206296*^9}},
 CellLabel->"In[564]:=",
 CellID->1364232567,ExpressionUUID->"67c1eeee-7548-4f98-9276-85cf407b8e68"],

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"a", ",", "d"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"b", ",", "e"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"c", ",", "f"}], "]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.9400591527580347`*^9},
 CellLabel->"Out[564]=",
 CellID->1459665559,ExpressionUUID->"0236c627-3757-4ae4-a42b-c4f62fc9fd16"]
}, Open  ]],

Cell["We can get back a standard inner product for a vector:", "Text",
 CellChangeTimes->{3.94005916364205*^9},
 CellID->1893350432,ExpressionUUID->"b6d7762d-d8c8-4fc5-861a-fffd541ee0c1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Inner", "[", 
  RowBox[{"Times", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e", ",", "f"}], "}"}], ",", "Plus"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400591669469013`*^9, 3.940059176983383*^9}},
 CellLabel->"In[565]:=",
 CellID->11141752,ExpressionUUID->"590b00b1-4999-4e37-8a57-dad75a4f3d5d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a", " ", "d"}], "+", 
  RowBox[{"b", " ", "e"}], "+", 
  RowBox[{"c", " ", "f"}]}]], "Output",
 CellChangeTimes->{3.940059177742989*^9},
 CellLabel->"Out[565]=",
 CellID->1556624465,ExpressionUUID->"9520f4a1-41b9-464c-99fe-5f8d7a7a67b8"]
}, Open  ]],

Cell["Example: Imitating Inner", "ItemNumbered",
 CellChangeTimes->{3.940059188599674*^9},
 CellID->1541595501,ExpressionUUID->"958ea67a-a8db-4e3c-8b4d-128eb4786899"],

Cell["\<\
We can imitate the workings of Inner with MapThread and Apply in the \
following manner: Inner[f, list1, list2, g]==Apply[g, MapThread[f, {list1, \
list2}]]
where the equality sign means \[OpenCurlyDoubleQuote]acts similarly\
\[CloseCurlyDoubleQuote]. For instance:\
\>", "Text",
 CellChangeTimes->{{3.940059201058042*^9, 3.940059242419566*^9}},
 CellID->886902635,ExpressionUUID->"8218f369-926f-499c-b3a5-fe4ced4efe0b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "@@", 
  RowBox[{"MapThread", "[", 
   RowBox[{"f", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], "}"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.940059244585217*^9, 3.94005925334665*^9}},
 CellLabel->"In[566]:=",
 CellID->1255220888,ExpressionUUID->"02a3ea99-c714-465e-9f10-bdda6b9c2e7b"],

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"a", ",", "d"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"b", ",", "e"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"c", ",", "f"}], "]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.940059255089168*^9},
 CellLabel->"Out[566]=",
 CellID->1159381374,ExpressionUUID->"1d16c53d-7c64-4a1b-9641-3e5ccb807b29"]
}, Open  ]],

Cell["\<\
Alternatively, Inner[f,list1,list2,g]==Apply[g,f@@@Transpose[{list1,list2}]]\
\>", "Text",
 CellChangeTimes->{{3.940059277248938*^9, 3.940059309027955*^9}},
 CellID->1603623587,ExpressionUUID->"87ab5cf3-1be3-4d8e-9879-fd25be41ac55"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"g", ",", 
   RowBox[{"f", "@@@", 
    RowBox[{"Transpose", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], "}"}], "]"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940059284418806*^9, 3.9400592960867357`*^9}},
 CellLabel->"In[567]:=",
 CellID->289244352,ExpressionUUID->"68fa2bae-e27d-4cb6-b4a2-d8b60eb31f92"],

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"a", ",", "d"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"b", ",", "e"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"c", ",", "f"}], "]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.9400592970731373`*^9},
 CellLabel->"Out[567]=",
 CellID->2129452799,ExpressionUUID->"fe28e70c-8a26-4166-8057-14484144fd85"]
}, Open  ]],

Cell["\<\
It is good to realize that Inner is in some sense a more specialized \
function, than say Thread or MapThread (it takes only two lists, for \
instance, and they have to have the same length). This means that in certain \
situations, we can expect it to give a better performance.\
\>", "Text",
 CellChangeTimes->{{3.940059334912096*^9, 3.940059340800222*^9}},
 CellID->1451308673,ExpressionUUID->"39fa1bc6-74de-4d1d-b9b9-289262009cc9"],

Cell["Example: Creating a list of rules", "ItemNumbered",
 CellChangeTimes->{3.940059349149455*^9},
 CellID->1002039750,ExpressionUUID->"1daca758-ddb1-48fe-8e05-97a9985d0e6f"],

Cell["\<\
Here, for example, we can use Inner to create a list of rules:\
\>", "Text",
 CellChangeTimes->{3.940059358658626*^9},
 CellID->715318476,ExpressionUUID->"b1108345-4042-497c-bfa7-214278801ed4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Inner", "[", 
  RowBox[{"Rule", ",", 
   RowBox[{"Range", "[", "10", "]"}], ",", 
   RowBox[{"Range", "[", 
    RowBox[{"11", ",", "20"}], "]"}], ",", "List"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400593612933807`*^9, 3.940059370638508*^9}},
 CellLabel->"In[568]:=",
 CellID->324228254,ExpressionUUID->"1aac0eb2-9268-499a-91ec-2a0f8bd469b1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "11"}], ",", 
   RowBox[{"2", "\[Rule]", "12"}], ",", 
   RowBox[{"3", "\[Rule]", "13"}], ",", 
   RowBox[{"4", "\[Rule]", "14"}], ",", 
   RowBox[{"5", "\[Rule]", "15"}], ",", 
   RowBox[{"6", "\[Rule]", "16"}], ",", 
   RowBox[{"7", "\[Rule]", "17"}], ",", 
   RowBox[{"8", "\[Rule]", "18"}], ",", 
   RowBox[{"9", "\[Rule]", "19"}], ",", 
   RowBox[{"10", "\[Rule]", "20"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940059371205158*^9},
 CellLabel->"Out[568]=",
 CellID->1751846725,ExpressionUUID->"1d092204-f3ff-4d23-804a-8835ac65a303"]
}, Open  ]],

Cell["The function will look like", "Text",
 CellChangeTimes->{3.940059387767767*^9},
 CellID->1287106705,ExpressionUUID->"e4e5f58c-c24d-442b-af5f-c83dc0f0ec9c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "createRules", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"createRules", "[", 
    RowBox[{"lhs_List", ",", "rhs_List"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Length", "[", "lhs", "]"}], "==", 
    RowBox[{"Length", "[", "rhs", "]"}]}]}], ":=", 
  RowBox[{"Inner", "[", 
   RowBox[{"Rule", ",", "lhs", ",", "rhs", ",", "List"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940059394189418*^9, 3.940059423840858*^9}},
 CellLabel->"In[569]:=",
 CellID->171667202,ExpressionUUID->"b480b66c-8183-42ed-9960-3c0fb38b67dd"],

Cell["We can compare its performance with that of Thread:", "Text",
 CellChangeTimes->{3.940059435490478*^9},
 CellID->589212919,ExpressionUUID->"8d317adf-da4e-4559-9e2b-afa3f2797bf0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Inner", "[", 
    RowBox[{"Rule", ",", 
     RowBox[{"Range", "[", "100", "]"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"101", ",", "200"}], "]"}], ",", "List"}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940059439744492*^9, 3.940059458635282*^9}},
 CellLabel->"In[571]:=",
 CellID->237594523,ExpressionUUID->"f16219a1-bd0c-49a5-9d2b-5ce89ae8acff"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000129`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940059459070052*^9},
 CellLabel->"Out[571]=",
 CellID->744706687,ExpressionUUID->"b366c7ac-e4c8-4a9b-bf0f-38bb4d0fc981"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MapThread", "[", 
    RowBox[{"Rule", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Range", "[", "100", "]"}], ",", 
       RowBox[{"Range", "[", 
        RowBox[{"101", ",", "200"}], "]"}]}], "}"}]}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9400594611339417`*^9, 3.940059474998581*^9}},
 CellLabel->"In[572]:=",
 CellID->909255773,ExpressionUUID->"58a39bfb-bb50-4fcb-b38b-dfbfdc36baca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000105`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940059475388975*^9},
 CellLabel->"Out[572]=",
 CellID->597015085,ExpressionUUID->"e0de7f0c-e36d-406a-9b5f-582c6b9f1fb3"]
}, Open  ]],

Cell["Example: Comparing two lists", "ItemNumbered",
 CellChangeTimes->{3.9400595405199747`*^9},
 CellID->988934811,ExpressionUUID->"0f954f94-cb4e-4c10-a4cd-bc36239e840e"],

Cell["\<\
As another example, here we use Inner to compare two lists and return \
positions where the elements of the two lists are different:\
\>", "Text",
 CellChangeTimes->{{3.94005955386635*^9, 3.9400595559778013`*^9}},
 CellID->1651424344,ExpressionUUID->"470b7640-e376-41b0-9cce-fc18dc74be8b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Inner", "[", 
  RowBox[{"Equal", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1", ",", "4", ",", "2", ",", "6"}], "}"}], 
   ",", 
   RowBox[{
    RowBox[{"Position", "[", 
     RowBox[{
      RowBox[{"{", "##", "}"}], ",", "False"}], "]"}], "&"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940059561335269*^9, 3.9400595880755577`*^9}},
 CellLabel->"In[573]:=",
 CellID->1135678231,ExpressionUUID->"3975f85d-e24f-4437-8819-50b97a1275ac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "5", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940059589191011*^9},
 CellLabel->"Out[573]=",
 CellID->2088033096,ExpressionUUID->"15107e2c-7f0a-4db9-91b4-e867316f9a03"]
}, Open  ]],

Cell["we can express this as a function:", "Text",
 CellChangeTimes->{3.940059597639923*^9},
 CellID->1541968845,ExpressionUUID->"a6c6ec00-d20c-4dcf-b3cf-92dd40c3246e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "compareLists", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"compareLists", "[", 
    RowBox[{"list1_List", ",", "list2_List"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Length", "[", "list1", "]"}], "==", 
    RowBox[{"Length", "[", "list2", "]"}]}]}], ":=", 
  RowBox[{"Inner", "[", 
   RowBox[{"SameQ", ",", "list1", ",", "list2", ",", 
    RowBox[{
     RowBox[{"Position", "[", 
      RowBox[{
       RowBox[{"{", "##", "}"}], ",", "False"}], "]"}], "&"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.940059601984667*^9, 3.9400596488228807`*^9}},
 CellLabel->"In[574]:=",
 CellID->551844768,ExpressionUUID->"5ab9293f-56b1-48e5-af3b-b3b6ffe508b1"],

Cell["check:", "Text",
 CellChangeTimes->{{3.940059651961533*^9, 3.940059652757419*^9}},
 CellID->1704378892,ExpressionUUID->"0376fd44-82b1-4121-a0b9-6d781eefc2a4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"compareLists", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1", ",", "4", ",", "2", ",", "6"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940059654108721*^9, 3.940059667831706*^9}},
 CellLabel->"In[576]:=",
 CellID->1958214765,ExpressionUUID->"e386b1a6-6657-4ddb-938a-5b897ad10eb9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "5", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940059668396387*^9},
 CellLabel->"Out[576]=",
 CellID->714116788,ExpressionUUID->"570ee06f-1024-4d41-b736-076ab9d86511"]
}, Open  ]],

Cell["As an alternative, we may consider such an implementation:", "Text",
 CellChangeTimes->{3.94005968918583*^9},
 CellID->2022236480,ExpressionUUID->"2585bf6f-a7a3-4732-871d-130e356f766e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "compareListsAlt", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"compareListsAlt", "[", 
    RowBox[{"list1_List", ",", "list2_List"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Length", "[", "list1", "]"}], "==", 
    RowBox[{"Length", "[", "list2", "]"}]}]}], ":=", 
  RowBox[{"Position", "[", 
   RowBox[{
    RowBox[{"Abs", "[", 
     RowBox[{"list1", "-", "list2"}], "]"}], ",", 
    RowBox[{"_", "?", "Positive"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940059706756158*^9, 3.9400597369517927`*^9}},
 CellLabel->"In[577]:=",
 CellID->1652321938,ExpressionUUID->"2e72527f-31c3-433c-9073-22b37855b71f"],

Cell["check:", "Text",
 CellChangeTimes->{{3.940059740102335*^9, 3.940059741031658*^9}},
 CellID->1521811760,ExpressionUUID->"a285e52b-f202-441b-95a1-34e7474d2517"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"compareListsAlt", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1", ",", "4", ",", "2", ",", "6"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940059742431959*^9, 3.940059756330542*^9}},
 CellLabel->"In[579]:=",
 CellID->1091994163,ExpressionUUID->"30423166-c961-4fc7-9c16-20788984618c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "5", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400597570956573`*^9},
 CellLabel->"Out[579]=",
 CellID->1477310833,ExpressionUUID->"b21c7175-d707-43fa-b125-6e4dfb97afb4"]
}, Open  ]],

Cell["\<\
The last one is based on exploiting the fast Subtract operation which \
operates on entire lists. We can compare the performance:\
\>", "Text",
 CellChangeTimes->{{3.940059767121193*^9, 3.940059769292202*^9}},
 CellID->2104727264,ExpressionUUID->"8dfa36ff-70f1-45d5-82ae-c1d27870621d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"compareLists", "[", 
    RowBox[{
     RowBox[{"Range", "[", "1000", "]"}], ",", 
     RowBox[{"Range", "[", "1000", "]"}]}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940059789112618*^9, 3.940059801295032*^9}},
 CellLabel->"In[580]:=",
 CellID->960764338,ExpressionUUID->"98624ede-256d-44e3-b99e-f0ce5f1aa9e7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00092`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.9400598018215017`*^9},
 CellLabel->"Out[580]=",
 CellID->1818205329,ExpressionUUID->"ee7038e6-df2e-4a9c-b682-1efc9c782c1f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"compareListsAlt", "[", 
    RowBox[{
     RowBox[{"Range", "[", "1000", "]"}], ",", 
     RowBox[{"Range", "[", "1000", "]"}]}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9400598103751707`*^9, 3.940059810839007*^9}},
 CellLabel->"In[581]:=",
 CellID->2032151340,ExpressionUUID->"f118036c-b124-4a1f-99d9-ebf0bc356727"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000868`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940059811234866*^9},
 CellLabel->"Out[581]=",
 CellID->1936898139,ExpressionUUID->"7faaeb5a-167a-40bd-8bb1-29662e9ad5d4"]
}, Open  ]],

Cell["\<\
The result is interesting. In the Inner-based implementation, the most \
expensive operation is to thread Equal on a list of pairs of elements of our \
original lists (that\[CloseCurlyQuote]s what it does internally). In the \
implementation based on subtraction, the most expensive is Position with the \
<_?Positive> pattern, and it turns out to be slower. In addition to this, the \
Subtract - based implementation is less general since it will work correctly \
only on numeric lists - otherwise the <_?Positive> pattern will not match.\
\>", "Text",
 CellChangeTimes->{{3.940059826030768*^9, 3.940059839698967*^9}},
 CellID->1889900947,ExpressionUUID->"9dc73a60-cef6-4879-a3dd-2779c340d2fd"],

Cell["Example: reconstructing a number from its factorized form", \
"ItemNumbered",
 CellChangeTimes->{3.9400598502986383`*^9},
 CellID->2093009320,ExpressionUUID->"1ba9a3e7-0351-4fca-8a58-c2e2d1676d30"],

Cell["Say, we are given some number, like for instance:", "Text",
 CellChangeTimes->{3.940059862767272*^9},
 CellID->1425503380,ExpressionUUID->"7e566796-94a0-4ee3-b6ff-b7d7bc125044"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"num", "=", "3628800"}]], "Input",
 CellChangeTimes->{{3.940059867244087*^9, 3.94005987300066*^9}},
 CellLabel->"In[582]:=",
 CellID->1279486653,ExpressionUUID->"ccf3100a-8ce2-416c-bc61-efed66e05c7a"],

Cell[BoxData["3628800"], "Output",
 CellChangeTimes->{3.940059873757452*^9},
 CellLabel->"Out[582]=",
 CellID->2117263635,ExpressionUUID->"5505a5a0-37b7-4268-bf57-cbac2ac5be39"]
}, Open  ]],

Cell["\<\
Let us factorize it, using the built-in command FactorInteger:\
\>", "Text",
 CellChangeTimes->{3.940059881545328*^9},
 CellID->1045882655,ExpressionUUID->"e65c40c2-e149-4112-b894-c956441d55dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"factored", "=", 
  RowBox[{"FactorInteger", "[", "num", "]"}]}]], "Input",
 CellChangeTimes->{{3.940059884556266*^9, 3.940059892018042*^9}},
 CellLabel->"In[583]:=",
 CellID->206163218,ExpressionUUID->"181b167c-6674-491b-a21b-2bd0385c2ad4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400598925276337`*^9},
 CellLabel->"Out[583]=",
 CellID->1764365863,ExpressionUUID->"f00b5297-725a-4638-9ef4-02aef0ba2048"]
}, Open  ]],

Cell["\<\
In each sublist, the first number is a base, and the second - an exponent \
(the power). Now, we want to perform the opposite operation: reconstruct the \
number back from its factorized form. It is clear that the idiom of Inner \
matches this problem in principle. What we have to do though is to Transpose \
the initial list, and then Apply Sequence to it:\
\>", "Text",
 CellChangeTimes->{{3.940059904661686*^9, 3.9400599147029743`*^9}},
 CellID->1242861665,ExpressionUUID->"981a8028-1a41-44ae-ba39-c163db27b7ac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Inner", "[", 
  RowBox[{"Power", ",", 
   RowBox[{"Sequence", "@@", 
    RowBox[{"Transpose", "[", "factored", "]"}]}], ",", "Times"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940059935572648*^9, 3.940059950026943*^9}},
 CellLabel->"In[584]:=",
 CellID->1904336114,ExpressionUUID->"4f71f0d1-dad3-4e18-a862-93e19b6f9aa5"],

Cell[BoxData["3628800"], "Output",
 CellChangeTimes->{3.9400599504150867`*^9},
 CellLabel->"Out[584]=",
 CellID->1152163804,ExpressionUUID->"3697fd57-afaa-4702-bcc5-ab25983a9da8"]
}, Open  ]],

Cell["We can now write a function:", "Text",
 CellChangeTimes->{3.940059960023588*^9},
 CellID->557008829,ExpressionUUID->"4dec6406-6d89-49da-be5f-a5e14ca12c7a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "multiplyFactored", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"multiplyFactored", "[", "fact_List", "]"}], ":=", 
   RowBox[{"Inner", "[", 
    RowBox[{"Power", ",", 
     RowBox[{"Sequence", "@@", 
      RowBox[{"Transpose", "[", "fact", "]"}]}], ",", "Times"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.9400599621520357`*^9, 3.940059988140544*^9}},
 CellLabel->"In[585]:=",
 CellID->736318698,ExpressionUUID->"03491cc6-f4af-4ff6-93a0-59692a0f5441"],

Cell["\<\
I leave it as an exercise to the reader to add the condition to check that \
the input list contains sublists of the same length. We now check:\
\>", "Text",
 CellChangeTimes->{{3.940059998411838*^9, 3.940060000576762*^9}},
 CellID->818900855,ExpressionUUID->"eff523bd-93ce-4f48-af63-52972c66e5ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"multiplyFactored", "[", 
  RowBox[{"FactorInteger", "[", "100", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.940060012792645*^9, 3.940060020514336*^9}},
 CellLabel->"In[587]:=",
 CellID->833359347,ExpressionUUID->"19affacb-5d52-4037-8a4a-d8a6782e3474"],

Cell[BoxData["100"], "Output",
 CellChangeTimes->{3.940060020815352*^9},
 CellLabel->"Out[587]=",
 CellID->702753031,ExpressionUUID->"bfc4c7b7-c6e0-4c39-8bf6-88161fbdb2b6"]
}, Open  ]],

Cell["\<\
For this problem, there exists an alternative solution in terms of core \
functions Map and Apply:\
\>", "Text",
 CellChangeTimes->{3.9400600296839533`*^9},
 CellID->10133517,ExpressionUUID->"ba86f3ef-c14b-4b64-9246-1f7686c3d197"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "multiplyFactoredAlt", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"multiplyFactoredAlt", "[", "fact_List", "]"}], ":=", 
   RowBox[{"Apply", "[", 
    RowBox[{"Times", ",", 
     RowBox[{"Power", "@@@", "fact"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940060038412087*^9, 3.9400600585508432`*^9}},
 CellLabel->"In[588]:=",
 CellID->885388553,ExpressionUUID->"a36ae8e9-4c21-47e0-adff-f4d4e48a3a35"],

Cell["\<\
Make sure you understand the code. This solution is more concise, and we may \
expect that it has some what better performance. We can check it:\
\>", "Text",
 CellChangeTimes->{{3.940060068802107*^9, 3.940060077909306*^9}},
 CellID->1864042513,ExpressionUUID->"34d0ef18-1cf2-433b-8d74-6f9d15468830"],

Cell["First check that it works:", "Text",
 CellChangeTimes->{{3.940060068802107*^9, 3.940060075306663*^9}},
 CellID->1991681079,ExpressionUUID->"8ff3b3ea-cdf0-489c-9fe9-50ec2fcc5488"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"multiplyFactoredAlt", "[", "factored", "]"}]], "Input",
 CellChangeTimes->{{3.940060088482296*^9, 3.940060092291854*^9}},
 CellLabel->"In[590]:=",
 CellID->1757188690,ExpressionUUID->"a3d8b124-2222-4ab0-8a12-b1383e98355a"],

Cell[BoxData["3628800"], "Output",
 CellChangeTimes->{3.940060092605715*^9},
 CellLabel->"Out[590]=",
 CellID->1759564434,ExpressionUUID->"71b3bf4f-a338-48c1-b880-523a8d8ea5ad"]
}, Open  ]],

Cell["This will be our test factorized number (50!)", "Text",
 CellChangeTimes->{3.9400601020752277`*^9},
 CellID->2139401,ExpressionUUID->"59ceedc3-12b8-4d1d-b52e-5e916af1178f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testfact", "=", 
  RowBox[{"FactorInteger", "[", 
   RowBox[{"50", "!"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.94006010383937*^9, 3.940060109674179*^9}},
 CellLabel->"In[591]:=",
 CellID->162116285,ExpressionUUID->"b50ff608-d266-4ca1-813c-6426da056c75"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "47"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "22"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "12"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"13", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"19", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"23", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"29", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"31", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"37", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"41", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"43", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"47", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940060110451041*^9},
 CellLabel->"Out[591]=",
 CellID->626465930,ExpressionUUID->"443065b0-e139-4781-985b-90ad1c143414"]
}, Open  ]],

Cell["We now test:", "Text",
 CellChangeTimes->{{3.940060113841056*^9, 3.940060116454514*^9}},
 CellID->2048047916,ExpressionUUID->"36414e47-aed8-4d02-afbd-c7f149fa8b5a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"multiplyFactored", "[", "testfact", "]"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940060117250292*^9, 3.9400601266685*^9}},
 CellLabel->"In[592]:=",
 CellID->824804773,ExpressionUUID->"d8ebd604-2ebd-4b1e-9f82-619b5c0f4317"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.000136`", ",", 
   "30414093201713378043612608166064768844377641568960512000000000000"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940060127153483*^9},
 CellLabel->"Out[592]=",
 CellID->1815178767,ExpressionUUID->"6c89cae6-430d-4610-8920-813573993adc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"multiplyFactoredAlt", "[", "testfact", "]"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940060131007606*^9, 3.94006013719527*^9}},
 CellLabel->"In[593]:=",
 CellID->205341783,ExpressionUUID->"6bb731fb-bd69-41e5-91c7-03d1c5541149"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.000099`", ",", 
   "30414093201713378043612608166064768844377641568960512000000000000"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940060137633142*^9},
 CellLabel->"Out[593]=",
 CellID->1408656079,ExpressionUUID->"b2aba753-e8b2-4148-be68-08d2c1d95e5f"]
}, Open  ]],

Cell["\<\
This shows that sometimes the core functions give a more direct solution, \
which make us once again appreciate their usefulness and versatility.\
\>", "Text",
 CellChangeTimes->{{3.94006015237164*^9, 3.9400601545661793`*^9}},
 CellID->1422995225,ExpressionUUID->"55a50908-eb00-4eae-b65d-ed7854172dc7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Outer", "Subsubsection",
 CellChangeTimes->{{3.940060164785749*^9, 3.940060165516561*^9}},
 CellID->933698357,ExpressionUUID->"e31f5d04-10f9-4b54-b65b-928864308b53"],

Cell["\<\
This is another very useful and widely used function. It takes several lists \
and basically creates all possible combinations of the elements of different \
input lists (Cartesian product). Then it can apply some function to these \
combinations. The format of the command in the simplest form is:\
\>", "Text",
 CellChangeTimes->{{3.9400601753813057`*^9, 3.9400601822420073`*^9}},
 CellID->1643296556,ExpressionUUID->"5d562cf0-bbed-4b75-8099-2dda937b347b"],

Cell[BoxData[
 RowBox[{"Outer", "[", 
  RowBox[{"function", ",", " ", "list1", ",", " ", "list2", ",", " ", "..."}],
   "]"}]], "Input",
 CellChangeTimes->{{3.940060185923547*^9, 3.9400601920644407`*^9}},
 CellID->426812094,ExpressionUUID->"087d3e27-dd12-47f6-a613-5d3b6dc0a501"],

Cell["Simple examples", "ItemNumbered",
 CellChangeTimes->{3.9400602006434937`*^9},
 CellID->256300953,ExpressionUUID->"5c254dc8-6528-445b-bbd1-d87a982e8706"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Outer", "[", 
  RowBox[{"List", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940060205961966*^9, 3.940060211192461*^9}},
 CellLabel->"In[594]:=",
 CellID->980553077,ExpressionUUID->"2dc974b8-d403-4b85-b50c-2e8cf94806a9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "c"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "d"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"b", ",", "c"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "d"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940060211624195*^9},
 CellLabel->"Out[594]=",
 CellID->845742992,ExpressionUUID->"a3a2776e-c960-471a-ac09-e5ce514106e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Outer", "[", 
  RowBox[{"List", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"e", ",", "f"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940060217724243*^9, 3.94006022543027*^9}},
 CellLabel->"In[595]:=",
 CellID->1085045194,ExpressionUUID->"750bf590-c0a3-4648-a557-f0477ccd6675"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "c", ",", "e"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"a", ",", "c", ",", "f"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "d", ",", "e"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"a", ",", "d", ",", "f"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"b", ",", "c", ",", "e"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"b", ",", "c", ",", "f"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"b", ",", "d", ",", "e"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"b", ",", "d", ",", "f"}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9400602258515053`*^9},
 CellLabel->"Out[595]=",
 CellID->1185085913,ExpressionUUID->"fc00909b-00e8-4c2b-bf0f-aed1d1aacd8c"]
}, Open  ]],

Cell["\<\
As you can see, the result is a nested list where innermost sublists \
correspond to sweeping through the rightmost of the input lists, and so \
on.The lists are not necessarily of the same length:\
\>", "Text",
 CellChangeTimes->{{3.940060240496468*^9, 3.94006024276788*^9}},
 CellID->1975597513,ExpressionUUID->"f1d3ccac-cea1-422b-857a-dd90e6567af0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Outer", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d", ",", "e"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9400602498680887`*^9, 3.9400602554691753`*^9}},
 CellLabel->"In[596]:=",
 CellID->726002684,ExpressionUUID->"4cb1f428-3d55-4577-bdef-c9111331b05c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"a", ",", "c"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"a", ",", "d"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"a", ",", "e"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"b", ",", "c"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"b", ",", "d"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"b", ",", "e"}], "]"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940060255851591*^9},
 CellLabel->"Out[596]=",
 CellID->508096546,ExpressionUUID->"aadd6f4e-e2b1-4b8f-afac-37048ee000d7"]
}, Open  ]],

Cell["We can use Outer for construction of certain matrices", "Text",
 CellChangeTimes->{3.9400602665612183`*^9},
 CellID->1183668150,ExpressionUUID->"93fd3a9c-8389-4a6d-9f0d-4fae180a7859"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Outer", "[", 
   RowBox[{"f", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5"}], "}"}]}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.940060268953926*^9, 3.940060277618205*^9}},
 CellLabel->"In[597]:=",
 CellID->324452909,ExpressionUUID->"9fd573b0-8961-4465-815f-a508c929a0a9"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"f", "[", 
       RowBox[{"1", ",", "4"}], "]"}], 
      RowBox[{"f", "[", 
       RowBox[{"1", ",", "5"}], "]"}]},
     {
      RowBox[{"f", "[", 
       RowBox[{"2", ",", "4"}], "]"}], 
      RowBox[{"f", "[", 
       RowBox[{"2", ",", "5"}], "]"}]},
     {
      RowBox[{"f", "[", 
       RowBox[{"3", ",", "4"}], "]"}], 
      RowBox[{"f", "[", 
       RowBox[{"3", ",", "5"}], "]"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.940060277919327*^9},
 CellLabel->"Out[597]//MatrixForm=",
 CellID->148549208,ExpressionUUID->"d70b3e10-2568-463e-b1c5-9da2ddb4c568"]
}, Open  ]],

Cell["Example: natural numbers", "ItemNumbered",
 CellChangeTimes->{3.940060294794276*^9},
 CellID->1290541042,ExpressionUUID->"85b22c29-21bd-4988-9240-8ad8bc81f5d7"],

Cell["\<\
This creates first 100 natural numbers (if we count 0 as one)\
\>", "Text",
 CellChangeTimes->{3.9400603018536663`*^9},
 CellID->538458194,ExpressionUUID->"cc1946ae-3a2d-47c5-9dcc-c23f3c08692b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{"Outer", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#1", "*", "10"}], "+", "#2"}], "&"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "9"}], "]"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "9"}], "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.9400603106010303`*^9, 3.9400603299316063`*^9}},
 CellLabel->"In[598]:=",
 CellID->1817466753,ExpressionUUID->"1f597e68-440b-4717-a37c-9c2b1bd755c0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", 
   ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", 
   ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", 
   "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", 
   ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "33", ",", 
   "34", ",", "35", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", 
   ",", "41", ",", "42", ",", "43", ",", "44", ",", "45", ",", "46", ",", 
   "47", ",", "48", ",", "49", ",", "50", ",", "51", ",", "52", ",", "53", 
   ",", "54", ",", "55", ",", "56", ",", "57", ",", "58", ",", "59", ",", 
   "60", ",", "61", ",", "62", ",", "63", ",", "64", ",", "65", ",", "66", 
   ",", "67", ",", "68", ",", "69", ",", "70", ",", "71", ",", "72", ",", 
   "73", ",", "74", ",", "75", ",", "76", ",", "77", ",", "78", ",", "79", 
   ",", "80", ",", "81", ",", "82", ",", "83", ",", "84", ",", "85", ",", 
   "86", ",", "87", ",", "88", ",", "89", ",", "90", ",", "91", ",", "92", 
   ",", "93", ",", "94", ",", "95", ",", "96", ",", "97", ",", "98", ",", 
   "99"}], "}"}]], "Output",
 CellChangeTimes->{3.940060330358245*^9},
 CellLabel->"Out[598]=",
 CellID->1635327131,ExpressionUUID->"6f6e7333-aebb-457c-b008-a4285fd82147"]
}, Open  ]],

Cell["Example: binary numbers", "ItemNumbered",
 CellChangeTimes->{3.940060349270403*^9},
 CellID->1447376411,ExpressionUUID->"b1020ac3-1e42-435d-8e0e-7442191f708e"],

Cell["\<\
This gives binary forms of numbers 0-31. Note the Flatten operator - it is a \
frequent companion of Outer.\
\>", "Text",
 CellChangeTimes->{3.9400603604251947`*^9},
 CellID->1508070108,ExpressionUUID->"e142353f-5296-4f7a-a83b-d6df4fbab8bb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{
   RowBox[{"Outer", "[", 
    RowBox[{"List", ",", 
     RowBox[{"Sequence", "@@", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", "5", "}"}]}], "]"}]}]}], "]"}], ",", "4"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940060367222188*^9, 3.940060382520668*^9}},
 CellLabel->"In[599]:=",
 CellID->797029610,ExpressionUUID->"0a87bd15-0183-4860-9711-c233990f3497"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940060383264881*^9},
 CellLabel->"Out[599]=",
 CellID->20065557,ExpressionUUID->"6ac30ad5-4a99-430b-ab0c-123330d7b623"]
}, Open  ]],

Cell["Example: table of values for trigonometric functions", "ItemNumbered",
 CellChangeTimes->{3.940060639077979*^9},
 CellID->1761930339,ExpressionUUID->"ef5e5411-a894-4458-b0ae-0e83ef8b3610"],

Cell["\<\
Here we will use Outer to create a table of values of the main 4 \
trigonometric functions for various typical values of the argument. Here are \
our functions:\
\>", "Text",
 CellChangeTimes->{{3.940060648362502*^9, 3.940060650323617*^9}},
 CellID->1111199090,ExpressionUUID->"63be41d4-3367-45de-8ae1-224748439b97"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"functions", "=", 
  RowBox[{"{", 
   RowBox[{"Sin", ",", "Cos", ",", "Tan", ",", "Cot"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.940060657046239*^9, 3.940060676192278*^9}},
 CellLabel->"In[603]:=",
 CellID->906834508,ExpressionUUID->"081e6cac-0e61-4c1c-ace5-cb0f0725e4ec"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Sin", ",", "Cos", ",", "Tan", ",", "Cot"}], "}"}]], "Output",
 CellChangeTimes->{{3.940060671627331*^9, 3.94006067672162*^9}},
 CellLabel->"Out[603]=",
 CellID->1429722637,ExpressionUUID->"02648a0c-d81c-4acd-87e0-f3939310571e"]
}, Open  ]],

Cell["And the values of the angle:", "Text",
 CellChangeTimes->{3.9400606857820168`*^9},
 CellID->1153833776,ExpressionUUID->"7519e54e-6709-405e-9711-aadda286f7b7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"args", "=", 
  RowBox[{"{", 
   RowBox[{"0", ",", 
    RowBox[{"Pi", "/", "6"}], ",", 
    RowBox[{"Pi", "/", "4"}], ",", 
    RowBox[{"Pi", "/", "2"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.940060687343602*^9, 3.940060695663547*^9}},
 CellLabel->"In[604]:=",
 CellID->1674860150,ExpressionUUID->"57d6d86d-2d71-4460-941f-2cef6bff2934"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   FractionBox["\[Pi]", "6"], ",", 
   FractionBox["\[Pi]", "4"], ",", 
   FractionBox["\[Pi]", "2"]}], "}"}]], "Output",
 CellChangeTimes->{3.940060696696396*^9},
 CellLabel->"Out[604]=",
 CellID->166020319,ExpressionUUID->"99684db5-71eb-4e49-96ca-f7f3256f603c"]
}, Open  ]],

Cell["Here is a table of values:", "Text",
 CellChangeTimes->{3.9400607035748863`*^9},
 CellID->722243980,ExpressionUUID->"7f8f87cf-4b31-4fa5-ab47-726bf94f6ba9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"values", "=", 
  RowBox[{"Outer", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#2", "[", "#1", "]"}], "&"}], ",", "args", ",", "functions"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.940060708087223*^9, 3.940060718297168*^9}},
 CellLabel->"In[605]:=",
 CellID->1350589395,ExpressionUUID->"7f6a56b5-8eac-490a-a446-fb10996ddcdd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "ComplexInfinity"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "2"], ",", 
     FractionBox[
      SqrtBox["3"], "2"], ",", 
     FractionBox["1", 
      SqrtBox["3"]], ",", 
     SqrtBox["3"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", 
      SqrtBox["2"]], ",", 
     FractionBox["1", 
      SqrtBox["2"]], ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "ComplexInfinity", ",", "0"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9400607195342073`*^9},
 CellLabel->"Out[605]=",
 CellID->1453136321,ExpressionUUID->"09db8072-170d-4c47-8265-a72512cb2b96"]
}, Open  ]],

Cell["\<\
Now we will add names of functions and values of the argument, for displaying \
purposes.\
\>", "Text",
 CellChangeTimes->{3.9400607318083267`*^9},
 CellID->1678113363,ExpressionUUID->"6d385241-e592-4514-ad10-4d216549a838"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"info", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"Prepend", "[", 
    RowBox[{
     RowBox[{"Transpose", "[", 
      RowBox[{"Prepend", "[", 
       RowBox[{"values", ",", "functions"}], "]"}], "]"}], ",", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"{", "\"\<\\\\\>\"", "}"}], ",", "args"}], "]"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.9400607354631567`*^9, 3.9400607616673803`*^9}},
 CellLabel->"In[606]:=",
 CellID->48340347,ExpressionUUID->"68392db2-6ae7-4c66-9ad4-0b5432c999f3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"\\\\\"\>", ",", "Sin", ",", "Cos", ",", "Tan", ",", "Cot"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "0", ",", "ComplexInfinity"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["\[Pi]", "6"], ",", 
     FractionBox["1", "2"], ",", 
     FractionBox[
      SqrtBox["3"], "2"], ",", 
     FractionBox["1", 
      SqrtBox["3"]], ",", 
     SqrtBox["3"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["\[Pi]", "4"], ",", 
     FractionBox["1", 
      SqrtBox["2"]], ",", 
     FractionBox["1", 
      SqrtBox["2"]], ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["\[Pi]", "2"], ",", "1", ",", "0", ",", "ComplexInfinity", 
     ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940060762970828*^9},
 CellLabel->"Out[606]=",
 CellID->1354685950,ExpressionUUID->"0a8b2152-d55b-4eb9-8650-6c68a84ba518"]
}, Open  ]],

Cell["Finally, we display the table", "Text",
 CellChangeTimes->{{3.940060773623013*^9, 3.9400607767444572`*^9}},
 CellID->585136156,ExpressionUUID->"f7badae9-301f-415a-b7c3-1e955bc39b79"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TableForm", "[", "info", "]"}], "/.", 
   RowBox[{"ComplexInfinity", "->", "\[Infinity]"}]}], "//", 
  "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.940060779292741*^9, 3.940060796781576*^9}},
 CellLabel->"In[607]:=",
 CellID->1465320917,ExpressionUUID->"81813a0a-0006-4a9b-b40d-90bf797e1cd2"],

Cell[BoxData[
 FormBox[
  TagBox[GridBox[{
     {"\<\"\\\\\"\>", "Sin", "Cos", "Tan", "Cot"},
     {"0", "0", "1", "0", "\[Infinity]"},
     {
      FractionBox["\[Pi]", "6"], 
      FractionBox["1", "2"], 
      FractionBox[
       SqrtBox["3"], "2"], 
      FractionBox["1", 
       SqrtBox["3"]], 
      SqrtBox["3"]},
     {
      FractionBox["\[Pi]", "4"], 
      FractionBox["1", 
       SqrtBox["2"]], 
      FractionBox["1", 
       SqrtBox["2"]], "1", "1"},
     {
      FractionBox["\[Pi]", "2"], "1", "0", "\[Infinity]", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Function[BoxForm`e$, 
    TableForm[BoxForm`e$]]], TraditionalForm]], "Output",
 CellChangeTimes->{3.9400607973907948`*^9},
 CellLabel->"Out[607]//TraditionalForm=",
 CellID->1982221820,ExpressionUUID->"88f6d872-fc5c-4431-9d0e-2ef12ff89d2b"]
}, Open  ]],

Cell["\<\
Example: creating interpolations for functions of several variables\
\>", "ItemNumbered",
 CellChangeTimes->{3.940060808563406*^9},
 CellID->1288312829,ExpressionUUID->"ef6fe2ae-1b37-428b-a4cd-9efe26dc5d97"],

Cell["Say, we have a function of two variables, for instance", "Text",
 CellChangeTimes->{3.940060818572186*^9},
 CellID->1743587949,ExpressionUUID->"6aa0a94b-6944-4606-8432-789046ff308c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "f", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"Sin", "[", 
   RowBox[{"2", 
    RowBox[{"Sqrt", "[", 
     RowBox[{
      RowBox[{"x", "^", "4"}], "+", 
      RowBox[{"y", "^", "4"}]}], "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9400608238304768`*^9, 3.940060840900557*^9}, 
   3.9400610227468433`*^9},
 CellLabel->"In[613]:=",
 CellID->525145107,ExpressionUUID->"10076951-8385-4333-8b7d-818c42c75907"],

Cell["\<\
We want to get an interpolation of this function on a rectangular grid 0<= \
x<= 2, 0<= y<= 2, with a step 0.4 in x direction and 0.5 in y direction. We \
first create one-dimensional grids:\
\>", "Text",
 CellChangeTimes->{{3.9400608511795893`*^9, 3.940060874890459*^9}},
 CellID->893653996,ExpressionUUID->"a76362a4-86a4-4735-8689-637bdff48d01"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xgrid", "=", 
  RowBox[{"Range", "[", 
   RowBox[{"0.", ",", "2.", ",", "0.4"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940060881207284*^9, 3.9400608885100327`*^9}},
 CellLabel->"In[610]:=",
 CellID->1154812095,ExpressionUUID->"8b6d8e2c-162b-4398-8c19-3a03fdcc12b0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.`", ",", "0.4`", ",", "0.8`", ",", "1.2000000000000002`", ",", "1.6`", 
   ",", "2.`"}], "}"}]], "Output",
 CellChangeTimes->{3.94006088895676*^9},
 CellLabel->"Out[610]=",
 CellID->783553612,ExpressionUUID->"c87f626d-5fcb-4649-b3fb-cbeec190de41"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ygrid", "=", 
  RowBox[{"Range", "[", 
   RowBox[{"0.", ",", "2.", ",", "0.5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9400608908817587`*^9, 3.9400608988193274`*^9}},
 CellLabel->"In[611]:=",
 CellID->30212265,ExpressionUUID->"1a6e3f9f-e0e7-45a8-a133-205851849080"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "0.5`", ",", "1.`", ",", "1.5`", ",", "2.`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9400608992290163`*^9},
 CellLabel->"Out[611]=",
 CellID->906047492,ExpressionUUID->"82dd061d-9924-4142-a85b-598e7dde0b2a"]
}, Open  ]],

Cell["\<\
Now we use Outer to construct the values of the function on all possible \
combinations of the points in these two grids:\
\>", "Text",
 CellChangeTimes->{{3.940060912559312*^9, 3.940060919686795*^9}},
 CellID->133657167,ExpressionUUID->"712f254a-f3c2-424f-a1fa-22bdc8102454"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"vals", "=", 
    RowBox[{"Outer", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#1", ",", "#2", ",", 
         RowBox[{"f", "[", 
          RowBox[{"#1", ",", "#2"}], "]"}]}], "}"}], "&"}], ",", "xgrid", ",",
       "ygrid"}], "]"}]}], ")"}], "//", 
  RowBox[{
   RowBox[{"Short", "[", 
    RowBox[{"#", ",", "7"}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.9400609259241667`*^9, 3.940060952123185*^9}},
 CellLabel->"In[615]:=",
 CellID->594991467,ExpressionUUID->"7f2ef9e8-29e0-40b0-94e0-0bfc00546a12"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.`", ",", "0.`", ",", "0.`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.`", ",", "0.5`", ",", "0.479425538604203`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.`", ",", "1.`", ",", "0.9092974268256817`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.`", ",", "1.5`", ",", 
        RowBox[{"-", "0.977530117665097`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.`", ",", "2.`", ",", "0.9893582466233818`"}], "}"}]}], 
     "}"}], ",", 
    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2.`", ",", "0.`", ",", "0.9893582466233818`"}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"2.`", ",", "2.`", ",", 
        RowBox[{"-", "0.949820680215173`"}]}], "}"}]}], "}"}]}], "}"}],
  Short[#, 7]& ]], "Output",
 CellChangeTimes->{3.940060953513082*^9, 3.940061027501769*^9},
 CellLabel->"Out[615]//Short=",
 CellID->289230665,ExpressionUUID->"df8e33cc-d6ad-4c17-aba5-8bcda8c1f8cc"]
}, Open  ]],

Cell["\<\
We used here the pure function {#1,#2,f[#1,#2]}&, since we also need the \
coordinates of the point on the 2D grid, in addition to the value of the \
function. We now have to use Flatten, to remove one layer of internal curly \
(list) braces:\
\>", "Text",
 CellChangeTimes->{{3.94006103910973*^9, 3.940061045858507*^9}},
 CellID->1344293494,ExpressionUUID->"581abbf4-fb17-4f76-8b4f-a91f44bdeb78"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Flatten", "[", 
   RowBox[{"vals", ",", "1"}], "]"}], "//", 
  RowBox[{
   RowBox[{"Short", "[", 
    RowBox[{"#", ",", "5"}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.940061059829208*^9, 3.940061072016532*^9}},
 CellLabel->"In[616]:=",
 CellID->1358037745,ExpressionUUID->"d9f9a0a1-ffab-4c39-9875-70726c363e54"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.5`", ",", "0.479425538604203`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "1.`", ",", "0.9092974268256817`"}], "}"}], ",", 
    RowBox[{"\[LeftSkeleton]", "25", "\[RightSkeleton]"}], ",", 
    RowBox[{"{", 
     RowBox[{"2.`", ",", "1.5`", ",", "0.2435244837393342`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2.`", ",", "2.`", ",", 
      RowBox[{"-", "0.949820680215173`"}]}], "}"}]}], "}"}],
  Short[#, 5]& ]], "Output",
 CellChangeTimes->{3.940061072380672*^9},
 CellLabel->"Out[616]//Short=",
 CellID->350185068,ExpressionUUID->"21b39dd9-060a-4b9c-a40b-4d67a18292d5"]
}, Open  ]],

Cell["Now we can use the Interpolation command on these values:", "Text",
 CellChangeTimes->{3.9400611029680967`*^9},
 CellID->1455245096,ExpressionUUID->"c8f7572d-bc84-4584-84c6-94f8c9ce6c98"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"intfun", "=", 
  RowBox[{"Interpolation", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{"vals", ",", "1"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940061108054655*^9, 3.940061119046768*^9}},
 CellLabel->"In[617]:=",
 CellID->287826417,ExpressionUUID->"d40632f8-fabb-436b-8c98-c0e57f537bc9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["InterpolatingFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GrayLevel[0.6], 
               AbsolutePointSize[5], 
               PointBox[{1, 1}], 
               PointBox[{2, 4}], 
               PointBox[{3, 2}], 
               PointBox[{4, 3}]}, {{}, {}, {
                AbsoluteThickness[1], 
                Opacity[1.], 
                LineBox[CompressedData["
1:eJwBMQPO/CFib1JlAgAAADIAAAACAAAA4ScLwZmZ6T/ACPskWpOYv4AjHgZ5
3Os/cnpQh5xu1j/qWn1XCVDuP5K7ih5ptuc/r+pongFN8D/CUK87BHLxP46d
cUQ/bPE/ujUa8/qu9j9TbqBw1aPyP/TWyyAhFfw/neDJZqDG8z+QAqdF9GsA
QM1wGePDAfU/VsVD/9nXAkCidscSKDf2P6Bp73exDQVA/B1wDMFX9z+TpM3k
wfUGQDzjPoyykPg/7M3Z+O7ZCEABSgjW2LT5P3pl9LwNcgpAbCYw0z/T+j86
ypori9cLQL0gflb/Cfw/lpOs9xIqDUCTvMaj8yv9Pw4alcoYNg5AT3Y1d0Bm
/j+pB2LLtyIPQLClAv7Nmv8/NnA5bbjSD0BLO2UnSF0AQFrcILXmpw9AsTLc
klX5AED+sDHBQukOQNp6UGP9igFAbZ+lR/sLDkD10dd20SgCQNHi3Mj38wxA
42MO5MXDAkAZdr6AZb8LQJRGQrZUVANArv7zEMKHCkA4OInLD/EDQLBlMO3M
IglAnnrNRWWDBEA3d8OX6skHQNf3wBnbEgVAD3D3ndNyBkADhMcwfa4FQHOK
7Wak/wRA8WDLrLk/BkC/MhCgYawDQNJM4msi3QZAwss/TmVLAkCGc6iEq3cH
QIsIg92+BgFA/OprAs8HCECrPCvgePD/P2VxQsMepAhAKXVLE0Xg/j+RSBbp
CDYJQPRz0a7WJ/4/kFqZaBPFCUDN4sX5uLj9P4J7LytKYApAvh1MbRmT/T82
7cJSG/EKQHzT1YZwwv0/3W1pvRiOC0B2LZ/10lT+P0c/DY2wIAxAVrX8MJA7
/z+DS2C2aLAMQElWzbMzPQBAsmbGIk1MDUCi9bAadCABQKTSKfTL3Q1AYexd
q+EpAkCJTaAId3sOQFyS/ndEhgNAQAPGdkIWD0BHWcLdahwFQLoJ6Umopg9A
vd1CiejSBkCTjw8wnSEQQPiVkXD08QhAq0KpbbNqEEBsk2Azxi4LQCyTGthZ
shBAYCBYjj+gDUAnaxVkFgARQMwfdA9ySBBAg+uOIqBIEUBj/5rHgMsRQNFn
q5SZmRFAL++xNeOlE0Dwt3AR
                 "]]}}}, AspectRatio -> 1, Axes -> False, Background -> 
             GrayLevel[0.93], Frame -> True, FrameStyle -> Directive[
               GrayLevel[0.7], 
               Thickness[Tiny]], FrameTicks -> None, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{0, 5}, {0, 5}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "2.`"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "2.`"}], "}"}]}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"scalar\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GrayLevel[0.6], 
               AbsolutePointSize[5], 
               PointBox[{1, 1}], 
               PointBox[{2, 4}], 
               PointBox[{3, 2}], 
               PointBox[{4, 3}]}, {{}, {}, {
                AbsoluteThickness[1], 
                Opacity[1.], 
                LineBox[CompressedData["
1:eJwBMQPO/CFib1JlAgAAADIAAAACAAAA4ScLwZmZ6T/ACPskWpOYv4AjHgZ5
3Os/cnpQh5xu1j/qWn1XCVDuP5K7ih5ptuc/r+pongFN8D/CUK87BHLxP46d
cUQ/bPE/ujUa8/qu9j9TbqBw1aPyP/TWyyAhFfw/neDJZqDG8z+QAqdF9GsA
QM1wGePDAfU/VsVD/9nXAkCidscSKDf2P6Bp73exDQVA/B1wDMFX9z+TpM3k
wfUGQDzjPoyykPg/7M3Z+O7ZCEABSgjW2LT5P3pl9LwNcgpAbCYw0z/T+j86
ypori9cLQL0gflb/Cfw/lpOs9xIqDUCTvMaj8yv9Pw4alcoYNg5AT3Y1d0Bm
/j+pB2LLtyIPQLClAv7Nmv8/NnA5bbjSD0BLO2UnSF0AQFrcILXmpw9AsTLc
klX5AED+sDHBQukOQNp6UGP9igFAbZ+lR/sLDkD10dd20SgCQNHi3Mj38wxA
42MO5MXDAkAZdr6AZb8LQJRGQrZUVANArv7zEMKHCkA4OInLD/EDQLBlMO3M
IglAnnrNRWWDBEA3d8OX6skHQNf3wBnbEgVAD3D3ndNyBkADhMcwfa4FQHOK
7Wak/wRA8WDLrLk/BkC/MhCgYawDQNJM4msi3QZAwss/TmVLAkCGc6iEq3cH
QIsIg92+BgFA/OprAs8HCECrPCvgePD/P2VxQsMepAhAKXVLE0Xg/j+RSBbp
CDYJQPRz0a7WJ/4/kFqZaBPFCUDN4sX5uLj9P4J7LytKYApAvh1MbRmT/T82
7cJSG/EKQHzT1YZwwv0/3W1pvRiOC0B2LZ/10lT+P0c/DY2wIAxAVrX8MJA7
/z+DS2C2aLAMQElWzbMzPQBAsmbGIk1MDUCi9bAadCABQKTSKfTL3Q1AYexd
q+EpAkCJTaAId3sOQFyS/ndEhgNAQAPGdkIWD0BHWcLdahwFQLoJ6Umopg9A
vd1CiejSBkCTjw8wnSEQQPiVkXD08QhAq0KpbbNqEEBsk2Azxi4LQCyTGthZ
shBAYCBYjj+gDUAnaxVkFgARQMwfdA9ySBBAg+uOIqBIEUBj/5rHgMsRQNFn
q5SZmRFAL++xNeOlE0Dwt3AR
                 "]]}}}, AspectRatio -> 1, Axes -> False, Background -> 
             GrayLevel[0.93], Frame -> True, FrameStyle -> Directive[
               GrayLevel[0.7], 
               Thickness[Tiny]], FrameTicks -> None, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{0, 5}, {0, 5}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "2.`"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "2.`"}], "}"}]}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"scalar\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Hermite\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  InterpolatingFunction[{{0., 2.}, {0., 2.}}, {
   5, 7, 0, {6, 5}, {4, 4}, 0, 0, 0, 0, Automatic, {}, {}, False}, {{0., 0.4, 
    0.8, 1.2000000000000002`, 1.6, 2.}, {0., 0.5, 1., 1.5, 2.}}, {
   Developer`PackedArrayForm, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
    14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}, {0., 
    0.479425538604203, 0.9092974268256817, -0.977530117665097, 
    0.9893582466233818, 0.3145665606161178, 0.5593760553166605, 
    0.8984183431802403, -0.9798623171285172, 0.9884071791443816, 
    0.958015860289225, 0.9807352826706169, 
    0.6940223827007357, -0.9994259601468808, 0.9694614132439636, 
    0.25861934966110994`, 
    0.21677733134293872`, -0.3567105829488174, -0.807846621485227, 
    0.7969123199276466, -0.9180704746692666, -0.9081439439489016, \
-0.7078308127291015, 0.508373302415374, -0.07328241960175892, 
    0.9893582466233818, 0.9869665831430964, 0.9240590869570796, 
    0.2435244837393342, -0.949820680215173}}, {Automatic, Automatic}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.940061119974489*^9},
 CellLabel->"Out[617]=",
 CellID->648628140,ExpressionUUID->"aec917c3-5d96-4a3d-899f-b79b96015032"]
}, Open  ]],

Cell["We can use Plot3D to visualize our function:", "Text",
 CellChangeTimes->{3.940061132240118*^9},
 CellID->866156808,ExpressionUUID->"1dc4eda5-a5c0-4e10-9ccf-32680e913bcb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"intfun", "[", 
    RowBox[{"x", ",", "y"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940061134531197*^9, 3.9400611456525927`*^9}},
 CellLabel->"In[618]:=",
 CellID->1523564742,ExpressionUUID->"23084b43-8d66-446c-bce8-72849636e46f"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1: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
h7zUUiqgcQ3u99q6MkopqpD8hvvV/V7x+p2qIr9B/rJ24IKaSjY/T+PfsKtR
eTE15DfID1uk075oInuOIG9zY8dF3alV5Dey19v96cZZFTT/A/m+73jv53o0
kx8gP2T32PbFSQLyC+xNq3XbHWRZRuM75K9Zw7P0764qmleE/KxPv9Wer60h
/0B+Wtq3BK/gOvIP5FsW2rnzR9SQf3Bfv0BFpdq1nvyD+weSVlgeUysj/0A+
+fpUd9v2CpoHg3xnseO9JMViGo9BXquPrrOOB6sP4JN4JRKlvqwfRTphGuvu
VNdX88Hhb5lRWxwch7bSvBnkPVf5XH6jVUsc+bDaHNNk4MHmwyFvMdkueE5q
I/kZ8vqbm4+VqLN1H8j7xS7P0zvbRH6GfFVGSqaumoj8DPlBl9r+ZsdWk58h
P2LS+nVLVBvJn8jXhTiRxGvvLHq+cD9ieJpBiEMuzfdSOWx2k3xqUUbjU+i5
2zizo3ENWz+i9qCnm/WaDdVULrDHYsLgXoPsaqlcwJdlj7/YOq+K2nOaN1D+
bvFMxOYzkX6x18A9nsPbaJwC+V97ZlQJl7XQuBXcbdjrbf0zxMShx9T3Tdd5
yTaaD6R5lJ2BM+fObiEOeb/sS4dlprTRvCXk990IudQW20Kcxnnhh8UzlrdR
vQJ/Eraq9NEMtm4FPVO0+01LkGP1DfK7l467YOLD1rMgv73k48ELd1uoXkFe
t8bo6gM5ts4F+U1qW+/48IRUryA/KFxLT7aGzTuBLw8823huaDW1P+Sfc/Ot
/E3SaB4bPGD67vlF2SX0G/cVPvW+5viW1SvcX/x5qfHj1DpKD/Lldl9/vf9T
S/UK8nMTQx8PH1ZH9Qry/W/yH2unNFC9gj77w5ZDR5uw+Qj8n8/mKPXonDqq
P5A3nPwuQkG/jeoJ5AMHHGn3i66j+gCurVHX/qC4jsod/PsIqaWLCuuo3MFN
W/x/9d5UR+WOdId90RuUPYOVO8W50l5jT7TUULlDPsXgl+DkOhGVO+S9F94b
dm0ia7chv6azX5r923oqd5pn9U6yn/ushNoHmofm21mKDV8RR7lJPNISW63w
IL9DPiL0sF5BVhWVE+QHvNfWUVzO1o8g7/1qaqGLsIF+4/5M51WOJzTYehju
n88+49blzNoTXCPMlTusr1dQ/w7e4jo02VqG7U8Ab41ovOJk8oj6HXCPOVeV
+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
ZioP9O/b1/Yu6tnM5vFw1R0xI6n3BRZngm+83Na/RIPFz8i38Q7xoNVL2DoC
uEzJIevZG9l8BcUPIVe/PrJuoDgKXMM2XXaQCou7oGetn3PiOlfWr6F/PHzJ
+8Tvz6weon1aedxps8Ur9p07ardO2amsOMvsBh9W2PL0WzZb50K7FXTT79y3
u+w7KpDPPz76+fOZzB56D/TSMq9JCm3UfoJ/C5d+1e8p27cDPuBUYmx1LOun
kL6vedduyah62r8Efn/0MuO6DgGli/K3cj76QMukmcodPO3ExWVak5upHaB1
wCF9rf2XN9O6GPj+rnxe/gH2fKE+fovXn1hqwvY9o3yey8tbXY5lnPbD2L3h
l7+son4K8wBDW90Hb73ZQpy+H9Ulv8VO35f2b+P+wgwxb3bMM3rucN+pbJV0
k2cEvQ+L++O/uP+VPXaa9nujHU2q1b5WdSqMnmeST3+UludoRZzOVXE90nyi
xobqFdIZ8WKAdPNm9p0f2FmnaDbj7zI2Pw8un+/dqa7MvucPzuctMjpa1kTv
74B/jI/ddGML+84VyvPnGEO1OR2htM8c3FrDemZ/VbbPn/avprR0XD8WxdYt
OJ7+cr/Ny4vsuyIYX5udbdjuOJeNr1EvFGYNizIak0v6waduvxzOa8gh/eDG
Vx5e03vC/ABuJ9Hi/VKP+QE8YVyJ5Udb1h4iXq5vOz9lfASTp32wFgOl7G6y
cQTSrxiYtevrMDYuoHGky9AicxFrl5n/PD0CbrN1DfCPu05aph0Ss36am4/a
YJ5oweuopnqD53hW4YJZvrtZv0jvnV0pmpdgzuxBuxHsG6pZ8L/eY4H+z/FH
Bt7sXUP1EPo7DrauiDJh+7egf8n9M9fTTrPv9kDP2v7qs8vrqym/0DO0pKHv
JSc2DwI9FyVE8WZ8dr4A9Bhr2f3VLami/gZ6Fm8YY270XzwGTu+jTVv1XHoJ
+44T9NjpeN5JnSIgP0PPcvHpk7dC2XsL0DPW7d24Tln2Ph30eLw8MPHhhBzq
J6DHel1ozVwzAXHokR3fs2v9Q/aeHsZfxjyP/POm2dSO49p5Lt9mm1EeySPd
pMbwi8l2ART3It2nDnI9WgZ+ov/H/2maXjaTjM6i+o9+IL5oWq78uiaKc+h7
6i5zlS8NbKD+DvpnVFZVrF5fQRzyOgFqm7xesO8SQ1/nhX6mm3zYugzS7/a9
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
vWXzWpw9W9e99ZN2iueB53P2qpcOChtlm0ftQNPVQ2MN3L/ytoUuyMzRfUHt
gBHXL/tx/TLk53D92ovY0MMT9MpY+8/pEQ380vDOTUB+sOX6zUB8T5LzgxTX
D+74fc8rwquS8nsd3xvjzpsGd+P4To7DDyfw3U2X7slXYiJ44I+49Hc8siqP
1sui/C7naYaal3Twphz9NHKzuJLyG8v14yO4fhzybly/ub7/xB0ZVmxcn8+9
xyTCdyC5fO0TmqZHmX/j7Xkw8FOfQ8VkfxO+i1bwP+dTg4s5fo47txr2Z3P6
w47MtB3Xr4Tac+xPeP34jk3JcxHZo47vG3D7N6A/hFtv2sCdHw3+hOMmHMdz
iuvryNqPvJJa+q3B9afmfgO3HlCuo3i1lbP39KRSzz0r0sgPZ/oWnFA06ORd
PXpn+rWMBEpXCudgc+dKg/fh+BqOI11bTk9HyOZRc+9XE7/N9cs7I08F8IWV
ZM8arr8zrZn2ucA3k573Yq5/jH2SEdn1LJ/S3cv1pzu5c6jBTTi+huNIN5/T
I5uyee38PZnE27j+WqpkUPiQ43H03PXh+s0jOn0HJWvVULxRyq17RjQ+bHsd
y/b1YR2nfFRDcM8TERQP7AjINn5nHsrbpjlS1isrjfjFlU94txSTeW0m9wfd
Uk+ldrKM219gyJ0rDS7Ce0L/8DJu/Xc8d940eC3HJ3Ic7aoOZ0+Uic+WFTGs
f3/KjdOL5hdWDtKoo3pL50HL9a+32iQk+bOc/X8rDzhu7830LOHG3WMe/1qz
cSebb4d/NPcbl/DG1FN5feL0v+POmwbv9fZ/+BuOo7yGcfZbmlx/VyvL4oo4
zv5vc2437i4VUruq1BXdOdPAnbcq6E6XXeMH4uO5+E79TMa5j4s/UryH9fTw
oI16IwN9qdxpv7x//QBXtWDyD3h7yIW7llPZeM36/5g/yebW552qr2qmuAjI
D1mcnv7c+dHgbf9w5PcE5/+CzZIz/P1YfLKG8/+r9NO8qgAh2Y/13tjaLQkj
p3ykeqj9Y3BOSVQe74/l12UWKblUjhocN570sGxnaj1xb+7/dpfLdzy430B+
wDrz1pvdhiMXisgPEf/M50Ae62iB4VnPNH6yeFWgr7f0tXkOrzTBe9iO7QLS
o8zJX+fmVeAfIy5dC+5caXBLrKtzHP6ZzeVri7H36lOZzG9+XL4in2R8vy9k
HHbGFG83+JErpPEm1uVr/Cckl81j8R7W1/5y50cjv5DvPemSzacgFv9APub9
3d6V0WzdCvJve6xJH5cmJD2Q/3xTolqsxOYbq7n5jTfrNNZdGsjqYRbObeDm
fyB/kptXsWr2iBmR0kT+NMO5cNx50+AnON6P4/AP7Bywdp39+//lN9g5uLE7
7F0Fq4fYd6ET/PHCyaQqqocjOH+Unc5SLXBl7QnOS9ntduLQg78szqTzMrjz
o+EfyE8IGTuqYg+LnyG/f6ng3osSMfkB8uLE8YOqbzaTHsgb9o3Xjldlfvbj
5m2kezWdXtrI1j1v4Lxpbv4K8rO5+SLfw33/PJ1XT/2aLGdX37JB7rLTWZwJ
e9rrsj7qWQjI/+C//xmn0DldtvV3NvgISR72+3PnUEMePDHtYnPVACG1ewFc
vp5++nVvTQ/2vgn2Vd0P+eNaMr2RyquBxi9DelYPF1K5NPwzrgH/9zxo+Bny
scapJxLs2HMB+RytqzV1yay86DwlnyGzjn5uIH+Cx9191n+XbDX5oeGfcRD8
AJ77avuRLxOaSZ7ei+TOfUZcF8nZW7RQto/052ri8ty83/kGjSWz1dj642Vu
nLLSPn9W+BX2vMRx4xr19YJhJk715H/sH7YdcGT0vBIh+TmIG3es2TCrZOwy
Nk7H/ix17rzmf/kMjsPP0P/zkXtifhcbRwdy+qvvaf4tMWbjasz7jVzsbyup
XEH+xzX8fMjZHEEt1X8D7N/k5kuRLvYzm79S7XXGOZf+P5dr70ebBJqOSg6l
ONCW25f3zEXn5XydAoqTYf+cjckfDJXYPhzwqqBVqnrf2fgL3IYb98H/4Hed
fHPUmll/gfX0BO58Z5SvJWdPTK8dc6znCogXcvOrs9x959zdV0L6Azh/Dtqs
rqOoUkk8lvPnlbuDmibuKaU4ZBvnj4Ck45OtegZT/NnKzeuabe6c2K7C4lLY
eZk3O0hOGEf9Jsp9cdc76d8Pcslv4Pen2e3Wn1RJfgM/nROQ9WsV8xt4FDdu
hf3gK5t3RI2ZX0HyWGfX4s53hp3gm4PvX4pWyad6gvnbj9w5zqgPWI8er1n8
SvqggI3TOfmA1AU3d4ezdVLwcTVuf9O+sPEpuNqLeosJ7az9BD/IjUNhJ/ir
/UG3Dv43fkH5wp7zLeGrQuzyyf/g0fIiiff9K+l5MeLGj8JS45fzblVSnID5
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
qxXlsY45+u2qZNU08k2+YhSdQ4Hfqj+qyZWoDNZNRnsaZU+uGfo6nPMMgTd4
X3F2jEKleEFxJuBLe452mlZTqdCneGlwVcSfxWurBfI5AtqvMlJPz3QRfkhw
W5O9+U90hU433ovDvn7zVRppCk3yP4AbmG5ol6H/hPNYwP9Tpp4bsCsgkfPe
gftbuI65tfiAohr1F8cF/epcrX9mogLnCKxXvd1JI0wVJI0me4b1rw60yb9s
KUnIjwi+Iyh03QFzfymS+p/zERt/ibigkS7tpX0o5vNlTcO/ndHPlHAuDJ7h
9PCjU/tM6RD1I3hahveLkBpZEvIxg292jkod/jJfgg4p632eSnw1sjxIgq4o
eGPD14E9vgVJFnROynHRRX1XtCkLktLpPJTztAesPj7dKEg6R/lowW98+9a8
yQt/aTryl6GeWtt3uLg+le5R3AvrFg716hPmma/wo/N68AuXPgbMOJ8nIV8O
3lfMMCend+vVnBcHfHutz9csTxSwjgp4a7fEgdf+nceQRxPvsU/5+4k5Mc8l
xEvgvehXtGg6szxOQvwA+tPY/WfV0tn3OS4F80BxuzU6s1fHcj5pPt9pm3J6
rsVbjuMCf7FT692c6WHsB+O8o4vPmqzRe835ePD9Lvi8vdqu1XG8LuA7Pb/6
7eb1+Ymsu4ry9Y0OroiIyuT1AuXDemp1lQ5mK65TvATrpn/xvvlntZL9vSj/
SKdJxI1/7Ra8F47H1nU+13pkjuQOvVGct26O6hF/OId1ZsCbpGof1e2aLiGf
KN7LuWs/Dyd3zVfY0POybnSfbV+ONUtU5NFz8Xc3bpuJ9voPiis03sBdQ68Y
TYiNVJhQf8I+zLVdXtGuWaKEPFvg7Tu3uaN/USklyOKWp1LcMvyBnCfNtuZH
g1pJUl+ZfsuL9X/1Wy5QP/C6+a1d+LlRpdJSmT02jeyxGzT+UX7ZV2WnMXal
UkPqL3D3Y1Lc5uml0jd6j5x30dgj22WnSnpE/ch5wMLdlsbb5nN8I5/T7dZe
++D1VWke9QPruC/uMarW6EiFAY0DvqewYKXkVv5KQp51vr9fb3DDLvPuK4pk
/uRY8ifjXgz67fLE8E4R7kquB99RRee/edKRJ5vvd3dq8M5nfjHfm8P7WinL
W43fRX7q2bLzXBs6z02UndsOo3NbU9m5rRGd22J+QL95T/UK1NbJZ71j9MNJ
ypOLe/QcJ0x5bzHe8L2cGdnRo/b4fAl5u1H/wdFtVj5rVCqNkvlhRpMfJkHm
bwkmf4sd1Y9+O7FL39EmOVfSpXag36ZTvkLkgwF3ozyDK2Txio0pXjEW934R
p9Ttb35A9APvyyjf3yV6LjxvZ72CISafChQHKtHjdajET9VZFregpriFa7Jz
f20690d+boyrIXmhbdafyOVxzro6K0OnRT1N53znrNdB5wWXqf14j45GY6qO
WKPm/Hzg33cYH+toly9p09943kWUl+ci1YP+mbzac/zTf/etbrL7zq/ovvMY
2f2L83T/AnGhvL/zbVnx7EwWzz/otwu0X8bfHBdN93owPsDjfQ+k5f7I5u8T
fBDpqmH9A1fes/u59tcLce5C3PqiZsaMRXGcHwE8geLn2c9I870yLW1E8w5i
vQcPnr1jauImoTfKuhykh4bfBb9/ZsL4c+mx/Lt8Xk/x8/iuuJ52eq2dr4v8
bnhfjia9VqwuzeD6weuSHhrqB99BcfUcF0jP8bDXl+Ip7e8xx7rmbr+1nneR
K/8u3i/O7zBfg1dQHkOel4m7KHpe0SsQeU3Yj6TTcVNQZCK3D/xHxs2P9ZwT
RRw/8RH7D3aq1l+s03z/2ujmiKOmcdxucJ3pFWeeRr7n7wR8L93vRj+DV6RM
K3rpHMd5B/g++NXN57XN7ok8d4iTt/Xfk34vgPsHXOoSO/6eYzDnWeZzwwtL
a7opwjm/Bni34uznm9Ij+X2BjzBZFz3HP5LbCe4f3ac47Jgt9w/e/2zyn6Ae
zkPyc4CJz6OtnF8Dz+Hv9n5OWuRjfk7Up9M6283hotApY/95s+FHEko38b/H
8yWRvcT9TnypIrXQJlno+bKfodWvHRm9vDkfCng1sq8sK7Gv8LvgbZocsDJu
JPzI4JtXNq9v7hfMv8v53ht3bl6j0Rv+XfCbX7oVmDgoOd8H5r23vf6uFxyf
jbxPWcdVDT7GcT3gyDPL+Zjo3zm2XD7Od5fEzyXfT6E86nvlHnDnl3Ymlwe/
VTZyZErnTB6HvH//+tdOWy+zl3T3/rWXUB7jurZBHe2ihmoeD+CJZOdznjvc
Sz2/PX1VvwCeH/F9VyH7Cu3k/VebrVEvqwfz73Ie1+b5Wi2+B/H3An6rv1P/
Kf8E8fcCvnlsXf9PiwP5e+F8FLfi71wNlkReadh1tC/jeYr4A9IpjZbZgQ+0
/tqBnP+IuF78+N1fj7ziccn6bx5twlP7C1118Jpt924IuSL8hryOWU3Y/rKg
gNuP+hab99BtslDE88n13NB+tKuIdCTwvODF1RfeztJN5PkK3Ij00FAP3mdv
0klAPaxX1q3qmWsj87h/5PYt63ETHz51kJerVQ4/F+t6TVTOCNIS+RzBVTbt
Cq42L+F2gi+heGD0O/ufryZXsQsR9+7k8QD4XR53v2vHOG0W/kHwpnSfl3Un
iQ+eUbPlrQPCzsA4XUz2D8qB304/lT00WPhDwWeR/hV+F3wy3fNlXRLijSfe
1ZkWlMblMU6WUx4H3icQf17F8n2rt+Jvua4U6mH9Usp3gHpYj8gj+r2er7AX
WS+R7tOxH5N4SlnzvFN5Ofxdo54N1e81vf5v/Sgn12VCe3h+pvwCfH+Y+P2M
r1pT9on7k6i/9O6rZ1n1cngewL9bRfsmlGfdJNIL0qrE34X2gA+gc0CMZ/z/
6gvdmk93S+V5Dxz5wTE+0Z6wsL+6N6gH9e9+tK66e4CSy+P/d63RrsqiLR/5
OfE74aSjAs73a1KamB779zvCc/K8Hp099//82/gb5Wu0324c3fEN2wn4/8tJ
V4Tj+6n8scb3Luz/IuLJ8P+rRH/Y9utnCdsP4D+Vf3Ue0C/gi0mHHP2C96N0
dcw5aCfsWM4XRPtN/M36CQcvbv+qKfTmWB+vy7GIdjtF/Bn+P/KBasn825/I
v83xMYiXu2A0r+MTcb+O409SXbYaPxTnQJwHkvaD+D0893hZfkO0/8PVEQM6
rhD5PcGLyY/B+WcRX1plgefBx2+FDgvVl0D3UjnvFbVny+0+kzQC0nmc499t
dwqPbxldxN8p+IlGq5JMlEVcHs9nQ/dTwPn+8o1bZwdlq3jdAV9CeukclwC9
TYdP2kZPs3kc8n3PLfE2rjEfeTyz7uiAa3PrNxXznVxPDO1m3XXSzQCX613o
y/wV0eSvwL/nfD2eb9cr7+aK/HeYT0h/rDI/DJ+byu7Vop/x+1vLD6cWtyll
e0Z+L15H5gc7Q34w1Ivfb6yXP3RnrMhvjuc4Zr3lWD0Xse/lPCPkD+F9C7W/
T+iv0h6dRB4u/DuTLX91JllvHXrLpNeKv9neq1b6bdOvNB7P6E/NkFUv5v1P
3m3Of0W6i/g99Mck/1Y3RlomCL1RWR5zjpOg/m5jbnA0YLu4lyKPJ+R8Nli3
S4vq+7YV8w64vanZ5Vlvc7k8+idAlq8NfKgs/xrr+cQWmOys+CjyBtLvdCR9
gJMyf9Qh8kehHai/jWm/aBsHkR+Z/RYOf/XfUA7/35jyxYCjvhkU14HfZXvG
o97EZg/fi3yCxN2jrctrnRfvHf8utlxDfah3II9zvq9E+ShRHnwi5ZFEv6Bf
1ZQvkvM/Ih6V8jzi9+TnO+Cs6zVrcp3sYcXcz3I/M/oF/YB82fi+0E/HtUZZ
9+4o8meAjx6Q277nWbGOc/5zOidFe/D7B7/ev6UqE34f9rtQHrf/B8GX9xA=

    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1:eJxNnXf8V+P//1/v1zmv15kvIz5ShKg0ZRUSirKprJKVhKwUCSmrqOy990iy
Z7YUsne2UJllZs/f497jcvv+/ni9rue5znWuc51zrvEcj+fzaj30yF1GVCuV
yit5pRIp/SSpVKrKKJUep9+uTZXKYfVKZeWyUrk3rVTGNSqVPKtU1lHZRNds
oLzdVeYIlbmnVqn0Vf5WSu/Vb2vRfZQ+qjL3x5XKI0qX17UbKX9V1XeV6n9R
187TtQ/p3CDRR4seJXpVtWENnR+t4y9V/hfVk+i3WPW0pH2qZz3l/6C8Q1Tm
c9E/ic6U31P0VUpvV9nb9NtJ9d6hc+2V303pqSp/sPJOUbp66fIrqnxNz3Ow
8g7VMy7QPVrot6PKzda59VWmoXRlXd9cvy14Tr2wlVVmB5V5uKhUftPxQ0qf
UbkNdH4Zpa1U/4N6nvGqs7Xq3175qyt/kvI3Fp2KfljP2Uz1rKR0b10/Svmx
zl+nvMH6/aLjc9Sug3Sfk5WOVX0dld+RbyR6svKvVP4i3f9r/U7X8ZdKv9Bv
ougJOrdYdfyldj+p9zFf+Scrf2Xdu5fyj9G9ntC5A0TvonQz1TlG58/SdU/q
eJjyd1XaQeV3F/2G0vN0bonoutLba/6mmymt6hm7ib5e6T8qt67oa0X/T23t
pToHq/zpul8H5TfpfDPRU3W/E/R+Rij9H+9dZVsp3Ufld1K583XNT7wrpSvp
ms1Er6A626nciSpzkfKbZ/4mzZX/mZ5vL/1O1blHa37nWyv9KXW9rXXd5NLP
zjvYVr8LRT+q9E2Vmyj6QKW36fq6fqfr+BHdIxa9mtKH9YtEt1L6ge7zvn6j
dby16h2hdLLyb9b1LXRdB6UP6biq/FWVbqGyy6sNW+h4o8zvfGO1+SaVW1n0
2kpvVJmL9EtU5kFd06S0pdJXdW68yuyr9Ahd85by+uu9DRf9puh+okeJniv6
VNG7qP4bVH6m0kfoo7wrHbdRmUkqs7XK3KT7XKLfMjp3gdJ/df5Yvl8TH0j9
S8kTau9johv6vax7n6C8vZW+pt+JovdT+op+40Tvo3RFvYfNVHZ33WMz1bms
rl+XcV51P6cfrKv8TZXuqjLX6Ro1qdJe6bWMYdHtGKf6XmuqzOYq85noC9R3
r1f6m34rqMxkFVyge22iMruozFmqs5voZXTuBZ3rrbSF0k2VvzHvm/eo8tso
HaLyGyu/ofZsoONuokvR6/Oeau7nOyr9XfdaUfQU5gCVyVRmgY4vrLqvLqRv
6Zq++rXhe9M25TfXfW5Rey/Xr7fOVXV9F52/VGlnHXeib+n4Vt1jTaXr8v11
zVbK30sn/kjdH85S+TjMddNUpqXy26tMb5XpqbSLfv/TuX+UvxbtUtnndS5X
fjvmVV2zm/J34Puo/qHKH6v8tfQsI8L3+Fb5nyidoXSu6umgNh9OfUrXjP1e
Wsd+R0XV3zRnvmIuq/lb0J45mrvW0bltlQ5W+Ycjv4udRXcRHYneJfa3j0U/
p3Ir6PhZpb2U91HVY6O98taOTW+u9i7H+6Rv1f2M6+me/2Z+55dnfi+8n42V
LtHxa6InKn1P1/3DmGUeUX2dIq9tbWP3iWVEfyb6iKr76O6iu4d+cLqef3PR
3+idLOR9VN1XJip/E+UvUn7Be2PeU7suVAd+XfRpuu8mmls+0TUbK31Uv2G6
5kiNtfcLz0sDlR6q84fo15a5oPScfIvyN1fZNspbW3V/q/NvKn91Ha+p411U
/yjd6wfaxJhUuop+Gyr/CF23vZ5/V9EnqcymNc/DB4juozrmV71WvVk4vUnt
7a761xJ9sMq1VT1DlPZUPWfpt7Ou+SNx/0qr7mMT1M5tVN/TtFfXrhp7PHSk
L1c9Tibo2g1Ye3TtKSq3lcrPLt3fk6r7/PmFx851akPrzHN8W9F9VGZF+hrf
mH6iX2sdT1adW6rO71Vnf137pfI6Kf1J176hsqcrvSNy32ujOj7Sde+ozN+s
far3EZU5UmUG6voPWBvViK10/Us8l9LL1b67VeZglZmo8o+KHsnarfpeV5nv
dc1fuqaF0vWVfqtz96jMcKVP6/rxKneI0tN17Y86v6u+9Z/wTCq/ntLJyv9Z
6XDlnyL6fl17qK5dUc91IP1O7TpZdRwkeg/RXym9quo15ejU338t5U9UHd8w
1vVtjxP9teg/RLfKzGutprrH6/eJzh2te52h9Dum8brf5RpVr0+n6l7DRX8o
+l3Rg5gDVO6w1ONgBd1rgPJHwtfp96fqb6fzV6vu05W/tcosUv6JudeXvXX+
K+Y13edk3ffnzN/wd3gqtS/W7z5dt0rqvtJX5X7VuQHwNCo/sfS4Zg6jzzCf
MMffpmt6qPxaTR5P/ZkXmO9izxuMZfok/Y55OlW7V2WeV71XKv8Z5R+v+yTK
/40+qnSczg1s8jg6JPWYbqb8A1PPy9sqvyH6E9Hfi15P9YxWOw7Q911O+fOV
/5Pyt9Tx8/R5+hFjR3Q/paepfEt4LZUdoONnVP5tlb9A72q28o9jzU89bpbV
+beU/qgyq+i3bOl5bjl47cTz+266dvnEa1Q/0Tvr+itV5nGl/fS7ivVZaX/9
rhb9pNIdVf5Zvq3K7yT6LtGzRF8hej/mY6Wxnmlv0U/r3PW637FKO+bmZ0ZW
3W+u0HGHJq99W+t6fcZKa/1do+ufZ5wpbxV9h1rVa1Kfur9dQ+e3hF8SvQYX
wY+pzCyVaSb62ar5/iNEP6X0Sf0uE71Q6RMVv+NX9Xs8jEnG5ni1cbYqfEj5
d+n4bd1jmOrZTemVueeXM1T2XZXJY3+/vXR8vcp+qrZ8LPo6eBWV3UPvf57O
f6P8caXLDND5v9SGP/V7mfYk5nleYzyLfk70h6J/yTwXci/mufWU37XJa2l/
/d5W/TuonG5RWZh6bdmJeTf3mtZP9FzRA+vuJ5uo7hv1jtYWvYHSG2oea+sr
vaVm/nkjpWvo2tVjr7vnR54rGWOs2ztWzWNcofMDRL+j+r8uvMZeJnpl5T8Q
1t97lZ6j31idP1/HTchZuvYWvYclSs9T+UtU/lyVOUFl7ozM96yjc9vVPdaW
UZuXV/ntdO2rzAEqf13kdfZWpR31ay36dqUdwpz8P5W/RvQU1blF3bImfF1L
Xdsz8AOsz22bzPMlovevevwsULlH6RNKb9K93xT9mejHVeYx+A0dP610ln57
8D303rcV/ZPK7q/jr3Sv/qwBqu+AJs+bK+ee817Xd7xLbbik6mtf0nUv6neg
6OeVPkffFf2Qyrwi+lDRb0Velw8X3V332lH0b7rX7zXznIerbbs1WSbdsuLx
dEyTx9Soqsfa9/DlKn+g0t2U/pb7nqsovUrvaGPVe7jmxg103/Xhw3TdYsY0
z8qYV95Ryhuv47v1btcWfYeu3Sj2ug4P8ZeOT1W7TlI916nOI+EJ+V6ijxbd
XvTuhXmQ20TvrXt+qfzf1P5Bym+v/DuV/47e0bnwkKLv1bl/RP9P6W06f6XK
/63j+3R8sejb4NFSyxErid5I11yv9Fi14VLln6ky18HD6J1dzrqqck+p/Vco
3Un32U1l5ir/C5V5S8cnK7+u8zU900m65j14fT3THKXv048iz72zm8xv0m/h
oS9UPZMYE6x9asPxqqeX6purd3256KOVvqXfZaKPQrYtnb+jypS618uq83Nd
/yjzntI1lHbSfS+ij4s+P7F8+JjoF3X9FF17EHyo7jWW9Yt1QcdnMIcp3SC3
3PSH8ueiR0AHoXdyido5RfVcreNzdG5L5pzCYxR69Yr5UMYaMtXeqmc5pQvh
VZS3SdXHfzKX6/eA6Kmq6ySllyCHIkuwpqADYOwr/3d4ZXjyqstNqXss/Kt2
nqa8HvDhyr9Z6QVNvr6X7nuI0i10381FD4fvFf2M6pmD7ACvgpzFusbaUPM8
PV7pP/D6+j3OnK50utKC8aVrX9TxE7xf2ib6B9HN9fyfMZ8jF9fd3mXgGVTm
0sjlO9Ytyz7Od6l7HXxG6bP0k3CvJSr7JOOCvs4azFhUe96rec4/Dllb+Wfr
/A1Kz9O3GK7rz2HehufX7/zU/CZ6mG31zf9OrDu5FJ2T6t896FjWUVv3VJ1d
4IWUd0PVephBkfUzv9HPay6zs9KDlH9tk8fSs6wXotsovafu8bQCMoXudb/y
n0OeV1tuiDzGBoR1jedopXd1u8odoL40NzI/j67ka8Zm1Xqcu3T9n8pbXunV
6KJU15VK7657/DXj3ej4NNY9eEfmltjj51wd/6gysdLjlXdc7DF8T2ndBTqM
l3Xf45T3g47H6Pwxsfv0Nbr/uCbribrr/VyrOo5TO7vF1l8dz5qi30pVr3nN
0V2xhiovYr4N9OTCfN2P8JWivxN9jur7Tcer6boLlO6p/A4qf5fyn9X7OEH0
gUqXKL1Hv2uYc5nP4K1ZO9WW03RtKz33zbrXRfrdKPqKJutqmHdaM59UvS7u
nDv/S6WDwpqF3mFqWFvhU1k30WnA9yIjdm+yPuLuyLqGDcMx+ego/sisM7gI
nk3t0SNUOiLD5dY7faN0PvyE2vC60pdVYHvRr4nesbQ+g2dfO7Xc+mVifow2
NIP3LcwbvKHy/eu+Z2fVP0N5U1Um0+8d+DnlH6N0LeYg0TPQt+iaoapvX32v
fXOX/U7p1rrX7bp+CnwL+pigM/pc565TmW2Vrqi2Xaj8k3T/n1X2Ef2m8a1V
/jTl99VxT3jnJstC26nOn1jHlX4Br6DfTOW3VN5ZKvcVcz5rio77Kz0bmY2+
ovRW+KGwBs1Eb6njIWpbC+ZA5Q3Rc33Bmqcy2yOj17yWHa70R8ZT5PnhgarL
oHNrXrcO7E6ltyj/3LBOLdT1F4reTOkLuv4U5Q1Vun/k8YXetlPu+epNZB+1
7zR0unqHV5duZ0+dX1KzPrmH0osK65lvRkfK3MraijJM72qs6n2LcZWbFz0I
WTa3Hu8plX2lbvlrHca/8m+sOH+C6utetQxwhtJeVa+XC+vmpeejH0o9N17C
nBb5XvBVJ0SWi7nv8qnn7RvQ09etIx2lNj+cmw8fovRQlX8mrDudSssTI5X/
Bryayl+qa5/IzccdpfTx3Gv1CKWTdd3mYe3ul/qen9ctVzF/c/28mtt8otIH
9K4ebDIP/3rdz7t96jWF/PN1PCv1WnSsyv+l/MfC2nSK0g2DDPJm7HkGPqNZ
6jVoqtq5QmHe/0Cls3WPV0SPVfppzbLIKUqfT71GHqHyfyh9ODz7IZH7OfP1
8+ilRQ9P3D/oJ+h+/9F9t2R86lwfeDPl36Pv9QM8oX5XN7k/w1MdrXOZym6l
45d0PCt3epzSM+H3q5ZJJsfWPzBPrqT0hTBnPg3fxjyGPkDPsxm8NH0M/ax+
7+u6N+A1mqzLIH090M0Ky2d7Zl7TkfVuD3IU687xuv6R0vmDVKbOc6n+F+iX
udMxuXXUvO/DlT4Xe92+uWJ9NTLfwUrvVl194JNpU25bzZWq80ZsJawDuXVd
yDVL7TjUozbtLPrd3LaXN9TeYXXbFDbXOx8veoDoExLrjXauWud7VN02l97K
PxIdkOjVRc8IejP0Z9OD3gz92f5123E66ptvHeQMdG3PBDmD60fUzeMfm5jv
712xHQreH9sZ5+4vTWMPQrYY1mRd3hmqdxsdL9G1F1ctM1D+Nl3fXWlPpXfG
lmuwsa2T+rmH6z7n6pn7NdkGt114Hz145rplHfRCvyaWa8Yq/aJq+Qf974M6
1495lzGl386it1W6L2Orycebl7a/MBcdW5o3/K60LDWkyffYJLNtiLnuMZWb
yThQ+o3uM1q/83Q8KfH8uaeuP1l5G1T97Q9TuUsr7gOTqu6fXH9m4vX5AJW/
v2bd4Dboj9AT6zn31LlHdLwH8gLjUr+hogcoXU3t2AYeRO08vu5n/A0bRd3v
Gx3qTkGe265i2wDfC7ltM12zd5PtStsXvs8Phe+5W9W2yQ90bjDzotINU9dz
jOrevep87EyL1M6vYn+b4ZHXSsY1MgTrI7al7zLPseggGZt9VH4b3X8w8pXK
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
jKV7NuVuL5id/wf/sY9l
            "]], Polygon3DBox[CompressedData["
1:eJxFnQf8V+P7/897nvcZbyrJCJGSkRXJiqIhLbJCWclIsiqzvcnKHtkZIUWF
+KqUUSqzokgIUYRKdr/Xs9f5P/6PR+fRfZ97nPt9n/vc93W9rtd1fXY777Iu
ffJBEDxaDoKi/r8qCYLhhSCYrfQuSv9UCYJqKQgmqvAlpd9UvU1qcJaujmEQ
rFd+vur2Uv5M5dumQbBZdZsrv1Ltb4+DYEMuCA5R2THVIGih8g0q7602/6rs
G/X5n/JHqP5ApXfSNU7Pv1rl26nvH5VP9Px7Vecppevquk3l26i8lcr30BWr
/41q/46e8ZnKf1bdespfpfQAxqD6u6n+xkh1lK+j8hrKt1W6kepMUflB6qOT
+jpa4/tN5Zeo/EmVX6E2l6ivbur7JI3/PdX/TOWrVb+b0ruo/lTlX1N6oMoP
1/+fqL/eKh+gNqco/5r6WqH8qUo3Vf1lqj9H98bp95+gZ5yk+t2V31vp8/W8
lapbVd2j1d8u+v9elT+oNk8rvVjX90rvz/g0L+31jO4a31BdvZR+Qn0sU/11
Kt9B/e+t572n+vcpv5fSc9V+vvI3Kn+R2ndR/VNV/2zlc0qfqD7OU19jdF2m
9N+6Oqv8Uo2pgdL7q4/31f4B1T9VYz1Tbc5Tuov6Wq+yCbp3pfJdle+p8X+i
532r+lurv0uUjnRdrP6mqr87GLvan6v8FWrTTen3Vf656v+m8rOUPrPsd1db
7bdX/SN1dVR6nK5+Sp+gOpvV/iO1+U51P1Z+ldJVlV+s9Cm6t53a11C+tuoP
0pxsq7731f2jNL4Ryn+V89ptofxTGsPXjEf3nlNZY/2mBervfvVxin7bI7RX
X33UdyvV76p2FyrfVnV+UJ9LdX+N0p3VfheVxcpfov7uUvu7lF/IN6T0jypf
pPTpzInqL9X1i9qPV53nVD5P5Q8p3VjzuJX6b6b8CSpvr/GEurej7v2sse6g
9mPV/1aBy8fo3kPMh/IbNN7vVF5W/aOUn6T/j1P7gLzaf6269yj9l/r+Q9cv
SrdTeU7/H63yVSrvr2u0+ntfzRoq3VnlW6n8SOXrKT1M6W/VdpWur5WuwW9W
23r6PRfo2XvrXqJ8E5V30Pje1pi+V9tL+G41f9urzhj1v0blm3VvK7WvqP6+
yrdTvqp8Wfm9c/7eP1X9n9T3Trp3hdIna0xd1f4Pvh+9m930vFBl+6h+G9U/
KPXcLlD+WpUfrPynRX9js9X2NF1nqv1GtX9W5ffpaqSyB9XPsRrfC3rGYyrv
z/wpXdR4vlR6s+rESj8cea84VfX7q/6upS3TG+yl8mPYG9XmYz1vsfInKz1P
14fKT1Kdz1XxQI1nsfLzVX61nr2rrkuU3l1976v+jlQfK1T3P92LdG+i2t+v
8SzQve/Vvqby1yr/OHu4yo/WtbfSX2oOpindU9fTartB+beV/llXS9XfSXWm
K11D/T+psttUZ4LSv7BPq7yt8jsofZ3urVHde1TnBuVrKf+00g+ofLLSp2sM
VwW+N0rlO2n8F6jsFpU11vi30f8TVTZe96YoPUfzvZV+7x9K76DymcqXlP9M
5W8ovaPuD1Z/jys/XemXdT2hdIU5UXqarseUnqY+b9HzftJ1lMbbXPe2Cb2u
WF93qvwa5a8OnT5V5X1UdqnG+6TS1+neR0qv0XhvUPpC9mqN50TNJwfhJ6rT
Welt1eb5bPwvKr2TriGqMkH5V5RerXaH6PnNdP2gdE1dad73OE+uDz13PTkP
lN9Tv/Fz5V/S/TP0vM5l52lD2ym6lue9x7HXddP6ODbnvW8X1qPar1Xff2oM
R2rsy7iv/Meq31R9TebMLvidTFL6YN3bUe131b3lqvuf8vXYH1T/WeXPVP9H
cTbx29T/0WpTS+Xv6V4tpVvo2kb5msp/r7XeP/ZaPVltm6v+f5rD+9hrdW+4
+miu+lXVf1bPP0/1/9J1JHOn+juq/kjVOS1wG87Ho1S/purXUJ1vVfcV5f9Q
fjxniPIF1X9QdX/QNYs5S/2u2cvrMl6N527ln1e9g5X/Vfdbq/0+av+a0q+q
vz+V31p1vlF/NVX/DOZDZXuq/m36f7r6fp71x5pV/TXK36z0fir/VuUHqv03
6u841qauc5W+JlvjO+t6QfWfUv5VpR9W/bc4i9kzNDcPKP8m71vl/ZQ/hzNe
ZaHW1kHqPwi9ty5mDEqfrzrDlH9R+bHKr9F1mOo35X3wrssue0b5GUp3Cv3b
Zuve/aw1XbOUfkP3PlJ5H/V3O3Ohe3eGlpdIT1f5PKU3697J6v8CrfmbNab7
Qve1p+6tULqH2g8N/Btvoq7y16vtb7o3S+lxuvdK3t8U39ahnIHKf6H+PuD7
4Zsgr+t0zifON84u5kz5Q8r+7axh1vL7ekc/BV5LVc3PS8yp+m6u/ibye9Xn
v6x33XtC9bvofT6r9O18h6r/h/7voPLj1Ec/1a9Ztjxyn+q8gOyq8vYqP0b3
rlV6ku7dk0P4sbw5Q+/nH5UvZD9R+l2NZ7WK+6osUf8FPe94fqvyuyu/QX0c
p/qHIU+VvYZYSzPzPu9PUf0XcpaVD636fJ+jshb6PQP0Wx5Xfr7yddTHUqX/
p/bPIf/p2lvpA3QtZH9Q/TNU/52y19Jfqt+B8486Oe8ZfGN873zbP+vev0o3
0HUr60n5t5Vepja/qK9Byt+VzX9dpXdTf5+r/ViNt67Sn/HuNd5aqn+D8k+w
5+nexZqTAcq/pPzFmps6nCdq/5We+arS56q/45R/XXUaV7z/Mtcn5bwff6D2
xzDXSu+s/hM97weVb9LaaaD8fonPo5HIhsyv7rdU+YlqczH7t8oHs1b4PWp7
lvaDdkqfh5yo+jup3fbINrouQF5g32FvVp2nQv8ufh+/mf2ysfpYq7qz2WvV
/hL1P1Dln6r8rdgyNLJ0oLp7q/yMss9W1jRr+5XQv/1E3iljTn127qj0rqp/
NvIx8pnabUx93v6l7tap/puqU0dzNEzlL3KGKv+I8rfr/VT0u79XurXa/Kt8
P5VPSfx98y7+Vfv5vCPd61uwzNhD7+Mrtflb9cdqDPcq/a6e92fe3yjydhv9
nt+Unqv0WRrfu8iQql9T7d9SuqWe97vylyIPJd5viuprvdq8xV6WeC1+p3uv
sZfp6qfnp5m+8p7qbFbd3rp3nX7DCt3/U/VvUv17lL5C9Yey1pR/N/b+WUD2
VJs5anuZyoeofLXu/6OxHKPrD7Xvo/E8r7K5urZWfju1+VW/dxnfZcE6Sxe1
v0v1I+RVpc/ReD5VeaVgHakDsnrFsinfDN9OWWP4lv2Ss7DqfZ/9nzNnUOgz
h7Pnfl15lX2rq3bB3yz7D+cj+/0j6E1qvxiZiv1F9w5W+giVx8pP1PjP1Xj/
RO4p+JtmPR6j8m3RZzWeNZx/qfVZ9uba6q+NxrtO5f+hA/Gtq02jgnXwd0Of
w5zHPHNJ6D2EvWRR3uvpOLXfoPwjan+13sdhel5Z+WeUP0fPe07575VP1Pcn
evb+nBEFz9mi0PtPnZy/Ib4lZFBk0WXq/wjmVvm/lb8NfZu07v2E7qI5flbP
/qfsvehm5PXQexL5D5Q/iG8JeZXx6Nqj4u+Js3t35b8ILbMgu/yas7yyY6b/
36P+n6hYpkO2uzvv/fxu/YZU5R+yF2n+PkenUL6Hyk/SvYOQCQLf+4j9NvT7
P0nXMaHltRORrZWfqfRfmrMTmCv2L/V1ha4uyp+v/A1Kv6f52xl9XPn3tZba
qf7Z6K7Ir0q/r/IGRZ/fH6n8WOW3L3hO10X+jfzWWtn++bquHfKWYZBl2JPZ
m9fnLB/soz4PL1gm+DH0Gc1ZvTVnIn2p/GDwDF3fKV/VM0/LxrqH5uNr3dsX
2VRj2ll1t1Z5V2RZzWUjlb8ceizoCOgKzXV1ylsnWBdaPkC2OzuTN47S1Vnp
9urj/LLlcXT909X/yIqfx97SVfkRFcsz6OanKj9c+f6hdflV9JnpH+jXZ6p8
dMXy1MMq688eqvzWnClKj1L5DRr/P7o+UP4iPX9Y2W1o2zDweEewPgLXaca3
r9/7EfOndO+q308H1rLqXl71ftVP7S9Tmy+U7qVrj6LngLk4oGLs5SzdG1Ox
zoE8Sh3wjZzW39VK78UcqO9bK9YPL9K928Bu+IZUdrLyw5Svr/GfVLSMuYp3
qXu7qv4Zujeq4n2V/XWk8teXfI+ybdTHXmBjui4r+JteGHqOmevDkHdD76Ps
p2AUp4Xug76GK79c6T80xuv0vLeVPqDqPZu9e7DKlyk9Vv31UP12qvMn3xdr
NGdMA2wjUv+nsNZ0tVD+Jl3nqv7h4G2hZWBk4YHq71OlN+l5F6r8HGQCpTdz
fim/p8q7Kv17Yln0LM58pR8EV0Ne0XWa2p8S+mzmjK6tslt0DUE2yOZ3kOqM
Ye7U35dK/6k+zlDdNzP9nDXJ2qyj/teqrxuVP1v5g5X/TflrEuMp4CoXqP4D
FZ+ljGF8xeMBqxqQ5fuEftYs9MXQ75ux9CoaE+D3MD8B71H9XRl6L1ykW7eo
fG/GoLZHqv51FWMgYCE1isa/0JPRl6tF441nVpw+TtdgpY9V+7bId8q/qnxF
9Tco30z5/so/oPy16u9w5a9R/krWL3PJHhP6+1mr+q/o3utgb4nHwphe1Ldy
j9p/pfGfoOvf0O+Yd91NV0HpZap/GL8XDETpq8oey5Si95RakdMvg8Xq95dV
vhLZgDND6VbsCeAXyLjKj9PVM3Cdoys+lzifVnOmVnyRflT1Y3QEXT8W3Ad9
gZuAn/AbwX+nRNZf0GOaVr3nsPegerF/Hqvv9S/lv+S96ubWofdy9vQeFa8f
3mVDPe8Upf/W1Uf5PZT/RvOTqn7tos+wlaHlr2uUv5zfwLfAHCj/qeofprF2
1jjOLxpTfV3pS8HIkGdUXje0jomuuYvu9VRZ39Bn6+e6d2/JOiBnCWcK+OaC
xHgbuNtlVZ9nfHv7sodVrOei7+5XNF52aWr8Fxx4iOq3Uv4f5b9mbVS9p7K3
jsgbnxqg6wX1d2zR+PyKxHg0uPRVqn95xX2fovqt2B/K1i2OYn+uWMdB16mw
5pTuXvHabqv6zVR/Y5LNB/Oi/g7R+7oevJp5VH4Ie4j6O03PzFUsIyIrPpiz
Pvquxt+xbHzxg9jyIuvhWNUdUfV5ugo8hXcaWp7+WeWtVT6y6t/N70dm5n0d
p/Hsp/LtlL9H/b2l+g1LxpC3VvodXXspv4Pyf6v+2+AjrB9d98Z+n+wlq5Vf
ovQqXQVwPj2/vca5Vr+vNliK0ttXLf9oeEFH1R+iujNC6y5geGB5q3UvLtkG
8kPF881eDAb6afY9dw1s88D2sYYzo2SbzVqlj0K+BhtW+dCKz/eVeets6G6s
e9Y/Mjrn3RzwprLxy/tjn3+cpWD4YPlz0W/KxlcfADtn/Opvhco/zPan2YFt
JNhK0BnQHR7KGc8AEwAbqKnr7Gw9fBAY8wf7f7Ti7485+7ZivHx50TaTBUo3
TaxfoGecqPlrwvNL1gE+YO1rfF+r7keqOxx7jMb6VMHfIN/i2ypvpPrb65l/
KX9SxbosGC1YLTYEbAn/FYz//aT8EuXDou03B3JGsf7U5jS9y0tDYwVgumC7
85T/I2+ZhfOO75Nv+RtdD2q+9tPz31b9pep3mMb3hf7/oGhMALwfGxa2LDBb
8Br0NPS1f9EfkAWZv8C/qYHSzdlP0R2Vb1gxHnlwzjYtbFtHawx1SrZJgP//
pfq1Sp5T7A8ty7alIVMjW1c0xtlKH4jcUjWmAbYxU/f2q1hPRl9Gh91aZW9q
Dl4Db+PcU/29K86DAYAF3JVYH0cv71W1vecclc/N7EPgJ51Ud5bu7V+xnoy+
DB79BOtM9VfnbY95WmOrofyrzBUyUmz86bbANiVsS3VV/mHemOdNKr9XfVzO
XqhrnMrvYp8v+t6dSudT79foyldXjcuBz4FZj1bffUu2/WADeqtiexC6JHa3
oaq/XvdqZnPMXHP+fqn2N4BJlS0vMp+v6DqkZNwI/GgOMjrfb2Q8v57SF1Ut
X4EdbcV+VjYeAlbWFxECXUP17kDeA7MpW0dBVzkvZ3y+Pt8Q52nR9grsUdiK
sAFhC/q5YvvN1rrWKd1FfUwtWCdAXhwLZqn0+KLtC8ij05W/S/l9lZ8aGsur
q/EcrvTAxPZa7LYXavy/l4yXzdO9prrXKDG+Cc7ZMsPnztRY5zMfKt9D5Z+B
/+nerbExu+NU/R2VH1xxf6RPzxmDAzcCP2JMyL/MKXO7V9H20CYVz21d9VlP
dc+peK95VNfzFePV4IvYaLHV5tTn50pfqT5vVPomXV8UfO+IivEDvtdD8taH
K3r/Q9TXHbq3SuONsIEpvx/vIPF5NV7pX/WMseALqe0Z8zgD9Pt30/veNW9b
ahvwrrLtkd/r2qR0mFrWbaw6pdT4xjsqa5H3/na8+tklb53u5ZK//12Vzule
Enq/r698Q11HK50PbX/HJrirfs98jflL5X9WWfuq7ev3oQsGPl/mqfwLsAjW
KetRz7hL18+sF13PVGyLfkP1hyq/rX7Pznr2Bt1vne23vMtHsv1pQWT7EXak
lPOW/Q5dmPlDttVvvKVom2hfsLdM3nhF5StK5huAnzbL8A72bHUZPFzyXs6Z
fzyyVSYL3Kz/p+aNoU8t+8wGT3uo5LN8N10z2A8YY+IzDHsjdkfOtjfU/+tF
yxzNKz4DsT9ih+RsrK/rNWRLlT+m9nfqGQOVPl112qrOYOyGedt0V4L3o3dr
LHXyxgRHMI7A+OUqpVP1NxZZWff6JMYr3lVZy7zxiUTlNyE/q7y3yjdpPA+o
7Bfld1R6MTYelffVWNtqfqvMQdEYx+UqG8k8Kb1cfX6r9IeJ5U1kE+zXw3Vv
bmCd6hul99Xknq78bKU/Tm1vZC/4Juc96mSVd9Pzj9fYTlD7lRrDnezNGnen
qtfbh2rfJm/OB3o2+vZ63Suhi6rfVnxLYMZKL1L7jZz3qttB7W/FRq3y33Vv
NWk9bzjns9KrNJ59dS3SeN5Vv9+mfu+8/6OREdV/M/2+vJ73NHiC2h6q8nZ5
2wjR9/7T8x6hf/BE8BjkTaUXqv8v1V8b5QeCFyj/tfInpt7f12fr+1DlVxZt
I8ZWfJjyXylfC51L6XPRX5VuhCxfNa4AvoDMhb0VjBisGJkU+xR7JHsleyL7
3T3gicivvF+NpZWuG5RepDGsVP+tlR+g/PvKf5VaBtUwgkdKlk0/j63P/a18
xwyPnAFelTc+eJDKR4C9qvxT1T+O+WDvA2tS/jHOl6JlMGSxsZFlpYbZ91Mj
tSw8Xvlr1f9JcEDUdztwIOWfqxj7W6g6N6tOW12nqryb+ptaso6ArtCpYDzh
cdW/s2jM41GVD0p8vnHOrYBPUjHWV1/l+7OHarzD1Nc7Si9V+Y2JzzvOvcXK
55V/TP1vUv29sKVrfD3zxgq6sN+xnwbGQ+BurOV7A58Br1F+nfLzkCeUP0P5
s9T+HKUXZPJmy9j2IuxGS/S8SbGxi5YV46dgiGCJxxeMfyCHIo+C+aBPbqXx
vZS3Ta5zbJ0b3btXzvgU9o7vVHay8r3LPs9YC5NUZ5rSO+gZzxbNxbpB47k4
NFYzM+d3cL76fI1vWW2PVPkaPa+L6hdV58fE+jff4hu6N1N9NFB/c5SerfRg
1f9Q5f9jfeTNJ2it8bRR/ck8s2T9Hrzw5Lzxht+Q01XeRfd6oasnxiZaq/xq
pUPN3558a+B0cC80vi7MF/uE8qenXm+sO9YTMgayxosFr4dtUp9PcL+ur1r/
RBfljLggMn8ErtCtuvcw8ixymMq24xwBfy1blv8wmxMwN7A3PX4LPor9DdsL
NkVsi8cjcxQ8B8wFGApYSgP2EKX7VbzfgqmArWDPRBYAowerfyM1ttUw9H6M
Poy+OU51nix7X2B/QEakP2QEZIUVBZ83n+j3Haj+d9PzngGLqbisft59oq/k
VX6k8geG1i/1LxhXtL4E3wxdhTOoKfKg5vtV5f+n+4Oq1jHRNdHZwCtWRv69
7XX/0qptBI+ov7mcyRXbD17W2DeqTjv0i8TYcUHt22Tj4/dyZnJ2otei3zJG
+C7ws+BS5JTvUvH7YH3CsYBrMYM5V3Za0Ry6YuRv/RnenebyftZ50XgUmMAf
JdsLz1X+2rLtPNh7sFlgu7g8NHeNM/WhiueIuaqhdr8iG+p6q+jfxO87Vc+o
C/apPv/Ts5fAycubO7NIZbNU503V/4fzJPR3Midbf1+o3SWhuXdgsEn2PTF3
zOEZ6m+57m0s2qa2Z+hvjm9vQM74FnYK7BXYdLDt3Bqa2xKq/HVkO/U3XfWP
UH/bqL9jSpZt0SEmlyx/XKiy3XVvDxZ1ZGxiAronXMyK9+8nlH8PW2Ji/Qc9
qB14V2L+AzwI7OesE9YLGGJYNv4DN7NWzr8XjAqsqm3BeOnnqr+paBvdXspX
1d/kvHWyjprL4ziHlO6u9tOUrhf5fb+m9Eep7Ss/gs+p/PqycULwQjBN9hvk
c+yv/XKWx+EzXZ/tn3Ab2BPZG0/JWZ+aquv5onVK9FX4I8hKV+dszwOPPFT5
K8u2d1xfMbcAG2vj0PYdZGtk7PqheUHwg8apzWXgzxrzjtl6SbB/K/808r/y
hcjrGT5oe2SgkjkYcDHey9t+vji2vQS7yUJsVYn5RfCMOH878gzOJ7WZofQU
9fdE0TI++j18NHS7zbzzivm5nAeNA+M9BfVxnfL7cH5h21P+4JL3YPZi9iD2
op4F2///Bycub5npMs4jXQfljbH0UvovtV+iem+pzRvK35+Yy4QN7L7EMgrn
02WZfWlmbF0Jm2ff2PIq7xab2u9Kb04tcyIDP5Aa7+J765Czvb4fMqvaHo8M
ofofR+Y63aLywyLbRLGNwl+Zhi1Y+R2Uzym/ROUfReamnM/5r/Ss2LoDnKR+
Sg8t21aETYj5PV33puTMOYIf9LLyB+SN8Zyq9JvIeHnbYOAP/qsxHwh2pzYj
wYNT6yyTmQ90A9VpovrXqH7PDO9BXoUze5Xy3WLzN+AEwXearfyhedvw4f/9
qfoXlszP7aDyXWKfv5zDP6Xm97L3YZN8XOmvwPdV9pjyA1X3Q7X5WemurF+l
zw/NS4Kf9COyge6Vcpapka3hYMKZg58xVf1Xda+Jytarz0hlk0JzenZW+S1q
H4Lhh+aLjkrM3+Dsb6k289U2V7XOgYx1vfK3JbbtYdO7PTF/DFslv5nf/mvJ
MkQL1Unhi8WWheCI/an0d5G5Z3DS4KY9l8nrZ2by34May4qyOWRwyfJ6/qiS
Zbob4I8pP7pkmW6A8kXlx5TMWR8I1yg2lgKH6GeltwHzCm2vapLYPtlGZQ0C
843RYdFlwVseSc07gX+CjneQ+q1VNU8RvuLn6n9I4r38To1vqNI1qsZteOYy
lZer1qvRr0tKV3Q1U/lOKh+t+hgqRmQ63HWROUjgIOAhxyfmSMGVgn/XUfn/
NKYmyu+ATK/fU0/3Psmb8wK3Z7vY8hFy0o/IfsofnrdN9Xqlb4yM7TbW9bvS
d0Tm3tbmfERWj8zNhdMHt29cZG7yoXxDfHuRx/6nrsFK9w7NJXw+sL2R7xH9
dnnZ9nnWG9weZMg5Sq8HswNL0feyXmMfExmLLrEeKj4/0E+x8ewWmzOE3Mka
ZC3uHpurfrmuRrE5ps+E5kPAPQW/uE+/9f2c+fRg8Mgs8HMnaD4eiGwrYE9F
1j6WPS9nDOcTlYWxud3NlY/5fhJj20M5epWuX/W5zPlcVN07Eu9t2PTvVPqj
xLZyMNGPE3PIwAQ5v57V8+oo37FiftcB6FrKPxZaHm+p+n/qmUeo7p45+zPA
qYQzyvrkfbyU2DYyRPkXE+8fnCWcKTtn3/u+FfOz4GLDMcZmhr/E89g6VL9P
zhgVWBXrBS5DJ2TqyPIV3HDOA/wDkH+aKj83Z/+DHSJzJX7I9gP2I9rCidg+
NocKuY09DG7VnanxVfR58PDhibHPuzW+EUofoTq35szhO0zpbWPLEmBOYE9w
hLBxg2+8o7JfYnPnsFH/qvQs1UmVvgMdhbVUtRxCH3XgQum6K29OYAdsObF1
1Q6qXyfyeQb+9lnZfKIGutc3Zx8L9l84osND2y/hjuJfALY1Re1/Vt3BoXm/
nJl/qGyh0jPYDwLz+/ZB5iqZM72zyreKvBejA77FeNXnd+r7HK3HX3n/JeuF
6IcpfBPda1OwDfsXpRtWjQsiw2wVm+OKDRC+/HOaq26Rz4pFmX74fIYvdMvw
APZ8eHZ8k3yb7Efo8ejzg1W+LjXHpTMyFbY0XaPLXjOsHTgG6Nbs/+BN2OvR
vznvwZdORf/Jez8D//oOe1rZ74h3hT0dfXt6YPs9GA9rgzUyW+nPWC+qP0r1
J0U+E4eUvcZZ69hksM3sA66qsX+j8l3LPvM4+5Yr/0jZfLTJkffAq8te46z1
V3QdmLf8/qXKR1etR6JPnsx5E9n3AQy9k/L38A0Ftrl1TO0PBLZOOb4Sg2Pr
Huggc5WenpobgqyMfZL9c5fANr4OKhtVtZ5CmxOy9ktzttl0Uf6k1GPZXldX
8LDY+COy//5q+7TuH1qyToNu00v9b1NyH0Nit98pKz8tzTCMsv2txqWWaZFt
d8r6B1MBW8H/4bbUmAzYzAjOo9T4H9jnRcofBbYcm1vAHr2f0l01pomh8W3s
MeAV4EVPBeaXnM78huZ3gf/DwcTG9AT4d2IOKpxN+O07Jz4z0JmQ6ThL7k9t
P2yW4YdwGrGZXY18FdtGg62G/emK2N8wOiMyKt/2bbG5VfSxXr/9gZLtmNgz
D1HfX8TGq9BZOG+wYWHLYk8vxdYhXsl0FnQLvrffQ+M/cM3xG8N/7D3wBvX9
BfgNdjHkLfbTyP5hv5btf4RPFb5Vs8vmC7Nf9S9nmEZkGzm28m7KT0rNYQJj
/VDPezCxDQmcFrx2dGybDLYZ+M2LI3Na4LZwZm9if68YNwE/6a/8MvU5HlxD
5S8o/4fyF+h5Y9TF8ZExcLBwbIZDlH45te0D3Ql7OvJ4XbW/ReVtVf+hxL5w
2KjHJ5afsRtgPxiYWh8ohcZ774wtv+BTNFPlg1LL17+X7V80JvYegz6JXsne
80JqLB7uOvwafCTwlcBf7OHY8lb9svfbdhrPrWVzT3oG5q/D0QWXB59/NPb3
061sDAIsAv0HXhX8qjtSzwn48FklzxX6L98z8/Vg2fszPEHOQM7CMLGuD+ZT
Tizv3VTyehik8g1grqp/MzJUJl9jg1ug8gfTTN4MzW9ckOEJ4I3sf/dhP6na
TwZ/mfax90Tw4e4l75XscYM4f0ve+56M7BuC306Tqp/ZQ/mTSh7L/JJ58vDl
j4nN0e5dsX0N7jY2EmwlyIPDUvuM4DsCxgDWUI9vsGwdohTZJgNGv6PyI9CV
dbXP23aI/8u3iW0f2PCPT22fgjvLNzE8tk9hqWKbMb6GyHNwovC/fJL6uo4v
WyZFNsWeALcEG8QdsTFGsEZ0/lFKz9PVumyZFtkWHRxdfC+Vj+QsiGyLyoX2
V/1N94pl65Toluzh7OVTA++nyI9Phtbv4XYgr8ER3uKfkPo8vlz5VqpfN7K8
tz40foIvAToz3Ez4pOjScNjRKRqxXiLLkz2Ub6r81pF9XvB9wZ9xvNrXrJrX
D78fezjyI5wC/AdnpD4D8RGBr8nZiH7SsGz/mhMi6ztwxPHHfDi1/Q/bEzaD
YUp/pvfSqGz840TV3yOy7j+wbP8u1gc2WfiI/wOrVXnrnHUmDBOsh+5l39us
snW6F+XMSUe/uiA2l31Q3vIa+/+I0N8M3HzWCGsFezO+U3C04fEgo8Pdxr4M
FxlO8rDInOZnAmOChyeWVzaXrBMjf/bRlSsY8wD7gJM9MTAGdyS2NHQolc3L
m499EDp+3hxv/J+uVJtSwTIveEghse/smkz+21fXT3n7MGCvx4cBPxds+Njy
v+I35W2Dwv8Zm8nHKr83sC0FGxp2RM5UzlZsbJ+U7b+L7W1Tat0XHRjb1YGR
+4Mjgf/w7yo/o2ROZ0uV/a0+HuY8hqPB2Z7YFxCM7tPI5+V5oXUYfAP2V/mv
eWNSidLNY/sq9Mvb3n1a1bw7+HdBYvsIZzlzegi2fF2HFu1jMlH1z1b9E9T/
nJzxpd0Tc+H+RWeKLB/AA4cPvoPK6sAXyJtDfpXKt09cBme8b2QMAixiCfqJ
ynZNnIaDPgTdM7GsMAq8J7IOjC5Mn9up7MfIuhTvmHfN/nGg5mt39ht0CZW/
kzdG3DD1N823PQ/8NvX6x/drYcH41y+RdcsCGHvi/QIMD3zp2tR4xkN520Dh
Hp8embsyN2//OvA0+npZ7eui+4bmfaADfRX5jOOsQ4e6MbW8BI+QOWyQGJ+B
RwqftD7jYX9FVuV7UfvOibmbS8HIwVtU3iHDGMHHwFcYC2uctc55vbhgDBjb
QTGxLNaD7ynyekfXGanxHaT85thrYbjyTSLbXLG98o0cmhjj7VSyPIjujg8M
HB8wvX0yfR1dCxvhCrAx5jdvn6+2sX2w4f5clTff8sXIsh1rlLX6dOS1OUvj
3T0137N/3v6prVT/KfS1vL9Jvk3snfhS8IzvYusPYGvgzWOUvg3MIm8f8iPQ
FSI/m2+Mb5cYAL9p/K8Hjg1wWWRbIZwJ9kvkOWIhwLHg/MKejmyMjI48DJ4J
NokPHb//Bz2juZ7fTPdqRsbDDiv5/AQPQcdD10NHfQ99R7+hW9EYdIxunJj/
AscI7hb6FHjgo+BfSq8Bw1C+NTK92q9VvlXJmOLOmf7TMsPfRiu9PLb9EptD
Lfb/2PY6dNAaSq9WnSNV/xDVr8H+oXvTcuZkfaF8c5X/ULTNvDbnb+zYCszp
17FtqHD32DPYO7BXY0sE81mk/HRd1yKLqU07ld0emZuCDf3axDI+sj5nPGc9
7wtf5vZZ/9h4t6lYf8T2e2vkswOOwEJk0cj6Jz5k8Ck47+EqgDnDP4Hzgo8I
ZyBnITZ0ONaMkbGOiv3u4TAsiI0XYZthzpbF5tTg94MMgyyzVH021Xys0/WM
8pdG1o/h5MP34DwEa2QOmUv8GYkVMCBvPHJDbN8jMIcGmTw5IW8OHufjqVX7
JVFnI3NZtV8z/s0/xJYZkR1fYH9JLeMh67EGb0F2iq0bMOffx8ZPOIvfVv09
UstfxHZARpyi9AmxZQFsImtj27CxxWCTAV9eHfvZ+IN2io2v8lvwaTyJ8zey
rR0fMPgp2JyxqWFf+kFlsyP7soOhz0C+UZ3X8+ZUdo/tk18PrDRv/gX4ILIo
HB24Oo/Ftk/BccnFPh/ALtblfF6MjIIthFvsKcRHuCX7frDh/KP88Mi+/fVy
1gc5ozir8Gllf707Nva9LJPfkTmQPeCwER8BmyXf74GZ/gDnDWMzOuZTKrsh
Nvb4ta4vVL92YlkDH8uLkIcS2w7w6b8wcYwKeFJgSmBLyHzIfvhs/63+b4rs
ywAHfB72WPCIvM/gT1l7yu+d9xpcktimiQ9ji5xtneC92wbmQMGFQsdC14Lj
jX2d8xhdjRgPnJ/4+OGTAp5LrJIaFfvkEM+gZ+TvA90TnZf9cVu1WZC3j+OV
6KeRfQfhvIGPofOh+21ij4tto8Re1SjTJ8BfNlY8n9gH1mb733fY7CLb79A/
0afxD0anBpvomena6DzoPuhsN2d4xjNlc5bgjqAjoSuBgd2U4SH4kuNTDtcD
vKNO2fY2uCnY6LDVcYZwloC3/lqwjbh17GfybOwrt6PbpeYHIAMiC4IXP5s3
pxd569bU9ltkPmS/pZl8h/wG1wVMrlsm78HdQedE90THG5uaA9RL+bGBuUFw
hC5W/qbA3CG+Qb5FfICXRsbDLi/5G74+NcfpEuVvDsx9OlH1J+bMUfkssg0X
Wy57CnsLHKwrSsZTsR9hr8Z2MjJwPAY4VBdl9ivkU3QS5J2lJesq4Hnv6J0t
LJrLhc7K2D4sWZfFPwrfNfhH+GLMjKyrYKPrGtum3TSzZ2LrPic2Vgdm96rS
B+ve6JxjguBfhL6Obo5PV5BavuDdwHni/Of56M75nOeH82dU4BgT32f6ArIr
mCTyLfo02CGcYbjD6Nvo4lcq/5/K91f9wTnHkCF+EBy6U0qWAZAFlif2xTlC
1xTGG1uWwmcB/9YmsWUpfF7wv70wNrdnNt+U0kdwfmotvar8ecr31vVmzpga
+kMzlc9U+STdOzm2TR/bPmcKZwvzOTlnfAb97zCVzyn73mnI67Ftq0nO+Ocb
kftifXRW+vCqeZnwM8+NvV8zFjDtHsg/sbE2OIInZ++HunAmzsj0J2wH5+Yt
H2K/I0YCawTZmJgS+LTCV5uYWqZkPvChwh8Mfb1r2Xw/bOnIoMwfnC/iF4FZ
gF3wTWL/gHN0VCZfYf8G4wHrwWaXj40RgRW1ypn/AWcPjg58nxdTc/7g/hE/
B3tD48hcC2Rk8Cz47XDjG+v3PaG+jky9NxGj6aHY+vM1Ja9PsOX2qt+uYB+5
3xLPL3g1NufpsTkZxYr9q+BqHK3y/fPej1rE5hTBA4IPBPcTfKNn2TYluFVw
ikeVjZFhv2mh696cfeQOUPmzyNeBOWzsb/hE4RuFzeihDP85r2SbF7YvZGhk
afYs7Ftw3PDJgl83KeuPsTHGabExJbAlbDbYbjqpTceCfQg3JLY/wMWCA4y9
elkmb+KDiz7P/s1eTsydmxLHyDgrtAxP7IzDY3MBiIFCfBM4TXBW0HH/4fwC
f4V3lLN8jM8ZnBL4azun5m8iO8DZhLuJzw6+OycWzY/DZ+S8is9UfEmui81V
JWYQsYPw4cCXY6eiz1swYrBifIDwn4ej9mTFfAy4a9gHiF0Gxp9X+ofEvjhw
SOGL9kytq6GToZudj3wWWIdDl2sUOb4WNiJsRaMic03h9MHtuyZ2bCN8VJqo
/iY9u3PRPkzEN8Omhv0EDgJchKGq/wl8wKLj7Vyie6MDY7xgvR0j21qWlOwf
RjwsfN2IiUZstItTn02cUWARxMPC12lGwfZ9bBrYNuAD4Yv1pe5NCxwTjthw
YMRgxfBt8MUifgGx0YiBRCyk/0XGvxdl50Pv1NgznAi4EeyfcFvwWcJ3D39F
uPL4cOHLtipyLBl8arCfXoQ+FBgTARsB38fvGQ4bXDbwb/wo4SzCXSTmA1zo
VkXHr8PHbWXZnEO4h/weytayJ6ruV8q3LtrGhb5BTAq43dwjvhaYNNg0Pq34
gmLjeiywjoauRjwEuP1wtuFuH6HywUXL+OX/p98G9jnA9+CZyLYYfA7wPSBe
BbH28HmNU8fHILYXnHG448hkyGbHFC1vwqmBW0PMLfiZ2EyxnbYpOt4XPoDX
VuwDynxig8cWT0wV+AXYILFFEvME/kGk9t2LlsnQTVmffEuscdZ636rjohEf
7Tv0ncS+07Qhfhn4L2XoROhG3yQeCzoauhrxufC9xMcUX1N8NK+u+Azl/XOG
cpaeXTDfaWps38MLC/bHAP+A64+PIb6GyN/MBTEH26T2x0U3ACMiPgH2X2z7
6LDosuhs6G5wPtlv2b+xpa5WnXmR+QpwL9YG1l+RUdGlsRkiu/ZM7LsOpkQ8
mWmp/XGIDYd/Ffsjtvef1OaDyJgV2NUWHyaV9Uitu6Ozo7vD5yCWCTEaidWI
TQhsCJs2tiL442DJa3RvIXtHauwZDAAsAD4hXEt8QtHvkd83lL3Hwf/AHg63
5cfAeAN8N2yN7KnsrfjrYKsjJlz/TB96L7DPEHwg7E8b4ZUF9m2CD7JA6QcL
5rNgfzqxbJ0eX+trkO8K9lEhHuLYxG3haNycWP+/uWCfbOrjfweWjU8I/Kxz
U2MRYChgKeekxsrBKMAqwMz5/XAywNKxl8O1+F733okcz5BYlvj4wM/C3g63
Bo4zeAd8A87+HzVnR6XG8NmfsbGD7YPR8/xnS8buiQEJj5U5fjM1R/vFijEC
+CTYj4mluS/iq9LT2O+K9qHClwqdB93n8ZJtK7UjcwnhFBJvj/NsesX2DOyN
O6U+29pk+BH+DY3yjrHZIttPkbXRDzpFtocuLtufDV825DWwZWJE7pMaIwAr
wAeB9YPOg+7DGGujS6UeHzoa3ELiDaJLw1HcNjWGCZaJDxR8BzA5sDk40MSv
eTRxrEt8aPClmRDbV/mNwv/nx+xTNOaEPINMhWzFPfgyTye2fcKRhiv9sK4z
A/v04NuDPDA0tM0R/BLMFuz2XfanyJw6dBN8oImHCcYB1gEHGi407++Xim34
2PLBJxqXzemF27sde0LRPo74PmLTxtcQDBssG/4i3Hd8mvBtwh+CtQ9fkHgo
YM0NAttDsIsgUyNbI4MjixPvknhvt6rNfiXHryS+BD4sDUr214T7gwwDDsI7
5d0i8yP7I+Mi6z6XvR/8j4hHRPyKJiXrijwPmZ42zSPrJs+VHT8NGy+2iE8y
eYD5Yn0szs7fizNdkzX1dsW2UmRnYqzin4EuiW6BPsFvAiNk/5qSfY/oHJTD
kcMWBSaJ/PNKtj/hs4FsiY0BWwM2OrD5A0q23RHPld9P7JfrqvaP/ydnzhnx
Z/gG+BZezPYDME6w7lez/fPV1LoKPBz47nCC0GXRqdCtwMzBut7I5C8wcrCy
mZl8Bh6FrYwYPSsi+6Nie8OmBf6JjQmuExwZbE+9UnNTp2e2WnRnbNHoTDyz
XYZXwAnEVt0v9fkBpw1uG/HZsG9jv/ovNAeM+EPYGLE1Hput5wWZPIbNB3np
vUzeuaNi31c46NiLL0itCxA3g3gf16Tm8sDJgpt1Yep4F8S9wF/xo2z+sGlg
20Cmx1b9VmY/xgcNfjUYJFjk3RXrwnDCsYcT/xHf5dtz9qe9PMMO4PvsWXY8
Sbj16AvEj+yfGosHcwV7fT3yfDFvYA/4z8BlJSYV+ATxGNHd0VfOy2yV6K5g
GPC1iX8GF5MYkr1L5qcTu5GYU9i/Xo6MlYBZgF28kn1PrHOwFDB6sPpyxbaL
Gdn6ZZ2DnRBf7u/AMWyJeQvnAXs7nGS4EK9m3zffHVgN/sj4X7FH439MfEG4
lrq9Jf4LMSaJNUmMPOI9YdNmv2DfwFbFN8C3UF/3hqb2v29ccAwKYlE8Hjl2
DTFoiEXzRORYFHDC4Ybj40ysZ8YIfsGZzP4ExwuuF2c4ZzkcBLgIr2XfB+8N
7Ah8iLm/IHS8TGRCZMN/S+aiIhMiG24smas6NzKXDU4Z3DL8M8Fe4GPVKzvG
w8Nl6zjEfoADe2PJHAm4Eo9Fjv1FjBhixRCvhlg6+ICBjxFzCawIH6Kaqf3T
8IXB5xPfzwGpudlgqGCp+OMSu4V3Bp8TzgvcFziyxLueU3KcGXxw8cUlBgq+
J/ig4I9LvFl8CYhhQywbYsoQ54UYIcQKOUD9XVJ0TFniofylq3fR7xz8DntS
78AxRIgl8mjkWGv4ZKDvF1PHv4DvQDxkMGaw5nXZfMBZ/kz5n0rmMmODxhYN
RwWuCj7z+M6jL3fXvXzF8W+I4UIslwlZOTY9/Pe/jhw/Eo4AXAFiuqLvY0PD
3wX/6YcLtrkSrwGOFv692CCxReLjjq87+jf+IqMjc4M4m8DqW5TtK6kugl1K
jgHL+saGRzwD4tuCtRNT976SY8LAz4HPhL8o/GFiFcHvhueNToduB8cBrgPx
F4hVQozSL3XvtbJjY+IDzPqCg74E+a1kbjqc8KXKrymZKw6HH1kTThLcJDji
n6p8bcnccfQj+K7bVsw1hYO9GP1A5XCz4aveo/absOEmtjeDlcNhgsuEjwLx
19pW7LsAVwbsHh9KfCrxp8d2BR5PfMw+qfcrOB3gpcSrg2sNRk88ZTgTcCfg
bMDdGFO27zoxPDkf4JvfhW+OrqlKN0ot+0xQ++4a+56xfV8/K9h/GX/ILbH4
AvPm70ntO4wNDFvYvYl99cFw0E/GIZ8XzDlFfoZDDJeYe5QR04/+0PnQ/dBx
0HXgTGOfvDmyfxIxOPDfhk93YdkYGlja3YljQYCRoV+xXxGbgTOpGdhPZC4R
MVjwd0VGGBbaP2ivTH+YUHBMBfSPq1Jz/8dk38uVqX/r6Oz9XpGaqzoqWw/I
ULPKxiCQrfBfANtA5kP244wbGNqnhbOPmBfELVsVWB4cETkWBz7N8I/gi+Mb
hI0JWy18YOLYEM+mIbJ/4rXOmt+bvTo1N3Zktl7hjyMb49O0Y+p3yrvFZ2t5
ZPtmfZXtrmsRsnDk/Q6MFqyW/QwfOvYU9hbsS3CT8MHDP+Xx1PFL+HaIX0g8
cmJjY+PEfx1/WGzZ87M5xEcTX032WPZa/O+JvcMYsK/ChyA2IzGr5mTr752i
fQKRv9nv8eNjTz1Ebe9NzTXCZortFA4rXFYwVrBWYhqdX3EMFWKp4K+LrX1e
9g7PzvB/vjG+NeItEusPzjb+R+i22NrQKfE3Jz4x2DI+CPgDYT8Dy8NHF7yP
mD/E/uFMxb8Rf3KwajgscFmI94MvLTEziZ1JzM3nAsc26lM1Rw6uHO8b2+Jl
qbnPI7L9Ar7moRX7uMAHgT9OzEnOlEdT8wvgjBKTfmRsGQxZjDOLswv7Nr7M
xD/rldgm0yO0TIOtBj7/X6H9q3fN8GBiTWyJ3x+bs0XcYjgscFnAFAeVrdOC
NWKvnByaUwW3Cjy8UrG/GL7tcFSJlQ/HAa4D/kXEFYdTBLcIezfY9LmB7Y34
JxHzgTXJ2gTf/yS0DxC+QPCFwNqxgWGvRKbA5w75DVkD/hOxBrBxXBp7TcAl
vaPstQKej74/sWQuJ/g5vo3IV5M1Xw+VHWNtiw008t8zwLcBHZL4W/Cv8JvG
xnKR+uqbeq0jgyCL7Bba16BjYP918GhixCDPjk+tfy7Rb1mla2Jijg1cG+49
kum77LXwR+BqEZ8GLvSswPgOMSGJ5wXGAb8BPg2x74hBMiHTd78p2Ka0f2S8
/pzQ5zNcF+KBMxZifhP7m5i8xDOCQw6XnJg58GfoA39iOI3EZYDzAPeBb55v
n/OTWKZwjolVDCYCFxkfAfymwezB7tGRFpSNYaI7scfML5tvwvuFv0RcWjh9
cPuwJ+Mri48cXF5iThB7AswY7Bj8EKyev2nA3zZAB55btk0E3Rh79x5KP1Yy
9xF8kFgY/I0C/lYB9hv46k+VzP0lhuNFFcdHI7Yj8bzwVeZvfvC3P8A3ifmF
TDwrk4/BDlkfk2NzTJG92C+RR4lRhFyPfN89wzMHVYzZctYRb4Czh7+hwd/S
IF4Rvtv8TQ/+tsdD6uPiwDZAbIHw03j3xIBtlZjf/lxoTA//LOzlcFuJEUqs
UDhXcK+IiXSW8i/E/lsHZxUcX5J3/FvFf0+Cdz+54jgvxHsBj4HzB/cPDhr+
dNgn8KXHJlEr9RnEWURMEfwzJ2X6d/eC4zEif5PGxoatEv2CZ2NjbRr77yFw
1q1Um/tL5jPgS0VMW2Lbwrcjti06K7or/D+4asSgb630M6l9o+B0wu0ELyO2
ARjZ9qn3HPYeMHGw8S18rsAxmrAHgYeD9cJ5eEnjGYwMEVgGwt9uWGLZBxkN
fyL48NuXba8GbwN/I03MCfAt7HdwWcFg4BfA4YfLj40KbtTdkbnC2KCxRcPH
/yc0xw58+aXU3FdkAmSDUoZfgPXAhYXzC/cXjsrjnH+RuV5wRrb4u0fG9rBZ
YrvEv/jlgmMewU9hT2dvxycB3wRsNMTyQ4fFdoP9ipgTxC+cn+kX2BK38PNi
6/zo/uhQ6FL7l+2Xj3/+61meOOPEeCbWM98TMUzgWL2emvPxvNJJ0X8/Iwzt
67c88N8PAZMhZgd4EFgNfdI3HBDi3d4V2XYPfgjXg3jirF1iOhPbGRkGWYa/
iQDfFz4m3CBishObHf4IvlX8zRfiT/P3AuA6E+OfWP/I4MjixMCHP4n9hliF
cG4GxLYP4VuHDy6+uGBAYEH4jIH/TU8c6wDOEfgO/JS5gX2W8VXA/kDMPHTs
mcqPV50zAnMc4TrCAYULSox04lNPjOxbQ4wS+Cb8jRH+1gg6GfEksR/BVcPB
kb/NgrxDLEfk/deYn9i2Onyy8c0mT6xR/mYGfzsDmaNrxTa0Htn3j884Miiy
KPoN2OOEDE/Hnsm7w+cT30/aI7sQn3FWYnsiaXye8X3+P/UmhXo=
            "]], Polygon3DBox[CompressedData["
1:eJwt13m4j3UaBvCXnHP4OZiWMdZUNMkaEkWGhMtW1kT2JcvIKUXImshWWQrJ
NseWbShCKGVSTZmaLkujZm1mmky2yb5U83mutz/u6/fe93s/z/N9t+f7/G7s
m9dhWMEkSfZCFmwskiQfOphbOEnyCiXJlaJJciaTJO2ceyo7ScbnJMlZvBTf
/bRtvE/Sp+UmSQ/6Bcl+zzMIltF+RdvgfGe+wfyN8fb0M/LfyNO9QJJcR7tT
nb5i29MO88/j2UmvTatB20/riy9Sd6NcdeFW+Qrjy2AvXlDOifLVjJq0D2hz
aENdxyX5N9LPibmKVgg2q/Eh31m+mvg7VyXJfL48+lHabDjIP5rnuaiD/xKk
SS7zL6HtwptDa9oNeBnrLGANpf32pveBQnIOcH4ubYprycJf5q1Du8v5nvQf
8faO28FE/GE53nJc/CdfNfWqw1Zr+5T2vXN34B9Z80L51ljU9e5VK/oE8eXx
t3mf4BkB0+S7XdwsWMqznOYwueR3ON8x2jz4nDbWiedhOV4ZpE+u8L3i4AHH
U+Svjy/Gu4pdwlMJWqp/Nb4ClrvO4jwjrW8A32rrKev8PXyPii+OL81Orzeu
e5njO2glYLjjJuI78B/Bd8jXQq6WcFa+bfK9QHuVrypfdb6G1juF93+0urSm
tI/xVnwF5a9NmyD+a7HzeVfF+wNlXE8BvC+sd3yA7yCsE9cI/uvdacw3Ut6S
8lWJd5wvF3+G7zc814ptQDsp/ynYS3udNpnWX2xfvn+LWwG/sK4GtH7iC+Ev
8a3Eb4HS/PFQuonPjzXDffwH+d6jn85K35d4H/bh5fjqOW5E26ZuebwtfSbt
ffwDeJdWhTbG838hasJo2k20B+Vubm3TaDNo26GZmLHQyHVvVbc6zHO+GV8X
/r/hj8Z9iW8LDqk1Rq7Z9ApqNODdzLuGZzV9H88K2vPO3cWzkLaWdhtUjJ6D
v8j7OU8bcT3U6EzbDn/g6Q5j+e7Fd8AneA8YR2uGdxFbFq8PZ627U7zzcAJ/
CY7wjY9rhSWO2/C0hZ1xj2GqmnvhpLp3W9/jtOPiXoQ/8Y8Td5nexfFUa3ya
9wq+KTeaj8eVnfaUyrTHaN9G74TD0S/FNoK74fZi+g/vXJ6x3sHZ3uOy4ptF
Tto4qO64BuwRO1BMB9o1cl2ifcfbDt8gtonjytZxzjNqQpvJMwNO8/3Dff7a
ca/w+r07+oR82fI9Dsedv8xXK3p53CvaCdoVvDZMoPWE9eIaRp8VW9C1NVO3
gjX/wLNJ7Ur4q3xbHN9PqyPHZ3yT4n45LkyvR58Y94T+ML4TX+vcMXwdnLL+
L1xLYXg93l3IVfNbfDVcgzeHH/j+if9d/Dhx96pd2lou4hvkLY9/XDTtP/Xx
vtEX8S2ZtDdEj1jLO1uuzrR3HVen3ebcdrwHfV1W+l3G95lPmwMFYt+R6wv1
6/KUgY3xXdAGypHF81D0u/gmY2+IfcH191e7WPQCns/56/C0gQzPN/T29PN8
m6OfqDeGNjr2H57PxA5zXFrtFu5VAZ4G9H/Jc4A+CHbjS+n/oR2K/Q3eohWj
5cldISfttdFzJ6pzUZ4cWjYs5hsM+61lIEy35iY8W2hV5alSOO0vscntph/g
GQBTSC3xnfDHeL9in6G1wDNip1vLBNq14oe4hkEw1jO6Jp6luqt4BtJG066m
5dNWxn2htaadx8fActr1cg6y5qddyySYTnuT9mnslTBe3ebRw8X+RexMnsli
Y6M6R68mdoAa/WGX2Iq04bTpsc/GvEIbzjtZbEmetWJX56b7RewbE3m+452K
9+LLjr6Sle7hPfFf8x7Eh8MCWmv5H6Edxp+Aj92LKvhQOIQ/Dgv5WvF1jNkk
9nb5b4IvaNsy6bsY7+Q7tE54G1jJtx0vC4f5quamufdZzyHaY/Fd0d6XvxuM
VuM22v74RuSbFD0xZjP8Zr59Yn8nthrtqHyt6PlqvIGXgkO0N2m1xI4S+xGt
T3z7sFfsO2J7W+NSueq6D/vj2481yzGEpxyMj+vKSWeRmEn6wyfZ6QwXs9wu
fEH0BFrXmBNpw9QtVTTte+fp6+il8YXRx/Fu+GC+PL6HxG9R7wP6zfDn2Lv5
dsQMBh3lKFsknVtjfp1nzYv4ZvIsgqvkysCPcjzD91XcV+f3wWu0rvKv5Xub
Jy9mLjlWZdIZIWaFLnwPxrvB8wbU4pkOPflOqtkv3lXraAOd+MuJGxb7Gz4i
K117XEPMlDFbfkPLUuuV6HPih8szP2ZLNWblpvNtzLn98QHwLO1CzK+0e/Cm
8Y3QLhZO5/fmeIv4Hmh/VecB962FE8/SKuHT5FuMN85Oc0SuEurOsYbdtBzr
+7JIuv/E8/iK9xz95ejNfDP4tmans01RfCnfuzGnxDtIq1EknRVjZmzD1zZm
3rg22nXRQ/BWMTvF/gkjLGKBc8tpz+ENrfGiUz3U6QlLaO3lnBt7LM+tMJbW
J2YsNe+FZs79LPb4TPoM41m+B13if0sm3XN24TfAU+K2QVM1i2Wns9wmnppF
0v8O38f+Dr/lGRVrjNkoO+0f0UfqQ734FfMc7c7471IknW9izsmPWSeuC85b
24Ws9H9S/F9qwbuMbwvPepgT+07MP7RGmXROiHlhJP2yuMnZaR+Mflg7+ot7
dTzev9gr3OBT0Is2Az9tzet5vqP1oc2knaNtoHWHNfLVi3nKuWM8dTPpf4JR
fE/CnujPmbSfRV87ELVjPqUfcdwhJ/1/dlfMz7QvaR1p/WL2pn3DW1C+HfR+
9KN4b77X5Goaz0neEq5jSOxx+NCstL9FnzsT3411zbKOS2I38twHxXlOxGwA
pWLO4cvXsyviJdUZQxsAe+K7j5k63hE18vh+zrMUZsmbG704k/bg6MUHxT6C
D4p+ij8M0+J7iv5Hay2uFayg9YseFv2Ap0PM8rRb+P4P2TLvnQ==
            "]], 
           Polygon3DBox[{{3175, 1481, 1377, 1376, 1697, 2615}, {2469, 1476, 
            2053, 3249, 2359, 2360}}]},
          Annotation[#, "Charting`Private`Tag$11130#1"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0k1IlFEUh/Fjkzk6aUHR0hrNKfoYE6RCCsOVoRDUIjDaBC5SKJe2E5WK
JDK10YIoFwmJRVDiWgraV1r2ZYIQgfuJKPD35mLmef7nPfe8996Z7KWrZ6+U
RMRLn/bNEYnPpCL2kjNyMR2xXW2KN6n9k3fLc3pS5RF5XoEncRe2476KiB69
ndZckKczEav6+9W61Y7o61Kf5xNqp+RrcgvexDYcx25z5j0f1Dclf8B+tSW1
W3xW7ba8Jr/h93iRD3v2PpmDrZsi7pRaKw/jAt7FRRzBjziKn3AMl5I5WPD5
zP+YN86/8L98gn/lj5znmbuY9I5vcpY/VvvO7+tZxgf4AzNl7tU+hjxfkWsw
5OvO+Y4+lHv5a77Dmi7+ir81+yJ/wgfcYUFfgffxMX6Dn3bmSfvq5bO83txm
ay7LeezAPdiGO/EEluPhZAtYjb/xuBnnvW+bXIdV5hyylyr5qGdN3ndQrpRf
8Ea1X851jG9Nzm9NxpoDemwv9qPtRA6Nj5/uJ83Tye+yJaLB+kZra9WMiec8
r3bOnBo1LVFmXpaXJmfw5VFUY3J9zRrq9Nen/l9l5Ax+yrMlG//jdWeKT6Q=

        "]]}, 
      {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwVzzlOgmEUheFrQYKiEZdg5wqcKE3EwsrQaGlhCZZSGiA4T40DLsA9aKcC
jqhLoHLoxanwoXhzzj3nfjf/P7xYmMv3REQOnWRENhXRwAwO+yKm6StqiYjR
/ohrvok6jvTv9APV3og3OmZnAuM41k8NRKzpvtxelV3iRL4u+5aVzFeoyTZk
nzg3F7y7d+9UfkM35ZPysvzWfIeWbkg2j6I8TQe734gt+z/u1/lt/pdv8Dv8
H1/hm3hy48GtXfkjHcGCW2e6Z10be7qM+QLLupadF3mR7utW6JK8w8/aOej+
L/4Bzhc4xg==
        "]], 
       Line3DBox[{2301, 939, 2938, 946, 2211, 1172, 947, 2939, 1174, 2553, 
        2549, 2941, 3450, 1175, 2940, 3202, 3273, 2451, 2302, 3204, 3274, 
        2452, 2554, 3354, 731, 2771, 621, 1253, 2260, 1062, 2772, 3162, 3355, 
        2717, 2555, 3163, 3356, 2303, 3275, 2453, 2304, 3276, 2454, 2305, 
        3206, 3277, 2773, 1063, 1064, 735, 3278, 2774, 622, 803, 2013, 737, 
        2775, 1178, 3091, 3451, 3090, 3149, 2455, 2306}], 
       Line3DBox[{2307, 3094, 2556, 2958, 3024, 3357, 3261, 2718, 3132, 2557, 
        3052, 3164, 3358, 2719, 2558, 3158, 1448, 2308, 3279, 2456, 2309, 
        3359, 2559, 2457, 2560, 3251, 3433, 2498, 3095, 2960, 2961, 2720, 
        3396, 3025, 2561, 2722, 3165, 3360, 2721, 2562, 3166, 3361, 2310, 
        3167, 3303, 2311, 3280, 2458, 2312, 3207, 3281, 2776, 3026, 3027, 
        2724, 2965, 3434, 2565, 3098, 2963, 2964, 2725, 3241, 3419, 2566, 
        2778, 2459, 3097, 3452, 3096, 3150, 2460, 2313}], 
       Line3DBox[CompressedData["
1:eJwVzTtOQlEUheFN1Oi9FxSQ0gdogQ5FSTRRiZZqa6IjgBoqEgsnYCmlTgAU
dAjGCUDhA0fgZ/Fn7b3W2ufULm+OrnMRcYA0iVhMI3pZxBK9KkQ85SO+7V9o
mBP+pzmlXXmTl7k7o8c4xQk6sjx/thAxpAUkvGf6gmU86qW8kfnWm2O6R3/w
INuWzfnnHvPYsq/onMsmKJov6BQl8xpdR0uvbK//9929o4hd786wj0z2qnNn
fqMN+ou++x1ZSf8DZVR5qzoD2pZt0ENsosL/A796I4c=
        "]], 
       Line3DBox[{2326, 2579, 3133, 2580, 3153, 3397, 2325, 2581, 3134, 2582, 
        3369, 2327, 2583, 3306, 3208, 2328, 3189, 3364, 2571, 2506, 2329, 
        1529, 2572, 2507, 2802, 2892, 3232, 3340, 2508, 3099, 2509, 2967, 
        2330, 3366, 2573, 2726, 2574, 3365, 2331, 3170, 3307, 2332, 3171, 
        3308, 2333, 2590, 3309, 3209, 2334, 3190, 3405, 2780, 2510, 2803, 
        3059, 2893, 3341, 2511, 2968, 2512, 2894, 3060, 3245, 3373, 2592, 
        2781, 2593, 2335, 3282, 2461, 2336}], 
       Line3DBox[{2350, 2462, 3283, 2349, 2606, 2783, 2605, 3375, 2348, 2973, 
        2974, 2594, 3455, 2812, 2811, 2347, 2809, 2810, 2591, 3436, 2972, 
        2971, 2346, 3193, 3314, 2514, 2345, 3313, 3173, 2344, 3312, 3172, 
        2343, 3371, 2589, 2727, 2588, 3372, 2342, 2969, 2970, 2587, 2808, 
        1920, 2341, 2806, 2807, 2586, 3414, 2805, 2804, 2340, 2979, 2980, 
        2585, 3370, 3192, 2339, 3191, 3311, 2584, 2513, 2338, 3210, 3310, 
        2597, 2337, 3398, 2596, 2782, 2595, 2599}], Line3DBox[CompressedData["

1:eJwV0Mkug2EYhuGvoaGGgxBrQ4rETA0LW4kxJCKxrbBwBiysxF5QtGh1MC5J
nAIW2AgnIVJcXdx5hvf5/sXftLw6mYyEEJJoj4UwXR/CK2aQrQthin5jozGE
ffc2XVoeagghQ3PyJ374A/cPvoxh9196gSI/4X3Z5tAmrsvyCX2OPtG8bpb/
Q8qms/KWH3Hb9PaWFnRzugh/ZNMl3/Nr7qP0za2km6dV8rFNUX7g123G6Lvb
pS7K1+AxGkI1XdAvYsXuxLtu9Nj1Ia5Ly7183qaIAvrlPW873JfkjE0LrUVr
5Xv6lPuA3Rdq+VObZlpyH6dbNnf02n1ZF+PPbK7kHf4Z2/pz3SB25RckKv9Q
vqH/LP4+ZQ==
        "]], Line3DBox[CompressedData["
1:eJwV0Ekuw3EYxvG3horpELUQ2oZoq1Rr2LEylMRCaYg1K4lTcANUIlELwgFc
wrxzB8qSTxffPO8z/P6Lf2rvsHqQiIhtzPdGLPRRFAYjZvk59yeW+dOBiIrs
vT/iAzfyB9mSbpcv65K0B1ldTd7t7sKMbofW0fImo3+SlXDCf2NaNsXfu7+w
ZVvkj32nqDtLRkzyr/I3NGUvdFH/aF/QrfO/2EBa35CP6bN8J/I2CVpFB0Zt
NvXhvsIfn7NZc//gSHfnGyPyS37I3aATNmm6igyu9U363L4xrr+13fe+xa9g
2OaCpuTn7f+Hf7znLRU=
        "]], 
       Line3DBox[{2368, 2608, 3174, 3376, 3064, 2609, 3287, 2476, 3066, 2611, 
        3288, 2477, 3068, 3211, 3289, 2478, 3070, 3212, 3290, 2479, 3072, 
        3213, 3291, 2480, 3074, 3447, 2615, 3175, 3377, 3078, 2516, 2627, 
        1482, 2626, 2994, 2995, 2629, 3230, 3381, 2481, 2628, 2825, 2826, 
        2630, 3422, 2789, 2482, 2863, 2827, 2828, 3292, 2632, 2790, 2483, 
        2631, 3217, 3293, 2484, 2955, 3194, 3294, 2943, 3092, 2485, 2942, 
        3431, 2517, 2634, 2791, 2486, 2633}], 
       Line3DBox[{2370, 3176, 3318, 2369, 3177, 3319, 2371, 3295, 2487, 2372, 
        3296, 2488, 2373, 3297, 2489, 2374, 3298, 2490, 2375, 3343, 2518, 
        2636, 3178, 3342, 2635, 2519, 2638, 2792, 2793, 3412, 2637, 2829, 
        2520, 2864, 1892, 2794, 2639, 2830, 2521, 2641, 3413, 2795, 2796, 
        2640, 3195, 3299, 2491, 2376, 3300, 2492, 2377, 3344, 2522, 2643, 
        2797, 2798, 2642, 3382, 2831, 2523, 2996, 2945, 2946, 2944}], 
       Line3DBox[{2379, 3179, 3320, 2378, 3180, 3321, 2380, 3113, 3114, 3181, 
        3457, 2381, 3265, 3301, 3117, 2493, 2382, 3383, 2644, 2742, 2494, 
        2383, 3385, 2647, 2648, 2495, 2384, 3346, 2524, 2651, 3182, 3345, 
        2650, 2832, 2525, 2654, 2799, 2866, 3347, 3231, 2653, 2833, 2526, 
        2998, 3256, 3348, 2997, 2655, 2527, 2744, 1497, 2385, 3196, 3302, 
        2496, 2386, 3387, 2658, 2746, 2497, 2659, 3257, 3437, 2528, 3110, 
        2800, 2801, 2662, 1944, 2529, 2999, 2948, 2949, 2947}], 
       Line3DBox[CompressedData["
1:eJwVzMkuw2EUhvFjQ0wb81ZCSIghLEQa0w0QtLQq0QZtoqbYi3ALlna4Bvp3
NWqm7sHP4snznvd85+svHq8eNUREDtvNEUNtEb88zHXua4+4l8utEV1Ywo9+
mr95kXu9ufOmJO9jryXiCbtI2eW9O5efGyO25FldwVzFDnK6AfcX+i95UP7k
xF+d///hVle0X5A/7Kb4nee5A1n5piliTn6T8/595Ql3Pe4S3jQ/2lfxIme9
qXG3/QZP6jO6B6Qxo8/ox92emcf4SnfNaf0oX5pP7UbkE17Xr+gO5QrWzMvm
slzCAf4AVJgs/A==
        "]], Line3DBox[CompressedData["
1:eJwVzDlOAlAUheFrYxwTGwtLV2CcR7QwsVYWoCCIQgEJzlMcGmNtNHEDFm5B
QAa3oUtwaLXxo/hz7j3/fW94s5QsdkREDoXuiKueiDdcItkXsYqb/og8l+/l
8GOuym/ZkkP8k7uyeRDL+OIqcqQzoilfsKP7xIW/F70592bb/ij/cKvP2T/c
7ra9fUV/Jt91W9xAV8SpvYUTTPANLssteZM1j+uOuSaOMGav64t8xl3GPKo7
5Bo4QIJ71m3yCX5fV0da/6Bf0KW5ebmnf0WKu+fmdCluVt7Zf1Hjy5jRbXDT
7XRf0lVRxJRunVvTT5oLugry7f/tNVyb/wGNUDg2
        "]], Line3DBox[CompressedData["
1:eJwVz7syg2EUheGtIwelOBsXoTfGDKKLRh2NkeRPQiIqCoRxKGi4IWeuwZmb
wHj+4p219lr72zPfZLleSnoiooytvojzTMRULuKMzuQjOrJWNqJf1qZP8g79
RqE3YlM/zm9gAif6Fe/G+FmMom1nmI7gWL+sH+IH0dLtuP2HI11BNpDek2/L
ftE1n6a3sS5f9f7Q7iMO0JQtybr8A/YxbW7I9/h7LJov3arLds13KMouZIms
4Xaeb9JbXUv3xRdln7RmJ6G59Ab9oTf2PvgF/p1W7VRp1lyj1/o3Om9+pRV9
yd01PiOr0Cs7L3TO/Jz+0/wPZpc0Ow==
        "]], 
       Line3DBox[{2438, 2548, 2953, 3093, 2224, 2437, 2707, 2766, 3404, 3226, 
        2436, 2547, 2704, 3239, 3393, 2855, 2435, 2853, 2934, 2854, 2703, 
        3417, 2852, 2885, 2851, 2434, 2850, 1966, 2702, 2849, 2848, 2433, 
        3200, 3336, 2952, 2546, 2432, 3228, 3335, 2951, 2710, 2431, 3334, 
        3333, 3188, 2430, 3332, 3187, 2429, 3331, 3186, 2428, 3330, 3185, 
        2427, 3329, 3184, 2426, 3328, 3183, 2425, 3227, 3327, 2708, 2709}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{1310, 1600, 1436, 3395, 1311, 1601, 2074, 2212, 3450, 2213, 
        1327, 1628, 1448, 1336, 2293, 3464, 1455, 1345, 3306, 1655, 1462, 
        1353, 3311, 1535, 1673, 2046, 2047, 2189, 3445, 2048, 1545, 2112, 
        2051, 2052, 3401, 2197, 2196, 1688, 2194, 1480, 3288, 1372, 1485, 
        3295, 1384, 2244, 3457, 1494, 1396, 2245, 1749, 3458, 1867, 1898, 
        1899, 2059, 1997, 3322, 1750, 1873, 1903, 1904, 2206, 2069, 3324, 
        1768, 1879, 1509, 1414, 3329, 1514, 1425}], 
       Line3DBox[{1312, 1602, 1603, 3267, 1805, 1604, 2075, 1605, 3273, 1328, 
        1449, 3279, 1337, 1521, 1522, 1642, 3364, 1527, 1528, 1657, 3370, 
        1536, 1674, 1537, 2107, 1675, 1923, 3415, 1546, 2114, 1547, 3284, 
        2113, 1832, 2267, 1689, 2195, 1690, 3289, 1373, 1486, 3296, 1385, 
        2246, 2247, 3301, 2248, 3459, 1751, 1868, 1752, 1998, 1839, 1999, 
        3424, 1753, 1874, 1754, 2000, 1842, 2175, 3444, 1769, 1880, 1770, 
        1415, 3330, 1515, 1426}], 
       Line3DBox[{1313, 1606, 1607, 3268, 1806, 1609, 1610, 3274, 1329, 1629, 
        3359, 1630, 1338, 1523, 3337, 1641, 1524, 1644, 1529, 1656, 1530, 
        1659, 1918, 3414, 1538, 1984, 1539, 1919, 1677, 3374, 1924, 1548, 
        2116, 1549, 2115, 3461, 1833, 2268, 1692, 2198, 1693, 3290, 1374, 
        1487, 3297, 1386, 1727, 3383, 1728, 1837, 1729, 3384, 1869, 1730, 
        1992, 1840, 2001, 3425, 1755, 1875, 1756, 2002, 1843, 3402, 1771, 
        1881, 1772, 1416, 3331, 1516, 1427}], Line3DBox[CompressedData["
1:eJwVzztLgmEYBuBH6EQYuLS0FbRkbi2BzgVBQziESxRphKAEmWUFNQqNQaRL
f6F+QA3WHnRYIgOpMRtbuxou7ufwvi/fN7lRXakkImKVqcGIz+GILxaHIooj
EZtUxyJSZiX1Fnm7G/2E+bXMUmOPNbtt87RzM6zrZ2WGUfOyft+5OhX1gfyl
QdK+YXakvuOQY/2JTLh/Ks/0OfUtWabNFtzbVddo/78v6+yYf8h3ulxwZf+W
9J3+9ZGeuiw75vPO38sH0ozrl73f4pIuTzyTs8vLV16YY8ms715B/SOb3h0w
+5bn/AHMzy9P
        "]], Line3DBox[CompressedData["
1:eJwVz88rw3Ecx/G3w9hFK0qtHcQ3DnIi5aIcHK20YisXzY32XXYRIWVJO7ip
Xaz2R8if4C7tpnDg4vf+AQ+HZ8/X+/X+fL4/Jqr1UjoQERUkmYjXoYizbMQb
57At36M5HFHlRd07zuUPHsWu/IAdLJm/cCF/cx6pvOJ+j2so6H7Rkvuc2NUG
I+bNN5jDuL6um7Y74j1M6k54VnfJp1jzzR2esTt07wAN+xd+wjPa2Nd1ndty
Ps85c4FvkWDEPMV3WHW+iDHdo7nj2dc41pWR6iv//2+3wetYsP8xL9ttyn25
5V0Z8ydf4Q8M8y4b
        "]], Line3DBox[CompressedData["
1:eJwNzj1LQgEYBeC3obpDLtJa0GJLi2E0tQUp1FJTU5G22mDQlEhLQ7Q1uAXl
oOQgbU59SEr4G4LAQYIWoS2CnuHhHN9zr7p0dLJbnoqIHTLTEbf05yKWZYOh
npNj2ZYbfOmPcpNvvSu3mehPco8f/W4m4p43n1dTEfvycjYi7dbhQH9OIg7l
mr1ov9J7LNi7lPQ+x5TtN3JAxvbOvPe2fEeBPGeeeZU9Vuw1+4v+4X5OVR/x
aavYFvUmLS7sf/531vbLg1uba/fEs+tuid+ucErd/R8Nmiyu
        "]], 
       Line3DBox[{1320, 1440, 3271, 1321, 1445, 3276, 1333, 1453, 3280, 1342, 
        2230, 3453, 2231, 1459, 1349, 3309, 1665, 1666, 1466, 1357, 3314, 
        1540, 1679, 1472, 1364, 2054, 3317, 1550, 1700, 1885, 1886, 3379, 
        2055, 1928, 1555, 1713, 1889, 1988, 3422, 1890, 1380, 1932, 1989, 
        1566, 1722, 1894, 3413, 1895, 1391, 1575, 1497, 1400, 1738, 3386, 
        1502, 1406, 3323, 1782, 1506, 1411, 3326, 1586, 1788, 1905, 1906, 
        1422, 1966, 1592, 2256, 2143, 2144, 2221}], Line3DBox[CompressedData["

1:eJwVz88rw3Ecx/G3w8aBOHBmpfyouVDMYdLKabsomeIwcRPi5KytKLX2P0hx
UHKgKXFycdh5Lkb+BQebPByevX68v593729qc295tysiVjCZiMgnIwp46Y3I
dEes8kW8yll5i99GQ16UD/ixvoi7nohD/p7m9AXdj33HujZ90M+iLM/RHfMM
TchVJPEoL6DGl+1Y980T7ZfPMYBnuYINswv5hF/yZpC/wRDe3Haqv+XP6DCt
YwQfZvvuGecn8CUfye98C5/I2p2mU/jGpR1F3TTfwQyauiv88td07f9/+JJb
5ukoTeEPbessJw==
        "]], Line3DBox[CompressedData["
1:eJwV0bsrhXEYB/BHronCcA7DKccpiWQ0WCRSyGB1GSwY3P8Bg42NySKX4ZyF
zSWOf0CSJAxsFkoZCAufM3z6Ppff733rfdOT8yNzRRExRVtpxGt5xGpFxJus
Y0Z9yzQL1RFdZke8c0yCU544oZszPjgnxah7F3LeM/Kyh0/W9F+yxb5RLuof
Cu+hV//DuvpXtjuTkcv6R5bo02+URXTYNas31f1yWJ9Vt6lz8q4qosn5Aw7J
kDB/Nk+p0+oad5pknlaumDUbtB/gRr/jebXqXZm0ezHbL7zPbE/eky18E31O
Njjz7cyY/pJRVkiyTT1/9hPymnE63Rtyr1hWUsKW//IPmYk2bg==
        "]], Line3DBox[CompressedData["
1:eJwNzb0ug3EYhvGnEio+FksrMdRgs0ikm8VgFPVxAobaOABitWkNPk5Au6ig
6aIisTZI0yZOofXVltHkN1y5nue+n//7zm7vre8mIiKH+eGItZGI6dGI/KTM
3DW/4wNl7MtL/IkvfKOKA/kd99DHAIeyOt9jxbfraE1ErPIT2uYtvvKfRbcV
fpNdcwoz3u3I0+YajpMRBTyYTzirK/Kj/ZTH3J9x037BDZyjZb/kKX2J0951
ZJv2BjawIP/hI90v/+lf+QXPSOiXdVkeQkZ2g1vMYcn9uPwfvLExMQ==
        "]], Line3DBox[CompressedData["
1:eJwV0DEoxHEYxvGXHIYzUaZTV9IZ1FmsJmS6XDHcKKmLThkMt1yKLouzGW6S
GE1Gk8Fyt1xIWQ5XsrukEB/Dt+d5n+f9vf/6p1e38qWeiCigloh4Q2Ig4jcZ
scd3sGweGYzID0UM04qsjZI8hyaWdA1alj+iyC/+9/Lb/oht2R0+3V2nDXzw
BXqDrL1Dt49Qw4psR3ZNe83Hbvy49401eU5+hS/zOOZlVTsLskukZV3v5uTv
dFZ2gVf+AWP6Dd00f4AsZvTnuOc3kdKP2pvkq8hgSn+CU/6szz/xzY6dffML
TenqaJmfzUk8YdfcphP0D7PWM3s=
        "]], 
       Line3DBox[{1424, 1513, 3328, 1413, 1508, 1878, 896, 3083, 1163, 648, 
        1872, 3423, 770, 878, 641, 1866, 3408, 1748, 1395, 1493, 3321, 1383, 
        1484, 3319, 1371, 3287, 1479, 2193, 1133, 1134, 3067, 627, 1864, 744, 
        2896, 851, 850, 1862, 1672, 3310, 1352, 1461, 3369, 1654, 1344, 1305, 
        2294, 3465, 1306, 1335, 1447, 3358, 1816, 1627, 1326, 1174, 1619, 816,
         1106, 3051, 1105, 2178, 1598, 1599}], 
       Line3DBox[{1430, 1519, 3334, 1419, 1510, 1884, 3411, 1778, 1408, 1504, 
        2137, 1776, 2061, 3391, 2060, 1403, 1499, 1900, 1758, 1948, 1947, 
        1397, 1495, 3345, 1734, 1572, 1388, 1489, 3342, 1718, 1562, 1377, 
        1481, 3377, 2203, 2205, 2204, 1367, 1475, 2202, 2201, 3448, 1695, 
        1361, 1469, 3371, 1663, 1354, 1463, 3365, 1648, 1346, 1456, 3362, 
        1635, 1339, 1450, 3360, 1818, 1632, 1330, 1442, 3355, 1812, 1621, 
        1316, 1437, 3449, 2210, 2209, 2277, 2276, 1611}], 
       Line3DBox[{1431, 1520, 1799, 1798, 3335, 1420, 1511, 2218, 2079, 3432, 
        1781, 1409, 1505, 1780, 2064, 2063, 1404, 1500, 2249, 1901, 1759, 
        3426, 1952, 2062, 1951, 1398, 1496, 1993, 1896, 3347, 1736, 1939, 
        2057, 1938, 1389, 1490, 3412, 1891, 1720, 1564, 1378, 1482, 1711, 
        1553, 1368, 3429, 1476, 2053, 3315, 1362, 1470, 3312, 1355, 1464, 
        3307, 1347, 1457, 3304, 1340, 1451, 3361, 1634, 1331, 1443, 3356, 
        1622, 1317, 3269, 1438, 2208, 2279}], Line3DBox[CompressedData["
1:eJwVz78rxHEcx/G3gTtxg8FmMVnkDO4Gd5FBmfy4zY2Ey0AKC1KS3UD5Byg/
SjmL8hfQGSyIicSOGMjjOzx7vt6v9+fz/dE+MV+aq4uICvbqI4oNEY2piAKf
8kDGgk/wiLz+gXN8z5P2x/xjPuA7dMvldESWSzyKV3mEx3AjP6Pobo273Lnm
gvmKF3zHS3PELU/hST7Sn+EQK57R6c6W84PyKnb1+9hJvs+cxpB9h3N98nLS
2W0jhUvzuv1G8hzzGvfq/rxv05yx+5Xzum+7JV2PnMOXftHc5MynnNV9OFNJ
/kWuYkaetW/TT8sX3I9z1PxPWdcqj3M1eTfKzp/xiK6Fh7nDs97kd/wD8SU3
dg==
        "]]}, {}, {}}},
    VertexNormals->CompressedData["
1:eJwUmXk0VW8Xx5XIUEJIJYkiqZRSCFuZSqGkJCokP1Gp0IBESSkkQ5lnkaHM
ZNrmeZ5n7uVO7lSaJOq97193rb2etc45z7PPd38+92yzczG7tpKLiytgLRcX
N+f30DJ/Lu9zEiw6Hrhyx3AAOqPVfnyUJ4Hts6PEovEBnDl2+w21chYOvfqr
pdpEgj8H5k28bckYtf/hHgVNAtiMWiT8EpkEh3Mb/flP0HCV/w0ZgfMT8Ec3
K3SafxTuHuqO8Gmm4Qz/0MGc2RGoOdLofvzTGPRWlUt5mlMwKDKgd5oxCBUm
+jEdH4igVsktpC1KApaqAVeaXzUc2n975u9nCkTFrsv7U0sH53/f1nPJ1KOv
P/ltqsok/PBOVjqbyIBSg3zvdad6MHxMa36waRAeVV+xGDJkgX572bodym34
svg/8Z+HuuDoeHJRQD4TVETnIwsS2zB4Wm7y3s0++K63cW/8JzK8f/79IR7s
RdUVI3k172fh6iFm66XXDJS9p/zu5Z6PqE9nSLyJHwffr5nsQ2/ZKPN5/8R3
p3cgxv8iQ+NkPZxdr5L5cZKNZ+6WZiw0xMCHtCyfxr9FgP89eecnSoN9VcHL
k8w+/Cpj9J5HlQBrl9eeeC/ejg+PKe4Uku1Do+XNF+glTLhxidqu1UTDg/kn
DHS7C1FA7XH1QBMRTJ+kU/w9GNhyokvrTrYfWsWt271i7wS0CFoayr9ioGpj
06mTQa/h2r7zW07NjcOFyA9XYg3mkC4rVRmVEAF3dxsfd9EhgvrUWpcivWng
992x92trKFoR5fXqAulwXnnTteS+OfCo9ZhWpeRhSse6LzzGBFBiezwo1mCC
1uurPYPnStBx1649p6+OwI5Ar5+3f7KArvDbtCXvI7qHfTy9+b8uKGlz3rPZ
lwXTXuMr9shm4+ylWAsSdx/s+OwycgNocPQ1z5+b05+wh3VD/vjrGfi8aExS
WMFAvvsUzZGdPvhfXfxk8s9JCHX8xvU4jI3Rh37lTtf4gKbn3+cdFfVw98bY
HlMCG200aTfszD2BcjrwZ6ZoMfi2McUPRpLBrPOZ2OE5An6yrbzgUz0GP0aM
+wVNUrCQ551+uA8V06VDuoUCZyHv0ryD2qtZfHdz/SfFAAKuyPlk3buTAO5e
bmvvc83h0TNNh8UuDGF2fQOFe+MEHL7+TfecDB2n+Gy6Yn27ccn1Yw9/1gSk
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
hxy3/wNRxRKg
     "]], {}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{217.49097353960795`, 148.91712249348066`},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{{0, 2}, {0, 2}, {-1.0963784538895665`, 0.9998994536965439}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{0.8290827561955505, -2.9517452170483125`, 1.4317199296690701`},
  ViewVertical->{-0.1144155808983458, 0.40734853203585314`, 
   0.9060773964159629}]], "Output",
 CellChangeTimes->{3.940061146360948*^9},
 CellLabel->"Out[618]=",
 CellID->200879086,ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzEvQeYVFXyPtzbk3OeAYYhg0QTJowjiAoKkqOSGaIiiCCIMOScBRlBMaCC
OWfFHMfNObmGddd1dde0yVBfpXPuubdPzwzu/r8fz3Obnu7bt2+fqnrrrTp1
6gyYOH/61Esnzp8xeWKb8+ZNvHz6jMlXtDl3zjx8KeV7sVi8TSz2vSvbxFLx
OcRi/od2sdj/9Qt30kNuNT6k0LMUepZBz+K1/PdhfKiO6b/R0Q/m8NOMw7Hw
v8N6Er+exi+l1Opr/IlUsF9m/42IXjzymUy+WkZtQ9+Vyi+lup+j5/Fq+1vs
5UYlfF3Cx3LsTfJ142Bvyv6Lh2+U3xvpXPku/5ULY/bS0XGqdk4NXepu/6UK
YqHfxpdKT3a7w5zr3eO/Xn74etX2esFrfElXXPcmXorOzXNuo9q9jdRGrnef
nOUOBZ2b28j1ap1zQ9e733+9nO96vQcSr0fnZjfx9yZc70E5y3yfGfesJl6v
Nnq9h5wP1rofzPB8sDHhOrZ4OPIZc8P8g7LCrwXn+X6Bq4jD7dvp4WextGq9
kDn4Gmd6vjzyI3w3xN/VmJENb3yAjgjUTuXHVPc8el9xqjrysqtAte5l4p5b
+C63rd/rAiGdG6/2vnx64s07Z7svW2uKpUXP5pPZmfj0YHhTfgR/JCXxZqpj
CabKFzojfCFXOLXul+d4PtuYZ/LdZG74tYYh+LSY/YJacwH1taEvzQufd9ie
N6Ypd+O7og/VHmjkYmXf/TOH/19/JjcYoYhdppr7NVrStEuFdNdekn+8T5L3
N+miCV4nzXMp9/4GBT/rcMzYj+fyrneN6Yn8Bst+uH759OnTa2tqauig5xcn
fFGme3/mptwvygt/N9/PEH4tzb06HYenTZuGt4TPEEzwuXmNDv3mr8O/jr8w
PRiow86vdjDWfLn5vXZg6N+pwXnWjOMiOvc3GX0x5/HrFyYOE90s/4YU/jkp
ZuhidqTx9vFv/pn0b2zCLwujQCLOiyUmUTcPAPUKD5o7ErXueRFA4/f6ync1
RVTmlzo/kk/jC4R/OJ3axB/uijQlcTxqg1ENWb+AeIJPcmDRCpvjj1P00j5J
xtLcn2gFmi3XsoLkCxzZ74wYR60dqgagP3Qy0+0s+vO4pgsK9BcUeX6Afju+
1Nht+/yxSqLWvcUzg9u25/IFsujPbkc+7oa+4nvWsAqT/RR5zXzeeD/fj4r4
A/51PqJ6ddMH2txyzv8vd+xYTvhXzKeHOH1zvNbeH6gi8GjTy3F6pioRAq3C
4DXfndITaNqdhsbRd6eX6WvO2MbigqPmXmWc+Z0Ue4v8Kf6V9EZ3/jvV3Jy5
0uj//v6mNW0kHZmHUFCV3ejB//DGJh75wFltdGRuB7Nr+E7pD/jf3KloSUPm
k+Kaj4y2CUZcAxKET3Nfs881O/MvfsyojoX/faf7lpAzAah4eFM86uiz+TM8
r7FE3PsV7pFmbtp3s6Ebi9wsnzeg0UFOwCjliCE80uRQ6HedYW9aeaNRcP0N
twXj6aNd9p/xlLHAxRu3X+v8PDAjIg46w33PuBSPX/JFr+fJ1Y/E1WR6BuUi
OwC+IdNg74AIIPpLAormzQDoDfp+vo/XnciP6e757g/OC39FbSwWJheha4mX
bkBj4h46m9/48PAzzTXcmvj76KYi9K02GAqrRYftaz5VioQ3fIZw3hD/C8Yk
tdZ5uTq4hVrnTKVbR6QueiMhzJ/U2Hg0kf1p7s0dvORZgpPDV+bfkx/+jWKY
yVTreH48IgDJSvbjI6/5rGa4MyBN5ZVZnt8Y4Wt8JY3v7DlJxyIYR/vdR/Nj
YzpgvCvrgIOZjQ8Da4NCxi0x+7uj2G7uk++/2HMe/8Y4vVRknwnZOCIROtGL
vU8fT53oOS/Z7wndu8+x+n7PFfIrkvMsn8fN8txpQRPvPsVz3rD//ndcGnxV
U2mZvQUf7S7wvDbJc+uBMIYf2Y/IDs6rNhdTVxUyNP6qphHhdM/9rflf3rPI
Pc19zTCDZGnfCfKyl8wlmkVeE3+BT4mGHtlv4fFPDXycD53sv1H6w4+c5YUY
qI/lNfDzQp/9Lj8v8Mq1ei6Dc7K8YxM5Wui29iS7fdYvNezh9p7jdJMybW2f
yVD7vGLYbfjod3b4PL6SfGkDwtJ8YUgMJj/k+W2h13wpNxXN0PD9CdH0KFPE
xfIZTZ2m4txTUt7tG42B/NoRydn3Gw2Uuzdzrmd81LGF9GGIMz5iXayXdHvV
eutNmLIH5/LV7msyhZJmLuWij9GjpMQv9HsyPReXUOaILD/bM3yS4mNCXhsL
zFFHA85slwrOtwrpDt/cWfpLEgabDU1VcEj45x52hixxGIOCiYY/URsMZKp7
Ffq4LyEczP5zPkBnVv0KGM5AsLt1QNJ6X8mGlNhvr+6aDrVDcmDAicUwuro1
wK4SgK3F8NWGIvhsdRF8uKwQ3l5UAPtH5MDuwdmw6cIs6N7MMlMe2DPt4Dkp
cyuwIc6AJuXJyaOHhJmEpEp3bHiwRaMtVEdOZtXKSnqVI1LTdPv7p8szeqzg
e6gdnQtwbzOAOysAbisHuKkMevbsCbC7FGA7DvWmYvjH2iL4eEUhvLekAH61
IB/empMHz0/PhYcn5MC9F2fDNX0yoXNZPDTkp9mv9FGVwe5/DbJzvtWs8Hmu
JwyZe0/fAAeCs8MYmRyW7/UMtSbsmpyeUjgIGe5Ufmxp76n2kjyovTgP4OHm
AA80k8G/Gwf/Dhz8W8qgbnoHqKvpALATB39LMfx7fRF8uqoQ/rS0AH53VQH8
eF4+vDIrF56YnAMPjMuGO8dkw60jsmDfkCy47NR0aF/M4j01PP78bEho1M0d
uaMZeq0JsSCPOmdM4jRwClyJzPwIiFO+57XJ/NgmGMMJ+QDPtAB4Eo/HmstY
PojjeJ+O5UEcy1vxuFGVmTBjWzF8vbEIvlhTBB/VFsK7VxfAL67Mhzcvy4PD
03LhIVTme1CZbx+VBfuHZcF1F2XClv4ZcE77VKPUp3ynMa2OOVoWGdPaZGM/
R8a0KaGAL53mG0QJadrx19ROxAF8rhLgcIvwQD4SGchDeBwQVKibhoo5tb1F
hX8iKvwNUeGDawrgNwvz4Ydz8+Dlmbnw5JQcuB8V8xAq5i2omHsHZ8KOCzNh
w/kZMPmENGhTyJh3sh3CDM8PGBQaVp8KfqdhnaGfTQwd093QsbYmmM/zBbsm
01HjpO0m8GMn83VQOwmH+PlKGeZnGxjme2iYy4Nhjtj/f9D+P0P7Jz/3B/Rz
v5gvAPwCAvCjE0VnbxuZBTcOzYLdqLObUWfXnpsBy/ukw8XHpBmndGLwy63j
C7Q4jMe+YfxOwy0qd4TTEj5ayd8Q61KtT2VwX8SBfaFSBpn0mAb5aRrk5n5d
PqiDvL8MYG+pAMO1AgzfIjB8icDw8XLR599flQ8/vSIf3rg0AAcC2puHZ0Ed
6vN21Of152XAqnMyYOnZ6bDwzHRoWfA9vs0T/i9GWio5joj653jGeRk/duNL
Vx+XkTjOz7UIlPkpd6ybBWN9lzqzW8sYgOH6UsaNusntmbh9u6kI/rVOnNpf
cbz/iKzitzjeP0b8eA0d29NTxbHdMToLbkCntmtgJmzqlwFrUKlre6fD4rPS
Yf7p6dCiRQsejp6e8fZBykWhkQ+N3n8z8hJcN6Tj6VG3Rx+gd3zJqKX82IO/
onYyjv5LlREJRLT9KRz9JyJSuLdC+NztQingRuRydSqFKSiFHcUMLV8htHy+
uhD+gu7wPXSHv0UU/xlq/fcRXl6aIRTjvkuy4cBI0fptF2Sw1q9Erb+GtP6M
dBhyckvoXJnPw3N8ckmEPFHTJeHyEHNeUknIZY/IBnx6soUfj2maBFw7cKXw
gAPst6kUCHf2lbI91FzYDeqXVLI9fIPY8w/Enk9WiC2QLyVbIOwhlv3YRJHC
HUpMyB42oi9d0zewhytOS4NBJ7WEEypTXEmEfleAQWHnasbQZd8hhxsZ/6Ts
+3x+rdHABBwB+Oa6NvPjcXxpiz9RDHLH37WCx/F4lAghjv/9KoM7FY9cOdxQ
yk6WrWE7WoPBpJWF8Gck2m8vIkvIg9dn58KzNbnwiEY6dzjkcGt/Yw3pIWuY
dXIa9Gwhcf1xyeQQsRK1iIZD0Ei9XyQoCsTnu4D88V1SQz7iEwp6NvLjCfY+
Du8sDcvr+RbJZebazaPNRG7sRypUduUquzKVndgP+24Hxb5AFPuotoBR7FdX
CoK9iAj2+CTkopckclGyn9V9hSSR/Qw7pSXbz/QT0+DCo5jwH+v5+T64GOiI
LgJSvnSMu76h1pVQJAXG6iPF3t8lIxW6xb0xqxCQl5dH0sGPo3xijkU1JqHH
HXSLSumucmFX5G8OlDGNJaQjf1NzQTeom4j/9+sWSyW5xYphbJ+uMLp3V7hx
TDnsGl4Gd491KOxAobDr0NuvQOkQu7oK2VWfEzvDTLSsGowg+ndiCR2TTEIM
cmpS0UxktZ5Ym0QMYlWprsz41OqEl+mVk+Rsv1mlR83KOEGzPMhYP/27Xm6f
ZUTMq+7qo/hwLIhkdrhFrE3jMiJLIjk9pJ7IldOhcssL6mZ04KiOrInlNKk9
1C9oAf9WJPxwWQG8u7gA7p9aAXdOqoBRZ3eBEdVd4izGPLjo9C5Q268EyXAG
B3er+goZvro6Hc5BcV3WKw2moUFN7UkiE0A8OvjpFkTMJLwLiAMd6TUhz97A
qoHQefL1R547i9yxLL9Jt8IyUMew9FwLllOcxBQ7tmmCetgIqyIkrLrLOkLd
bBGQERbsLpHv2Spu6z/rBP6IPnyIruvdq/PhlwiBP7hcw/HJAoHrLyqFAad1
5s/269XZxohXI/yN6FUFQ9V1kYFN7pkKxzbnPFIPz8/3ZRykOEomZOI0MBzk
8yUKdNBjQTL8sD6X+XQnz5Hi5jk0d9TERJsKhX3k4R2lFtlqRvSA+n1tRB6p
gTyebk4yiZNQYj0csTQLPNFDinMqlrrLO4ooVCxwszAJqCvhFBPZD2EdeaVv
NhCrK+QMyZ8wovwDMopfL6CoMg/qkdm9OF28E7EKSt/VDcqEq/oWQ79TOsPF
p1fZqJI80+VoSOSZpqAhTTo+FZrlfo8GM9Y9mWx4yNSEdspJTZwtT3OH2Vpk
geeLDolUZbi3l7puHk2pbtFRcRpq/BIdaDpiMtpHJ46261VwtOvm6UjjiFsO
cKv6/7064tfJqLvG8O+1RfAZItdfELneWayGgFzgVYwrD9fkWB53+0iKLTPh
2gESW16CI37uyZ1h+ulFPOJDkAtcekpgDBOOYzRp0oBviqh046m7EPL5UncH
9TU71tYZpFpnwMPwNOmzUeqsYJh9Q83KXUGymtcx1kmCxrs1ZLm9TIb7Jg0e
OWzB4d5TwpSZFB02F1nq9TFSr/cpdFkgoQvlp5+ekgMPjc9m507DvX9okFMl
2jynuoiHfPgpVXzvsxF7ZpwkSj4RlfzYZgwe3ezw+piNLBUxE+tNrQgJja0p
6KtJLMELOeg7+DHVlUEA8wZWmkPdwk50sATiJACygGD4SWyPNCO8URHUXaGa
jhrP0M9iKA8zXxLFzar9+wK8YZFvKUrAmrevkujlzUtz4flpkiakCPLg6Cy4
ZXgWXO+w4DXKgkf2EjEQCyYxsOYfL5p/jIhCpkMCWfAzxX1JHB1hpi8tGGY7
9K/yY44M87ZS4aRRXqqIwmO9oFNMxjk9GOewqsdpoGPdeah5mO+vCIb6Hme4
D6rmH9Bg46ZSgXfSfPS6lMBieMeA/V9rC5ki/YUpUj4HHT+6XBJYz9aI5t81
VlInBDQUtG/uF9DaZWeL1yVae8lJRTzcRvPHH8tg08BoLxJdbCCac1c78Njm
eqznFbkMyRZqJ+SZcRbgzgyA+8mAubDKyTDHaYxFnTMCRHmoAmqGdnfHmcRz
b0Wss4zzXQ2MtVFtd6wNw1klKEPJWQrOfzk/j4H9lZmCNJQwJPW+CYPzPYMk
VcWcVBO0S5CT0r33xvEeeEJLmHqCuFJHvbvYUfZlRi+Q/+Y1qufJJrl8IB/i
NC/zY3ogjWddrRdgJ6BxOeTjKIC6KzsRxhh9f4Qx5uFmsbQQvtTvaEUCofdQ
JN1U+csDoRzyCMV42z2EN8WcKaFrUbb83+sKFXMKmHa+j7STsua/QNyJ5g8J
/vehEexUbxulnpN6FcFFJ7aEASiYyWQEKJRxaARHK+50jkomhBgqmdmN2kRC
hsPnfn/Gj5kihfF5Xtyx0J4IOWwfjzRzJUAmwdCDB3IbkgDKoYcDQeVh0yBJ
3FEWSOLmUnHC1yvn2VnMcxZ1E9tB3YR2CXD03mJhmj+ZlwdvXZYLL88QSHp4
gjhjwza3ePJXw04WtjkQpXFhz5ZsIuNRGpcIJIkkIiMWoJN646mN2kiCOPg9
xyhsSvynrlGQOHzsPTVKdBiaSDpoEHXzO/FhRIGcRyhPlvB64wz80iBpHSqP
HRVI5FbHMVgWWixSUfsQ0CqEFy9vDtvGtIVNo9rCQzUVcDfG0AfGlXPeY8+I
MpklRdC62frkjITMLoVlE04pYjY6+oQiuAClMiFiH0d5pOLDsP7y3/gjt5Q0
K+P35cOBQJ72o5MIJE7SiGW76MSuou6KTmIPD1awFNRliGmkBcK4t9wIhARx
V3ksLzCRg2UilNscDxLhquRJ6pcQV67p3y3WkoUz5fyusB2FsgWFMq5vV7i4
T1cY07srjKzuAsPO6sLnDD6jC6wbUJrguY2p1JxWxCECxcsUmI3qWQT9UTBs
KsegYCpYMJ2OTC6jG5CLb6FIjhXKe3JREco4EgqHWo3YR1YQCzxsbcM6C/5/
e6tYWCYqj5BMuifK5HaVCzuSUiub+hUtoW5ae0k4XSgJJ3YoSGD/ic7kUySw
f1kqjOrXyqhe19CNSOzWwaUw6HSR0YWndoZFGDBvMKlcNRh6j4xlOpJY8vIj
exZC/+NbssFcfAzDWFK58GCqP3HqgE0MYUc/qKr2OfJ3VI4kjepjMkzw64QE
qVG/4aNRxjaIStUM6U4+Hj13alQILIM4Y1WPQAhRQdwqgqib2YETSTUDu7Eg
GL2uFeRifzK+HcbQhfA5zc0i3frjEvXqSrdeRbr1zNQceHC8Fh4hci3vXwIX
oDAoc3HJGVXs2ZcqvaX5EJO1JXpLRtIPhUFGck57SQl28liEr66yvysX+5bk
iTiiljdC3OBTEYVEE5tKDJVlKcRJCDSeJloQjBLXnWHiYysGtAUSA+c+idHS
mN9DDyERpPlEQOffVoZeZ1YHDLSNDGxo4fj0+oUtKFPO/vxz9OefLC+AP1+j
7GqhyIF8OrErk9g7OIoy55k2uB6HMjgPA+tZZxTBjNOLbCqWgMrQXmMQY1EO
PQSsOnrE4AOrfknNw67N90ni7/qaI4mYI4YUVwwaJKdGzSHO/CmFfTb72XsJ
guou75jil8KhMlcSdFWURTc2CErfoTj4CDxHicYfxTK5tLWIXTkJ5LUrmsO/
EKH+jnSXEIpIFmU7fjZPDIMmCp+flsMpvfu0ImevunRCqLlnF3O245yTJONB
E7ZutpUoLxkGIdSYo1OhPEdSfB2SSYVVXk1CF6aRFG1i1ZlINwlX70KupHWt
vtWoPsH+TT7CF2XfE81xP8byVIwT68pJsC5Dw8jC6rdWMbjVb6mCmsEMfCrY
FJJpnAQaOybAt9vLgiQ5ZWVvLRXObMS6tySIYHaInVHWhLizwTvKGf51meLd
Qsme1F8qdmYSWfdoIotszdSkrNVwfibaGn3/0JMTs7VECs5H0Y5FsfZpJ5h3
JGJtqAKFhRdZSiRiPRzI9rAr26AKIHBiImV7MyJRnd04Jj0q0agwU1wTjYmN
ZngFqryabHZOx4hA4yRPttA4SZFIBZEHkuUtjjwNZnqYN5kryfO6ce04XUDY
aTLvJl1gJkQoXXDXGDFTk5jcqtUtRCaWIZlYdKaw78FI9GafHM6Ikamef1xL
NtXugp/tPbbhS7qc3yThWpv1Fe0n6djiK7VxhRwiKZ8412U8foLxOAzFkVyC
ZSVitEoNU2RuZG5HQuIYO0SCbo1mUdJQd1kHCqPKUq2g6YJRsz1QSh++tZQQ
+paICd9QImZseb2KfZuY8R4U+T9WCzp/qPzR5KKJPz6n/JFS/+QuTcC100mC
khlTlsjkoykEnnaik5UjMz5OzHhUj1ToVi7BV7tkcudR75dc2kn7vfgWw/hk
G6y9EovN4k8kYnAoGRrjbGicbTUlgF6bGUoxkgwIvvjUVPan7HbFp6ayIFMt
x2SXOpskfaBUBNk9EGQThUmTCvQV/1JM/miZcJ/fISb//IqAgz47NZhcODBC
Uqxu5QAFahRBL9KAgLLa0bQf8R9jwyO7c2DwnWWZtGmMz73KUp4goAumJzjS
o5c+5hOz+XqJEJwwkZNcnGkcR5M4VaQKwChRNkn6EIqz7tIOdChFSg3HDrcJ
JAeCjZNcSbpGqskkuytMpMhMd13SDj5dWcDe9oMlYqq/VSJlmO1TmtA95CR0
t1NC10FnMlUiUxNPKYKLTywK5Q4pgT702EI4D6XrmGpbj3R9q1BlHZgoA3fh
9ZWCJu0v6Mf0UPchnvwIrPejmP2mpgjbwC+jb9wGhRKdq6QlME8JAvNDTH8P
srxVthTIpJB0SUluKyXpQs1F3SwYp1hRx0nSJG+S835H1vtKgghGo0hiVpSR
pPwXWd5LlzeXdMvotjC+b1dYO6wNrBraBg5NlFwYlbE/oVVatPTCzMoyLJs8
cbVEkzQzS6H9GJT3WT07W0um7CTJ+lw8yJJV3m3sCPvmVFXKqhS1Mbf0Nxkn
blgHXHnXel7zVQGGbulDUQTXJzemBIEOpIcyZkS5kDtb+BZjTwui0sDAY4F1
4z3Wr2vJWlC/tqVoQIrVgDgpAHH3qArURUA8INcxqRVqBTvGtoWtqAKPz6iA
dcPbsgqM6d0FRp4t2RzKvA05swtsGlQKaweUcoKa5nDWOQlqKgOjc+eemgYz
T5J06Fk9j7JgTrFTxOQjKsDPzk8QvCVbWUKvqv8Hgucr+VYb+opn/sSPBfxZ
Wh/WRMG7edIYpyMQCTRqMgQsHoRMOaGQSaBdzJ69OlJtFLoVfhrJPcXKPU5i
j3VFwZcEOM8svFhKAiZLKq9uUjvOJBEG0N+fm4k7jKxoXpqY+A/Vi1NktWNo
KWzWtN7A07rAgFM7wwW9OsP8PsWhPDjZPjHxy05Js7TMplw1k3HusS2NJw8E
71u/I6uZG/Lk/41oQ699IKIllRJwb6j8yyfae8qVU6dB/WYVbRTVhVOnuC47
JgadynKlLAfJFY9ArClWrHGSKp2qBq0p2jgVcMY6CLRH3Pi1F7eDv2ly6p1F
kq1ltj1b2PZjDtu+RZOES84r4cozKrZxJ53c6g8KskYcH87YMrSjaNWmW0dF
G8LQxkSblJA1Qb6+Zjx/FPkKZm8sOVLZOmn0FJZt/aaqiFyFk6W4BquBEkMz
1K/hiQ2KuW8uTbVCTWGhdoW66WqYlO6tcyh3hJy9Mb85z418ShkunUYkYvZT
JWavaOrXpd0m7Uihs0k7XnpmUaik2haTkMEeH6R/KY4iqY4Qg41IlZ+d978y
U5umNHSb0SCo3JJJrRK+WqdOnb6LEG3Aq0KMClBTwDY2CmSHRkkueGaHNPav
ZJYoof18kFHi49EMu3UzVJIoUfa70SAqQsG+QgpGEn3+smacs/yjQvCvr8xj
qZoEl6XbYyQyJt9rFmwS3aa85ahTq2xCn/KW05wEF0l16HGFNnfZN7DVVh6L
yfe8plYrS7kSWgv+F5JPNRIP1cez0N/lE0r5Q+R06xZ0olqK7y70jVUNilyi
pnQjcxs5sfO9qSSLJM1IHCdJxwmNyd/6BK2zBRQtw4YizmASIO9EkmVA+Q8K
yj+ZqwnqWVILZmoy7hgVZDI3O5lMErSpBXNnDdzMlxE0mS8JO4mgfZ63b0jQ
RlhG4D5B18YSBR06z1dFFgTtf9Abo09UH80FGzGpmcmPSLlZo1Lmul/OZTUg
YQmWUnmKrX51S2PNRqj7SzIYmJFpr6zUwu72ZPQo7W4NSFtoNQE1TZYa035B
TftdZzrCRNGUIyE3TJEV5ToP6PoXl1bTPN3004SpuVMSoaQX5a5R4qN7hEw7
VpVM5DzuYYt2c9O1jQgarKAbWgmVEMTzt77NfwuQH95QYkGcbewIJE1euGZQ
92DaKLmkmUaptHlZjVoxvsHfSnwZ/0rX1wjE6WSSN0s9hYQe6xKI/LrihLQ2
Gzoi+u5LyMjbydRsJC32ijM1S1MVZOCUPHHR3BBqKry68nRhXlRc4k5XkJET
mpvU2CgVOw1sK49FB4GVivwEjzh9rKuxlVDVCfrg6xTB3/w7/lsag3Jvjcfc
gtu6+Z2obiQK5Q2LPZi3JTHRVATGSeS4Ey3dyn9VJUk/RSVNbJpcNR7CrQ24
T2+fpn/uo4e9LP0oM9sZZmdfaTrFTGqYUIorJGZLhQQVeJlFiuTHydivdeDd
jaNpYoOuR2V37hzkeE2KEuc2Bt+umSzvrfJI34fx58h/0nEg1EEunPuOpRod
MT5AJJ8wseETvo/7/5ofS/njivUJITTbZIJH12oKpwKP1KB+Q5W1fdaCUpmQ
MvTNVQCCebJtPFgBUoyF7wu0gCWucRahP1dhqDakhLQhGRZsCbRhFzp8yqrY
epkF4uzfdFjdg1qFTCV/NyhXD+DfDa6rOLg2RZgu/I/T5JrBAuXrybWBLVL9
vFkfFxFoZD+rhmcslcK7VQamN4e3V+4v+bGkQS0wlbGJ5eDhilj09k5eXGOw
A1EViBvivt/qQCxulUAAPkO0gIKwvSVWK2oGIGysqBQ9UcxgDrBPdUc0IteZ
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
Kc76hT50fjN5mf/CN1IYGEv5fCdh7dcw8teRAIZ7oZiGaTeXhjQsRXvw3F4e
Ox6VrTyARcMhbyjTSbpSSdqolv17fTF8RiHyikL44zWFHCKvGtYW3ro8H15E
/vhUTVjLTP2MmSLe6sydjEZNG4matvBMqRAc7HhqmSJ2ami0HS2lD08//igb
xqinrj3hhBN8zTN8a0ZV2YZ5Tj/Gqtjt/HdzIYFbS4M98hxPa4Ji3ngtutWs
42ltzsWvXlpEkBnVr2CFGi1Hcmc3RLvyrHaFknubFZc2SnxJagXrC4x6xVjd
0hjI8hnIOGoh1TIJaa96heJjqXhJt8GJzbscMJ3tL+VwmXti0xhwxSPq2jGB
rrmIttfRsx0SKn+1wYTKRfCnZYHbZUY424lTxof1zCYHaa0yItpKnhTJYD2j
dZFcG3NysMtcdELYrY256JhCm6ZGPYu5kJaoZaw2Gp8M9eDecR5VvFUQMdAy
szFmyFU2C4XBDGhJXCXPa5iUS3QONyshu2wqVfiSomSxqJZlWC3jlisBl2Mn
KR4xjd0k0zkFMfyfFGBDQSqfUM6axl9jsn8+TdsVaBpN89l6FpnjdUEspGqp
rGE9ScP8+mVo3e5STT6XwDebTPJZPOa76DEvOacr3DmpgmkdRRyPTsrlCbe7
tA5w/3CJOEi/thKtQ/1ardMglICmjc5Jx0wtINdeRZb2+cpdTtd0n4Nl3h5w
vsVCpyZXuOM9CnezKFwtKZzdnfiZ5N7TxLkEb9ReJpRaPuiUjYb2h/IoXElI
4ZyFXwkKl2oVjiIARCYJajPDQS3RMkQ1WCdqVTeOyNn6AtbEWHM36PWoXGSS
97pip7ygOBrjBip3m8b1d9h9Hg6Wx04QiDOqd2t5IrQZ1XPI2n8Q3j5fQ260
CN533Oibc/KZrFGw+yC1TbkkR4PdbNhLs2+DsmA717ogWdO5j6UIb5Rtnqo9
R8mNzjw57EZ99S6jnGyzU23l0zwfZ+vlap5/Avc4z8f28yPnHYW7PRfakdnr
YDWUJRI+tyONe+BgtWtDfrAt5s0NhK+OCkrtQPu4UyHPSrGDNVKLo2LpbmDg
+FZlbWlWCesuaUtKCDXns4s1mtjMCXILG9VEvidtz2NihCQ+1mhinBroxpui
ifuE0NUvbQn1SyqhfnElO1rSxC/Q0X6MjvaDpYVcfHoxAqEhdI9TxRU1nkdC
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
t0DOxfUoQwx54Z3btjK8L+BcfCq44mo8P1Ox2D+xtdpH6hDR3ouV3ooFV10B
Qzs4MtMbHAEMceXeUiqVVxuGuOJv4Plvjdj7Mwpxnz4f4/2M/2fCJEsIiIsJ
iBiza/uAEuCO5Z9vn05xqqokGaNKRc3FyiHWiLz7smO9ZJTRL/F8HMZMLJaJ
7pE47NZjY/32HyafZYWaR8DQFDRQnr0EGDqFDeyN527nWRYNq0159mIVJi0+
tLq7epAe+8qLoPc08faAfQTBUEu1fnp/VT7mWj4Pf73WW4NF+9S+cflOzhex
ktpZWVzRQKPCmwsS1UtzEjlasn5UvnquLJnjbU/PkZ2diLw9NpNUTWmmOjoO
QziBRulEBhoPkpg7QA8PGieKWDwyUspRK3vGqZU94tS4rvJ+E7rnqqp+8kve
PSjBEY3Xk2jEBQIj5Udj5ALaNYrb7qTSkqaWDcnnKj9uwA8RGWtn0XVI1+IT
ZY3V0/OFjs8t9JFxqWAO2pHQR99C1djCMF5Ed0AwEOh8VT/oaXoDeimpxTcs
JopadE/JqNPKdM5UJ3xSMzmHmVhCj6MTcxweekZRWR1ZZh7duiEydx4jZ3YP
k5OyKXbYWTqclM0caiyxN2ussXFiiD4pj7OKHcRDb5auwHmq4RJHJPusoJyT
QQkKz1mrLZxFc3oinsNe/GdnglksOozsF+kfRjs9m5rIm/laLOqayAu5jlhk
AWRWEmixWHcgX9VV02NPHv3N0mN7LmaP8NSRuo2tuFG4bk1L9frqlurv7B2m
s3eIqDoY+YsNTdXHGHxt10UMI+kadJIpTguEy8glg/JZMJ4ZF8xInJuOiGgM
A5KhVLWaMDldj8vcpWPDJq1S3luOYEDliCua2JiUO1yC+fXSdZ+sBztrSXcX
y727dc02xhaTIYPB+3MS5PxMqKQ3qTuU5/UOw27RN0ZjklEZElbG+lkZBixx
4j6TGYnKetq+Lu5uR0ffq1jfVc0ZEFbVy3QrQKKqXlqkqgmPwOS5Vd3V8pIu
6sy8K+wUiz5Oj+SudlwSQbQEKfeV5Du6EbR8aJY0mKLui0LJi3MaqTVEy81F
BRz+xboy7DF9fl4yryfEPtOn5siaQswmeHSmTELGOnSmJqaYXCdaE4IPfuCd
eo0hLgEYJhv70F97tzhVQdSc211mA0FQwmsUQSnnB7ztweE4bstlU0OCEpfT
zXRp3TqeziWD8p3Pc2BslrqPLkOIy3MzUhifj9FZ9sl5gs5n6LJ9lkgGcfki
ofNlQuerSw0RN40pDPXk55FUebm8Cfeg4v8v65dperJqBDmhNj1Kkt4GiWOb
mibdgrLwMSImyDm2dyd1eHyO016BM7Y/6WLO2PhY1XqSJ5+xrXpKpY7wLeth
lnZKTyvO2eOvTmMliYmeTtoF1ISSlDO2M1fjEjZ2dAykaVCY74JDU1/Ar7H3
UzEoW/PL9ODfFfSX8GUbc6rGH9cvWmN586WcqIMiL27qGHAedwXpobKSK5xp
UFjDqgcBh7GkAd/xqMsxfIXHsMholh/w8AQefTi0s5o9pDPaeCTmqcPHHodR
M9KTfPGl90zyBR+DZwdHYSTqLNLe2kitHSiHa8wTBiSxRAC1FtaSOg1jDtcw
6gFL1F0K3AN2O/5Jp7igpOuLG7puM/OvLWjeqRF3d3YMqBej+XdfdjzAGMb0
H3PsNjtAbUqG3fJKvHuwDmJkYiAjLx7soGq39FS1VfTY3JN+FdUrNAilj7N6
ebGqXd9DVc0eoCpKu6iLW9t6Fo8g6sd7AyeL72gPHue5QHqxiJn34YZhUrgT
/9G5WZ4Oi09WJHMleWq/juruaZnq9XmJ6oXZjbjLYtuYAu6MwBqoN5bIKijs
f8Mu1xfmY88jMgQEzLmSbcGZAjmXiqH5agU9sC7+/ilJLDGLLWiivwYeI363
K7rHqeXdBZYlWmLCm1yIorSWmbtIZu4lmbl/GE7gcn+FOXOSZOapEgEm3m/3
aEhcEpyh4ap6jADzAdKaDxIsz5OcAzChNXESN8B8zpzECZhnpkvB+CWSh4Ao
Xv7CklTOKgcCc7kcvU0x5nVdiMHbjqePc2pas4j8DIrNMCGPTMhhWI6hh//I
7c/S4HtDj61deJYjdyM+cq/UR25TjOHpp9fKihMjMVm6XxHr9KL1FYnJ+Ioa
C/S9rKMFTNaOpqBss/AS+MjPteF/tdsINrp8jDxkewRkoVV8LnDLLyQgazZ1
5MGIZeOv1FNUJeVQd7wwMlRjl1+M2+gvv9Ah+9WVLdRLFS3U4Smt1UynEbGT
mjawk9o5rlDdNydHvcUlGLcAbQDpFKBnJLNpDkCW010dIvJWPyD1pKMT2nk0
QhLnKnPg5vSBdh93W0oSTWiA5NLeaWFUqOlohKIbMdJjCIvfnOiCkm7CDKgz
ek2KC03com7Pgia01GaMozYZiHG6+IxhafzTxtA0wJKewNu6tZqQy068wq3W
4BV3ZGE6k3Ucr5jSlXVi7fbrVO2261T1ymK5Yy9R1RXFBp38uLi3nbq4p51s
O6TTOJ/EDzZ1qja8LGVoJ96zHFy18WRyHHqiYoO5Jh56kqw8r+lp5CUihR8Z
ek7NVK+VJarnZgk9cXEgnQBLGhM0sSEXnYh15RJoZpIulOV6sKiRxsIdFTb1
quH5qmJYPp+UEbMBRbFlE+ksSE5UY9B4jYthXW+Rm6Doih7yV4/9xcbHhOzc
0h93U7po6MLZNxQHdlxY4ugcL0pkkiLlhazqLSQ9iaRc7QGt95P0NLITJH2E
SPooEezxMld+XiDCQRY+v1jyTqAqnqf/06+YXhrqwoduQ9KXDEmXiZEJiv5Y
D4V/zSrnOGVsX1wHBEUZG41uh0plRP7SoQVRozs4oCNYzYf0oe4hfbNOJK7U
icSluqRjmt5G6v3wM0hu9vpBe1V0VVOnYwQlncGdmyqHoL5TeidbXnoZKdI0
op1Xo9O8+IKDTv54l/Frh4ugrDCCMgCa9QlKAmbN1o48IJL/ZDcLMOvOtHHa
2Lg8c6LQdSUftF3JZpFpHV8r2zfV0gtiTt1cIVzcXJ1f2JzTiIg68Fi8/p3U
7TNyAurWkdDE28OdrA+aAcoyJEfwOLWqf7qT4oGyJHDS60hbkEwDPKf0EL+f
AMq17Tn0+27tDpzUbkeSQ86RV+tVK6d47YKfomFgFIdnr/qEbsx2IcraExMS
iZtQ68BmrChNejICmRdPdMSDvu7aXb3oZbU7e6nq1WOYjKIg26nqVWMcbOJx
8VAHK+ATMMtAV7wj2GllGsFObKzGnvpvdliNJnbFm9j5++jslKErHZ0kthGd
H9IDw1funJKpXiV0PjuzkVo9JI/vrbhUPqqUXaQORiukuscYXaoxuti9fExX
JBCKXycOJkAoZlggAmEQikOK6YyEA7OM8AmELuseB4+0S6vQ5Wo1iSpshgZC
NxJCIUa3DUhQO0mM7hliTu90qdHldpQuvc3D0DTeUZ2GIC2lS5Uu1z1FLkYP
aIw+MD2FUfowocsRpYTRpwijwFxp307qxik5LBxRq9EYVc8tFrwajL6oMfqq
IDQMhoauZJqCqqYYbg7r5qB+3qbnLLE3oT+XET1H05e5Y3RWRBhoVt98NbNP
nuewbpd91gSUfcxy3RGaoEP1bLvxpEExWpvDp0TPgpzUqlBwGSYvQDXaEjQU
6/w9hjzzEDxtwjztjtVqAt7E7bETno51efpVG5ep0creVqXHGa+5rSMz1YhQ
J9n9glR6atZ24PQjr1CuT4TebFV6LBH6H53uNmXv60mIHpjUWp/Sm+pTehN1
9+wcZ7PHBLqIbqKLyJS+H5ud4pS+wdSlg/NZiJ6NwtSThqujI8UoPj7E6FB6
rCSuWmKUfoEkR0NJankfSUqCqxCmEKlzr2am2opUxpgmu4KUbs/AEzKIHL+O
RCwU4y2ZqH5jvY33hC+mZdipJcUIQrHyKk7V7c91I5L3GFl68WQnYi6rzd29
+FFdOUb73XiSCQvehsHb0Fh18WhHHqzADTB6tWCgEWqP/DweWTdi2h6yaetd
Mgq1ikVf7M+giu5bMmbGxTylR8QY2n6hleovfI0vUKkXlyXxiJg7CLcoojNu
SalWc92wkFNlCFJgdgauKtQQgV7UEdGA/hMdrDBeuTnqMHbpKls9ooCVq4td
CVrAO0fYAlcZFOeQrh2gTulnWt4tLpStZnZNU/2v6cAewKqegl14ABv6xKvN
hN2thN0dg2zTVLCLj4WfD9Trj+jqvWlcEqvX2wjve4voQiDu0sUIAXsvvhQi
7/30QHuxLWIrRxagIh4GfkPxHvA+64I3DPKGfsDSVDPXU1fCZD8c+jllbh36
Hbk62wtc9AHuG5vNUn7BwHzPoX82gNtXgIs1J7u0ZDUppGh1pfl6AnHvqzuo
cT9I47rSoO/LAJqxnWLtQ7+rWBmzvPrEx19xRHUdwjfx70IoOGiZjH+C6uwG
zbafoAksFgDoWx+BPxEbwJlCSvT11NmjdQVeEE8J82UarLP7Fa0OHf1bZ9BR
a4cNcGhyaw4emTFaF3XwyPikt03PYQJzf3kf4sXEbKklWQTG67hLMIjAYzSB
i11le1QrW+xSgB2AfDooDM/UUrb0KwSHE7ntFrk+NHiAxngeyhf7F+bTJdIm
PSy/Rd/vqalcF/g3Q5hM15+6wawREflYNrKzqtvS0svnmyJksM1n96Rvu7Di
xPLAUwzbr5jWLQwIhx0K66eqFg4khAPPUMFW1FN8ijBbFrWeiTfRweyffBMF
zJaN4I84vbFcjpyIOJkdTS8syXFsBEjhp/VuJzvj/rmu4weBeQeBGWNuYCE8
ry0EXGhoeEArKj7fF+hvRp+zBWkUMd+j2z+aIADoN61ipgCajudaBuBjmKPV
OX0hIs2OIxaavk4UJbKlsOC6NFV0TSs1ncBMiFbF17ZSY7q0YnsBgC7rIcc6
mLQOoB17oZE6MFzshdkYrUuPE8V0UdOFfZoAfWa8aOOzdFQnSDv6uJoofQ++
nmkpTOqHiJXQyKvopgJCQ8A+NV+4Cp1sMH3Bg2nRxn5GmwoWvmaemaOT8U9a
yVC/IAaf79amLPg8f0C+k4Nar3fNH9CrZiCKd0URxcsCRPHEH6bxQlozHR6i
2AyhGCUVLAvQskQ61kyDMA93WR0/JfB22Krhrce19tGiSzli2Ff2T3Eh746o
CMCDbMeSz1dlDZDW5S6dmRI1jb/NL9uEiiJ4XrNHbFSw3MlNXUom4Luqaawd
ucF1KP5Vnc6p+j/v0t13W9PUL+lPzM4F/NQJkqayQ4E/pdPW7puS3h15cD14
vnxIPivqaDxHHMZW1capOKr7jWYR01EIxvSXoaSNVlmqeteg+BgGewpnTU3P
Hlbv7dY43zeYriy6qhbR3f+yDEdgh/s4v9emVSGjsElBVNFV6iyJQtz9Bk3B
6HQP817JeAvurvi+eKxjDCRyBLQZ5BdrOrHjAcV+lzVCVsZby11BvOYVbh7r
22Lcl8uSDRQ+jAd0ab6xohmP1Ec9zazceJEwPlsv8OSZGXpblxnJ+FVAJ+Yn
GuOwM3ZqjKOOhtz+mqFiMzy/vIW6sKwF5/QO6BwK+tigIX5O192n6+Xag5bA
ac5YHYJz9xo0OB+HpW0TsllTGJwD5XdOQodHEmnhRK6VVRGKlnWPU/1+SFqh
C2GdUA6cL9NuMXBeSZiC3ka0a1M/uMUJaruF8/30cWbRdYpr9ejoRMcxPlVC
n6dUNDeQfhuhcg90N0pwdF2OyVJ3EdHvIYo+OCtF3TCeMwJh2B106PIBPQyi
h65xeM4sL3dZbjKveNpuUjcFNlNcc3JbswzHU7i4xkvEJySr+cRy+DTG3OCO
Vz3Edq+2h3da9nBDWnu45viY7zXlhnWk/fsFF9g86pqVsmwcZIDGmYWj9uAM
gSy/lTsJV3sgo1xF7S4HwVtKZU0Pzf6lI6vD4DD9gGv2afoShSOKa5eSXn1e
U3hN+3pUdUCU35ncGJlgPTxVVPWvt6RF+BrvamHzxlLX7HtWe8X4CyASO5Oa
kTA0YoZJXBpA4jGyztBW13P0DgAz5dGnrsPgbAx4HErlGBfwCxzjJLuSnsY2
VGB4/5B4dWBovLp+GN30u8apthk8pFuF9JGJb6Zy5820W3P5SlN7mspmz/3W
Ij9s+DRL/AyjazLkSHOjoJAzBVuvC8PxDcMCFv8iXryLnb3ksauXqpjaVd2+
7vuxTF5dhxMVzs/x3j+7k+pOPSBXE1pUdlvGM19A3xbRx72IxhhwdX3Tem0Q
mM4wn1G0wxbUv/lsEJkHYi6AJLZC0EX62NxsLtYB0UZto4fgwVlZQLRsN4lT
pb07qGPT26iXV7ZQc4ZwCkZ/qG5c7AWpH1/cQj22qDmrg8+Y0k29lDbpGFIK
aHt/cZF0Qa0dKcIV+X9Q+l5C4V2T5bo8UyrX4zG6/mAow2xe0lVqd+b/5WJI
q+VE6ZUEH2NIm7ZVQ+ldROm9ROnqYeKGXE+nxCOj8LETVc0YV3jDlIb4vgV/
FwTC3UVZOi3RSN01RWN6phwSYI08VtaYoApzmthMsA51cbQ3tPMzCyM5zW0M
Zk5lcSGb0M+b+ZRWCc82oO/X6xzB6Nsmu92oW0bK1bdxWKZ8W3ogrzGhvUGI
SL29yNLbWLLCyukHrVhvD7BmVnoYzXw11bn69bZQ2xuKTY7CaA/42/K/Ja5S
1oiuqdZcJj5HOB92h8H7/larfN11n6dbrSQ9y3+6PJLyWyjlE0Ypm5lIGU6C
1ijlr/3OBw6fK3wpWrvtStfzoJZNhBI17CBGo5/G5rStmM2eFuNDY0wFK+Zu
rJjDGtSD40NpLIuhpKGg8QCzWVn3S1PVQ4TTB5nTCeoI8X7jIJK9fXM56F55
XRwGmdLfRkf6N11N+V6cmkUX0IIu8er2CYnqV+sbqz8Thr7BLMndTWV1osH2
QcH2xV3tVO3Gnqp2k+QUqit0hKEx0gygtTxQojvcUV080jFCVjuUXXKZxHDZ
OokRGuOFV1mhCWvYr55k/q2gfCxN1W2QwaUC5bR6LRAso4c3zVDenho03YT7
XqGbzZCmJ+ZlO9N9wdcwsBy6gsO5u8bkc4JiO2nnLaPy2Js+VZrB+cRvoBJw
Fe7L4ArIn0ktQEuzbJsskZwZg9xYzsMLmquH5jcXQq+WwSNeQqcyoU9PyaGz
XCfuzEIT/8MkUO+cDI86iUt4NcWJXNaD/oUPvYRoDP1MOhrUvLZVaDIT2iQv
KjSh5/XQvbW90lh7bxvolgxxpVYOzFCHRjRSh0clipamz3NyrGhpUBp6GqRm
SouelqDsGNgjKWoMzp0kpEHoR8s8lGa82qraRjRKhbBATMAXM9KB5xd4hLCu
EQbJ6JnuvitumLUSFqgRjugh5+F1QzNlF4RliUTK6PhAGT1Xy2jUCCfruU+Q
0fi4kNFMVUcu6wGZRiJb9e9YWws7wjnr0qEcY0OZPighmYRAhCVtp9ICAhZ2
Is0/5qle4ezpgY2SSjMWhi4IIraLY+VvtgRbGMaSfq1c5lI8r9sbpAUsRT1C
YK4Yho0BhOVQFjtxewnOEWA2cB4ji7NutAqE+DUddYIXEQKaPva+IQmhPN7Z
B6t6JUEYMV9CtSOcp2vro7J/GgvoQ0MTGM5oWd80OJ0XuWPI96niBJ4yeWsJ
j/ZQ56cnqhfKktRb5cnqwvI26tXKy9R9K3uoByt7qIfW9FDVS13wIlm7oafD
5Yt723uLjVpOW2Y27IkzKDaiM8zMIgZpIYRjwV8mM9SzGwWW0FyMKGZ6Yzx/
m0xgRy5Y6pftvz2gN7Zg1WzGT9VnbgDQHNfQYWHfxmFWzvZAUNNNoc0N+hpJ
N9MNxgkI0+PczEzOary1MIk96tMANL6eQ5nOHq1/GVDvzVD/w8e6Nur6KW3U
73iuMKRDmnqM5LTJT06lxwPzmqn75jZT7xCof2KuVgL1ywjg6gF5TxPgHqcr
9jxdsRg6cMekJJa1xwigkLvwm7cMgNEhMppATd9DX0J1AT/vATXpw1UWqGF6
bO6X4BQZ0dU9vVcey+mDBGqW06NdOX1ybJL6kQVr9rMJimcnJTte9tIhBWrF
sALU/MJ0DGkc6uFhNRgLXj/p4/QLS7yctvdYPOeX0VZZEc0W989wZbRZHna6
VLLEsK3n9s9Xw7t35MEuB7WMjswTNyyjUVrEICuW0bp9V1sd0noAGrNSdjHt
aOTcS0GxxPlL+VjMf2/7O/sqg20uTR9HVAW1Pn4+V9Wdaq3KSq/QS3WMPm4R
XR8HVQYPuZXBG6a14crg7/RIAtvD+IBViJwT6zwh4cZOF4VBMb5fOHkHxwqK
eR3q6EwHxTfXo5PL+uXJMh6NYnTqYqehrZNXQydXE41juG9TN1yA0CSbm/Cw
q/1DZEIS3gUUB4UPDxcSHx+VgOmY6mBpvto6pYvaNrWL2j6V583pW3C22jJ/
tNq+sEjduby7umtFd3VPRXf11vq26q/bm6h/7mxCsllLZjgch33OxomM4OzH
TWiqWHgZkVhjVHSuyGUA9qwAl3HMYI4xjNboZW27q5XQd8C3pG86xh+49IUn
c72fvq5ENvQ1YeN/eLc5s0QOGMfMVULuYyvJZ9/CDhmjQgiJ/M6iJKdFY3tJ
gVmRqg9soHCmK5eJwkdwYRKF/6g3UhgKYyIyJiXXklwmCoeRyqQD/uT+ndSd
s5qpOpYMAuH1owvU2lEF3DUBCD9C1yoc59vp/AYg7idQQt3upFt7Za94hi2g
O62LFAkXd42LCmG8PQJ2BsKAODwN7uYY0shxnw9ZnsYJC8KnbAhPEAjvKRbF
DAifm+nEPUJC4q6OtwGCGhIbCj9nU3hZEx7wzB0hZtmGP02nByc8qJXyvVop
w2w2DcMmTVdGBDZqee3gTDEzvq1S/mGkUh6rlfLVBU0uhCKCHb78nC4Ljgx4
VftACYw6XpFXAvsbM+zJB+xLRJHAuoLn8SW+kwTO1FU8mY2Fj4ecsanifa69
iQ99/rFdyXtOs/cJzd6VOm+PaQj3TU1mf8Lsi901MpP9OuZviZ+/wl58DXZV
74hXCksMOYa5ijEi9KAf7YxeuQLjWLWtKF9tp8f6CV0wVTislk/XE4fzeABx
BT0wNH3bFAHuDRML1O2ljXi3zYvzktSbi7G0K5lkcIp6b3mK+nhVY/WrDdjb
TtDdpf0JYyffUL+djNmnPEalZgE7D95MB8SswDVOA/csA/g2p3QXkv43qbY7
VsS3421IBs4kenkbbEngbacVhspc3votCWLu4Ymyv1ZvxXZTGatTnKaOn1u8
/ZB4C7V7z/RM3TecqHaMo4v8aJbeU+9y9z/E3W80d7Gy8S975Af6p12yDei3
mru/rJIp9Jg+j3Ifxjs/UNZc3UvqF+DF+0wk2Nw6PUdtKCpk8D4zv7F6ErCa
IxbFOQLvbXQ2Q6JizxAp723oK/YEIAvYosSH+aMe8HZ3bQo/eDdp8OLzA+L4
uPuG6RQHQcqoX4AXUvJGH3hvIchx6U+Dt7hXRwe8BMcw07c56Gu5FqJiwV2E
OJ5b7HIXBT58GDOoIVqg7iGtfE2R786pGAFO1A21cgbXVI3IZOai0Af1i1Ad
Cn37fCNcI5Sv1XJcplPMbCBjO7dWvmN0oC4UPE2rVUP0jbPbhZ1VH6J+J7vF
O7eAF5mL+9RSv2xCFNafiXtR1K9jQuiVkjyT9VLdYb/63afV79TWPJDr11Vu
Be8Tq579jlPFEwq/aM9p1RQ2U5OEwpIZ3atX5I7Wm7ujqeB5pH6hgP15OVDY
qODy4Z046jt7TD+1jki7bPooe0zyMjCXCBzKxf5pdiUxCxGPjYPT1QkSv/CI
59NnuYm4f2ZsI3XbuEbM4fsmJ6onZsoSxZ8sSVEXK0jKrW2sfreJMETC99/w
ifenWbGLdF+oDqtfy0Z2DskZgEfqA5GnMqOH627V4I3X8leUsDv2UIM4ht9D
j0HEHf1mjk9HghivO5kOcWzBuGZuaxa/LoijWw/otIP4NcvhHOthi7thyYAY
ETnHetDxOLs3+TNtPZgWkfsIxBjc//LcRDWmZwdVt4mu5WNZFpCzPED+FwH5
HxrI+In+9+4M9V+7ZDXbb7fJiiOsBvlcrwPB+pAPCcgfYPgqXa9vVTRRd5D6
IyBLQTCVLWM0u6GF+Dzx+MEZKdxejFkN4CME67o+ItqMCCYWixHR1oNjruvR
mxkcr/Hp4El61qbBMcyIAyMExzfUg+ObLRzju0YEg4tnpdnMS0ayYNnSxJc7
PH7ax2Mw2GwG4IVzi4PCc95i3r3ahTAa2HYi8LXYg8QQols9KJM18A6fBl7d
Ozh0QRpYfiPxbEKY/XPdv98+MtucoyEcsv6LuSQwG3vZCbgJmGNteQwwS8at
96W7EkYdR5l5E1G1C0pW3BZFHfsqd0ent1FHcPjT6vhrvfr3M501+lmlGx39
sTUnzE5YgM2rhheolaSO/WxGBW/PKLikROdQkstnn0pGtLeKlGvV5C5q8+Qu
YZK0eo5zAoSuWj+xi1G+/LbjB12DYYv0cQ8MhVUBdh8axhynlx0eDsWMIc0b
BqUzmef2JSE9snsHEsunSIwDzpj1DDjDI8byx1cWJLMw/qyysfqahPF/kTD+
+84m4kQAzAd8cD4K9LURGJe14UycxyT2pp7ZJxZvIcZjTcTzvwnukmFrqZ3O
T+A9zmSGtvEsRuxTCdTIdjsJobluUwuM8hA0W1O6I9EsOpmboCu8TdC2LwGd
zGimh2mC/o3lChs0m9k6JvKGuBuSy3CFXzForqJL+US2xC6DEH0oU/2bEP3P
/Znq7/oyhYRgRO8URGMbHTbQfVklm5qw+uTjdbIfAHOz39WIxlgwuMWAFCYc
onvu5KQc9ThBCUbFOfR80CULnQodC4cXwC239DJ+F1OvTYvQzIGQ7i6Qntgj
V03G7M9BCGA0Unt0AOOgLu0xpEmjQ6fXjIFbnUSCNIlA6EIa7XYo790xJZk1
M0p7gOhDswBmQnXoWgNqhiwg/aSBNCeeJe0MixhWsS2YG0rF3S2C2QNpGBV8
kLVGT8CoMHPAAwWzf0aPTsVxk9jVrUQw63QzCN39e+29M3Al3Oy07AmAA+R0
e4vQloM8THi8Mj26WPY1kHzbQY2eip0Ry2aBwbcQyybuxidDXOUQy1vSOASK
qp2xLD4w4WN76I4VqQCUK7nRqoBb+hwoT3GhfHRKoVpQ2o/F7vxx/dSqWaPl
p9lUrZw5mp2ELZrHGDG4lx4evTwiwfk/tlQN16MnZvUmzhKICb8wNiCr4QwT
isOwh0NZ6uhIMYlRqtsyNIO1MtaH7BiewSW7s6SVMXv1cdLKry1MVh+sILys
S1X/vVUbw1b8rW5NCzRj6DxWCqGujXgWJzK8RrGD5MxgJId1S/atsCxuzcTE
Cj3wURM4Vr8p3okAHHrcRa+/k++E3BaAXhTkPOiNEmULmj/htyiOEHaBXyQn
/BbFY75l71jIx+gdI+iFJfxKWaJaPkim4Kkb6QKsyQ5G8OEsUciHtGVBCEb+
7QZ6/HlPhvrTrgz1x53aKt6GBaCWZYGFeOtkVct7mNbNBbsm6g06r29C2Kuo
UJ2emsMIxiDFYxNySGumcOvdHZOTHcsCEhm4sO0KDIk1CF7URRC8tAEE44o0
RTsgeK/2iv0IPq4R7BTuNIIXDspXi9ADO0m+vuqx2Vor5xgMu5pZI/jxeV4E
Qw/j+waCzYi0+gJv53wa+Tb63ECwSVWMpFMuPItjOpzMi5pHyRb6lQMy69XI
9uSfPld3UKU/SGOfGCLZbNHCoN3GjRv3iUbZdEvk4nF1i3A0fyMCyNIn2Lce
56JNZHzCdi78dTt/rg3OxboOPNTHm2uLopDPGIWcHVUh87XP5RGZoGvX7j7x
pfGNh2zX7+4i/txBHAJoD87tpg7M6abWzh0dMot4V88erXZO78qPHfSYMvQa
x8kwKhnX3CmrQ8Q/ywJ1PEIscfDIyAQ6uUP5rh+U7ngT6waliyoO85vRN0QQ
PqofxwjGMC4w5PpH9MEX9M/jpcKjeadTB7VnZIbaX5SpTo7PVGenZalzc3LU
/vGF6tDEQnV4knS2oUWiZnprVTOjtQTcjEa2qnYwkQP6RkJhqd0FSuRbMs1z
t2Qaq4JH8J5xOr3PwG++ORNGsBbFZaPok2xrGWQeh2SPwzrv4sFonoVNZp6t
lhroWdhkdjwLq6UPZIaBbMxjm8zvLknisRYgc838tvQ15widT/oI7RHIQuh/
aw/j1dWteD7f/+zN0B5GhngY2y0PY7NewbxeCI3FWlgy8/ZK2bew2eQI6FSP
+bo36lG3Y0lwIld2O9EH+TMYvpv76xiFa2AwnUHlqITuEUloXNUwp7cOFELD
HNnrVPMSXUIXBRCahDJa7kBoE60Aoe+cIvk3zEwjSoeB6VAOQ/ph089tAK0j
FaenSVf2K3os2wt2Ea+BuBsBmi4pwnOoFe+JwJc0b0A+d2kfKxYT4/pRkkoG
oKf2ymtQH9tDhTDDEvoYY9kAZ/zI2vkdDCGyjJFsnR5WA9rEgMr2sN+oWA4c
3xZjK2Zd4PuhQNq2MD69BAsjSsaNLYynWroZN1sxmwKfXzHb4Qrf4Au270iU
/IHXf7lFPtgYF1a2VU9VtFWny3uoHy3prqoWFGERurgLaWrjvCK1oaxILZ3Y
X5XTA4w+M6s1i2ZMJ7jXEs2YL3RW78fB4GpwWpKqCwfkhRrxbCy75ufr5IsB
rMN4io772JKIL3u43vUKXoPbhGb6eATmUGtG83GN5xr6ODfSxzula4lnsFB5
XCPGM/aSFtPXsm5kvtpSVKC2FReo+2dlqw9XNlafrRE744+mzletbQx/jY8Q
XVfVkhHt08s+QsdpJlsmBdziSBCLPW2VDiNAXHppIK72gtjIZDu3Bpl8ZJKA
GNk1v3n8lQViyGRTxUNmDSDG9F9k1lYAxAsIxKdyBMaQBgbIDONsVy47MM5i
x+Ib7Vjg+/3rvgyRy7shlzPU73aIXLYdCyxq/VibyuJYNGXH4s3luryFIPLi
VJ77gzlAiPyg5IzLbgddfog7IAqBKMBSDWTtVoRB4NAkr2nhjDCKd3iMPPKa
3sJjLDwzeWTDY1Pka4jH20itjKIvCxAEj6Fab9c8PjguW4YiE5Mxie2cVs08
YKPMBbLJuOFbf1Fn3F5c4ubanmog13Y3q2UxLPA14N6AVj6eU2QNFUYGGdm2
ab3z1BQCsj3lLchRBox5FDvB2MwoMmPY+0h1z4VxUyEo5PMFDeQQIznkQtmS
1h761gNmUc7fq7/m921tDF/izVHOgYm35mJjRHjLRjl7u0I+2NZBLS/tqjbO
GqDuXd1T7V5SrHYt0WNsW6jti4rUNnrcREw+RUw+v/QyVVt+mdMcwtO6dA6Z
h8PN0RF87WbYYEZLtR/OCMMtGqj3Nyeo7XReOj3WF0sWNtNRn3gcBqLDyMaF
4pnM2MCNB7xjLZLDQHGopTox2oUx9PJ8rZeNn4w531iphZVbj6LgNz9Z/aQ8
hWH85bpU9fvNTTjp9p89VsLNFPu8ehmUnNcG8tfo5VOsea1ua1PxMw9SzCSQ
OQpnMfkHYnkYLlvOMdQ4I5+4XLdZmiZgXzij3xpwjh0u72kS1b64gbh8RHPZ
DCWynWNw+VHN5c8qvFlicPmNeYmqYlCucE2dzqG/AwfPfq18LDtAK2exmwGt
PHdYZ/XyqlbqL9DKe7RWJjyzVmY3I13cDG0of7ReDGUsXHyHTnk/qRA0v7pU
9k9gRjB2VNw9VTTozlEy4m1uvzzm59o+8cxb42Zorcx4DuOp0OXM5vIobOZu
PuIy2FzeJ116RUhAGjb7tfJRzeYTms2o/OHrlcqfGLk2m++d7uUznI1aH5tN
8k2PxghDJYc6XXrYTXdXGyNjZ1EW3yp4a5C1JcN07yFyDJ085bq8qFuDFnWV
Qh++JGwNwvBNbAyCTkbowq+TfQq4sSVz0xL/H8BMbyGQJmBXXTKk4zyvov/4
aSkVdrBV9Le3Od6NYnPoQiDDem2HS4rJXbyhs6rd1kvVbqXHll6qumKMql6h
e4CvwJ4FtY8em4jV91X2VG9ubKdeX9+Ou/i+3Og6HR8GzB14zbKen1uQwh2t
a0YUCLBnyTyjh/Scr3sMsI2anmgB20B7gMxCwEJVzAA/FdDld4yoHSPApmfp
u2Bqo81k0xCX3JuI4vxqegVR2yb2qTHa5aBPBgkNy9ksQTw/gw7kC5PVeytS
1M9JOv96Y6r601ZfRO56TW1bQmuHQ53U1A4DrwjHmTKgCSnrcAXBmqt5Cy8z
W9ZCbDJznC40OyqwjZCuq2rB4IbP7JnVGeQ3W5E4D7Dhauz0uRqYcFGew2La
dOr5/WZUBOoDNuJwR4rS6Ztqy1sF6rblgdsWtXN8DgeonR1BbXUoi0X18ZmX
qWMzLiNRnemKanY5MtRviNxfs8uRzi4HJzUsH9q4HFvGFrLLgY1B2K32KGHq
7inJnAmGm4CcMnr80ZK0qFc6H8mXdmNRLd18MS6zx0dndi9ZdLuwV7rD7O2a
2SgAXgqzcf+Anj5tmK3TGmeJ2XcQs5Fkc7hNzF4xvECYzck5N60Ml/3U1Bwn
pXHpSTnR0mcnu9DG92TPnbcXnpt2a0B7cNcOrKU32EswtZZGUo5nFf5Q1rw5
WrpzrComaLdo0aLKoS6LaZvT2tmgP5Lvwmm7FdDpNxFO53k5bbP6f8PteD5X
ux2t1MWzV6rag31V7f4+qra6T1hVrxkrEL5GBjFs7y2cJkZfrO6oLu7rKKLa
GjKHj4VxGH63ww5tXKz0zvsyljQWcwDU60YVMKh5lLhuvTaD54yyvnuyD9a2
9TEy07GocScHrE/55TVLawjsZEZzmQ7f4XVwmvF/bM8eqXFdReiml9GfGr2W
Tgjg9Gn6eDePbcScxo3htlJR1+A0dpE9OYu04WJR1r/WMTpW1UhrHDTTMaKq
a7BaBHa8LbDtCmEsuByjTY+btepuFJ3LUgcMo/AYaiVotoYO1edxRGDZWuTx
dz3VgnU0sGyNUzZm89drUsLgciiJR8iZAIbJxr1HVP7JQpyB07Hthb6ZZihk
YoT0KdbT0agcRU//+5CXyv9j6ek/sN2RIdXBrbA70sXu2Ai7I019qP1n7PPd
WlKIbW0y0b08lcccPzAjhXkHXwHVORio6IkGW8Z2zXXMUvgZunvEYnOpxeZ4
h82YjoFp9/OvS1Mb6JwPNk/yhTP8bD6i2XxMsxndGTB33ZBGsuN3nNWa+o7J
Lp+XDyvg/R3oxX5EhzPAZqzWXDu60JNovqTUnE4x22zG928vZ3cXFCc6o+d2
0/e2rJ/8/DaRmOaqYK8EZx8IxDSWJmHkHItpvW4Oy4lN714o2Eq2N3kYQMdp
QJOw7uMBNCM9cugc3pnfMN77MqZ7grw7njZD55y3T3K/IIf68nGzxSf5+rv7
JBfPf19dfPj7qramn6o9QY/j/VT1phL57q9T1evHCskPMMnVxdOXq4s3Xi7F
RdOcEtQYaDeoENFPzGjDBUZ0wv4XCozcHGgnPpq6ExxXWjE8q1EFRMdlYBoF
DdFrLaKjYQUjdh2q254JEdXsN75lnCyrxceDQj6liU7yG6q2CHKa8BzHSAfC
gXTkqvEGMXjTUC7jHS8D2pHwwAewcQ6jRAqLmR6cIyH97FzpUEEID0YJZHcg
0iOS0bBL4oF0ud2aZIao71h0qjRyEI5/MmAlZISu9AE8gwMjJtMn8eY2kRm6
aARf1cwzntnjhmzDCiEZHeeMaPa51PtLC1hcmymgJkNn4s3vLKY/7zGMcFjx
zUI/ZI3NhnVD+vpYsMb+j9bY+Jb/Vp2p/uLX2JY78lWEO5LmxO3untuc9zW8
oRduPkMKE87I7ZOSmZag6AF0FBON0MsGZ2NMl1wdhY7n6XPTuqTFsnGdwwXF
0de2srpTXJiX0E1gHL07YiIbCWaepN0QC+YjAmGOGH3//FAKmyMG5jf5YA6x
DaADtvfRDekQiolEc7rGTNCukjgOlus0tEx/7nhJ2TqEO4BywXiKWjxYgiY3
mW3Kli9yyEye002AS/tm8O0LhxS7fgiJPUpvUp5jbVI2Ehu/YI/E9gnmRi5+
leZ5KOFbsLwqFLmI3rzMHVfqe1ls/ftFnfT15fyvbNeoz1K5+NzV6uKzV4dV
7ZkBoWGq9uYBqnrrOGdmXvWWElVdVaJqT/Z3sH7x/qu8joqvLll3uEDVHSxQ
NcvaqZpyeizBfLO2zh8eyvY1ZXSSn3uZs1oUtcmamW3UcWL7X/UYUSdibQIk
xPdPfIm+t/WQJMSsDd/Xk1qHYn+6zG0EP69X6hm+21N6/ap98aA85jvslVt0
kyIUtbFYSLXHML/jHGFuRLrUNm9ktoPgEPh0S6CX0XOh5kx5XFbI8G0blsFL
gU1dEi83pgqWBmOB8ENTxQ5HzPqLdalcl/wdUR4GC8S7Q3u3RgmyE98TjGBn
PJvmb92HGOJGxFiQnd2TGB/jEzxhPTje/EHAd65EEuVDbdlAAee9rSzewJ6H
8VEMFGb84E4RY/iNgWIYjz5uf1gPjIeB8tjURmpraWFIIH815Lqq25HPZkok
6HO+Beil2ePv+zO1bM8U2b7bku3aUPlSGyqfaUPlw3Vp6mcE+59WyqTpNzFt
k0CPfaKoTt45JZlDc5DKoC5kJ6IdG/slsGwH7An0ejRSDMt0xETAeylX5jP1
iwKov6KH2CroSWTq9xPqQ9LuGNQokPrXa+rfQNTHhDg0+aEZ5qSm/imL+mgJ
DENQ08kT9L9HUx8e9mG9PApTpo9PlFiMJ18dFOgriwz0+ayVMKBPnw6fXpyV
JBkebTJ9uvcbP8YddEIp19hHldI4K7DCcZMcST829H3PstQ7vmQMGdXId6nd
yMIwzG8QvpHmvI3h78z5gNVVeH2Y7yCxVb4XJ0SlfTw32dDXr2pvH8iP6p3j
VPWOcWEdnaMnVfX2car2lgHgPdP+4lM/qN+XecXry6Dgie2oUipsrMrGXsG7
UZn2SzXxQftFmvig/bzLmPg432NNqoyKbK/mDu3MIyIxTQETl54qb+F4Mx4T
3Rr3Yc9i3zC6gGn/rK/p0Vbz5zTt0WATpOjxPUHRmyooiE+Knr4/4j19pVuH
iSC/0RHscWyuz9NCXmOe3h6gj2PRfnqseOZ4EOb5Y3VAC+SIDDoxNOK7yxJ6
GCEP1N9LjydnJ6kX5iWrlxekcAX0g4rG6vO1qer3VU3UX3dYMz6cpGCG7c0w
pWFxW+2OqIWezmzkAD6GAX+VB/Dm3RjwviEd9hh/GTDa3CPky4YFAN7qVURD
zMsEeIQe7Vl2v98QHfD+zB+8mCemNeKAZd3OfIE86gLNzFpZl/BhIB7fX31q
3gd41DhfrWxVj5rPcGud2pv5VHszFwny8GYmD+ik7ppDN50VTXjvKXyZ+wmI
8KLhUUNS7x0mgF+vp1EA8sUEeawE6HeNZE4WdY0LiaQv5RwKJn7YcF+uwb5K
51DW95EbxpLe6Qz35UQ9P9wP+uDODSljkiLhXipNK6h5wsO+Tct6CG8Dd4jy
lQR2LKbGxwlqnvGHAc/7woDInxhv5vbJEPMFLOhvtZpmjDeDxDYXOgNmK4Hu
869LV6t6JbCgx88RPzM0y8z2CXoTBgwF+zK21Da+TOJ3Zbx24QPWE3q5H0Ty
y/S9IOqgVJnIJ+uVhPJhdfGlH4bSRdYHrHe5lFhLzUa612/oIImBstIr6Jxc
V1PoLZTacUPToGNveTHJluPeyCFkPUCPecDonJxFwDdLX2fQ0X7fhNY8YTL6
pHaBPVfT9aR2P+ztie2B9s2kpDA2xNJ9++wEL+uh7neMyGR1P79/XhzDnEHP
n9FFe4yDdnrQ3yhp91A2d+GY4DcsfvTVA+130ae5Z6Jg/dzURHVhbrKqW5Ki
3l/RWP18Tar6zaZU9edtTdS/TBc7DBI3XSiOuNi1RsBzFnxbS+DvVEYssB7H
9nqs114/ncFvgBdDvG9taRotYfmkh1oF4t3od4wqZaSvae7ifXWziDVafp/G
2dYS6bSHwfdQsjPh3wQJHbqXJ6mnZzRSRaD7Lrokb2lmEz7NJfx30PH/Icx/
cwhDmY/PvCzU2tHxfyYd/yfC/B93a8RbhdEvt0DHp7Np84k2baDjt49rrbaV
tFY/rhAdD8MGDS3AJBAKtFYPJzwNknIeSpvwGqDjgXkziJowHxdIeHGX8ea4
MziEp7sFxoks6dMw4eFiYyYH5DsID4KetPrZ0TNuKqQm2eISnqS3JvwNE0TC
rx5ZGNGb02C6cKbXstlTnM0hzLNmfpO2bE6WBFVFxeuSpVwJnOQp65nuaHc+
O18rU/OQLoR2x5IA1u5XBmj3+rh+VV6qky4MslDaRye8Xu3Sx6a5bEEMWNPl
bhnIvTS4R4xblfb6dP4S7PHW9Y6QChhgotfUinQf7Kz2hplTd1pP7zNmDvKM
D1t5xogtBAFBc6sbCNSHWf8PvY3AKb9uTVNPLGnB+/GmDxQNwSMry/TISrsE
S+TfWFTAMt8m/5MB5LeNHbMfz9CfnRXLvHfwr+eeLPBkaDLUqbGa+WHcEehK
OWWBPwbgj1U3lzSiW654N3TmHCkTVXhUD/1/6aA8daAoUz0wJVHVTtMeDpEf
fZnSJq/DMQdZzGMyU5tQopMlFCEumh4Ou4E4AjJhR9U7MZkQ+zdxLvoTHLOH
7xlVLXxJcte/iRaAAfd5vN/q5t5NXZr9tn8D9mPFi9+/gUf/JFYpDujIM6Hs
8IuB//tLk3i59+L+uYA/T3Jt5qE/x2G2B8Vhvi3989Q/DmS6Ip/uAOzikMj/
3U7QX4v8rVrk0x2ARb52cnaUtuY7wNsrm7KTg7F2CP3B8zZ2PVxnBFfQ8LOm
tzNyLgx1T78k6NPFcgMIyR0g1n8HCAP/odFONGatdQPAPCncAJDz894AEp0b
AG8Ho1OpRGSSPLFG+wZwJuAGAFluouYow0Liw7upmZzj9P74N30FZRjdGwDJ
+ymSR8bnwOeyzRtTer3eV3o18h6lV9wA5vaQcFFfOiJNuTbNI++nWvK+Xbt2
F7wa3Rbdfvr3ad/EeY8gId4w/c3L7L4hj+bnl8U6hJcjR5U5dqTyv3H+m4H7
llFuBvLZR/pX0QQHJe1JVp79up0i9+taRg/uBHU3tpZku39qSlDLUQNnAHxO
ni2o9x6gdGua9R3DZ0NTVTu/mZpKJ2mzzxwj3O6YlcM7zRHI4U6HhY3rvRsY
m5+Nn2ke4wfbUQfn0yXgBnQiDwPoH90+whhAsWz5IwuPGwAfj+iJMKt/uhUQ
/2+WBz13hu8JuKvg452lB6q15XQv4GV8dD/A//E9jO3VUVUOz1eb6e62q6RA
zaRz0JwhnXg6P1wWmRU4ByeAAJ8HlLwRSZz5bWIC7gZ8I5BXxNn63yQhQ3IQ
6FjvQcAUbGtmtpYZxHRDgJnv9XkCbgTlvhuB9nmcG0FlijPwRFKQWU4KEn2d
SwbkqppF7eiqauY/CXSlu1wzVbOgXZTybbT7QbbnfvDvQ1nq9TW5au6wy9U/
6X7AJ4Jq4+xnek4Ev6Z7QrQTwbn5LfgyRSjnLbonIJSCzbfYswjC2q7+loEm
RBIv9wSiGQyf4mtznR6kRV3jxPfpGDE4Bbkc/A5WWJlJ5OSRywEkcWNAOTfa
jQFToXBjcEu6cmMwk65+pG8MN/luDLi13WvdGCows2hEgTo2MYd+L3RrCHVy
9yEscYu4T8yLzEn6fR+5KaTwqcDv+xy3TgVSyHVPBVUDGrHfhWzSrO5pfLCC
oz/POhVMp1MBJrmaU4GD53iP5xNyO46S9U2hy1XtVV42b0//jjeFyBtAUAEg
6jRv/qSXtsHMtycng//tyZ8rcvV6cC4z6uLfoIYnf4be34laX9OTPb/FHBIO
ew8Jsordrfpyqkd3pdq1AFR+752Tw7eGSRgkN7Ffp1BzPie8uCj6neERfWdA
tv6cdVa4R58V8GMICvqYuwPdGeiav7kkke4Ixi7Cg+4UYSR/YA/RDeKmsXwD
0W+aS7cEuancoh84LNyGmwN6nnShF4eFpYPzOM7zAH05h8dmqooh+dycurW4
QJ2fl6OeLW+mXqtorupWNnejPdene2cG2HcH3QOFMwA95NSQYN8YnNMBpgt4
bgyJ7o0hekweJeSZrek7NH1NKAJEm4iFGwOqvBEFAH1KwA/f7PI1Qcxzs9wb
A6ZzLx2YqweO5/NMg/xQD9wauNLLj/+lewOdF/jz/PNAVsR5gR0jc17YUf95
AR8DTVBvr2rK8R5YKAgmAq6AHGC8T7tFABrOC6ssx4jdIneki1MUQPhwahdv
kyruJbO6pbFNslJPokUHkLlBVOkbBFbr+W8Qa/Q0KrtAgBuEv0BgnxzchtUU
5waBUD1uECZUf2KSWEgIbuIGcaGesKbfNuIR/cXZzg3Cto1qrMDmQevUgJLv
1oFy9lrQK51vEPg5FtE91oycNWFNnBoG6ZJvhGVk2Tpoc+JbQ1j17NzSF+vR
94eAPQvf9f5gHSTi/X1S5tNY94YY+94QirpArSX/O6rhGwOdGWp2W1uEg3ZX
/iTKlEV7RIG/G9bfYBVxZsiq98zAu9J2p/OAL+MgmUgQ7w9cF7DldUWqumNm
Do9+xsfB5vibp+bw3eFZ6+7w+OwU3iL/SDQnaWpSGGuIsc7PSgndMSGJ15ad
dY8OMXyHkDCouTdw1lhPpMH/9c0AE5Xp35Z8M8C736Yft1s3hbsnJfJp4eCY
THWOTjAPTktStdOTuN3qFUz5qmisvlqfyu1WKA8jEfQ/25uqf7CzpIcv3qCP
Du6RAQ5SjKkk6DuBc1OIMfkgc8vg96D7QppbFm7gyIBN7zgy2CNhcGSoWwkp
XzakUyhbvbY8h+sGxyYXqqOTCpwNOn+0phDgyIDjwuNl2RHZzp16+gDi+QdH
pauaxe1wZIhFyDNGV7BGXR6S/kt0UvFja551K8ip71YQxr0g1JbvBnwRHszy
nhT2yUnBuEfBJ4V056QwZWBndd+85nxSMM4R/JK7pqZw2RU0Q3kTZAapQe5K
1z0SGUuEX8JZIDe8j1JxMYtfkwDCEmIIYtNcZe4F63Av6OfeC8r7SilhRf8M
z70An8mfBLLvBewi+Q4K/nvBwdIcdo/8DVYIfnKD1bScqGlPsyve3AuWDS1Q
S4YU8MeOcJDsTlgr8ck74wdhd5F0wpZ2z1X96aeHn+AiPcrLNFTpg4LOsngr
veK5s1fPxVbEaugmkKJ7qvCjwtwYfUdo9H94M4hteEmmVI3Hiyf0lc8TIr7X
7LX2E0ebEdZA+EeGNgY00PoHN16i+IfX8UZlSx5HYyKfJtJv+0JmkKMT67cY
j+gnvq/bpucw4/E0RpaempztMn6OMD7IHwLnl+lN86gW3D0pOO5PpwCMLSpN
pBvBLaWunN850plpYxq8BO5xHrCfFcVPH4IQT1eJA/mJeNmywXmhpgz5hwjy
D2vIP0Vf8isLU7ho/O7yxurTShSNAXnS1vYkhGOs/MNM+Th3Eo2p/Y7qLHFO
hjvfAOR8EO/WBLyRnzDATvQ0aDclYQ/WzaoIywl6nbA+dzAdyEjthzKc4eT+
RCe2CYPq/rCPSey/vSiJZxeA6uq2ZjCCIqoCsaz267bnM9od4l9DN7bLxa2i
//NjxOWqZm5bVbcxN0LwcwJIi36YQa+tyXVF/35b9Gc6SSAR/RmBon/n+NZc
JDCiH0kYbCZDcoYNobECqj3DRKjC1kccncvEBGpACvAW1DumkEQ9Y/jJEof2
vDaT3tBupTUF43U+5W9ov9yi/bBuHVXloExP4djQ/kQU1W/HgpDJvFfbOKC2
ob0Zen5yigythPoPyng+6LOFlg3TpJ+S4tDetoVM0POIVv285MdW/QMkVlXS
LVe3uLlzc4NUvx7YqJOXzFxAfkDPHwLyHs0PyhvO/l9i3ru8wikFXMGvm8Rv
b8t3Z+U8od2t+3rt/kC0fytfxxpm4+/Uqke+18xqw94OxkFilZtdALa9HU/O
MwDvW8YUqqriQrb+EQGChB+vMV/ap6OqmZitnphTv8mznPAOxEfr5jI6HkYP
sZopH8ZTklLl0i5GsctA9hi1e1Qmv73D8zBwHspycvt36zAnYV2toE9sQ/2x
mUnqxfnJ6p1lKQR0mTPmDEuo1pbOUXucDage66E6E5xYHisxIA/VRa538CI9
QK47ac61zaNuJLZNHJbqk2V0JdqxnluU43H3D0RJcJoNxNjFxFwuuoKg3jzM
VMeQymbi4ZxhxqPFlsAuI2sk+8Qujuvk0FvVVeXRD6Rucy6DHYAX/g+/PHQF
fV+X0f0qV7hOjxOzLuOu238eBNezokp4GDos4bdpCU9s/wwSnti+i7gOtr+/
Jo2j/KZXC4IV0wVudKI/iYwj0zEKCb9KpzxNBAhmhJnRu6irqQHTU5Lxv5a/
5/Juboa/Pq4jSgquY4wAWDi9d56aQQ+cJRwVT1/YUb+CH5cUqODP6u4tjLY5
pAf21lpz0s1yITCdyTM5JyLeadwccP3guBxV3KsTfkhhQD3UnD+FMXNMCdgI
+ANawBszR9x+OQ5xroJ+dousrZmWgLezP1q4y3THy+gvYtzAa5jtoHmyT71r
tidqTtuey/8C1hP03UWj3OD9Sn7xGBbrngX10dYQ2dMTIlYR+SbdeOZFtqrf
jLFDnA2IdXy8/5gFcbqI+yddxLUNmc83uFMVgojOR3I9XYHnlmnLHoIdRB9H
jxMTspnoGIfjN2ZWDM1not/rRnzCQDr9Tl2oJ6KuG4cnEPqENY+XYecnPdBO
QyBvofbS8xDieIDdd050RLkE8iejw1YqA4bhWHvx+Kwk9SSJ89cXySAFJDk5
nL8vzeR57IJtkDDXjbYh5niIzRfLqXdfpt/WdfRPOjMhuc2LUzxR8A4nJnCp
0L7ITqzjUwoZ8X/Vo9OfX5yjZg2S+ywWzkOz4+l942SL5p6x+Wo3PZDi4TJ9
345qzdA8tXV8IfAeqp/vbDk1c0x6DvhszcMb/CgHrVv1uDR1G3JV3fpc5jwR
X+4p+v+BGr7a0vC7vRr+K5+Gf2hhCzV1YGf1wdo09d6apuqd1U152gBG4KJi
CSkMjB50iroS81zbR6YDzOmRxhoeGU6wilgvdo3I+LHOYHYDMxPnN649DgLR
OI/SLjg/jR7g/P7hkpk55NfuY+xIvzfsaUf6lw4tYM0NToPZZhj7Y/OspUWL
UtU4M3h+Yo6j3f1ODb4fjEa7w9HuKY5TY0q6EvSUr/fACNe1d8Ke9L2O09od
cahA7f49J8Ivq+tD8Q7kB7XlMTfshhPok/RgBYR8UNO1J/z+H8HedANryLN2
F9KXVsE7Gjkou/56bH1Jfdt2983KiRjfHmHLBGj3m6Nrd5aFa1o6i+icblyf
NfOltmai0X7r2ELW70G0hwV/46Rspj1+o+N6d1THxmdFWDR4nVjxSS7xXYsm
DN6znSKSnh70F3cnvww0R/KmnPlPz9HVsE9vIOU/QEnk0NvDhMlyVDuIjyIs
lHsF3WweAfVnCvVhyWDewttLUzjD/4cqnd8H9QNiOjGO587lV5gUncNasMOQ
cbyYxGhejF19xZ1hdutQYX17Oz35fEP1v1l7ko0bA48dZEfr1WNzsz1Ux4+H
R60vTuKdyMXYP7S7AGQPiOUI0mM9SKcHvs+2oRS3BNug987OTBjWTKijeoNE
PMQ7oI6HAfwrla3US6tbiYDnBGemePD1CHi878/QpgWwk4B/s6IpO9AIu4NR
4BMYuo/EJ1gE7rI5oyuyeP9levSLgL2ViXBCuC826r2zo9xt/12onuB48Jt1
YAefyVAdnwHHBzvJyWGdoDrseKtJy1LuSwYXMNXhm5tGLZvqJsaPGiwpd/oN
lvTpFErgqD/cG9uRwddDH4fextHuOVYRVvfdjpFzjxnXLnuXpbUYlsyEHjJ0
AjYVCtYRuv1KR7eHZDJZLKN8sEY5WzAk3g3LwXHw/BJZLlGdBLxZn5D7XxDb
PS/zBTntT2P7M9qX0buS4MtEKal62G7n8aNa7gG+jBPKb+GG8r+DkodsgjeD
Vc/f6NLqX6zSKrwZLBv18H2dn++pahuxHXyH/W7z/SWL75iuAwseHg3xnS63
3thnd7Q0i/EOtkLMR+BdEM+i3rAcuL9bHuD1pCRtzZiXxfC/+czw/TpliQdC
NUjhG6abGir27q2iB9yYJ+iW89ScZPUMcf3VhdJy+8sNqWyzs6IPGo1mj7AU
WS+1U/116THuIT/mO3vXMvtKqXUbWvDNF+K9vo2gtnjHGhFgHi1Y9mrmP2rD
/cD4Akb8VzpcY8qou8w2DUL8G/PpTjkgt0HEJ/gRz2yX9u62fERB8+3JHIx7
uxTId3JcGqfISo9XK3PVHAL9nGFyMJ49tLN6fmWrqOr956zeZaHBh2jUItC/
zwo+jbceo/QI9Q7TAzjliP4QMYyB43W62GryhDx7uLvEM2GyL+ZYJmquQL6g
GjcARr0R79YCaJwGcPPYqFEP8Y5y5NTr5H1hvoOUbNL4xLtj0oxzy6y3SNxG
Zi1kc5ssKH+vr2HLv0zJjmJCuyPLXzGiwOPRYBQmPBr6WAz6UCvHejesx0/N
JDKRHDWhGxw/OJU5WMKt+M5ws+vni+jb0r1DFjPbYfzAy2LCDuQllR/vEexW
eZUBzOmc9hbdpdkqziC+PrQHZfT5tpAccAeRaQrDpZr6pbeSGrXNqiG7PTAt
4zNo/NVUu9/KL9tPemU7f7yDZiVehvrbHm/S3tjuXrQ3iUA7Po6prNYtbexD
ewqj/YJG+1NzU9isOT4+OyR8JzlRKn/PToV1qsN3ehsiPGg92cdz84p76RXL
xK+n5wjbsXgRXZcHizPVMrr0xxDV8Tg0NpNjksZXx2dkkpNCf5pojm7bZ8tk
jDx8dszM+UOVmZvTVP1tR1O3iHpEc/hGZz5OsC/jgbk47e0D5yVgIA4fo9a3
iJwqvD9SsGNeAkj+6rIcZ6KwLdgRijlIJD+gSW677A7JlySptxYlyToOyc/7
y6aC8RjBuCBcmy4xLM/rtuShaMo+E1BeAxM+AON4pyPZAvHOHogjOylpGa/d
/uKqVgxyvA3av59e3pLV+i91YgYWDNT6tEGd2YZxQE4Qf7dSbBj0WsFhACAP
WWVUo9YBXshNzDozgxp5TNo10mClM5RasYeudmI16MpaGijag6wY8aYh2od2
68ABTr9oh599bExAGTVAtONrMNMVYKWY9quHfZs+/MFJpPARsjk8nm16+o0s
H1ZAdyfcEowVg8edbMm4pVQ0qqEEAJvoqC6nHnK8d/nezFQF3NkwY27KNWky
K0dPU8DuO23DMMcHtY01o+B7dm7JDow7ISfeI9vxf115DSZ6KKGPhrVpq/X4
Lt+q7TbJJbvTcyUGz/gA0d46uG+qPuvdn4OsLyfDor2520lrZyHNDAUj2m/0
mjKOaMd+PWPK6ILqJdG9Uui+vaSQhXt0ujdWz2m6P6PpjuIq8jMwZ4jvTu/S
4ZIsT4YGhEfXLSgfC5iHAe4wXqY18QP0Fuem4rUPIFN5/xT6h54KNWeWo+SE
j4u3LKH/43OhP8ooc7D8+XnJ3Ef79rLG6qcrGquPVsuw+f82UxSqdfxwrm8I
jpkqL1Rv5F1E6gyId5x1v7EeOeIsePOdXTctI5qbmKO9k9SMsHx6QTab6rzx
Ts9F+MyiOeKNGF25akguTx9mot/C8D7D/+rAO4COcinYDs/FGYDDDBdRcJKf
I5jH0zcWqMstnruivIxE+Otrcx1hLjzPirDVn61oqWYO0eM8BndWj5e3cIT5
nolt1O4JrSUTz1MURJjbDgxkJlCE9n/e9KZzeyihYuQlEh1mYqNhOn2uGPFd
vA7MNQ7QWZpb9VOW5r290hzCdZuW5kMI5gC6I81HitgNrJ9aCUgH5nq08D06
F2NcGO/qJkk8YiyOnX6Erw4XBkBHgh5JeoxCRi4GLkwskqKhHAa5k4AsTXKN
mGLLiBkhuRg4S5j3VtlbfnLoFphMIBcDhkT5VSTAv8fmi2qTEXaGxIPgKJaS
JNezLCM1OZ42fLUJLrvw4ozktmeWeRaIhIJH4rBET3U+aIyLbwfpbfnfCcz/
Pt0SI/EdrXLakJ+OmKO91MnOwsBzsaun/qijPQzBFufad6mZcxkj3Gzfcyqo
9SD8iwCEPzC3mfQbWtFHP8LNUhHjvzxlRSAf0xFIRmxvwe3hcVmclXlwmhHr
jPEwOB6r4U2k5orriqHozn9wGhCOcuhD0yWvSI8YvDiMp+hqgcHyCEnyY6WZ
ajUhfJzcNsIo79IldXpSlrp5chYr80+I4E8szOGlqMemmq3UMbyVGiMQ6ra2
lDamOAff/qhLW48AB/oZ+xHThyP3MJk6KPqV8D6IL9orPUwqHW75M4RruOVf
6wWlpk+Ja6Aa1xDf64bnAdVw6he24+0kVn+SlW4RXPP35rjjgmzjINWwU85F
Xn6NC2287ChorbmN16J96TBjm157YtZldC7xYPuAYNtJvmjj/Pc6vP7kspaM
7ul4kASHDAe6P9HJxovaPH/f56nApwAkjRQ3ngrUI/yUVTrAbjwVPeeMLhKH
2DIRB9SeQa+0q6Fw3kEvp4+pnyvBl/XN4F6mlQMymNomyVhfNTRIgps+I48E
1xVRO78OUtspRkhwvA4yHcQGucf07kS/CmJ+qAV/DOOl3z1VpDj3MU1wLXRM
ZTiuLXQMh8PkIFR30aeFHyJ+eLjXgdyTrnEHzU8k+d2uXTs4Iza0kVycNm6k
A21bduOhRx1EQFv25MXa0K5yeB1nK23HSWezPkhxN3Y+uJRng3KSo1xXxQ/u
QLO8INgsDwgxRu1BqrUaVO+ziqF2H5LZzOfT3vzxrs/wam/trPxJN6u68G4a
Fd7cDLgqtUF4+x2WJ40Gn50cVquGY3QBDPSoUpz4fb8rss9NM+r7QQE2/dYI
z/Rq+CYPz3AeMXhBSJ41McXH6V6BmAve/caJWeo0Pcb36agm9NXzg+J5fg/Y
fXxaa9dJOQFa/ygjnh3weGk12trSGRavhbZ0mrbjDXo88QYb9Bra+mHZJtj8
AZHt355nbBMY4BcWamrrrXnGNnlId5ZirCTS5jeNzxCBTbSu25kvbUQeXMMH
OdXMWnFqwoiOURLDcfO6zXkG2MdBZ6J1rGt+35BdP7Q7BEA7S/3Vp7f/sFvH
FXeg2pnBevtRegDcnJ6g/9cuaqE+0uCGGR7koezXenuL5aHwyK9e0nlkeyhF
UvVkbuuQIsIsZm6lP4ReX8kT74sKoaDbG0L3lzxFbCdFiG2Y4EvocceUYLGN
kIp/t5MR2+c1tvE2cE/4z0iclBi8Mx1IH9L+OLKQd05xO1BvtgzxE9oQxzlh
1QC5G/FoT/qWUQ7AXa2vXhEC42TK90RvN27c2F2eZxLm2jKxtjUlRIhuPG8G
lmlnwzOZoJ4ES2rIQXW9Y+Sb6FuBL64ogy4784esWpFef5Gzob4ivxuu44qO
Z/KE3zPxzZxh0W0VOm8O9Ew4KnFZqI1HdJti5591dBHsRqAFC6HAbqwQ8bN7
17hCtYMeDbH7Rc1uj3+i+V05ogBCmL4mkuD020asERAf2xuhckI4vQwQP8ci
PIlYw2q6Yig88FoX1PTcIzOSY9T5mXQvOD8zKZSuHp2ZzJx+YrYUMdeOyFdr
R+azVYKY+csLpKiJnU8frWqsfrUxle1vjpofTvdEFJ2MoXFETAFTmkblhuOj
OItvKHUMdpYlqAFtoVHqmDXTChnh/ikytldygU4HQLjZo2cQXksIR7YcsyPh
k9w8gRHu+CP8tYro5uFoGuMxNsatkiUzHCM327LWzhGtfZy19rFsV3DHMLuv
tNnNSRUkU/51KJjdtuj+oxbdXMSE/20KmVukgPnI4hbM76t5KF5n9cD8Fo5f
gqUZ0KXogQcsPQNR9KSseT3TnXaiZZH8lkECBZ6ZY4bhHukdVMu0AufL+2Vw
eM80Es3sk9ew9B7vhBBlkHsSFxujKe+H5zj9RGHIbvq9sPAWu4R+L/QGIYkq
GesEj6P0NG5yTHhd6rxnms8HH+/1wfEVH9TNrzsG68x5b7GPFlubniC+sS4V
lglWfRheG6WNnDk94jTA/QIcz5sVfPUA/HIX4I621mDuE3L3POGR6f0o/JHE
gykRkR0E6vrKlpeQNqw7pcdE+t0RW2Sb0mVgt1B2VHfEbOxDQyjKlwxr7ZAg
nfK7rZI+/HqzC2t0D32qYY1f4Ae89yk6rF/WsH4BsA4oZ3IhcQ5EN5GVHnBN
CNhhENuGNVwTetCvv5b/xfs9PCMZhLYoTXyOVY/NSg6lOog2bvZ6wvT6Ufnq
pQXS5vnaIsE0OoOQLURP/z93NQ1DWCN6YSIorInTjdQ2zDaU7uCOitRbT/3L
mRpcr2fZIzXTC5nSTieQZY+YUS4XFgmhf60JbeZ71c72EppF9sJ2bjXSUNp1
sW9qFmNT+kfRKe3q6xiHzVDaiJcclsd/0McPbS19RD4600clPodaM52hrtkS
2WNlCX2Exsf43MRNNqU7YXG8HP39t85sxgU7ZJ8xshzrPbk3UQ+yRRhufPdc
aQrSU14sQrMZEuvaIlc6o11sPjdUnZzcM88zAwyWwgxiM8a7rBucqed/RW8G
Ah13F2WxLXK73p1qxrsE6WvTGGQqk6SvY/BC+lVg98eqkQX8Mzk2MUfChs05
iuIocPpI9xKbMQaBre2JlrWt2YyvGPtlcVrAsiqYQLgz4cSBXiCwefzVaY6d
La6Dl8s6Fh6rq5JBwhrP66RJPWge777KtxG1yCeOGygmXqobDVPj2VYyjPFk
Yf2mRn0pwEBTQ4asmCQgujSNsfHfO9M8rvSvSRyDuaa/xzB3V2mh2kniOBpz
X18iO5leDhDJz84Th3qNrL8OQymTJHjSoFewy4Y1a+VeruFxw7isGLA2jBwf
/Xmj6fO8fkAQ0/tBa88iCD/uoPdJXyER6hgf0KD39cXSaf8mPX62kiOAYVQW
Cb1IAkI0f7M7Ii9i6opAb3uZ1Gt2JZl9SVHWaUR3pi3s6pCfmaL1N+1Kw994
VmP3N3oP3lc2dvt3VO9r7GK2btnoyyXMFxPAXQ5u8/fh8TekihjrRrY50Sf0
DTv0jfVZ0YkGvayMvzHRvkD2tnHY+2dSx3/S6vh3AfyFNQ2H43Mr7mfcjftJ
IWP1BqaLQOghdIFKor0mAnUw8Nc/VwUQWSqrlkN6YbUBsGREOvMALkS+0b+J
d7EdDn85EdtRJxN9kYmDOt6rk35wOJjAQzJZa9oOR4A65h+ZLNNrWB7D0dAt
O7jm59FF+zj+WT2ykJ8KtWIDBLO40MVTYjp5tEQG3NmftvB7k8Yv5hljcCQ6
SnfjrDFQbjb49jGQEh06fa7uoEp/0JQjIVoWh61Jipq+IU74xdSji/E8OKrz
HR7bWGp+oYnyqoCkdxT4XkprzTv5wc6E5SiLM9E+wJlo7i0H+rN6DQle7Soj
r/cvErxwJ5DqEGc5zXGWjTthkh3SYNlE7Sb4AsCYevXBKlmG947emuEAuNwr
fF+C8CXg2S4zl+ZI/YYhf0HguS6BHzMUnpnssZ1LEOemF2jde16gKzoZarcl
mxL4CE/oB/AL9fu0P89BX8nG0QVqEz0Mgn9cLsuP3iYl/PHqVM7vwbhAds/Z
lmEGn5zUDGbfItTOs4+UZXCD/PUaFJh3znJ5emHEiFsT5AB/0QA/a2AnZ4WR
CVg/rPn7AfH3Z0vpG5/WSG0qKfTgF+iVqeb5gl/YLMJgj7/ssZfhSsBeLhvB
MI8C4O9rAGc7MQ7uilybKwA+aFsTWQ6AnZog28uREN4/uY2qpscXnsaadI50
oC741qqman1RIZ/AYU9IPM+1KABh/FDtiSc2hGU3dbzxJWTVHWlg4zMbLYy3
Qxc9aGxrYU+ZUGthvO92e9GdldTDhgzMww0ceGJpYSax2VN9iVqYoBsLQUzf
hFl3+tSCVPrl4t/m3DMPEq8m3XNeL824z6KwqRKeGS/yfG4/Gd2LNdt76FvZ
QSJ4o6YwfiTIdPQmCqOhpjNdBDAmoiLYvMKSwJ43Nl019WB4kothJ1QnGC62
PIdvU9SLgmDHc2il1AVd2IvmOdzv8xwcDRwcqsPOUcRz0dduNHCE76BNYuM7
RDOJue1Ax6ffX5UqGF7hxTB2kxotbBvGL2gtjF2la+l6IBzTr+OZshQStfAj
np5rQngMUzGQhbAJ6rjmsWEyohZ42WOsfrleSOANNXPRO1fQe6HMxe8L8wXB
UMET+3ZUZ6dlOwh+a6mYEWiI+XJdqvrjlibqH7t8y4pqTDRDQnaclTbrRk/q
JUYFDQtgvTC0ZkZr74xx7Ts4sQzTnr5I2tPRxGic4c9XE3znaPguTaIH3ZCm
+uCrK3o1C9qxHxzr5+6Nfu7G2twFdWNA3bgo1K2HuIa6FnFZ9u4R2eun7oEp
bZi6xhw2AWmkMd7XxH1teRMWc/jtbxia6YxEMtTFy6FN11mtjH5jGAgx1BXN
e5XjDvvJy3uJNHmjVfnwOfG5YX2AvHvtbhc9iRz0PRql2wXkHX1dR3Yhvo0G
RjDjwkJg9hn+F18HAob6EeZXNne6YkBm/qOhv7qHLQLfNSWZKYwV3NDDp0qk
teAIknXD5UZiCLya8xlxvD16+NWt1KSrpKYWDmhX1BaEfl2s/3VhPEO87dy6
hbOQKDk6gyfzp4mWkSuQN3VF8aXQ+P1LpbE4Eo4otmhcd6RANj8fKvDuAl3S
VpUVXa5PoaR7wtxk0MFZAa2XgjpDozAT8PXVLdSrK1vwzjjbkvj/tL0HmFzF
sf49z4TNOUorrbSrBJKx772277UxGETOIIIQQkhIQjlngeIqgHKOC4icjMkY
DBgQOXkBY4JNzmAwOYMR/dVbVd2nz5kzkvDfH89zht2Z2dnRTvWv3wpd9ZEN
SSyoyAoDL+vXzKrY1js/pzk7i+MnJ8k8OYtkKONHrDJmJIsyxgdOWE4iRpHI
Y5G8fYSk9ITILGdTwHKKGdvZbO1X686x99XS5Va6z+fu3SMC9t47MuDvA/Qr
H6JfjTwdZDBGQiAKwRKYGPz0pFLu//eyljt/aQ8mrmOo+iGIoiDa6yAcztNp
ji7JLf7qAxB7Khht/gBiv0+I38vb1sat79/EELaTfmx67haBMH3Wf5+InCUG
dx77GxnciWHT7VIOwrYRyDb/0rK4IOyLumWJPriL1YBK4LyYcjiRwEFlRa7s
XG0Ixp8tjwfynZOlPE5iwdWuuhkwRnbuyWkVXBaHCjHACnOTkRLzO1MjbTau
d5VrGGKbQ0Urm0+Xzt7JSCTif2InxLkyuUiujiMRdEH/YjdYGpkHAX2OaATv
EEfWxJ5UGXtoZ66zsBTelf61DaKAWMyCkElxMhuCV9RYcJnuSTRKO/AxUlJ3
J/3MzGOaOTSB7N0NQ+h3gPiDiPwDixnJV2hUZOvxhYziNUfTzoKdTiPCFsVH
E4aP/HlHK4T98EIiOGoYK4ADJuv5lJIArS7eoPztLfxN6FHC+GlvOR6QzN52
vRKit/Pt8+ycH/4tNgLdlR+qF3mdC+YvxsHcDy93ig8v38vhZYC570+T2knt
xJ9i7BZGOk/uEUJ527JOpm0JXec0kvNK1yK6FjRmk1xOrOBVj/xJopOMedbj
X2cc/hOzYWAXc8+kBrN9YoMLML8TCjCLsEbH1+d15AMCzDbG8dQUmRH3BBO9
NFesI4nZ0IkCF3PmuLPGnm2RBunsNJCeBKtJVkMtzzy6M1+tp9Ty/0+WLiUJ
KWFOmW2n1grBR0Fq3z+qhP5cTHFV0jaeDJIvOL7JKelniOIY/wlF/eYsaR/y
nVXUG6tArk06Ci4V5OzOs+2f0tEmIUngHBMYYmIaaOzHL2FJ7h01dPEMLbbY
QCQHze1I5ne9QgvI6euH1HCt3EPDC8xYzGk7p7McQUl7Bwpl9EIPSd5lvFOF
HEE+l/N4yN7Z8jiF+GatschN8R8cxf87oPiaGIpHSP6JJfmSgOT4lTaq/BZJ
69dbJJL8DFH8CaL4w0RxwMvWWXD8k0hu+0ojuXbqvp1CZw5tvVwkomxJzhJ6
kHwtcY3/dop6UoTl0bweAtdg+aJDAkUteb3sViHYdIYf1Dmrbm6MctyeOMyp
qCOtQizHH55YzqONHqCr34G9zIWn0wZ+//hyWtZocIuqQov5uxXp52nvV/y1
kQe8aWiJuWGwYB1In0BvZ8whnc25JxSajYrzFaqs5x1I29lvpX7uSMK5JvV8
lHskz1bZgnq6N9LNO+6Yt+J8/4DLOy2Ps2I74R1XyYTv8342z/5stJxOcH48
/7qWyZW7qM5o2mV1BgZ4YnLziH4SMIM25y57GN98e45SuthoSY4zLFs0Y4ix
DAhau6xhFUdMvllWZR6cKqOdAfehOtoZI54x3vn2ce3dkUQr0X2w26jJ0wp2
luoW7jHRk4u5B2xPyHXQdzQ0Ogh/3yiP8qLZUxpMgfSGDLeXwJxEOW0OLMkJ
5hecWmcuGFDHJc54+/gVXOp88Wl1iX2Z6494eUJESE49sKe5ekgdq/NnlevI
Hb40QwLWGO/8wwqptmsjh6b1dBmlxgp7WFd36DzmDGIoZNI6vAtvrb5ax0FH
NOV25RoxTVslZFJmNpwqfLd9n971yjQGEd9vUL6jEcjEg5nvKSfUU5ofbFvU
mYPWKtIxXLo+FS3NANzTDHeES7jptqI9HaD9vx3a0eAJVxbWXbRk52j/UNGO
P6qfMIQ4R2z66ZlSOvfQRAytLOcaYBRoYLYYBDrQjjg1TnMjc+cfPURkI0ec
Wko0GOY2RK3Bk3RIppOuT4LtiZ9kHUEcu18Vn7NeoN1BojnDaHeQ4Qd2ZsL7
Kv3s42o5VuKTParSc7UGsWRHL1u4LvNOaDZzj2/GX4r+YQ9N4Ft6/AFW8lDu
uK3j0RVnafAEYewNJ9cx2icd0ZmxfgnC1ifSez4uwPo5ivXpivX9fr6H+Vk7
UeiKb3t+XLv3xepyPcBSmhvk+4nM9kGOr5Pxd6djcJ7e2Svk+Xf3VrrjPSQD
rB+3m1iPP1HeuqCnGdFfMa6zmdsu6ipBcIRdziTUz9wjd+HdtZEqaT8XGQ2E
E9qh2ZGP5EB4JB+JghAOhkeiL3dPaDB3TmjPaMf7PF3/D7RjeifQbiMwfyO0
28IQRGHCeC+NRmLoI597XBOZwYME2wfkUsSnfMTTdwT4FMfL+Usz65gmXAmJ
2WT4iaTLObaNF3uIX+iS04hAxHSyY7xjBLz7E8KBcYxZG0DqBkPlrh1ab647
o55Rjv6uKJx+4yyS6wvKzYYBYvvog93qn3rZUqU11OdXJ7rulOZ+qyeo9diJ
OZH+rPZ0y0YiOdT6x0pyBL+jJEflx1PaCKTt7M7SdzUdra5TnCeY45ns3k16
bZFSaI/mHPvOBDRPO5pzIfRReyWBc/oMYqIt9F4I54luIaB/GgE6zpIj4mLP
twDmzyvM2xTm6Ex6ux5C3HyiTBAG0NEZdao7jRFu8hQCejgEboHuRb4V6D93
Wt12CIFWR4uRaN4RVmGPJ+bKO/pnXOYdKbJqwdE1Tqvje+Qd/Zyj1ep+oyfb
GQShbJ/mbVNwVZiWE5vNfCL6Y5PLOUtAlE8C8xk8K2keJrzXmgfHlwHqZhvU
OmpD9u9pph7ZxK0Yrj6t2Fx6CjkRJxWazTjlwijPF5QfIA2vsPth8jKAFwqy
aHzFniK38XAbc/FiLN6BwR4ewuOOFuqBQh/BWqrHZdE+liPHylu8Hw818BNi
95a4ys5iKhFaY24yE5po3XZF1/iU5T0/snIkWiodFeKtHq0hxNcHQnzHyuwK
Eib24uwSvtvHtje3jpHQwKBDeknAZ+DBvRJkYMPbmeuG15vnEGiZGgNtAjb0
eNsEDrYkzbw+YLWNtzw0Fogl2NJ9YDeSmyB3EjBOAdspfKVD7gFoH9IIgD88
VkInj47Da5DQpueiIvry0+vMlXRdNbjOLDyhySyi67SDZNeh/0ushJ47SGdG
r+3fzNL7+6VeslKG5HC7Iz3pQh/yeVVC6BzpSQy+4ToS6Ow14cMrts/q9+eE
xx9bOn8wO1wXwnQeWuvq8tDYo3VMD8dmrgNJaT6S3a3zXS0Ixj/Up2JlNuCM
MQh0cSlIfgDmEj8OHnRnyhFBIakNONcm9nBw5nC4VxWydmA3urry4RXAGWBG
kyb0yf7zFBmADBohggBSXXhKsZviO1jhzFUZ3qHDUDg8uyya9aJtmQ1Gp7V3
EwIsrgPfPjI7Z/g+laGcJA7EjNu/yp08RARlaUxOMnpq5RjS2aMO7swa+1jM
dOpTm6Wx7UTk4JB4qTtpuN0j8p+JyMjVXjWsvTmVbPaJqdJ+9vEpQmt6HMNM
5ZZI/We5yE5xW2kepdd4aEKZuZ9Aff5pUjqCv8W6vrXmGoL05QTpCwjSW9D+
gyC9UiE9pzf9LffJmFH/h50MHVbzYovucFRb+QzdjbvwfzvmMovPv004NIe7
6sUxOz8MYj9g4jPbBlZCcO7C9x0ocnpSpVdL3ZwVIcH04tbFdrB9z/gMZiTo
be7WmpLdhbNfU3JRRE5rpIRfb2NNECkhOW1WhSMlUltS6Q4gMqAjJX4rTuli
lpOcRn0JJPVNI9sJpKUxL5qAgH/XkEZ1kJ5sS05KXdAEsy8vOx2BV2hrIjVR
GowNkVoojf+TCdBt0sw5timRzw9EwYzYx5/H44fbxtMTH59Qkqh21XoS5C7l
IDeCIXiHNwyrNy9Ml4AI0pd/GFFvXj+rjCcmfLFIx5it0TmVW6uEznZUQqsP
ZX5sS1WiYwjS6K/HH7oGQ9pmtg9PJvOCIQ9PrGdA3z++XnvqlfCZFR/QNyqg
0coD4wxaR/fIOOHMcE5qYNsR+jwNc2eCPktWPfNb5vs2O0hzjL+u0Gu6RIBO
5OfG82oUWUI6dwedmc2hVCVd6wZ1YzYjwP0+XajQe2EOcZkE82PEZURu0T8O
dRKI9CICskknrK9RNuP3+9V6foA7lKr0AtzjWSWTZg6gHJbKCJsc9H8CZpui
xBkY1GLbuQa5UpROKhPYbKHISIIygDz6kM4c1g6kshzwA5TjZpHZWQb3+1Ce
VsHDfPAP/+t0GdgGUOP+J6dhujXdk8S3uClP1Ju/TC03T9KF/z9OmH5sUhlr
6HvGlEpttfbUWX1irbmiPwn6voWm9XjaXo6hf9WRtAVhQhk5DJN/kzG/7JDi
eumgOg8HwbljHpp4cE2Jj2ktDAmaI4VxHIphRJqcsvwtjLkvJ7ZVK4dK/Jr5
9nDRyjEobj0nGCQPFGdVV+8k/4jyPuhkF9mwKL65vRfZaJc7srEzrbwxopVj
ohuf2+iGK/WrcDhGfQn+Xa/PKeesJI69YFiZjXJcT4IZoln1aBIBBNpqrx5a
7zTzE4TjluObzPzjm5IIZBMCbOWJxDwIr4i2jRXYIlSRYUYXMXjtIZWHs0Fs
A9FJ8+REUtdEYDLTp7RcBAx+bmqpOfvEJnPOSU0cxQCHUU2N84XgMOYHf9xS
br7hmcEVcsBws/a3BpPXe72vN8Yz2E4S8w+y8LRIFFB70yERxkB/UzD4AWLw
p9rX9H2vdMRnMEIYZx3ZSWv1LmyXcQV7XB5CVOSGGws62ao9JnAqEMgZJ5Ad
f4d1l+ZJRdknVup4jMxjsxoFwWsFwfbESgo6OckczmRxmPQxvSxROIn4RaIT
14igPBpZRUQsGMCj0XqiTPpKnC7nVGSKuQyUgThGJ6M4CO8kFM0CmZ25X1Wm
XXYxL2sQgcUwXooRTJetlA5lFz1tvCYyQoxPdNPbXniMRC6A4Uu0I4eNO2eN
kxkRDB7IhWDoGYxHxmgG+j6FOcn08T53ZoV5ju56Vq6keYburuchyk9PxyUo
hmp+mBTy7OOa+DDZpn516KzA7xA94DGuDwp5a58Cs+lY+leSOj4LJwhps/pF
Q9J0qiuzoYlEKLNo4xXQwzZesSsAB2CNxB8iAO6dC9TBFHovYuEo3JFv+wSi
+JVm03ZzD9O6VOlLFHYpw+gZl11UgYDC5q4OomxyxpdjKJwlimt3LYo5alEV
iVpUuqiFrfKzJEbkYmX/LiyM31ASv6okfsnFm8s43ox04rWkO6GOB2iUAP9H
5AAT4ZnSbROAYZtZBJST5tFxOLcqWJZcH/0/g2gEhzqSHJfID9g7QU+qEN7/
Qhdxl16EFHDif81fJwuD0aXUFnw8P63ULCEOL6XrZWLwq3S9ThxGZBnFIO8j
YYgTLrYgBJFl0rI/LPfYvFH57AUs2ubmmBrgHSZEl422Ke1YC1sGo1GSbW8X
ZTAaJOEAC2qouaXd6B7S/V8CFABw5Hy27X8EHJ+r5wYz3skVQXG91HrA153b
KBXVm+oSxXHBZKWxBJNTvibG8cHVtcmAyD1CREbE4t5pHbnN9Eda/oEwMqqn
cVblSS3zAI2giEGsqwaWmIv6l0g7tuODcDL6EwHKGJy7yI4UPzA+P+hXVGvE
Igk6J/UsSyQx6HptoE/eCCLzqH2rOGLhNyeNZgZzDv3S+j1LZohjUBmiGLFj
zgQOjc8E3pODyueczFMvk+jZSh/R30BjvdDFFXPtX5iFq8I8fxbuo4seo+fR
B0TcJtcQiIZSntun2cwhPN8/Ft0pMR2klKc/IdIMRC+ht33BiYTo4wrMuqMk
wrx3oyhkBHakOFqiFMgQWirjAhDLw/ED/q77bvM5GPASJ4bTuV4gKVPY8aWr
2mvkJ5/Er3zMwaRCl/UyIwb9l2ld0isot/6xfPYiyghasFKesUc2n7OCFvVB
0MLPAe6OUtY8IAculkvg4qu4wEWE0bA9OaNYbl6PYfTzxGjH6WmSG0So+fck
l9GZ2vL61AN7mSsH19twcxKkBq/H+7ym2yTuEpqnSQyX8jNQdTcfvEaoolA5
XepzmuMUzGdhNL0YqeVEV1fAYWMWiCgjZvGax2lo5nfo+mh+uflqsfDa/p85
vUaLNCKc5pkAR+tMgFyN7bQdKfFae6GWmAcn1POBw1DxBnEaA7vQfhRnXTBd
F+k+Zg5husDJZK3QaB3ZPeWQnJKD3IRjS2N0qJN9msPGG1kWb6jz6jS6c51G
JEJBf3TweM+gXsOV49WG0nt47Y81iozIMcrukNJ7agZOsVSYe8dJbQZGUKHp
2qWnlripI+imj1plnKCefkgNN2q2PIZ6nevNcLEnXMKt6zomuenobxnNwPD4
yMEWv/k/hjgCyUjt8cGaSPP/xYftJLXnHe62hRoWx8dxp9Facx1SeTFN/u/c
DRxzJ+3Zyl7lL87A4/tX5lSa1+ZW8iBLfP0yXS/NBotfnFWRqDEvEJ+fJz4/
M6PcPD1NymuRhm+bVMals/YgxLn9hct4/Lh9e5qFR1abLcflm+WH5Zl9OqXM
Xh3LwF2LY/Q8Ov6IAxjFtjvd7uPYl8H/Po45zMxd6zrJL9leWVnJmtgFin8s
ex9pzMrmOfYiSnFbw64Dxn6UIoc+tnXTdoaLX163Y1VVbKQiHDiuMO+3MH/p
r7Wqf5dEO+bvmx5/X1H+vjgTDC4TBk/3GDxV031TyjhsYflr/48CZsvixyc4
2kI7IxP4+AQOOKcR5kjswT/1uN7tqDtJqeup4mdVGSNCEaUuIhSvnimnBhx1
Zwl1MS8dh2A+ml9mPiO1/O05SMdpX471eihxi5DXNYOGMl6DvxBxN1EV37df
oxSYpQV1DOpizjkOuGDyyp9G1fF8c1CXY/AH9nTNqkf1EHhu0zahLI+T0fo4
zMhK+e00pCA6E4YxhydsfFn6hfr6uIBx3HqG4nhdOGD87eraDBO5ZyyNP1sh
JEbcGDk9xIvfXFBtXpxTxcUVyOEBPWhPfzM3hyg1l5OCvISUcatHY7wGVCiO
t4DGaJ+/6NCg2EJixnkuZjw53LjfdYFOSukFa2R6jIzKb9o/fJ/KJEicOIzb
SUfbiMYm81QW+zFjy2A02FiirY2OR9fck+tjk3dg8L05GIxufOj59Nq8SvOq
spY5O0e+xv1vzK80b7bQRf9/g75/fZ5w+VU8B0cb6Ou36bHX5ohcQhXsczox
FUkcRAtRFoVwIM79rjuxBuOq+bnH/GZP8/OmctbF/fbuyDHj0LEWCGMbqtgV
hXdC138fxToDFyx2HZIEyifzi7ZMrIxAuSk4svJvQhntnnm55IJyNGjhRHFd
TlEsRxNqskQxsnk7vGyeH7hwYF6oYKZr9aldgGXzzryKEJhfUzC/fKYNJZfl
FMewDJ63eEITWUip+R1BGl8rpJP4IglEJ5nBGWYuAs+Wu3/hyAT9CKk6KOCd
MnkqnktETvyCmfy81r8he/eqRo5XnNxsVvRr5kPhlsn/UC5/MC+Gy+skw4eS
Z5utY/aurvBa2lXElljguMpWO5xcu84he4eG/JiGNfhgWRq2Ef+1p9eY8Qc3
MpRR5iZ5unbQs4pjraOQJnLK3/RO+cs1FXnM3zyWxMLf7gF/1xJ3RQ/bgjct
rZAARVeHYDvM0HY7QrEyusk9Sx7140SZBydKqu6W4WWczfodiWEg+OL+xYxg
jJXi9L+OXAWC0TMe51K43u0gKUZjBO+XjWDBLgGY/oloKseKeO+MoDjRMSt7
hwAFwsb4nSf/ptEdMIxm75ZFsnd+cMIeSBl1iJz6uESzditPpL/2ifv3SlSY
Tf3rzW0EYRcpBoTHlXH1cRTCCD7g7QhscTKe9gn6hv5FYC24+/YCpCreXViV
6GzeWVBl3iYe43qLHnuH/v+PBbRCFyHpU2XWDqAVSqsUh4ghl7ASsfqeniKL
BEIGRUpoaINJGEuPqWYO/4I4fGBzyvT9dUdzZI/gRCHIZ7t8VgoNQ0e4u2Uj
uOU/iuDIqFr+ThDcT7J3Pn7/HsVv5x+HX40ZQxOHYxIxmTs/JhHVxRfsvi7+
gXRxNC4RjR37CIatIDYBBL+tCH4jguDd0cd4HWjkv/Il5ASOoZkJyQnmsDab
BJpxoaIY3E3iWWQIIC0nnCdzrJhuf+Xo6xGYFfHflL5QxX7u7lV6jzYeAQqv
pCtK4X/Ow+FCqbH41xIhMR86GSpHuzmmvFxpC/LGTbTyDpQwgU8LE5jrJ2ZJ
/cQKjUX8faIUt409sNG0LeyUSPqZuoWdbMi4IFzPhnBwC08edCMH6zNZRAaN
ERRum9OY4PLjQi9ijNJjPEhE5ohxEpqYmZzMIYg3Du5mNpzezR0nwdERW9CG
OgAJEZdL0cQZPIeJaXzFaQgVC41x3O6MAzu7AXqWxqg+DhVRRELFoCvaGKGx
3ARtMHc8FyCDwr/MKm6zDTcw3RCxCdtwY15ED/sNN2xMwi9sYwof3FkSd6cU
uxAxSotx9Pok7kvULKHh0RKLuG83MIzz8MRc81aLjOTF/8FdIrB5b1FV0vxz
Md28v6iKPrgPFleZj4i7H59TZT5dwvVQZCabBnVN1LCC+mBhhXkXx4CRbD9T
luOzU2W5YYmgIwK6IzwyptjcP6KIkTbkf9CJbg9zxM87mv1/2sH07t17+8EH
H1y1C/z+p8PCXudQJ34lInwMv2jLhMpwJCIXeaP1EjshL1oisVbJRV4bkYjL
2F3sRSRU/La1NMpRs02e+I3J2tmohKPv2QF98RGCvmtoW4UAzkXfV88KosMh
+ooIRhphWlnSLD6xOQkK01K3cQpszsRgQWjGYdheixi5Aw7qJS56huPK19AD
iDMrZ/HqpHI7uuhDlLUvR2olwFsoXvy1/UjE+8pbKN9PFpSZTcRJzHLFYb+t
g5rNd1YJr2K+ShCi1rU84gDE0uDEx9aBzTLQ206gipRJ+Kh9ckyRit3ufqfk
1pHd8/BVHgib1jZGbCRBB42MK02rl0GA9hy2RoOt9k1y0UTKG97N8QgnhRGO
4Nq1dXU2OpwH9iYD9qZ89tILEnmTiAzT3x6VxG8sQLValatWQ+UsirYggVFJ
YMGLqjUcyR5BAAN4bWUxJOeKIwvNlIOquckGgJijcCKJw9ZJCNwkmJv4H24a
oRo4VDLhz6DCP+8Qom6c9vUjweEDHoWuAb4lrm0qh/5C6FSK6MPtJHrR/AK/
A6emOfpLxEUpdRxxEX24ZazMV/zHQiYs/UXfoVsMRa8y7xNdPyC6fugIW20+
W1ptvlhWbb5cjrlz1eabFdXmu5XV5rGZHdCegRM93y6T4OJHiyrMe/MRKnt7
TnmilJMdb9H1Jhn/67QYXp5eYl6YUmKenVhs/rdDiqeZ7NmhzPx3uySfz4Pg
3DV2WxLZ2N29crVI6DiuR4dXN+F+fT3fHi3614YdfAI/8yMJfG+YwCP6/tS0
bW4KE5jDD0pgG34I6d+6cPWa1b9++CGH/o1S+EsiMD4+n8IfKoX5bCxixB6F
37IU9mLEgQ4uMy/MYBInIYSJHX/TseCQw38DkpnLQHKKkCz7MiEZAhdQfgY3
tGcTeK89o54L0PSohkZM5dAGitKWyEX2trRvU9LcPALy7w8j682tuEbVmz/S
ddsooG3wIfih1ac0myGH9sKl5z4azYZTm83Dk9ux2mXaAqUrVc2u1bjwGkEt
4gk+blEZAdyisdHnduCf4hbHN4BbtFR+cbIo20mHNHIkN+1QW+gom9LeFg61
W/SURibcqB6zabqXMUQz2RDlbheE0TTCCknH0sQewclovTaRhIWMtdUPHyyp
MW8trDYvRUvPxshhOZ+oyLJdRkRdeEwtn3fYrPXAlqiQkSAq3tb43lVe1UOe
O6cBSOJxgmbCUvVXjYn/ZpJOUKLG6VhoWEx2BVVxENqP657jxXXxRuLqgP2Y
LoiKo3Lo3oYShz8OD8II6EHR7wC0rKhnoj6iR+QColaYpf26mGWndGGiQq++
D6lKojWRD9XKIP0IIyiWCED/tQrzhFDvt2N1TRKjhbA5rpHlKW0F6KsEIoXk
oi6rNN8urTTf0PL86pwK88XiCg6OfbKg3Hw4n+TDbJIXRNS7x9Tx+fyWI6p4
92loaOj9y1/+0mGtMgZz8USNKwDu7RE1m7xx4lZ6ZWRCBcD4QXzdXn4tv1DL
+MowSp/1UPqURWmnH4VShBFap++RHcmNCyXsrATt/JhQQoyg9cMJ2AW/Xhrg
1EZ0Faf0tyJJS/InFqdeZNcTtsi/zgQnFam46L5zTmpOA65J8JQelUBDKVMz
hdsUq9MURwHOJkiezZCk75Lm+mHAyg3D66WcrG+TsHNZX5LJgw7uRb7u6Qf3
4tF89iJ0mlX9mvn/gOedY+vNXXRBsn6Ia75NqJWZrxdryACQXOFkK3/9A933
3dkBRP3JqV+S9AU8/VIFDg307WyWQa9OKuIpqVMPFYBmXFaMAwF87DgdbQ60
xT9DERGqQQ/OBE9l4qgsXYlyjQvYKjLEBoiq+VxJxlQNEmZralOsUbuah2Y2
mmFH7uXiA4jOvqvRWTTcRHcgnDxGqYIF6h+Gl4Yk6mWnSrm2ncmMegALVBTW
nqN94BxQvUQZTtSi1mno3ohkTrIw3dtlzrhuzCtUgDzFaGwEBZAgQ+0YYGrl
6dmHFoTmgPhh2S1eWNaC1IZlMY0D/6hbFaS2KOGCQfXc/+cUujDsBCfYcGji
WZWmMSAlclaLHKX/f0wEhRz9iuTnv1aj8a5qm421HM+pgWQ8CvUxBIMNjNWN
1YkyaXOImpqVleaHZRVsnDDSbxaLs4Rs7dp+TVwXc9PQGtO/N49A4vKsXYOz
d8I7hxZ3Nq0oDM645wVFD15NmJO/7fhWIwDjK7JTXs903gkwG3cJTNTq8mLJ
BUwXAYgBpkt/1eZOf22oDvTnGtnYfiBgfr/Cj8FWxkJz+4T2Zgh9PqhRyILm
3GxoWh36MvncL80sC8GTk6Uz8B0r0+en40sEav8uqpTDBaVMzBQcekC2iWAN
v/756erbzyjljvIvz0RX+TKuMmD/Xnx8egny8hMF7OfbOi8bV4XyXEMX+fpJ
kJPcV7DzI8tO4t9Xi4SPO5ZIAmsHm2oZ3Vcm9y0Nht6ho4PlpS3D/WCOlOBC
dIKZGJ0EZvJZ4ZHd0zuJmLbW5wOeKaUl92uY1wnUhARVWqb89mptsyVkiu9K
I2LUwyb9NbQCN1T3hVvJ5lk1ipSWX9v1lxnizz/oQfO2kTLsHnxBegt1t3gN
+PUOmsdJ8NJ2M7bNM9ELzbZysKkt9GFAPwZiokCTbtFPDcHViVaVJv4vJEDx
M2Cm7cRzqD0lHKm3RToLQd31Loha6IKoOIS2+NhaL4hazJOMUNB1x8hSyV95
rvwlg9vxaUycAL56eHsuokXh1s1jZNxflJlg5SfqusNd37GmRgb2bMQMCW3L
dW4tbAE3W/H5OKGztYaPIdbgU8WAsC3VcpZnXaX5nviJM5Losd1K7ESA6eO5
Uk+4uE+nFhKdibjJzeW5ObpfjLCM66xT7InNFl9sJsNP5scq9EW1cxqHFRr4
vl7iw0ejp8+o727bo4GhbT+OoU54/qF9boaGRGddPEPFh0dvRh5AGofQ1YJR
3423GP1C3fhPCaEfL5KIDHKUCKZmY7ScMWqrCl6fFUbpKxalDqdL+janiIJl
jFSAlfj5/HROeNGjRNKEJL+eD12lrDYHkqq0AdIYkCZB0kSRi5Xayq04lr6H
4UoEUwKJDZ1+KFcSME3Um09bysyXJEe/JZx+Bd+c8PoNIfP7c0R2AqPY/SE7
gU6EST/Vsc+QnmhCfPrBPRmjT49DqLRQTvSS9Mz3EYozCFu57c1WBEyd1rTn
dQOtyUmntNJTGuLV2UjohjqGZ4pP86a8AgFQ9XseQmdrZ+31nT3XIO69xEis
i4/C2Wh5FhQoimUtUFGt5IB6hgC1z349zZI+ddxSPThhFgDVdiNGc2AAdW4A
1CTISO/TJqjsJd69DZwmfpUlQvG+/aaVAKo0rcwPNa3EBAu0W0BrsM07i4+e
FsRHURQAT16yUGVoTMZePBrbXHlGO578hONjN4xqYJhyAbrC9J8K008Jop8v
qzbfrqwxPwCkaHa1SaehoRHWeTqk5wL2LLaxP0ELGY1t0SEJFdW1EKIX0M9t
q9HD6dVS4L0h6MSHieQYkPg5meE/Z9H7FzGacsKwwn0V7lfm683tCdtZGN9J
fDPdEvcEZel2n6UeNx2/NRoQiofK8w7j120ZV/HjWPqwZWlHj6UdPJY2cDaK
V4jPUsRCczrwO2NpDfY0eb1NCtOIE+9r0n85R1406RdeXBRAXUcwBVBt7ex7
8yNAncNAhRacXU5c8KHKYCWYWqjSe8owWdMcNiWw8kVszQCttJpemBHcjVnS
S/s20ysTOokaDp6+Ej2rTERoSQDPeIBy4gnePDz5f84VUZoCQxO15hNSpJ+0
CDbR5RdqE2HO4STGNw1oNh/NE8WJRD7Qif8ju4TMEg6A3Tq81jxByHxiNGET
h3BHdJdy1fxojJO+K2ZsZnwX3R23zbjej3leW1/+6fWavC+OgWYebpMunZ9h
WnbnyRqPnNnIvjuc9A/JSX+bnPSX1UlHDulxD5P3KCZvV0yi6H7SkU1m/OFN
POfHYnJzBJM8RUMxCZR5mOT3Pk2jn1NYd07ex2aWJrHanOypTTzbtj7gowTo
zr6P151d1abvoTs4nujBMUeoE8cGoDTRiODhCdLPET1kHp9azm0NrhvZnpNG
dqj0ylO7cqLIwpEV5krrjdcKGFldKhS36Yq8CI7DxXWIbF4ki5U/RCQxLqWn
X0LXRbXCSEzgGuGVXiPLuYw8I7JD2NptZFvXnV6znXMBueG4v3JLmSe0C/Rj
b8uykuB5JuZ57r+qgIOuLirtfmk1f/9TUZcuK9Q5yAoxDTvF0/BBj4ZclJpN
w9ZppC6n9vi3adi2UDqtt7V0NG3zO8q89WHdyItDCXDbrA6JOtN2VgfTdiZd
Mxv42hHy0isdEa2XLkSUDNEHCypCREQJxjvzykHEJJBIIITKfHO2JI7CUCwD
FJNo7EsrGmwE2fRKg4954B+xAJLxJX0MZ6uQ70mCgaQbLQE9fzysIQWDSXCQ
3o1PwhgapswHjMS5pWSxHxLpPiYiru8vmVYkjJDseX82fG4RjZ9onv3VacUs
GpeRD/7K1GLz2KhCPmLV91f4w3eiN+oBUA+1FsfGKG1Lrkwc/YC8cr5NO/Dt
WIdWXXUFYF8ee93dQ7OEIA5xiurdxdXm1flVLAyZejMC6iHfE6XelKOazKQj
mrh0CdRD+iSXtx1HPaRrcCxKqUf/tCkgnsVeYs8gbR7xsSELZ/eOTMikyy9W
Wq1JHknwFEqCx49LniLzHxCXxJieWzwfG5LQdrH1qYfDqjgUhSL9Ff27SBlI
KXeWvHdKB/PgtA7mu1WeEvSBd4EuOiy+Szj+fCnHULA4aZG2TuiOK4mxNvSS
I47bi98pww7zVraKKDSrUDlHPstCaQUHk2o5thPSOtY9DnnYQWMBxd8BfEfv
bN5VRB5w/9WGAceCL+CrAK6jSL6xFeHQoyv51NCj65vlAe5+lXoWcHd20N5Z
Ari2TU0YHMGAa1vXZEdHJM2I4/fCv7WP+ztJjaQMAUrzjEYeG3E0b1AcA06j
LiEtzxp2+E9Ie/PQiNO6mPsmNZh7J7Y3QxH0JRHH2GrRQ1Aett6Zu0t0vUZs
AbpYwxG/stGVAqtS+EoYlTY3j6xnboFVzuVNR3GVBK/oX+kLNxZvs+FkE7To
78HIEmwl2BVOmn/OKU3SfaXkn645pcms7icuIb4GpACnd89C8y36LlFI8JIM
9UtTilm22STLoyMLyYWqYclW5A4XRYhViFsGltZYhmCVr7DicsvZjSzVigCr
tNnBUs2WWxKt6KV2iFSjR1mvYVJDN9dFBfWVKPOBJwtovaDQekqh9YgHLZtX
QTn4Cfv34tanaCyC1qgYEHbuSQG01jK0CmKhhQYnwI/NqxCSUoFW4wghuMUI
S/yalZzt6jrTn6p+oJ2q3sgF9ud42RT8eryNLccXRjIpRUysy/2ooBb6oKQS
EUF2YCdJKvqJCLFQTgmNhtlviAZun9yBDw1gesrwI3/Cf3XELBD6RdkXT2A5
Gy3bO0kD/0slut+2nET7xO6Y3CL0K5NviV5ty+gTvYTIdzFdF2iP4k2CrB1n
l3FEGscqnp9UBI0WdCQJUhzKqMkxxPGaRzmXU6RXPUu03v9XQOzp/CPSHjFu
JrOHmLOliUN2rdN66HHprqGxNW2rOpu2lZ1M24pOQdlNSFzVxrqabkwvevRb
d9PF7qqcu7ljhcTvILAexrCyqQ3mwSkNZuPALiAWvSfiVEIMA8RCKoSLIvt3
MXeOa2/+NLaduYOu2+liWqHoKk880NlKrFlKLPiFy0hgpRhaCqCEJdcrM4NY
HN2T5gdTrKWWn9yMK+FgFY7PCazS7oClXknQimA1G57oP1hrlRK05BpySC8S
GPWMqCHSRJa/XkXXO2cRxd4hTpWAVuxUvq3jBt6cgU4Ukl0654TO3GUP8oo7
jIzoXhSbwKDv8m0NjTuv7ncPSTlsZbyCcMTmFF9Z82TW6znKlNIM72cH2qSu
R7SObvMd0kCz7olurrzxC3I6UWYDCQaiITsMoj2rREPJTRzR8CtcppiEDGJd
FyjRUNUSS7TfCtHQLQ9Es0mPaShktEgTBfY/8T4n1Jc3nxwlNnhRnNdEiQ0y
HGs0wwH11epnN46p4TeJIYhX2YDcUDhvgc+JYByrrinSGC/EMVJet41v4LFp
yAAjCMeZX5JdbWd1RBU/yelG9mtaR3fXQBupKSnqqoZskNFTdMFZ4t3rGlq/
v6cP9yq6rqD1eimt1Qu1VeR68TK/XVRq1p0iB3UXHieCKxPmVCC4IvdpSmMq
34bKXxzOavix/2GPdPtF9ZFomS+fGj3/sGPIP2w9aw8+SY6qQfyzRpz0U4sx
9hFbp9A/+fp2kerBeq96sE4cb1fykgNjW2Iw5ioJuZvbqirSsL6f+C35id+Q
n/gV+Ylfkp/4uaYiPiE/EZEzYOzuCe2lFCYJjyuJSQApEWuDD6FvTz+kFy3C
W0e34wI+XPwYE4zYxWxKgVIp+eo1RhU0FGpVbuViPyRjU4IowVSCOZUCpuiB
dxhWpbhw0Gs2Sg3vICCtUggNFihp1WCVuZ3eBIHJvI1LafQG0eh1ul6dXsJO
38vk7L1MWurs4zvjdDdX+z1GWgp96MYciBlnqKoO5JTf1SiOWlxhnb/71PpB
qaVlLHx3kYbGdnheIz+zGHcxnJIswrpy3Yoc6hY6vaF0en620OkvETrZlCxe
FmdcEG3HOCgUBqIUJI5Oqzw6naZ0ws/7KVmiE73hqWDUFFZXWtQSohPm9fkp
A1cAeEg+Ky0coJF+RwVmnaYMoLTCEbGioJx6oAyX4poV8g3vGSMRMaisXHRC
moD7kiyR8mikB3b46YFWdQgv1NFIl6mAwAr8na7Ka3HY//p2Cfk7mmuVT7/z
+ASFtTlwCDHBAQdXbxhSg3RrfowvWJobTdOcBItILHHvDhD3bkxFwKS/dMot
rYhLrbP3NK2zZGCU5VJba5OLW0lViUTx+Z/oc+nq+n+bS5BYkkOLcGlNVUhi
2Yj+d8qlr5eEo/qfLq5gNuG1UPFMDiGtenIJaZ28Px+xrHLzD3II34W8egc3
t49plzS3jaEPDqCS83oAzyC9RCvdMoqkyB9G1jOj0mBUEogC2IgleD50lIvW
Z4RThJfbpGAZyKGPdWW/JvoRxRFfjEhiVKKGqfS2UmklmQTylX8cUWfemClk
eo3JVMJkepHI9PwkodMAzCs5rjOPa3pouOQ12YslJBXHkIhrkFEFwh5fXSRS
r1RKpLNynFYw4TuuWc6PUVJ5iijFE39Xxrd7ODdR7+cA1ucrJIgFTuH0Mzj1
8jwpGUHRchynUMeL0xFcczdMRtbBN7ScOi+GUxgPukT9Qrw3CWblWU7RP2ga
JBQRif7ltoM8OMXoQio0LKLYGTzInvzIN5MPrObWcDMOqeYA2gYN3MMZXHh0
DYsoOIOXavjq6oHF4fCV5ww+zjXJ2YjCGTq8d2Qvv1lZjZJjKQPZoGUg52qA
/iJ1/ICnKzWgfK0u1Bv4OAI2+xvb0WbfOpm2l0ndhVNX03VlrXiC8ALXSZE8
jntCQ70xvXj7yEO6S1cHps5OVNN0eSjU+kFCUlqzYWmUQyVhhB1TSIkUdfZs
oMnc0t4RCUoJzl5Qo1Ef1LnlItK2nESS0ZuVOwXSDg9I32pQ/SsF0ucBkNAQ
dkAX8jMUSi5K9T4BKQqlFBw/Ejiz4f29SQ7YG6Rv0ABeBRGYlAGcMho/Qwzq
dP8ikuVL+Iy+TIEmtCSBobeILXRBPsExe+vMUgLPmySB3lAJdOvwOnq5npz1
44MOAM3kYtICtWbx8dLsZgHBBo7agwSbmUewsxZMYd5aXy5ndVuHd0850uQx
adIh0tDTdwMyhTGQSStkbF1aED3fwwcPN2Sw5ROADLqhAzKoSQtDpoIhg4g5
inrnHN9sZvVp5p6QOHt2q9aoWchc6EFmYw7IBBHzADKpADL/y4A54zeVoQFC
LkAeEUEo3p16kBAGjSiti7b1hMLYUBOGJF+roSZXMzG2jBvjwkXz6YIOYuiS
8N6iKrN+YFez6fSu5nufLLY24jyNhl+s4ucKJct17X2q3NQeFdc3tQNfhC50
sRICXS73FNDaCm5GuokU0D/OxETQGvbOCnNLoNB9Mq4nMcPBSOgiU9laRpWH
yfJn8vtb56HrG0OF4BJEsDt4KboGkTq2dwzgcrMtWlCv06XpInC5rM47xFUb
hsu5NVlyx2ys1sT3zuny/fLKLLpYV+wzoosveT4iuny4wCcM0wVh5nnltGyI
MBwL52tOEGGaXS7H+pQ1eKnXZ5XlQ9Ck1SG7xZ7CGgk9QbdJs+Lkpox540yc
S4DUefNMviB+6LaIkFIq2sXqF/WuXoGGoesl0jE3DK1NBs2zMubUA3qaS0+t
MbOP6mTRksiaEUwaJmCMPiBgkYayUD2bXVUWTq9uqpNG3wFqkooQ/6RACb6L
sgX0kSMEe/hVXnwhqG35gl6G4Mvbli9zq8zfPb6gXAsdtead0IUnK3JIaKw0
mULDKeYLeh0yX4py8gXRGu4pEeYL/fuIMCkXDSK5YgET9rDygli2J1/gwuHV
B+/fiTsrzjm8xnlY+Hm8o0tOKXLxH8Sxrx9cojUHpa7mAB4WvCt05Ub711dZ
tlTyMf8Ng7qazYO7xhRdWc+qTjyry9WjulblCiElhT0eRVe8GHG/2sI1CP/U
SgD7XC3AGtzMkuWjOWRzU4u3jzqke1FUscSRZGagWJyYqfEVC/lNrS09Tet8
VSbz9uSJjKF4zr0dRKnc7SkV5zupUnEnQtu50LT5/U58p7jQ9LkRmGxCVW81
dkxWLMyTKuEJscQQS35YYdVKpTuJFuZJhfBkka9YCh1PPmgBU8rDikVUS0J9
KdAkHaIJR5RX9EOcGmBRJ4kWut56SX5N9PO9JE2Wn9wEF6uUCZPCaeMUCEL/
OGaI5cjUEvMiceQFkil/nyz+kC9Trjitxsw9ppOZf6ysGpUq4gNFkmBlvm7Z
zLEawgT5Q2nlDL/AMDs3gG7TiFtmJKgs1EB6DDiRg630XbGDDauZCibJnmGS
bAxogrDNZyuCzqiWJjjDiVYkz54pgw/RkmTBSV3M/BO78EQ/qJb7xslYgVw0
2RpDE7wPqJVDtdM0+HDmfsQRC5PEL2VeALEEF+fErBvUOxxLtgWeNpZ85qHV
5ihiyfADad2QUImP1BSb6xGpGSaRGpvFf1TdIIgUtJRG6zwccMchdqTrkfty
NUqbvcJN3/25Sr2A63W93czrL4ldHR/2H+ihm6FT6kWnTCTTuLxWIshbdA4n
6ZMvW0r5MBGZFvTJbqHkzLBfFGTCkvhSyuf3ZaHSo0cPBgquoJxSgZJLoeRw
fwAUDshcq0rlaguUOgHK7iiUMFBcQIaPYp3VEFIohhVKJSuUfy2rDAVlvjon
iypJ8/HCCnKBuOLyVJusLzf/nK9QmcdQSTJR0lajACrWHypTfwg1QMCJ9Yfe
gExhrfK6ZOFLOQuPZh3uInrMxN3wlW5BD2f08phJoHltBu5+FQ3tIFBEpCRB
mESF6JRpYEwJMwauEHPmhDBnWo4Vl+jx0TKlBIMwCRr5udJXWh2E+8AWJkwe
npanxRBH75WTOoXQJiyY8txXSfmKCJMEdTJCHYgakTjgEl16sqdXkMrfqPzZ
JB7Td5ZBy2u4mpIZtLDavKYMQnLrb8qh349oMKfSX/NxVTaYG402mXeP2RmD
xHEBh1YfXcAODc6VTzpAQhs4sThbGATNwhzi0Ezi5y5a7DPI1zOBs5Qv1URH
BBHjYQd04nnZIw8iBhGHoqEYRItvieTl4SyBQZgugnbJYNB7yqCvlqt4t6dw
tkRKhi7RffxqL+xyEzNIpEypsEelTNvqRi6JsZEXNAeHjMGQHDTWunkoR4dt
cWMIOXH3KYbOEo8ohKFEkL2Ssu89JHm1tS7MnweVP/cpf5yoaQi8JF/U4B93
YzsvIFzvKgykkDEHf5yoqQmLGuEPZPuG6kQ7ZlDr0K58OQaxqgnzh8/Xewz6
gvjz+WJhELwkQpD5aIF4SVzoCAC1EF2IQKjDAYPmOlEzB/cJgLh2J8EUSnIG
ShSNhn+RsTrL5q1UzXDCvTQffTJT4At9v6xvk7l5eD3DJYnuKYkqhxi+plrU
lJjnVdIg8hKVNS0agXl4RKG5a0ih6b93RxYuhR5vgglzdMtESaksiX80DanD
rSnSepTadf/Rcc+eD8WASXk+lAqahDpXLImYRpZQGXyljYe4auWovRy4wD8i
HCeBZ7PLlacHuRl8pKf0WDf5cd2EU2uEUzhliCHR/yBOodcFWrYhzcWsIu8L
mgm/8a+qmeTQTDl7Xz6nrlZOgQsX9BVWtSqrhuqsUugasOWwX+npwwOYQUmA
KhmA6r/MMHW6ZMBSAKm51ukiUC0+RJwudxybYLjh2EIz9whJhBxLsLpInS4/
onMDOV1Iut9FThciOo9MtJAq57kbr0cgBaHUNqtjGFLbNPxpHa1AJOEjvhkS
SRDlSSRzXT0nsviD3kaLcbj0D0SSHRIJweHRh3X3RoRq0CaUl1IwzebbtH0o
DKQeEsEZXq6ZqY7ZHtY9cTBqHxZDgNENAYysh8Xv/4o6r/CnNgwjFkQ1EUFU
DSAl7UF0jthUwcPCjjyka6LB87Iqg4jN0qgeqnA8Yi9rofDoQ/T/IA6tPbXZ
rKErIog4avPuHKghQg/XPEMKpbkM+k293kDqifNPy09uRsymNA3wkI6ZQfR5
eQZ9+/J01BKiZRNQM/CgntwwgnEjyKF/zPN0Wx5gx1M5Nssk6Cli9Nw/rJDV
zqB9We1ogwYSNSnxopgq2cxJCnMsblgKJVKh7BM7X4W84NPBtHkJ5ewEQNyh
jG6L5FGmkPDFOVpyJblvpGAnSiN+zHbmGdZdGk7uKWFruIobRSrZQydAEGqA
0DESCIK75mMIxy2uG9XAkgmjkTFwCOfV0EWR3bXhksHCuDQc50CIBasekgmF
zyDCUb/Z06wkl2oZIQjjfK3LNna/SpZBfF7PYogINE2lEkq1R+5Tqe5ansSV
I1LJumuQY+u8uDJ+3rprHPYZgLBPsQv7xBEIIR9kqv6xsJIJ9OWyarNlMHZt
HSizRZsKbNM4spVINtRjCYSQGxayBRB00vWaTb+i1rSO6cqVwtBJyKRDJ6H4
9cYhEkPeLQjNCR5yGSrpEHG4EOiMsoA89+8GeVxsypNB1yp51BVrHU9LYFx3
lUG7IA9LoeqIK1Zl0eNkEFu+omeHlULaZuhrbTXko+ezRYIfkUKCng/UD8Nr
+ehRLQT0uOZvXHjDgR2kuqWCMJA9pWg9gyw32oO/ElxMIhRVo5cieirKlTEv
TsNYHoehqVA+JeYcjKk8oclcN9RhKKGezsI+nYkPVw6sMW1jisyjxKKHiEWP
jCwyV9F9M47olEh60LFV5qqAmEtEKL+PjOVSebQwR1NWdcUiiCwMdg6gjANQ
pKtCoQOPQCnPaSH7f1Y7Cs7EHvwtQtCWNKjnsdWGcMpQcWhpgwNdN41pYNGD
sWbPqOCxpLmbD4CUcr75xiEl7PRgRUNbgDbbNIu0/lhxmpaDNIflm4nkmIE0
GBA5a39xzCTcPINJY9su9P219KIdtW8lkyYUZD5YgsxLDgucsrXHFLiCaTQc
Q34c82WWHlfjAkM3eKSR3HiYNJih8O6CSu4fGyIN2shsVtLkdsbwud0c9cTM
tRpQvrTGtI7qqk5ehTFLy7g1wq3DatkTK4/xuooddTQHPtfdUemFfJgrPlNi
XasYplieeGpGzolJeKd1LFnP2G6R0E5N4Fr9CKZAzqAzNLqWginfe+7V15hw
Baacnc0UljTEFHDlA7hVBBUy9DX9m81quixOcFrLqhn6I1oh88Ys23PFp0qp
UIV4Qk99RcdwkRcFDwrihihCD7yIyQSI1EyDjiGMkJiZigGNoMn1Q+uYJmfz
JQV9JGgSthYe4mZBn87mibFFDBUInEcJKG2ji8w9Qwt5mNZp+3R0KoZjMqxh
5omG4YBynQ0l27S3HKSo0CewKWnum67SGKhIFjzf/LDBJbtdIaBtds3jBwpi
+FKi7Vw2WYaxuDl6L9FbiQEcbWqbLxf+FRY96HP1wIxGHpOIOhw4UwFjqszy
U7uaZf27ckrrxTkyY4rPbEyv4I6kOHKF9QmHCrUstypjsIbht1xKfEHQZcSB
ncxG4ssalyoXPwgHYPsrX84KGGNm6rQBnr9F36M/ICqf4XhZtlglA1ZBHa08
UnwpmyEfcVAnDjyjgBl8wbwXTOS2ftTdypZHiS1PeGzBbBbMBvhwcZX5Ymm1
eWSGdEd1bEES5sIIW67VhXpT4Efd3A7HAa3/xClwki+ju/LpMByH5RDzAoSY
i7ePIv8pOPhaEsXJvAhOtLxvSFkQobmrQTByR5xTFOMQuZK9uiBKfGkdY6R1
TDfFSE0MRqqtU7RLjHCjrhXiEX+v0iQXRgKvqDxLmkCWvE+S5D3iB5ovraKL
GJIQiORFvSELkGRAjzzRItrMGSLkJuljkjQ3DoMYuHFYnbnhDL7oO5IgdAtk
nHZQT9UQuC1nXCwivwgXqRHzu9NrzVWDah0+5h8rPtMpvXuai/vXmGmHkxEe
ACPvmHAJpjobF4ZnsxlVchYYBa7PfZ6fyN4sieyyXNxIe2JE47uJouCwadoq
FHuVeqgQuWPb61VJNXOrXpvF6cEwbKDijCMEGzg+eefkDhwjRmu8lQO6mhWE
itdJjmC6KuEiCT2SqCPfp4LVSJtPi9EBLW4aSoqESDHuUAnPnovQC1JVtJJX
HEE+Cq3us5UUUCNQGBx6IVQkfuvO4QMcuPrtLROt5xIo2N05KOLuEHxWqwhB
JBoZqpEECkR+LiF3Z3mfWh4KdSJdW/rXCyTGxkBidgUPEkF2+/OlVebbFRoV
BiRwiPR8DbRcGoHE9VIew0vSio8b1cW5hpbfeFl+ECD2KBZaNWwfXWcGHtiT
XZy4YSJFUWLMlyeFUtpxDZGlw2d3SXPfrRxxmab2OTiiUsRnyJV1QXAFfQDU
xWkdjX9MtzBHrBSxHIlhSNvMBiyYwV1IVXMDdW6i3sUMJ9MbzkMxNw3sQn+E
jad1MWfQH4gusnOcskrxqDbbGphPJtBrDD5Uul/aC8s5rYW/KJwb5F3iQgwC
HQgR9OXAg3p53sQvtHWxzBui/9N9dJs0i09oogW0WPFwNaHhqfHF5i90PTmu
mBBRbB5XTPx5tCoNdWHuH15oHqDrgn415vh99xRvhxNDO6MFC418RUFW2UtZ
dJFvUg8lI12KgmIXTQfJeLl0PDLKNCLjpc31DERrfeInMs1uq1b4bQjX39kZ
zJYad07qwKeBIDLeUCcG1LD0gCODXpJPTYtio9TcMaLU3EzIWHWCDHBDoPQ8
QsZmWsvrCBkraX1bZEzYXxyYMb+tFIEhjKBP6+S9G+k9cxaJLggL7v2Gnple
kBYihZ2WI4Mg7ZY+Eh6B04TwyOX9ixhfa0+qNSfprHk0Gr5scH2IFy8TLzB0
CMOGMOwCvdwgKtrmdpQM9rYIL7CsrtEt+/p2WrRb4pYfCndbJ3ST7Rqs2KKd
rZfgRFYdijjhrFTFxECyUNHCt3mhUt5EkCuSLFOjKI5BpV6lnEeHm9t5YVff
UfHIwHkg7RBysQ1+SCcltqpzRV20ze3AAxtRgStVLdIOFH8ufwGOOOInTIUt
g7rQfbgtMZsHdgEXzLDDe/GFk+IbBjSbeye0M9txjW9n7h7XztyFa2y7pLlz
LEY1/mlsvbljTL25fbRcf+SjRziAVMSVb3h7qIJD9hhTgG/GRQICIuJGul6Y
Vppm6dDBXE8iAj7H38j3eG5yiXkW16QS88zEEice/jqh2DyFy6fDONChOKAD
XY8g2Eq+CPI8t5xWYK7pR4Z9RKUZtn+jGbiPCgpd4bbbRL6jQ1xMo8RSQBRF
KMVT5NropnZKjpQW4u5QD0Vr6Mq9BryhiKwVGxATtohPCvtKRWScq9d5YYT4
JXbeKHcQnW5P4agrSnrfwlyvhVX8/Xv6/avzZCYuMIKKV1S+IqmLqOVdpDz+
MFTaTV5By5cRcqIs7fUkC1ZztDWMEEiK2eqjjCK/BP4I0DFbo6tj9qvk541H
+0jrlxyaz68DvwSSA6+9uY/EPHAuAL/3MvKPfjeg2Fw3qNjcTH7TnwhvF5xW
z6110SLy98Pamb/PLDcvzaowb9K/6f2FhI9zBB+tQ7rKuO5WjXVcrLuvxQfW
37UOISwxbM2/RQdX5G7VM5PLy81X5I6sOKkz0FHtMFEcyAbHBw2kLuDbjJ/J
cayR+GuNKIvbI6xwwdL6ILBxdYQXESUBVrQtRLZzZDeXzyQuECGQG8ZqoFva
X8+UpjdmlbYKXi7tLr9bWmG+Ia/jq7PZ80iiCTsJ1M8XSezzE3I8PlbHg52O
eWXmH3OltYwGLfhI9NsSB+VjPm+cJUUmr3rOBbjA0uElTrogOPECGs9OLTF/
JyZ4XKB3TGSglfUM8eHpibiKLRvoMSJDooK50KLJl7YxxebPY4QNjyobHhpR
xMrhQfr/fcNIN/epNqMPbDSDf9vRHPK/e8YhotghIuPcjYKYk4nlunC9JEwi
3zkeyX8HEhUKCY1o2AHj4u7U24TP/E7WC+GJuXBKwIbz2wWM2OQxQvt0gxOf
KSd8J+VPJDfuov9vn9Ihae6Z0iFxkHl/sWJiLkIaGIVdwbWrqGF9aLwg4sT9
JVyA5Yld/uKTC802wsTWPgUcylhJzskSWuKLDw47J7N0XLjFwxwkXzgBkycN
Eem5iw5Wj4QUxgobFj1aPBKESkaRR3KheiRXnlpsrhlYbG4cXGxuG15itpNH
8iCpocuH1PM0IzQ9vGlUe3Pr2PYOD/BG0P8Jy4O9EcQDfTxcpcvtGqCYgEA2
MeKEvbRsg7BwmR6nRl3txkqew4mGhqtPZjTYBjMhDyRu2qBSYqT6IgmvgVdy
uzw94f2nTbhyPBD7Ahk8z/7OCHrKRbIM0Gz2zpBjgyCBPMHfZXQ39PU5Rvql
cdJpRFeWJixRhnVl9IjDUinzTQU52N5WVCaqY9HzxeJy8xkx51Md/wDmfEzM
gTSB04I2qO9b7syWbldvcXSUiJPoyczhAreZYe4gq8KwQRqFLkQzkErJEiIK
m79OFBEC6LAIyRIixQIaFSMPEWzOPbnGnPjbPdlFWXlMlbmyL21xR1eZcQc1
sijB6DUNO8qsKE9eZFxUI+3CGEVOGjg5kojjShyJMoqtgETO+dnIQdngZJEX
U8W4DvZ7PCgl4qjEb77Y5qfJ2VEySfND/IiVLOe1EzRtaxd4QXgXWlOHFI6P
KLzLe6bRNkZaJomOLkm0dEm04+Yu6wZ2NXdOlKlOr8yp5LkkcCHgSgBMs45r
MjOPaTI3DRHNcPWAInMFaYhLFE5bjiOQHEVuC+mOc1i/SPSN9EsSsRGyH07R
KJPmcZQkL+hDaL0e+vHA6ykIoiQnFRIHi1g2/f401O8Ws5S6k3h535hS8whJ
rCenlJlrh7czAzFy4lDxm9G0aTj98yBZ8H3bvI7cww79Hjh3Ma4750fR6kEk
PpEIW/nKRknJWB6dpw1qVleYH84pwzx28KjOSRVv8F4UQkIq112aGZKO6Q4o
jbJyt6du8V8gIy9jn2cbRUh9cInwp3+JMMe5RXURmVNrg67i2fyU4yUIEre1
dAgad2/S5t0aJ2HnESqHFI5ZLgMRdmAoAqHmuyUV5lvCzddQOoQbjENi5Chq
PiR588H8MocaDK9DTBWTQRQ3fKznDcUMcOPHTgU1JQ41f+cCEgINWTHQAsQs
PqGJ/R1EQaI+zuPjgJZicy/pldtOLzR3DC40288oNPfQhfvuG17Eegbfbzi+
2kw4uNGMPIA1TVIDN5yOkdJYrSbJAkQQLa2IAmITt2pWbyfPPY/BVKLL//+N
JkLAtKuwlau+SLtAbJG509KvP4oSAGdbu4Tev6XelegiqOIjBa2g7p/e0Xy6
rIZnSn9D9/2LHkN/mu/p/4+e2Wg2D+7GZEEA5k8TGngq/cuzsUW9OKsisbf5
y1SRv5AVd5C8uJlkxnUDi5QsheaSvoXm3OMJA+S9rEI8liVPnpM8+Flf4lik
tChWUDLnPKEjAk8IMV4JpBRmeUI30Xu43UmdUvPnSWXmafLinj+z3Lw+p8J8
QDLn/ikN5pHpDQ4p3DmOW2FhKSlWCCltyxvx97yKdSY6MVymdf7n6VlERcna
fk3bJx3VXQbE+W5PSOR0kf8NT7hlb1HQ4giRdXc6IEomRJSENvPL8VhL8Jgj
DN5YQJh8ca4iVEFbLyKKBkoagxAsh1+1ZbVN4wApG2zoNaRi+M9qkWJx8tXZ
5YyUzz0F81GLDLH6wOKEUzPvcsOot2eVOpTcOqKey2BfUYwAIcAHVAjQ8Myk
4iSkClHkuUmBN2TFycOjhAi3Diw0fzitwGztW2NOJpE+55hO5kESJ4+MFmrc
OaTQ3EyPLyeBgtTLEPQn+U1HtsTDf4XDLHsk5YS0iBTd8YMKjkCflO8UIUmn
QIKf4PvKYhCSCrtGAg7p9WKbI9Bj5QE7Uj47EgE4EtJwBseZ9IgkeUg1gYdk
pcgFdF2o31uO6HEjyxJ4T5uHdOPxcV8rO36g+7mOVweE1CYazA563kMzOvI2
Dq9qyGE/MWsGdGWe3D5eGnz/dWqZeXh8qbl7ZIn54xm0hk+XKelXn1pkLiV1
cv4JtOZJSqw9klweVid5ZiKpEy6pRcKmd14S8Eh0M/MPEHwsOCjPTOgtVU5T
D6xyqoQ9JXqpo3/T0yw8qoY8pUJzKXtKRewp3UC/+hZSJXfRW3lgLOFjYhm/
PQRSXp1dYd5bIJ1v0eXIrNLi8mHdJC1xnlZkIehwKQctk0jcgh6X6WFD6xh5
QmTdKU3bJx7RXWeixTpGcRwZJsDo7QGjdyJr8juvfVU2oUkamfDzxC3iGyAi
JY+Gsj3SZOZg/oW9e+UJKsZ1E4Iet5dkfi+wWd9qwcVW7XCfCxUrKnmsrUXF
loFdeAjjV1Z5LAxQ8aGqjvfUuXlnFjclYEQACXBUgAJERvE1IiZQGUtOlFTs
tUPqmAWPOBYUmN/3KzA3DigwfxxUyGsfCgLOyj30/z8NEVbAWVl0eKUZuh8J
3X06mtP37WiO2lt2r0P/b08JJ+VLJdbQbnYr55XZNkvaXiZdkDNAQw43xV/3
xS6gajkSoGFjLBpSkdaa0g/BvkqRewf8LbeVkhG+BT4X4twTjC/AzYXo/sH3
tQb6wmfDVvoTbCEu7BAWyONb+F1sxXLYgkA3+2zrAY0a88jMjuYRAgTO+EKU
ABRDCRJIusEPwCjmR2gjv3tEibmVXJcbBpH/QALj8n6F5oITCeXktqwnt0UE
Rp45+2CJoWihK/1iYkKii6PCQroQd0F3qEH0kSIWs0aFxfADsn0ViJnrOcRa
zCIHVHiMfJWnyFf524xy8/KscvPO/AqeVoWxfxgFiB7aHD/ZrIUPWBIXMhmS
CBKACDizcyEe0ijqxmwiNLj1WLQrDoTHiAUzGYsCHRAXL4lzVfD74sb3cP+W
xK+YGA0NDVrpodMszs+13iuD9Q5vA7MAsd6XYgQbpEE5SQNd67TG153azBlY
NLXFtv+8rmGUniNg8fpMDV7MkPuenSRewf2k+m8nb+Dqk/NpTeebm2hN3zZI
PAMEHk7ab08z/YhOZu1x1WaFt7f337ujGUD7+xFkDLSWJUeZ3C5+Qv/9OrM5
65U0j50FPYjdb4dc9B1u07zzuaqr9aEzdHallrjFl6fdcYPBg5ARvFw3ar1n
2n/UX++lQYDBHe/LEYKI44KdEeu4kKcg8LnA6ZYCe+pQSzrcpDDP10iyr1Ec
6IWL6LpY9YPPCBui2agolDZRUvvWWi9DcM359Tx5HG8dp01aHTc21yb02D9O
o6yt4YpNoOKeSQ0cJsBMod8RJi4ZWG/O619ntpxcy/rhCkLEpX0LzDbyQTYf
my/64bA8c9q+jUmIh8TPSNw1MhmYDgcKHRYRQZDAGUQGAsOYeXAV54chQfDH
O/9EcjtIN1zObkcRuTzidtw2rMTcM6qE6FBq/jK5zDw3vYxnIb85t4Kn2aO5
D5r+uOprlEBt1bIGEOKCmvCCQkNKLCZMHl4laFgvaOgQ7M8uVrFLrRAzCTsO
ALzPJ3u7HT/8Y6IM0n5tiHEOTy+GQ8uxRSIAfBisVxjYaOdKGQZqaOP/niOc
5Tz4DiD4fGEZbfhl3Gz/n4hmzi5Fd0Zzy3BJAqJm6gFa8Nicb+iPhV7AaU5A
YPvQQv5+fZ9qTmfA/UdKgzdvWuhIvtEnz4sqhXWeRhAoidoYfx7j/t0yOrCO
blNwinmMSDqy3HWv50qpQn97z1rV5TFrtCzX6k/Jus2xquNiCelc67vQTU4h
/8T9oiCokLBNCxBV0BYHodWOTZ+WenXYMfAX+8Xtwwt+a7DoncBpVUGxrZ4l
RAo/jdQMuiJeoBcOduAMvr0PVVBIT26SuOf3K6vNl7S/3jWhPXfYw6LHMPAB
B0nf0EQv02ffnmbswZ3MoiOrac3nmw0kCw783z3N5N6VpNwknjBhv8pgoR8k
cgGpmGkHVfGx4iPpmn1YNTkIe5oFR9awFIAPchUcBGLKjXAQSArcRXLkIZIC
j08qNc+Qg/DCTGkIj/7xGIeB/hjom8GZVoT6N6rTvBUHwlqrWXLZ9SFtjdA0
DZkS2v5hlI26+vz6i4KY++LXeG+3xiMLuCp8H+uFdBgnjBAp3egsK/rIQqHQ
Wl3Bq4Kt/AcEDc+RaapfQKq3lHGXVBzNgBR/mtzwZ8gdf5au5yYV8yFVuObI
DSDpiK0ZOQEE6XAirD+tUrjatFL16EZ4mer7Z6dFp6AlMuFlmtS9GctUlbB0
6UntZGX6u2xZzNoLKiYzMa+S7yomgyNgOSN/cauV31qxzWnQ+9BXl0hBZJUm
7cDOc7UsIhDqCVbqeD/RNXppe/n+An7OeSz6bc7BtmGT9Sk/cwmW/mXtE73p
lr69lO8if5auK+mlrqbrqvbSKRD3oaJ5my3fqHFDXtF6Ex0dcGwIx4MQH35+
ail7YhcPqDFnHtWZTKCnnl7d0xzzG/GsZhxYaSaRjw9T4HVLX4t0z2P/H7FE
xAKwOVtvDOnPbW5zLmQ34fqBRRyXvIM25/tG0+Y8vtQ8NVnmE2JILNqko+cV
Tnqjvhj1gliznJpbzyoWn0cVgr5rZd/C4Go0YKVfCavsxPslNsTCXazOnDp8
N5ZopPs0v74s0VpZoocWBBsqvcFvEGxjVS0bKSYjYlnirPhfxsnSg0q+sE+e
ueh4+nseVWXGHyypOPqby4JIpLfrP9JevAQ7eksQR6rpSvAQQl6HSbcORR67
JVgePX3wI1Zf0h1fSMesvoxudXYdOWkcGznLkxk50qs9KGLUpVsadcRtAVJG
p13Y5Zd2fjI/9fx2IoczYTnMK5AL+y9pDwgFq1B21PPrXfiNXwYrD8+5jK4r
0PXhKv6xK3W1/b7BmGvpup6uG/X/1+L+9txZj6PXI7vxSFf4Clt00t2aKj6P
gwgsIq3WtQKfHx9TxCOCD9ijvIXcOhV4PXuvOLwAn/V2PsWLugO7WdLiW3ZY
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\
\>", "ImageResolution" -> \
144.],ExpressionUUID->"1e9e41fe-b028-45a7-b7b5-4fe08019bd1c"]
}, Open  ]],

Cell["\<\
We obviously considered a grid too coarse to grasp all important details in \
the behavior of our function. Let us now create a function which will take a \
name of the function to be interpolated, the list of {start,end,step} for \
each direction, and return an interpolated function:\
\>", "Text",
 CellChangeTimes->{{3.940061164169178*^9, 3.9400611810411777`*^9}},
 CellID->330505318,ExpressionUUID->"c80c1731-df48-4939-a001-d14cebd3f668"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "giveInterpolated", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"giveInterpolated", "[", 
    RowBox[{"fn_Symbol", ",", "xpars_List", ",", "ypars_List"}], "]"}], ":=", 
   
   RowBox[{"Interpolation", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"Outer", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"#1", ",", "#2", ",", 
           RowBox[{"fn", "[", 
            RowBox[{"#1", ",", "#2"}], "]"}]}], "}"}], "&"}], ",", 
        RowBox[{"Apply", "[", 
         RowBox[{"Sequence", ",", 
          RowBox[{"Range", "@@@", 
           RowBox[{"{", 
            RowBox[{"xpars", ",", "ypars"}], "}"}]}]}], "]"}]}], "]"}], ",", 
      "1"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940061254635948*^9, 3.9400613144396067`*^9}},
 CellLabel->"In[619]:=",
 CellID->1034525545,ExpressionUUID->"60efae7a-926f-4569-ac9d-63a81fc937f6"],

Cell["\<\
Here we need to Apply Sequence since Outer receives a sequence of lists. \
Range@@@{xpars,ypars} creates a list of two grids.\
\>", "Text",
 CellChangeTimes->{{3.940061325026931*^9, 3.940061327402392*^9}},
 CellID->1054824341,ExpressionUUID->"ab010217-221e-4a91-abc6-e7c7c68beb30"],

Cell["And now let us use more points:", "Text",
 CellChangeTimes->{3.940061339570492*^9},
 CellID->1491884689,ExpressionUUID->"f3a9a109-9ba9-46e1-9f0e-05c433f62d99"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"newintfun", "=", 
  RowBox[{"giveInterpolated", "[", 
   RowBox[{"f", ",", 
    RowBox[{"{", 
     RowBox[{"0.", ",", "2.", ",", "0.1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.", ",", "2.", ",", "0.1"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9400613450032578`*^9, 3.940061359577278*^9}},
 CellLabel->"In[621]:=",
 CellID->334396397,ExpressionUUID->"decd79b2-1773-49d0-a943-37af33051ad9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["InterpolatingFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GrayLevel[0.6], 
               AbsolutePointSize[5], 
               PointBox[{1, 1}], 
               PointBox[{2, 4}], 
               PointBox[{3, 2}], 
               PointBox[{4, 3}]}, {{}, {}, {
                AbsoluteThickness[1], 
                Opacity[1.], 
                LineBox[CompressedData["
1:eJwBMQPO/CFib1JlAgAAADIAAAACAAAA4ScLwZmZ6T/ACPskWpOYv4AjHgZ5
3Os/cnpQh5xu1j/qWn1XCVDuP5K7ih5ptuc/r+pongFN8D/CUK87BHLxP46d
cUQ/bPE/ujUa8/qu9j9TbqBw1aPyP/TWyyAhFfw/neDJZqDG8z+QAqdF9GsA
QM1wGePDAfU/VsVD/9nXAkCidscSKDf2P6Bp73exDQVA/B1wDMFX9z+TpM3k
wfUGQDzjPoyykPg/7M3Z+O7ZCEABSgjW2LT5P3pl9LwNcgpAbCYw0z/T+j86
ypori9cLQL0gflb/Cfw/lpOs9xIqDUCTvMaj8yv9Pw4alcoYNg5AT3Y1d0Bm
/j+pB2LLtyIPQLClAv7Nmv8/NnA5bbjSD0BLO2UnSF0AQFrcILXmpw9AsTLc
klX5AED+sDHBQukOQNp6UGP9igFAbZ+lR/sLDkD10dd20SgCQNHi3Mj38wxA
42MO5MXDAkAZdr6AZb8LQJRGQrZUVANArv7zEMKHCkA4OInLD/EDQLBlMO3M
IglAnnrNRWWDBEA3d8OX6skHQNf3wBnbEgVAD3D3ndNyBkADhMcwfa4FQHOK
7Wak/wRA8WDLrLk/BkC/MhCgYawDQNJM4msi3QZAwss/TmVLAkCGc6iEq3cH
QIsIg92+BgFA/OprAs8HCECrPCvgePD/P2VxQsMepAhAKXVLE0Xg/j+RSBbp
CDYJQPRz0a7WJ/4/kFqZaBPFCUDN4sX5uLj9P4J7LytKYApAvh1MbRmT/T82
7cJSG/EKQHzT1YZwwv0/3W1pvRiOC0B2LZ/10lT+P0c/DY2wIAxAVrX8MJA7
/z+DS2C2aLAMQElWzbMzPQBAsmbGIk1MDUCi9bAadCABQKTSKfTL3Q1AYexd
q+EpAkCJTaAId3sOQFyS/ndEhgNAQAPGdkIWD0BHWcLdahwFQLoJ6Umopg9A
vd1CiejSBkCTjw8wnSEQQPiVkXD08QhAq0KpbbNqEEBsk2Azxi4LQCyTGthZ
shBAYCBYjj+gDUAnaxVkFgARQMwfdA9ySBBAg+uOIqBIEUBj/5rHgMsRQNFn
q5SZmRFAL++xNeOlE0Dwt3AR
                 "]]}}}, AspectRatio -> 1, Axes -> False, Background -> 
             GrayLevel[0.93], Frame -> True, FrameStyle -> Directive[
               GrayLevel[0.7], 
               Thickness[Tiny]], FrameTicks -> None, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{0, 5}, {0, 5}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "2.`"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "2.`"}], "}"}]}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"scalar\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GrayLevel[0.6], 
               AbsolutePointSize[5], 
               PointBox[{1, 1}], 
               PointBox[{2, 4}], 
               PointBox[{3, 2}], 
               PointBox[{4, 3}]}, {{}, {}, {
                AbsoluteThickness[1], 
                Opacity[1.], 
                LineBox[CompressedData["
1:eJwBMQPO/CFib1JlAgAAADIAAAACAAAA4ScLwZmZ6T/ACPskWpOYv4AjHgZ5
3Os/cnpQh5xu1j/qWn1XCVDuP5K7ih5ptuc/r+pongFN8D/CUK87BHLxP46d
cUQ/bPE/ujUa8/qu9j9TbqBw1aPyP/TWyyAhFfw/neDJZqDG8z+QAqdF9GsA
QM1wGePDAfU/VsVD/9nXAkCidscSKDf2P6Bp73exDQVA/B1wDMFX9z+TpM3k
wfUGQDzjPoyykPg/7M3Z+O7ZCEABSgjW2LT5P3pl9LwNcgpAbCYw0z/T+j86
ypori9cLQL0gflb/Cfw/lpOs9xIqDUCTvMaj8yv9Pw4alcoYNg5AT3Y1d0Bm
/j+pB2LLtyIPQLClAv7Nmv8/NnA5bbjSD0BLO2UnSF0AQFrcILXmpw9AsTLc
klX5AED+sDHBQukOQNp6UGP9igFAbZ+lR/sLDkD10dd20SgCQNHi3Mj38wxA
42MO5MXDAkAZdr6AZb8LQJRGQrZUVANArv7zEMKHCkA4OInLD/EDQLBlMO3M
IglAnnrNRWWDBEA3d8OX6skHQNf3wBnbEgVAD3D3ndNyBkADhMcwfa4FQHOK
7Wak/wRA8WDLrLk/BkC/MhCgYawDQNJM4msi3QZAwss/TmVLAkCGc6iEq3cH
QIsIg92+BgFA/OprAs8HCECrPCvgePD/P2VxQsMepAhAKXVLE0Xg/j+RSBbp
CDYJQPRz0a7WJ/4/kFqZaBPFCUDN4sX5uLj9P4J7LytKYApAvh1MbRmT/T82
7cJSG/EKQHzT1YZwwv0/3W1pvRiOC0B2LZ/10lT+P0c/DY2wIAxAVrX8MJA7
/z+DS2C2aLAMQElWzbMzPQBAsmbGIk1MDUCi9bAadCABQKTSKfTL3Q1AYexd
q+EpAkCJTaAId3sOQFyS/ndEhgNAQAPGdkIWD0BHWcLdahwFQLoJ6Umopg9A
vd1CiejSBkCTjw8wnSEQQPiVkXD08QhAq0KpbbNqEEBsk2Azxi4LQCyTGthZ
shBAYCBYjj+gDUAnaxVkFgARQMwfdA9ySBBAg+uOIqBIEUBj/5rHgMsRQNFn
q5SZmRFAL++xNeOlE0Dwt3AR
                 "]]}}}, AspectRatio -> 1, Axes -> False, Background -> 
             GrayLevel[0.93], Frame -> True, FrameStyle -> Directive[
               GrayLevel[0.7], 
               Thickness[Tiny]], FrameTicks -> None, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{0, 5}, {0, 5}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "2.`"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "2.`"}], "}"}]}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"scalar\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Hermite\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  InterpolatingFunction[{{0., 2.}, {0., 2.}}, {
   5, 7, 0, {21, 21}, {4, 4}, 0, 0, 0, 0, Automatic, {}, {}, 
    False}, CompressedData["
1:eJxTTMoPSmViYGAAYVEGBJg1EwR22kPok/YmxiBwGcq/aQ9R9QAq/tg+PQ0E
nkHlX9qfPQMCb6DqPkDFP0LVf4bKf4Hq+wZV9wOq7idU3W+ouj9Qdf+g6hgc
hoo7Ab7Rjf0=
   "], {Developer`PackedArrayForm, CompressedData["
1:eJwV1AV3EAQYBdDR3d2MAaO7uzu20Q2jc3R3d41u2EZ3l0EoadIoKGmCEgom
3H3n3Pd+wfsCwyPCBsUJCAg4GRsutuISj/gkICGJSEwSkpKM5KQgJalITRrS
ko70ZCAjmchMFrKSjezkICe5yE0geQgiL/nITzAFKEghClOEohSjOCUoSSlK
U4aylKM8FahIJSpThapUozo1qEktalOHutSjPg1oSCMa04SmNKM5IYQSRgta
0orWtKEt7WhPBzrSic50oSvdCKc7PehJL3rTh770oz8DGMggIhjMEIYyjOGM
YCSjGM0YxjKO8UxgIpOYzBSmMo3pzGAms5jNHOYyj/ksYCGLWMwSlhLJMpaz
gpWsYjVrWMs61rOBjWxiM1uIIpoYtrKN7exgJ7vYzR72so/9HOAghzjMEY5y
jOOc4CSnOM0HfMhHfMwZznKO83zCp1zgIpe4zBWu8hmf8wVf8hVfc43r3OAm
t7jNHe7yDd9yj/t8x/c84CGPeMwTnvIDP/ITP/MLv/KM5/zG77zgJa94zR/8
yRve8hd/8w//8h//847Y8cchLvGITwISkojEJCEpyUhOClKSitSkIS3pSE8G
MpKJzGQhK9nITg5ykovcBJKHIPKSj/wEU4CCFKIwRShKMYpTgpKUojRlKEs5
ylOBilSiMlWoSjWqU4Oa1KI2dahLPerTgIY0ojFNaEozmhNCKGG0oCWtaE0b
2tKO9nSgI53oTBe60o1wutODnvSiN33oSz/6M4CBxD7wCAYzhKEMYzgjGMko
RjOGsYxjPBOYyCQmM4WpTGM6M5jJLGYzh7nMYz4LWMgiFrOEpUSyjOWsYCWr
WM0a1rKO9WxgI5vYzBaiiCaGrWxjOzvYyS52s4e97GM/BzjIIQ5zhKMc4zgn
eA/COsXe
    "], CompressedData["
1:eJxFl3lczfkexqPlhJqSqZCtmLQgS27J8pmi7IlMaqiZKUu6auJmQpZkJ+qo
OAxtbiYlBpVDTd9IVLSdk0i0OnX2n6V6VS7m3NfrPt3zx++f88/z+3w+z/t5
fpaBv67ZNEhLS+vefx//+wX7ZlQe25NI5ouGmy7bmUuLC8Nl4fLHNLcgvqzR
so7e6S6PkN5oouJ5s9pyRknIKCvP+dcEOZ27n9JinKmm/sm7paY9HHnk1sp7
RqpI2/yTQ9RECUUZu0xxPl1DP+YmbfVxqWLWW4P2f4rsYNHfP5mvWswxczOd
H57/rGKWn0LeZL1uYiKji0bZvHK6V+Z93bxMRlHVNqmiTI6gLytwwfz47kvU
2VvnOtYsj3Z7RH747psnNL5P+hvfvo7OZXsPy8xtoiONa3KDLCS09+aROP9E
ORmOXv4sTKOzj3feZohGp8OyOVdSNDrVOoXGfVYSGp1cXj0utoa+SA8XOM+r
Yne+9c5ZvKuDvRLrtGst4Zit66zGXI3OeqfrQnuNzuY8vd5M/XJK1Y41ddHo
dKiY8LVCoxPzg76YlAJ+UUchhU+6xW83KCeHW1a/l96vI9ORnjOmD22mwCM8
S7mjhIy7c3ge6XJ6ufLf66U5atoZet3Ro5ujjPjhN6JHqCjKfVy6r+Z93BIs
k9Kjaihgpezmbt8qFjNhcsNfezsY326J0eSlHJs5y3dTZYCKBS06HCCsa2Ja
92a5njAvJ8O4rhELKmRUsetMsK9GJ/aL+UHf+tlWN8rH1lDNfa8Su756ynT1
8vJyaqFHFx/F16RKaLVHTMKaN3Iap0ocrVeqJqeOpJPX3nPk+DWx3fazkhY2
LLWj/re0/ejY4U6ONTTF9o/QYlEVi1pN+XrxHczT/VCZmSfH9nv/w/Soj4ot
uyJtDsltYsL9sy/2risnwdzBPj0iGYnrpp7eeJUbuD/sF/ODPrO4KAeD/zRS
hE7vpeCOVqo9MeTQpJsdFDviQEvLDgU9z3yg3vNFTXmRo85HSjg68Zeb+AVT
Er/3i15h6lsyjXZ/NFFaRa9XGnetM6xhHz6fVcWWaPZeUeekv55jgoheXZ3v
Vexoj16Yl38Ts4tP3u6sW0EXe97MWyOXUXHNLXP9NG7AH7g/7Bfzg74q+cct
4vK39Odz/eE8gZRutIbP3nFESbVeV7qnBXJkySv+IaqYo/mJtt3Wc5Qk2Oc5
YWZbOyk6vb7ZwJ7SN3eT7bU31rLPge+6VkzrZE1bjIqyIzgW6x7SfshIxSoy
HhbpZrxh+xbqlodsf0raB7YItC3k1KD7+3uXJG7Av/AH7g/7xfygb0Fl5/W2
eQoan9796MMgNRnstbFc+JyjrKZSrXA/zX0G6XRpzVJQeNquIoeYNtpZ1B3q
wntMSrfAGfPLxMxtWk9AvayTNadtqRJc5thjC4uTJXeU7N7Bfca13q9ZXHew
SZ52FVUW64+9uF1O73gtaw33cwN8gX/hD9wf9ov5Qd8ok8tft0ZwtEW8Z4pu
H0dy0cYVh/zUJCrwUmT6yWjKhaOdzjNbaMzIaC2drfdItDj5YJXgBVu2uuDU
VAMZc96cHzenlmMWWf/y6DVRMsfw47ZWE1+xhAinGP3RtZRy4f3m7H45HRjN
DRrlzQ3wD3yBf+EP3B/2i/lB32WflKSfzDgym/d+0KSpStpxPDY0bHYHmZ8b
s23P5AYKdZXfvh9/mL1piE5ttnrDnLwf5fdfkrMhPnesV3zimFFn8ClDPQVb
vupob1dBPQstsgz2ca0j24zskCimoJOFI96LdbkBPoN/4Av8C3/g/rBfzA/6
CqTCpacNpTSyLdhv/+xW2lbVxpIsKum3XJcS46JH7GMir/Ld/DaWv3FDQfph
JVsU/orPFBz7XG+nk79Gxmxc5rZy+bVMOixk5vE7L8n/wRRRZLGSXjWYORze
px7ID/AZ/ANf4F/4A/eH/WJ+0Lfal39yx10xnbFvji1w/oXuF/Wl+NbVs8WH
/HO59A7mnNIY8ONONXO07t52TMN5k3u9lbFXO1gcL0xruHspm+E17Pg2QRMF
nVmXWK1Ukev1Bxve8v+fb8gP8Bn8A1/gX/gD94f9Yn7Qp37WWLGrsJbZJIn7
FII2ltcdEl02XcF+KUmVbBRxLO1YOO9OjIp5zswS+Wn+H28R8MwwjM+Ehu/u
b+5qI+GtwCVFmnuKi5HddtNVDuQv8g35AT6Df+AL/At/4P6wX8wP+hz7hgWF
58jYd1cO9buK1Wxq0ilBYRrHDEVhNq0NMrZjlcjHPbyBnTVoD6qY+5hiPz+x
HmzVSb0XltQu09xbxrNPCz2jZQP9APmLfEN+gM/gH/gC/8IfuD/sF/ODviiu
4LybimOrEvT1fVOU7ExM39rQA+3Mv7RsQeTbh2zSTtN63rUGcndzeuqzXkHX
/NY90X7Ckd3CA/zRiRJCf0E/QP4i35Af4DP4B77Av/AH7g/7xfygr97koH9s
vITtGHy1s+CFmH1UrbQ/MLSU3KQJaa1pb2nf1lf5eUxNOXsCsraqVTS93FrY
ltBM6FfoL+gHyF/kG/IDfAb/wBf4F/7A/WG/mB/0bdrLjvf8kUsa3WaCRS0k
KRIKx6QpSGhSOaezn6MLvJtPyrfIqLr0bli1fTWh/6Ffob+gHyB/kW/ID/AZ
/ANf4F/4A/eH/WJ+0Pfzude+kfZySj6bMXGlkCPdL0N9I0JUZJAd9u0N/1a6
fCvuU/rD2wP9FP0P/Qr9Bf0A+Yt8Q36Az+Af+AL/wh+4P+wX84M+R6Gg+8+f
NH37YE269mUJ7eGtHVQf9pgqK0/yT5xoHOjP6Kfof+hX6C/oB8hf5BvyA3wG
/8AX+Bf+wP1hv5gf9Jl4l3zN2V9D/FiDOaqoWpa8dlHJPyOlDP0e/Rn9FP0P
/Qr9Bf0A+Yt8Q36Az+Af+AL/wh+4P+wX84O+l0K7tbOudDC/534l4rkcw/cH
+j36M/op+h/6FfoL+gHyF/mG/ACfwT/wBf6FP3B/2C/mB3029SIf9UY1+xs2
xlP/
    "]}, {Automatic, Automatic}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.940061361177157*^9},
 CellLabel->"Out[621]=",
 CellID->1972768167,ExpressionUUID->"a95811a6-7b9b-4640-8a06-4df945d7254c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"newintfun", "[", 
    RowBox[{"x", ",", "y"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940061362806677*^9, 3.940061379078176*^9}},
 CellLabel->"In[622]:=",
 CellID->443301616,ExpressionUUID->"26da7222-4e38-4983-b378-56fd0934598d"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJyEvWVYlU3UsI3Y3d2Kil3Yem9bscVO7MbC7u7ETrztblEsEOzEAEEUkW7s
Vj6f517nGl/e4z0+/uxjn3sx15o1a2bWxDVTfMAYh8HWVlZWBzJbWaX88/lv
9yPnl1SY/w+ff1DXchtTXh1R6Z8tpey9LHD3ehknPorcazkaFZBkY/9EuUuR
NgVaPrpusbmYq/p5p0Dlnr6NE6799rM8vFHmjI19iPKyPdd9s3cOtSyrdOO+
U2CE8uJTYlLcah5rab5pQISbU6zyKR9vPfd5lmhJYfU/f2+Vvx/nGvM5X7zF
8ezDFTb275XXPJzuV4HCwZYrw3bkt3f5qDzFNJuN6TLe8ChYeNR+p8DPyjcU
WzFn2aNoj6mP61Z3sfmmfN6sSis88yZ6PF+Y3tPN6YfRs7NL2KnSAR416vq3
CXT7pbzCxwOOA0eEWNYm7A9ISkpS3qzD4hxPDybqd+yKPfnO59tiNnvqbz6u
dobH3fNyLuZ8Q+0Mr758bZUiRZ6rneHLJ1Yq9O80Y2d45uEjhryyN3bW9KNO
xDfwNXaGZ8/wrs2VvMbO8D3uPstKFzR2hg/LUq9twRzGzvBb1ztbD/ExdoaP
3tuy6Yy/7Ax3W7UyW4CNsTP8++/ZufOMNHaGH+965+D5v+yM/fBP5ODYk+98
zo88cvl3nwdqZ3iRjyPa7c8coHaGBy7Pe+bGR2NnuGuhNfPPzzR2hu8oXqDB
j0BjZ7jVw95v6lkbO8PzZV7i1/P9a7UzvH3vDP5HVxg7w+snXS5Y47WxMzxt
9j47HuQwdoa7bZ7VyzuVsbPao8mXk5UnGzvDb5fxmey339gZO1HfsTPcTvyT
/4cXFXvync+P7VdPnvnotdoZXuF681JXH4WrneGVf45zLt0mTu0M33zLe8ba
98bO8FmPmjSpuSdO7Qz/mfvFjUf3g9TO8Oo5ima+svWW2hlerVD38BZFYtTO
8K+9Gl4t/DtB7Qz3GXTsfMtp/mpneNZhtjlLHzF2hj9qs+X1kp3GztiD9hM7
w6nv2BmOf5IuHHvynU//58udsq+IVjvDH5fNc8j5S7zaGb6ubYcLXb8bO8OP
20w9dHd1rNoZPq5y1ZHpTwWqneHVHt8peDPLA7Uz/FGFSmmbXzN2ho/KUXmb
zzVjZ/jtVKmsd6Z8rnaGX3Fsfat3jVC1M/yQ31v3TouMncl3MemPsDOc9hM7
w6nv2BmOf/I8OPbkO59BZS+WXHs1Ue0Mv5p51cyWDYyd4aVrnogY+jtK7QxP
6/mq3vXcvmpn+OzToa1u5nimdoaXDdsYt+FrrNoZPmFA5/KPKho7w9+3PZWY
IfKp2hmeOn3Xg+07hKmd4Rl2nK11pZWxM/mbLP07dobTH2FnOO0ndoZT37Ez
fL34J3rAsSff+UyoP2zSrs+xamf4jF6PT/TbHqp2hl8MSzrctqGX2hk+ZFvH
ja4DX6md4bMu5PrwyTNe7Qz3cymYd+irOLUzfPetW9++97mvdlY9ty/+Z6ld
hNoZPv5AlL3ntQQT90g+Pki8hJ3h9O/YGZ704L/+CDvDaT+xM5z6jp3h+Cf6
waeLPfnOZ73ua5eNP/9U7Qxvc+tl1ZUZvD2wM3ygd8qXucqHq53hd+dd+pZy
QaLaGd4k/tKIi+lj1M7wpptK+swNPK12ho9e835c3y9Ramd4gMvRfuFr49XO
6Ev8iZ3hxEvYGU7/jp3hP6Q/ws7wsdJ+Ymd4Gqnv2BmOf6I3vJXYk+983sn6
tcDC58FqZ/jsGu4p6heJUzvDV33ZUrfhMWNnjRNLHrdtPC5M7QxvuHRKwvbs
3hbsDB8/I9+sPJ3i1M7wDb0WNL+U24wHtPwlnsfOcOJP7AxvJ/ESdobbSf+u
/YRw+iPsDKf9xM7wwVLfsTMc/yQ/mo7Yk+987iy59PqI74lqZ3ivzsNaXhls
2mf46euvOwbb+aqd4VUfRmT+4vxS7QzvNybv1Mu1E9XO8NVLcidl/ceMx3g+
4yPsDCeex85w4k/sDK8q8RJ21n5e+nfsDKc/ws5w2k/sDKe+Y2f4SvFP8gnH
nnznc/Xpkl63Sr1WO8N3Bg0NrZ7f04Kd4ek2lhy+Z16U2hn+cvyopf0nGjtr
f/spsWbqCWaczHMYb2JnuJOMj7AzPJ3E89gZ/kXiT+wMJ17CznD6d+wMfy79
EXaG035iZ/hwqe/YGX5K/JP8w7En3/k8XSnX5SInw9TO8PPd13RLNTVR7Qyf
kzPnWC/3aLUzPNOtXQNXZNykdia9ojJ+x87wCzLexM7wczI+ws7wJxLPY2f4
DYk/sTP8o8RL2BlO/46d4Q2lP8LO8MbSfmJneBWp79gZjn9quQrHnnzn0/Pq
ydoZ/vTv2Bme5Z2t1bTxfmpn+Czrpn7WvkEe2Jn/Ky/zIdgZ/kPG79hZx50y
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
l6D1hXnlwr/D9sf5mn5T139rxaQuHmz6QXijr94d6n8z/bWeK/Bz6fg0eU07
qe+zPqpW4VFW0+7B6xeyLZrlY4LHC59NVcva77bw+fbx8iy+H/ppfwlfe3xj
uoBaJt6Gt1r3tWKPX4azb2HbgQGRg/6Kw5FfmcKp2bsDZrwD7zBu+9Isz8z4
Fh74MY19TFET18EHPZ7ivehPe059gVfasG/hq4smftP97NOyJKS4FKd+grzL
uB29mgSYfo111LZ5HLtF9jbr6Nib8kJ/+LzPWX6P8DH7AeCUC+lQPg+lfEkH
/nZ92fMVDpp04JQj6VCe+APpwB0v7d96PatJB15Pyp3yIi4Lu/ukcDpn0/7A
F7hefbDsU6zWF9aHX3yYkLF3nHnfj/WTm6katXeratY/8KM772ZuS6hl+hHy
cd/p34QPzxK1PJBfI/5GfYNvt9R0fd3IcD3HqeEd39IBJi7V+cOlM5aNH2c4
8i9fNshu96f9pH4in+tC0YWOzwzHTk/cc36u4mXmLeF7CudNCvMz4yzi0BxX
wz8vd4vXdPn91Pw787veN/PMyB8O+J56X/poHafAt95Y/zbpQoL6P/yK39JV
W7YZ/4d33jO54oNnMTouwC8uXTj94PdTU5+pl6ukPmJP5F8fzHl43vUYtRs8
osCLNKvHxqh9dP1qdrvYF9filSNfttXQ9j/Gmf1j2IF4iXzBr47sfTjxZoLm
Cz5j6vtdSWujNA4nfeIl7KnvKUjcRT9C3FRxTeP3zttjdb8rvGfMk0c2q806
Eb8Tn/Nc5Im7eC79Z0Ll9JULvI3VeULkP69K6Ju+ptmvAE94lntUmzLGT0jv
iH23iU26xmjcwvM7Tzu7Zn2zeI1b4Ixf6E/hjFPID3qWlnEB+cXvXr0q4eA7
KUbjRuSJB8gX6RNXaH/J+SvSb+JvlDPtNv6m59JIf4q/welP8Ss4/Sn1kfTr
FZnmvcvbrG8i38Z37ZfWjglqT/zrXgO3zokh0brehB3WbSnerPU7c94K/EOJ
0Nkb78ZoOcKJc7AP6edqvTfb7kKxqh/pEU/yHXniPfQhruv6YlvDcs5xGhfp
/koZr+E38HsS55N/0iEuRR/io6ovrLtkjjTvUep+VOkHKUf6z3XSb9IfIE+/
QH8AvyH9An7IcxlXEp/BidN4Hr8T76En+wISXp7d/+CNuz5P9wv4Ls7Sq5fZ
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
cquv9bqqpJ94dHHGkiFGn0+Ox+Js7F9YJtyqELJ8gK/6CePIlrNW5DpawFf1
KSJx3fxkceNbSWdg72VX5k8w+nhKOlaj7aJTH1+u+qyRfJ/Zn352vgImvnrc
uFHz805PLV4L7vkVKGTiq/P5Pq4OdHtjqflsRd460019ZPza6sXATN0D36g9
F19dYW/vEmz5NOprR/v6Iar/PYnfziaLD89K+ptHrt2XN0ew6r9d0j/Z/NCt
0y6HVP8Fkr7/6209hl83+tvnmjHV3uWl5dnEFLeXNzf6j5+79pCNfYRl9k2r
6Xt7mn1RjI9fFGv3875LtOrfpEy5gS424Zad2Txv1+4RrfovlvitUrL4cKyk
XyjX1aXNir1Q/btL+jc/XL64t4mn6t9Q0t/2ZN/xDjXD1R8qxVTydgqMsfSM
39h04yJTr5tInLYoWRxYQeR7N83oMubrA31uLpm/HX79xr/Nb/ho+jEO91+6
OSVa3s+bd/fpaxPX8dktWVwXJfLpHt5q/DDvAe2/fGQ8XrbrQtdOQa80/afy
f/mknmLnFpy3Z5+h6OZ4M764XCWFv5vTO0uupOvjL60JN+0A798ni6O0X337
ekdd60B9blWXlEts7D9a0p0ocne911ntH/eJvla2ef+3PvLc/OGPBgW6fbB8
rT/4XcERp7VdYr/wpIqfzo9q5qntrXXt7Y1cbD5YVpx7krnWam+ND1mnm/dk
zyq/BE/V/zL3wiSLi6qIntl3uzd7ERyt+q9u/iSXvctny9cy6xOez4xU/VPK
usTlwk2HzPrjJ+g/RfzIU+ovzy0gccv1ZPHPKkl/cqFc/dacN/EPn9VsnRrs
+BCl+iR83/WvU+BXy5Sg/oEpZps4Z4rEJ22TxTlxIr/N4nGwR89I9ZN+vJ/U
fk7KYy9N/P+srdMsG/uvlubtrzvFbHyqz21zYkwlF5sfltxWC4t8ufNan+sn
cUJUsjiklchbPfr0zdt6sfr/VZlPar6sVKe6la+bfFrXz2jv8t3SsP+ygN4O
/to+HBr4zyU3p1+WC4E1Z8+yfaV+W1jW18pm2rvDeoWv+q2LW4bNToE/LSMu
te92sct9LXc7iQd6JosfDkr6Od8E2xzKFK3PTZMvc8tAtz/9eFjD9r89TZzA
/Ft6102RQXMT9LkJIwJsXGySLP2WFhp960SM+u0AWRfq4boi4nI+016tkf46
OFk8kEqe29Xv8Op2leM1/bpfsj4NdPO1HF3nfLPPBz9Nn8/jcn8x38clu9eY
+nL8dqs0owODLH1OhkSvqB6tfKm0260/fbj0b4kYrUezZL7wzoO1zgVPx2v6
5WXe/brcdwyvKJx7k0mfz6TC4V9LzYzT782kvZ1z+tbi35viLcT5tpJOKrln
Fl5FeGrhPDdS9l8MkXuQ4dHJ7kfmuY9q9Ktp7xJlcS4+zt1pueEp1tyaEegW
bakwZlD+Km8TVZ8w7k2W+23hcdyjJ5x0lu/81d7FJt6yvkOlt/fvJWj6V74O
2mhj/+f7aG/H0G3x6v9rRL5W6ualbp2K0fR3yXzsR7k/F34w2b3J1K8Csk67
vqB3+acuoVqv989/cNYp8K3la0S1h89bJWg6lbi/Qu7hhVfjPmTh2p4sG1bE
3uW95d7BAtVbFnujz53COYS89yHPTSXt84nZ2bd9/WT0XyHtua3c8wtfI7yI
cOL5CZL+k00VHWc5vdA4/6A8f8DoRl2Wvnuj8wAtLbWOOAV+tPQuUnJdxxFv
tL26Ku3/cGn/0d8v+bmFov+AuBEP3Zw+WeZk+bT1ewozH/JE5DPE991+u76Z
f7uyq06vQLcvlpStb3yrcD9B/eG5tKv7fWakXHDDlJedrEv7y3suxPOXJZ0q
1dK9tG5h4nx/SSenp1+byePC1T/3y3y8l9xrDD/MvbLCSYfPLnM7vCtjidfv
NaUdPjh0Ra3UDRK13X4r+Z4hdsY+M9I/n2Bj/9OSp9ukFl3tY/W5qWS9o5jc
dwxPl+weZJ47RdL5cefOgvhrRp/10p53a7fqdPmVsTo+7dd7T8dAtx+WN76p
M5bLdFP5UWnPh9aatmndIl+1cztZ5/0h5/ih/4sr+1LYu/z+409Fy627Z9qf
/tJuD5B7kOGDhTcUjj+0kvQbht1s+WvdVPWTGdJf3NvQo1+WDCYuuh2SqXQr
l+uWFyPz5VnX7ZTZHyDz+eV39Ht+srmntsOjZDzVsGwt+zKeZnyRK8n9Z0V7
F8vq57ZlT2ULUU46XR4UHXHvD9f5z91PBl1yOmJpeGNXxII/4y/ydUPGfRfk
/jh46ov/J6dcckg6K1/2OOxwzPitp4zvei499Lb9H47/z2x92LLO5o6lsvuz
Ii7bzbpMMxl/ef9e1bTgJbMuU0TWJa1zZa664nqccgex0/14V8vUIGOHJ2LP
8cd9tr/KZPK7Vp7rsLNiszFBJr+PZb3suNxzB3+XjJOvCZLOFs+gFg8Pm/y2
E/2TEhc+8jlo8ltT+uvFEw5t7tckUvO7Vfrz7Y1rnCtyMVLzlUbW43Jkd51p
/dPkK1jGfZm33AvdFGLqXUNJf9Lr3fc7ZQhV/fvJ+vAguY8PPlb4YOHoX1XS
efhg5ZUlG02+XEXPoun3V225MkbnqXQ/pvfHiLNZE1R/5v+jA7L/CrmaoPp3
l3FfRq81aefVN+0z8ns88oQUO2Hq4wWJT071Kv340DaTr1Hsb5V7A+ETknH0
PyTplAmvkaF1B5OvFRLnvPBp692qZozG86zbTvHPnqvzw3Ctj+wXeCj+RjyW
W8pzp5Qj/LHEFftq50mz7oOJl5Lfd4zd2L9QvtPANgGjTByC/Jxz8/7pfi5B
7Yb8g83vBoX1S9R0dH/FvnWbw14lmnHi+F5+ToEhlr0H6ju553qt6SC/v+Dc
HDVOJqj988nzb+5tfW5GVJj2gzx3woHd63pnCFf7w60lHsPO2SSdSjliDnba
bebPW0q8N8otXac6Q02/r+tEcq8f7eTuwK+Jbk6RFts7Pt2sUxv7r5R4aXCF
FFvPXTLx3h7ea5f7i+H7hPsLx27JzzPE/qy/dG3yo8aDPxy76f0ezqOyD3Y0
cfte0bP/z3u+Th+fqzyfC2wq/apdMkbjf3tJf6bMGyAXL+P6QT/q2y59Harl
8kz8ataZGzVb/BnHwdEne9qoFkHOkWpPuJXEpdj/vqTTv9rdm0l2UcpTSdy7
dfbwF9kum3SwQ1+5P5F+7azY76vz4bwJDQ8pLyTzG57d9w/0Su2s8z+ks+v+
jHx7BkRpOe6VuPRQjSLlzqSN1vLiHo3ccn9xcp5VOOXIvgUX2f9MOZJ+1cR/
awT1Mv0O8xsx9w5dyJQQovYnnetHQzs92GjaZ/Y/jmjRYHu7PWHK9bzK2hfH
5H36Qv2hn6TXc+WH9VWq3dT0V/htWWtj/9aSLz59/pu+weoP1rK+VlvmeZB/
JunVknQ03pZ9c8v6HV6VZfBzjXPQ37qEvesRZ7N+AX/badCA9i/N+AL+QcYR
+MMSqV/LXfctvDA13PTvMn6Zc/tR/xAXsy6T/D5l/GGs6JnN/U5O56CDGi/5
yzzVS/+t25wdPTR+Q5/Cg++/y+ccrZz0d99sXLDRoRi1A/7g8r1945A+4Zpf
+MVptodz9jDjmirJxjXka7f4yenGBU/VsA1WflX8ZMCuyo0qL3il6bAO2Fju
/SRfecRP3tcaefXNpTsmPhQ/6VjVv/PtX081X+jzJxLvl/DVxLekv6th3/pP
msWrP8TI+GvWwG/v4z/sUf/pJ/J9ZV4O+Woyr5Xp98wc3Qa9UM56X9Gfu4ok
xASZ+SgZf3V2PRMQdsq08/ASMi7DPlYyvtuRatiuSqN8lBeSebyXt7I3Wp7i
lqYTI/v4Ug/6735beILwl3LvLXbguR8y1bANH5yg9kT/QrdTfFi/P1Tnbexl
3FexnWueN2V9tH/3lfFap6cPIt6/9dX5un4yvnMrnvHYoHwvlV+V8Zd76Kxa
o9ok6DwD+xDXyb3Gyfn2ZJx9WxkkPknOuQeZdgl9DrvV35A3fbBy5hWfS78M
Zz00wK767vDSsRqnsc96wxDrlW3Omvk69Nwn9yDruF74q0Kb6+RMa8a/cI+x
788PPG3aDfgnKS/kPcVu82pdfDFv4Cv1h76Sr7B11o3bZL2k47tp8n9DbO41
Hmh7X8uX9OetnRny9EWkypPfPK49Pe1G+2t90fvcdgwYf2BjoqaD/KjKqY9O
3GHqF3zEvEEnzuYx83iFiF8k7qW82O/WUu4jTs4twrF/8vMWtLwkfRuJi+B2
Mu4uuLdDyTu9wrSe6nkI25bP/PKnHyd99uVVGfbp+fklpnz1HmBph0mH+dtp
bZ8/+fz0qZmnJb72uRXkcCNOeZqDz667OX2zfOzd8Uf1FSHavyAfPCHtgjSB
EcpdZP9sgXT/Ztox9YH6CZ9n+/53fzHf28jnfbnXmPIl/Y6pAqJP9g9Vedbf
z8m9xtquch/09+pf1vRM0HSQbxri37TPXdOPIP/4zMFn/f6aT7CW/Dp5D37Y
rXy48nZit1I7H0yI3PBM47Ei8pyd4rdw/OHZ/RYRWZc9Vf3hvsnmYeCjG1wY
kbppgsqz/r5Z7i/W+S7u3ZbzJUhH1+u9Bq0f8jhR9Ue+yJjhQ/tuDNZ0isn8
+b2SG0Z9uf1c4xn2o+4a/19cp+NxkQ/uX6fP+YKB2h8NkHmYvj187fqWdlM/
9Bd9Lm/8b10A+cMyP5N7TrFade1M3Mt6fbHsx+r0WBShcdQgSb/dpFz3Ny4y
62jsp13yqP21En0j1W6ks0HuHSa/yH+vb72ibUUzn+Yr8z8RzfLkSV3YX/k7
mc+/OrNm0b21b6k9Sd93fL3QyQ1Nf8r7H19TbLy5Ja1Zt4NPkXuEyRd84b0L
Wz9neavPhR8dHFfxVuwTfS6886t3QQ2jzb411v3vZaiwdV3jUB03Mf/Tteew
xLE/dmn/yH74XjPHH7rX5V+1P/xwr5uPtt00+sO7yP2k+Lm+B+9ZYHJz/xBt
/5HPOcXh9tq/5pfgbsnmkeCNjxd7fK2BmWfQ+2Orh869fs+Mo+BfO13Kt+WW
0RO+Q+5LRR/47CVF7ju/Nvroe9LJ5nn0fZG11dotqmv00ftj4w5e71XCxGPw
s1lqbvC/b/TR++3lnlb0gY++WHDoh6xmfgM+INn8DPxCthVFlpWMUX9jHsbl
epWSa++Y5+o5e3IPLM+Fxz5IWS/1UfNceKpk8yfw0evz7PnkZ/ZxMd4/IffJ
Ig/3OrLzfO3C0do/Jr9Xl3QYn/aV+2fJF/Lpcn9vUKZwrKaPfEi9ExUXb4nU
+BD+osWXr3dmReo4Mfl9uLq+wz3DZV8UOHHXrHPBr31If7h+cKTqyXhktNx7
i57Ir3x03zpgeYjqSTw/OH3C5PwlX6s9iWPj8td2Wr7kvtqfOPag3HuL/snv
q4Unv0+WfOl5DjXWVN26KUHtA19d8vf0ksUjtT2kvzjZvMD4TzWj1Q56rvjk
s3e7XwrTfMFbe+RJf8cmXOXZr17h3/gudzxNPYXbZy0x/OZNM/8P3yj3V5I+
/Hm5H7k6/NUOsA+88bVhCypFmfThMx62bjP7jklf96vLPZikD79wcf3OYtVN
+uzHLhYZ2r7RAlOv4R7dZvoMeGTSh9eV+zRJH/4qqs/L12lMnMw85325ZxN5
eN8auRrNXmHGU8yDWff3P19zhln3x8977shtGVTLnDcCn+AypeHbliaOhR/7
+tzm8bIErRdRydZDeS71ruHLaqUn9IvQ5+L/aR70SzVlm1kHh3+8fD52wgaz
Xw5eIONWq6jpZv4NHiDzb6RPfSnS7NjhaTGRmj7c2mrLSrvnZn4VPu1uj6xv
lkb+X/NCOWReiHoBr2JZk83mXZj6v+43tnzeHZ3LxD+MI07Gtb3wJMrE4Tq+
2NC3Qu7UplyIJ4dOPPGsdEtz7i783Zy4No1bJ+q4Us9Ji8h8bGC3///xILx+
0OBUAYfNvChx3e5lR78McI3S58J72NeetGVTlD5X7yu+un3kqCn/9/ilqYxf
eK7e07pzZp4eYyK1vsCD1mR7eCN3hNoH/tzW+tKka6FmHCFxV4qtPjkvLnuj
7eov6fe7SlwBj5f+d6f04/DRyfpT7HBZ5qMKWG5m31fc+OEl4WlOLL/z4LOp
F7Eyv1qyc/4u7vtMnHBB5A+8yuT4crJZv04QeUu6pXHdV8XpeKc5+6bkflId
Hwm/IJx0Lso80rimG7qmv5Og3E/slGFL6OTOa82+IOZPvqXz2Fjf3qTPZ6zc
f8p31sG5F1Xn8yWdmcdmN48dasb1djIvtH7xgkdLPiZo/848zNFk8wOM0zOJ
njzXWvZB2cn9pxqfC68knPLyk/XrNdZ+6fpuMvUC3ux0gWzWOwxnv1OB8HZX
zkwx+50YP06QcS7PLSTjlIVy3yic8c5u4brvQtaXfdt28Lv50vgD68iT5l7e
4X3ExO1vZVxgM8bqoPMZsz4+RdZ5Z8l9o3DWf4cIpx79kPWmlnJfJzwp2b2i
8D7J7g+F9xC+Qzj9zhPpXx5Kv0N9b5YsHqO+75H1i5R9HF/Vzml4RdnHWKVD
+oNPQ8xz+eSeUL5f+n/w/MnuCYXnFu4rHP0bi56Osu5AufRkHeZ0yf1vD5j1
o1Yi31/k4b/FX6aJn+g6uMzD//w0/ErpJvEqn5JzbkQe3kf6i+Yy30t8Rf3t
uaqW5/RF8Tpeo74fqOr8ZusRE4dHyfyt7bHItOEHTfr9Jf2GydJHvpFv5QUz
4kz67KvZ+sozdtvFBOXU6/JPq1mt22jmAWgHrAY0HfH6nVlPXCv7D//p0eJQ
19tx2p5Ppv0TO+PP7HupJvtkdH1H5l0bW00sYj/DPJf9M7fO1Z13+qHhLvLc
NvVbzb+d2nDslGNseN/XdYwfHviQuraLzRdLi0DX694b47Sfipf2YWKXyudn
VTbzXftE/nrFiiOanE1Q7iHzk/XaFNk99KlpTwpJvH1P9mfCKR/8QfcNSvoD
crxaX3ao4ezb8W5t2/3y0Xgdp1eRfT4H5L5LOPt/3JLxQbI/c73cgwln3+Zy
4bpuIvqsnXRzce2bxk+Yjw11OHG20bM4jfeY3+sYdLf1ocFmnMW+zelJXxza
zzDPXZXsfk84837/cP+m2CtAxhe7Zf4KXl3GEVtkfobnMs8zztOts8dW0956
ST5GSv2C+8m8zYM83vU/jDTtMPtwPiXb54M9sotfoU8t0WeF6IMcn++zb2hx
r/Nr9XP2CzXOvaRf8S9hytPJvs1lu880cnpo6m+c9Bde7vfb7XocpX6YR/pD
13bzqraLNuvLK2T/TKF9SSeKRxs9e8r4aHOycdPPqfJey5RhbpmOmfmBq7If
Jrzh62PV/0p/lexjaXG1UebyMWY8PinZ+x1w32TxGOnMk/csem1qNqNOnEnf
TvbDDPr6vvqTv/Sflkx/XX+UcZlNsvGav+i/v5DnHuejZv/GRHmuXeLH3c57
zTjurrxPcVnuhYR7cT6qcPT0k301dj1WPbGJNfr/I/th2uQdm+t5orHP6WTv
m8AHJItLSee7vPcxw7HJo94fTPouEtdsatXhnXecsc9ZSb+U2AFeSMaV9ZON
N0NFf5vUM/q4uxr7xMtzrzyx/zRihvGHdrIPp6j3qpkF/yovN9kns3rO8HeT
3pn8lkv2HjTcif2/Mq+i+0CS6Qm/K3HIg2Tj316iT7ZZ/b0dRxn9T8v7JmnL
3tvqlyFG48B/2V9RNHunf7eZdmy0vN/R2sbqxPMMZt9+X8nfLqlf8BWyrt1z
2xBbx/tmvNBH5CkX+hfGy3lqW/f/8dCMZ1ski6PgVhI/lE1mH87taSj34sE5
P4F78XT/v+x3dQ3ZFFUp1MS3eo9csn2qzC89+hwbN/KW4ZxL9rrGP6/vtDL9
NfywV/DBxm1MP8J81OTqbl9ebjB22y/9y8FiV7+UnxKrdmaddL1dheY57RK0
vJBfNa7gt/I7YjX+pJ8tmmxei/cXLsq8Fv6p9+x1qT5t1O947Wc5F+p278pp
XIKMfRinL5X7HOHIV5fxiMZRwps/bvv9Z3WT31TSP26907x8ueh4zS/rg/Ol
vSW/yB+fZNtr/5N4zdc0ydd5yRf9Jud8rEnWvzNfl0/ukdF9F7Le59CuTq0+
W408n7FyLyHf2a/7VDj+xni8jOy/xU84B+lGtX1rvrw361Cs+8yT+wSxJ+sR
2+TeQOzJesSuWp+m1UlhynHi7//2qb5pEmyd+6/+aJrsI928vmOmon+ds2Fl
NerC/6wvfB7nGvP5r/mBB8nmDdDTyuro/8rX/ad6xvi/1heayf5Y74/ez4b+
tU+V9YtZQ7+mm/aHo/9Z6XfOX/8yeFkZsw64WPqd+rXXbt1RJVz15/ycWfem
Zlj+V744X6XtoM9uteIN5/wV58BVkWMTDQ+VfXoNVmQfecLN8Lzsk31y+9Tx
ncYfYkR+Z7OLD+6HRKv+wcKPXe+yuVCo0X+KtJP7vAtfczgfoZz5xuBb2RwO
3Y5Q/7eS/WArBk9++/i8mT9JWv0f39Mid4rgT4ZXlnHi9ZzHSg0/YtpVPc/5
SuZo+yiTL1dpz2PD69SNmWrGI09lf9rUTx2/+YSZ8fhOkffMMX9xlc0RZl+K
6N9d9g1in/0i/z7FVbt158x8HfuvhrzpmDnoU6zml31iS76fq5fT0bxviHzz
gQU2Pzto4uQBou+dNyMvDRkUoe0t84rjzy74mvq4aX94f6GwvB8Bp71NI/eg
6bkQMp76dfnRsBLz4rV86Rfmz600fVPXBLMPSsYRMfIeAfL0F502Zp919LQp
F9qZmT7NexxOZ/ZrcU7eCRmPkA78eLtcfRcPM+OUNcnif/RhvaC/3J9FvuCb
6mV8efS5mU+m/flVofyCjDFmv/RzibfvrxpRd/s/scoTJa5eHZfzS4CD2YdM
uzTm4vsaL3ubcTHrC6s+XutUpow5J4f1vuoL32/wa+Gu6bP+1de+tmvKHWZf
IvP2ZeW+KtLRcxTDNhZs3SteOe+FrShZzLrDVqMn7eSWBRndHSqbegHvuORr
uRx7TL1IK+OLEoXm3J8w2cjHS/ojP7t/z7TStJ+0b7Sf1BfOHxst94zoOUjy
Pm8fuZ8IvkN4L+Gk75xsnRF93CV+O52y2vMmQUbPhbLvuvSs5scuvzZ6Pk52
Lg28rKwnnpJ1Ru1HpB07tcHhap4MJv1Gsq94/48RJXZ0MOlXlnSOSzrwldJu
lJP3heHhEu/1l3VJ7LZI5LtKOwNnf/jrZPt8HEWvptJuo2dVaSc7BOebOf1N
rPJf0q628fe2uCWaeUJn2T+ZS+51gk9mX6Vw6tdPSWdarPPojVZR2p5Uk+fe
6ZnjVM3YKNVf76mXe16oL9ul/UzX6ZDV0x6RWo/8pH0udS1tyZfXDbeT9F0b
Hk976t8o5d9Fn6thH/ruKGB4d8l3CY8eDd3Tmf05LhKfrzqwt2aPo+b9xGiZ
h2+T73GRfA9NO8C60oXxmROtOxu/9eVcarmnCf5Y+GbhPPetpO9v1yWhSrDh
brIuMGVPTKshJQxn/vB3jR1rmvY1+4h4z67Xo9jzlqom/mef8HY5b5Z2krh9
u9x/BCc+fyfz+aRzSfqLk7JerPvDpZ1/+ftEiTaRcVqvU0t8e1zuRYLz/vKu
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
wD/OK+10v4GJL+HEmeQLzrw360bqj3KuBfmFn5fznMkv/JScb0xcpevDsi5M
PAQnrsY+cM6PxT5wzmXV9lTqN+f/Yx849wVgHzjn3mMfOOfGYx84565jH/hs
OceDeALOeyjYDX5EzrvGbnDOf9Zzk8mXvP+L3eAFJJ7EbnDO18Vu8Mxybi12
03NK5P0O7ANvIu9lYB8471NgHzjnw2AfTV/OLSGOhxPPYzc47+lgN/huOQ8c
u8HPyfnY2A3+Ktk9sHDiN+yp5zDJ+czYE877MtgTzvoO9iQe5L0Y/JA49Ius
12Bn5HnPBTvrvJq8n4Kd9RwLOVcHO8M570XvExTO+1bYWfeLyftN2BnO+epw
9LeT8wewP/LF5JwBPTdcOPs69F5p4Y8lTsb+ug52KvJejmZ31f6avrw3iv3h
rKNhZ+Z9ORcL+8Bd5R4B7KPnHMt5/thH30+Vc/WxA5zz5NEfbivncuMPzD9x
Dwh6Kpd7Q/AH5XKPBv4AnyP3UOAPei6s3ONAfuHcj0B+4YFyTwH5hXNfgN4X
w3nGcq44+dJ1bLnHhHzBeW+UfMELyT0g5AvOPRrkS/c9yT0U+I+ejyXntKMP
cRbvnfFcfa9L9t3xXDjvefFcOO9zYU845xdhTzjn52BPOOel4D/wJrIPnHqk
75HLug/1CM55+NgBzvvy1As443TsQ9znJ+/fYR84781hH/hLed8N++h5D/Je
G/bR8bS814Z94I3kvTPsA2fcjX1UH7l/Afvoe6tyfwH2geeV8yKwD5zzAfQc
efZBy3uO2E3PvZPz1bEbcXRuGa/h5/AVy6pPPtDe3GMFPyDjMuyp874yzsKe
8Eoy7sCe8M9FS01L0faU2hPOvSHYE95A7u/AnnDeg8Oeen6GnK+CPeFOcp4G
9oSzb+3/K+zOo/+azj2OS2Kq4VJVQ0ypIUVRjbk3t797KalZDY15iuAau8yU
UlVtDTEVqdIaUjGVoojxG0IFiTYhmrg0EoJEJUsv18y1bj6v57vWXuu37p/5
5PzO95x99tnn2Xs/z/tjfKCrM9XOdZ3h83f9I+fr6tm1c/Fgkr+hPel8grQn
nc+O9qTzqdGe9OnJg9KedNwq7Vn+S+ERac86Ptwe7UmXV6k96UeGQ6I96ep2
tSedL4P2pOMSaM+6nuTj4eybZ+Ht493Tjw/3Hl+ejjOP207Hb8dJp+Ol44/T
lw+HHB+88s7CCcfdpuNvqwej42Bbn6IvG041fjT93nCk8Z3pOM/WB2v+GM6/
9UH6zXNXmrbW4zNqnZo+Lbx6+/flB7LhfM65fXc6fjieNR3X2rpA+UOGO43j
bz6I54+PT8fJxw+id8Intx5d881ws+UtFScpXGv7r+ZZuNb8IcSB6gj4NND5
hfFLoPNN4ENA50eA70/H+cffp/8sPL39m7h04cSl+O/03cIBxmen47TLS6bj
q1v3p38Q/jnOOB1vHO+bjvt9at5H8eGA+FbMy/vY5aDM94/gx0Dny8DnoHx1
4nfAh4DOjwDvno57j0dPx6XHkadfHZ68eqHilT47n/cuP4COr45vTsc5fzTv
nXjylfhi8JmgXxC/Cf4NFX/Gx4G/An14fBbUTdFx7+Vh0IeES8/Honxy4mfB
H4LOJ0JeSMW94efj2ldcGr69fXHv9T+uO7TP1xcfV5x37916Eweddk7P34rn
7r3Ddcdhpz8R7vr6jT4+Ok567euGAzC70fEBcOGrHj18eNx2On47rjodXx1X
vdY9wlfHSa/1k/DSi5OOHx9eOo42HU8b77vyOML9fqR533G/ccz1Qzxz/HT9
AUcd35yOc44bTscPl39fdcDhZuNQ0/Go8d/1Exx4+WT098NvV/9Jx1dXb0nH
LcfppuN1q2ejvxUONv5+8bzDd92w0XH48fHpOPn/aHScfFx7Oo79TY3+P9Fx
6mu/MfzGQY2O64gvX34C4RZe3Og48/I26DjqtzQ6jjq+OX211FMs2ujqLPDE
q943+57DG/070eWlmXfgveOz00eH046fTsdRx0+n46jLRxdvPxeuvvpeOr69
ukr6Aq/P55yrb6dPCOdc/bz4E48d91zchX/+UvbbjIdPzV360AHbdHmOjsd1
lPdTPpnhM+M80ncP7xGvueKicJvxmum4zfjC9EPCGVYnQMetxW2k40mqF6Iv
Fa4gTrHxFq/4942OV4xjQsfFbXVcXHVQdLzKVserxBmhLx4OSasvGV1eFB0X
sdVxEfHfi8sSDvx3s/9NfzwcePx366g48LjqjsdXx093PI66PJji/YRbLu+E
jr+t3q/8T8KF9tzr+sMTxhGm4wnbV3MeXGL9xPE4n/pJ7TuED7lJ3nf6wb+4
5hfbjnqtnovz40wem/wJOr+A2ueOfkv8jrWD7yauuHYoHlJ41/Jpiv8UHrJ8
GvrI8JDxrJ1neLjW8pUdj1Mqr4W+QfiW7rfqdMPDlC9bvxtuobo1Om6hvBPn
+TC8Pj4K4oHyU8h4RecvgMtPx+d/tpm/qGs4r5m/8LHdppm/8JNVd+Q68aLl
iToeL1q9gevZNbxovODaRwg3+MBmfnRgs25P5x9q3KDjx5p3O/+Pwhf1vByP
R4r/6HgcyE2aedNRmTd5XnQcRdfpfvmZyqen7xaOseun49y6TjoOquuh85e0
rkLn2+g66biO6jRq/oLXnfGhODrhdVtHovOfNc4XbzW8a+1Q3J3UkVlfostr
dV909VnyEui4mu6Xzo+Sj0jNa+InwkdEPMM3hI9Iq/PncB4+Hfw5HM+P451e
9PLDUD8dXwx+GI7ni/HDRueLwU+i6mXzvVOH6fxPhcNs/KTzR1iviZP5I+D4
Ox7P33hLx/N/s4mf8fytQ1bcHr9m/YqO9z6qiav5Selvjle3qL/R7w9HfcNe
4u3yFc7x8qtHNPE2frj+6Xg+v/jgNb8IJ3xuo+OE4/BWnWh4vNZLi38Zf1vx
SdXNhNN7UxPn4/R6Xxw/MnWL/G/E1Xxw+N/Q+eD4/jr/5smT5yvjeP4yfGXo
/GX4tRRHML4tfE3o0+Jvwm+DzneDDwSdHwQfCDo/CH4AxSmMLwA/APqZ8QXA
0y+uQ7j6ePpVRxuuPo48/erw5HHQar8pPHn8r9qPC0faeO54HGnPt7gR4S3j
/9JnhgOM/1s+AOEAe4509ePqneg457475kd45q6Tvl/41a6TjvOMX1b7I+E2
89uo/ZT4bhyb707lC4+Z77/Ad4H+bvwXjA/mayvHf4GfgeP5GuDc0fkaGB+c
h6+BcaC4Onj+aZ/isoffrn3K/za8bjzuygsOl9v3l46TbP/I/PGqqRed9831
b6u8Uvq+4SEbl+h8z8Vv5pX7H/zcE32PfKuOp+8bP3THm/ftvN/y606b81bF
e3R18cZz+vjUrTg//aD4qtsnop+eOm71G+Le88NPlp9a+fLhGBcPGp87/Gfn
oeMtOw8d99g8i35ZuMT6FZ2vit8V1+FL+106nrPfpePt+N2Kq1M/5ftL/2Pq
f31PK75NnW+fJq7eLnG166cfHQ7wqc2+AH/5yvPmvxR/eXrVd8ZfXj+vde9w
9bVP8dDC057VxFd42trN8XjXM5p4Ce9aezoej/rwJi7Co9bOFW+EI/3DJl7q
l3jJe+14/hH/aL7j/COq/iTjJx646y9/wnC5XSf9/vCxXU+N8+FX6w90nGr9
ocb/8KWLYxv9mvVeXmn4va9V/FPcsnCejW9VxxnOs3GpOMThuou3jZ+49K6n
eGPhWvsu0FcLz9/xxqt9wgd2/ZV/HX6v66fj7hZ/Vj57eLZ+t/y4wpv1u8Y9
/GG/S8cH9rt0XF+/S8fL9bv0PcOz9bvGPXzjN3vZv3A9jsclHtWss01r1tmq
Piyc4XadDWfY9Vdeebi+/9+6WV1/eLztuhker9+tdadwjJ2fjg/sPHT8Xu+d
8R/f2PH06eH6Or44TOEeO54+NbzfI5r932Wz/3tbs//bN/u/azb7vzhjzlP+
gS+eN/n1f5lZ56GPO+j86z9+e0adh370Cz8588IDuusw9H7LfdZ/8/um13tH
xyX2vTZeffituT8ZtNLrlVdT87KeA+buu/TsDu6w92LF8IdxbOk4t3jEVa8Q
LjEeMR2X2HnouLjyH7p+6fO5uJ8231N8pLeb7ymOn/iZjqOL89td15rP+8W9
pePf4iD7fo0O93i7Rr8/Ok4xHa9Y/X/54obTtXCj4wnj/NLxfgc0Ot4vPi8d
p/f0RsfpxYP23HGh5+V50b8TLjTeKx3nGY+VjreMO0zHHy7ucPSTwx/G7S0f
gHDn8HlrfAinFy+VjpuKl0rHTcUjLl+78Ic/b3RcYjxi+u/CH96r0fGKcYFb
bjAucPlWhQP81UbHB8arrXXgcGvxaovXHm4tDix9XHiwOLD0b4cHu3KTB4IH
i/eq/+O+4r0WrzTcV9xSOn4pbikdv3Rys4+Mr7tds1+Ma4o/UtyXcIzxguk4
w5Ob/FVc6C2bPFW85X5Nnir+7UFNnup/JE8V15WO74ozW/Px8GbljZQPWHiz
OFaVJxkO1caNjpeLk0vHyz2w0fFycWwrHzLcqksbHc/Key3uwnPWznR8Zvvy
dHxm4wAdnxnni46fbB+fjp+Mm0zfMfxk/N/i6IQDjP9Lfy0cYPv+9bvh2ar7
Lc5NeLbqhOl4tjibvnd4tjiblQcY3iYuZPkYhCeJI0m/PDxJXMWav4fHiNfp
O4jb6fx0/EnnqbgrnEZxo/EQ53Plpi4Jr1I+GB2v8rRGx3vEpTWO4dM+1uj4
tPi/xecIBxjPt/yawvXF86Xj+hafV11+OL34vHSc3pN6yd+b0kv8gJ9b3N9w
dPFzy3cuHF08XPoZ4eLe1Ut+4MG9zPdxbJ0HzxbHln5xeLbr9hJnHtPLusFK
zfj/VMZ/euWzLfnQGzdPmNd5vhm3cVkXbOIW3FFxde2zhFNqnkjH1TytqV/A
Tx7V1C8MTP3Cn3rRV27qGnB61+tFf7r5XuD34iP4vuDTynel482aF9PxafH+
6I+HO7pwkz8zMPkzONe+F3jXONHFfQwvGieajheNm0xfK/xk3GR68ZPT3+hL
hVeMU0zHK8YjpuMS41a4Lxxgdbb0z8MBtn9Nx1+1P17f0/BgL+7l+yUPrfJ8
woPVb43n+JA4j/Q7wnu0fmUcPuGVLQZftvy8jjxG7x0OKr5PjQPhoOL70HFQ
9Qfz/U/Cgdyml7jXPnjxUfL+ntqMw3yy7I8b53H58JXoOEu4k/SJ4U/iTtLx
J72/xvMfhj+JZ+F+lw5Xyn3ScaXkn9f4Fq4UriL97vAVcRXpXw9fESeRjpeI
k1j1gOEl4gyWL0e4gic3+pej4xg6D54hjmE99/AMceic545w5/o1+vXRcegq
PyTcuY0a/eroOHHFhwgX7qBGx4vDz6LjaF3S6DtGxyP2XVCnObGXeffxvXxf
8OnK7y6cOny6Wj8Ppw63i47f5fvie4SDjf9YHI5wIPEfa/86HMgHm/oyXEGc
MuPMe+GV4dw5Hu/ub43Ot3STZl7Al1N+ePHsw5E7uInb8bGd3/F8TvH1HI+z
90ij4+z5Thnf8M+1Z/mZhAeOA1h85fAA5XsX5zI8QJxlOt6ydWzjJ96scYOO
H2sdzDjxrWtG3NBv0KO132H82S982kua+oIXU19wSJM/g4+HJ6tf4criydJx
ZXH0qt4nPD0cPfp+4enhdbpO3E5czuLVhcM5qdHxOXFpywcpHNprGh2fFkfb
9eNp40rTTwlfGlfRefAVd2x0fEVcRTq+4qmNjq+Ie1j81/APcQ/pE8I/xEmn
vxJeOk46HS99Ui/5Zt9s9r/4dc5q9r9wbg9u+gm+Ir5nrWOE82m/m47zKW+5
/LLC1byxWffDNT2hyavHxxY30vFRrQ/Q8a7lHxrfcL3Mr+l42uIfOm4qjnyb
p4F7SMdPPrep/8UHVhdWcWw4ZvKW6bjBOLz0/uHxyrekF8cMp0weRHhl4ueq
ew2HEwef/nh4+IOadRXcb3mVjscjxf+t/fdwgF0PHZ/c+q3zTw/ftW+jT4yO
I+w8eMLFEebPE54wXnDVh4YbbJ2WPi1cXzzf8kcN19d6Gv3TcH3VX9BxffHx
K08gnHzxauUV3Lr23BWmzKt8Tjr+vLxiOv48zr71Crx9nH063r7zF3c/vHr9
tvZrwvPkH+D58hE4KMfRnwwXVD1gcfTDM+/TxOEDE+doB+P/D7b6eJOJ0+ZV
fE7nV6u+0nUuG26q96iuP1xB86nyUwoPULxtHMOR8x2l48KJt+nvhAvneuiv
hgv3RvpV+aaG/za2iTdw+cQzxVkMxw8XTHsuPvT7k7fcYHztcxUfq2fFDxfc
8YnixNHx4sRFxbWdPWaljdaa1sFxo+O8iRPK12X342eMvWlel0+a/nN5OKX2
5bUfTqn5HX2jT/ptcecLfykOqfN8LTxS91X7wtduvMas656uuIiOU2r8oY9Z
ZD6n1P3SP1rjv444fOlpHXxS/RCn9IhGxxe1b+g6zxh29WJTH36p8kzoH4VT
engv58Epc/zF75/28Fm/+lVdZ61Prrzd6MMfnlrPhf58OHvyqOlDw9kznhff
KRyzVscjPT/vu3546/R7Dx+8yLjKr6h6/PBjl8n8nb7VZxttttHHj1XeBf3J
8GAXyHOn77TEUhssftljlY9BHx8uq3iVjr/qeM8R71Q/0Q7LvX3/KV+96vmK
e2s/NLxTunbAOx3Y8KzwTs1Hyvfjqvs//e8jZhY3k46fiZtJx8+UP2Acw59/
oeFW4YKemn7i+LXX2XmH2/e+rHig9FXCBd0+/aH28ffrM/XcKS91cJCNe3jI
4ora5woPWb5icX52unx6/y/Gf+OA+GfOqPVuPG7XGdWvqo413G/r/5WvG16o
/QI6Xqh5DR0v9KKGQ4ILOqypg9s1dXDydvSfvXFiE+85HldfP6+8wRfOWPHO
gbOKV0vHrcUVpeOL4orWvkn4otqz4o0Hjjj037/QfQf1k90+nPTMwC++O76/
viO42dbN6PjYxlU6PrZ1Mzo+tnwM+uxwqk9r8tNwqj33Gj9vPuzYn43u5vu5
rxv+8MicRdadVX5I9PGbH3n7zhfP6hmZcZ7+4I+vuvODS2YVh9R7OiY80tWb
9/HQvI94oOU7HS7o7XleVV8cLqjna56FC4oHSsf//KgXXb6H57XH09u/teW2
b3X96fmYrbbD9Xd+aXKN/47H+fS+0PEt6cVzCK+SXr7c4VW24/neGc9PTzyj
/++1z4l9fvnQuM7gXvQfqCePfuUpp729w+XjOtv0oj+b+If+h5HvDThr3GOd
Rxr9jug3JC6ib/7glX/60b5jO79p9O9Ed1+e453hah6QuM7x124x5IRRX723
M7TRx0Q3zmvPvdaac8H1o6ZX/KOfHxgOwy3Ne/Fk3os5id88r3fOPvvp56a/
3TMk40lxg7ddbLWRb7/ac036oef1z55hWx/21qSewYnH6Ptsdc37G3ztuaoH
pC/7+ePHPfjF+9I/eez0TwYPf2elI+7qeTH9ufLWXtn5K30/+nvPS3kfi+f9
/QOfef6n0yuPmn7S+u/dd9TWY3v6Zt9ZO4+4Z/KSm100ruZl+v85k28Y8cLc
sT0L5v7N01cLj0V8Sx8z8cktn11+dOd76W/FH5u1/JPXzhjWs13aq/Spy/0f
5+SvWc+hr/6Dn/1ut7+/3Dk37em7sOPcZZ58cOrMzqC0J/2d236++BozZ3ZG
pL3ofwy3ZFLi59qPPueZF/qv/FrPdtmvKR7OiX3Gn7/Naz23Z39Q++z7x5mz
L9hods/D2Xem99v+iQ/XmzC38+OMt9rtqYmXHL/SXd08BPc1NesP8kDMCzYc
tOhLfYfMKF/28v0LB4Dfhut8b8pCi6+7xJ97ro/vjv659lN/Hdp3oa7/gf55
ytQvL7v7s7PKf1G/uv/VH2921A5zO7vmONc/IfXRV+U493t16qDxYYpHnvqm
bZv6xNNTn7hn2lk/Weyxixc5e/CMnjczr6RfN3rw0fcvO71nVO6r/GE+eWbK
0e/+ref5/Ft8snnqFgclX4K+5GdnLDP0kBc7uL30/feasvH+A+/tTG3GgbFX
zB8H5J/43Xf3/f7HG10ws8NvmL7DSctOuOLciZUHUr4Qi163xDWnTuzIo9AP
z97sgRfPHvZyx74z/U/7DJx0829e7RzZS170b+Whpp+smnrwm3Ie+jqzNlls
+13mdL6M4xl9vdQFy9OjH5q6p7vzvPW3U06YXw/bN+2gvx01bvizQ78xq+eY
XvbZ5zb1nrel3lM9jnb7YNHOFYO3faPDB107fCl5g3zH6Wf84cxt3jpsXoff
fL138Z3/XpOXKO9orzxv53k9+V3bNflL/N/3a/KUhiRPaVqzT8GferNmn4If
tH6inY+LP7X71Z78390vnd+6+m7vNf9QvrZV3xF/2yG97Hsu0Ky3rJ31lhXk
fze+t/yG6fJk9m7yCq5MXoF6OsffnvUf/pfu69/ig8lvkn5bfCfVSzoP/0q+
j3T+j+s069V3Zb36wqZuml/bpk298CmpF+YTqZ/wixzRrNPyizQO1/wl/kf8
z8rfOz5o+iF9zazn85vUT96J7+SwnN9zf2rH449+YrdJHf4onvuc3488edvH
Xuk5Od8d7+/uPbcus8Yqj3bez/hPX/DCXaaMXfjBzsp8eHM9K2TeemMT/ywc
Pxq8fteD2z+1mbc+lHmr6/eefvCjXw5bdOKEjvmI79G5z+wxcK/+L9XfF0fu
kPVve3yh6fX39IcmzNxj4eO7/N/iyw2/dOdTxnbrpWu/acqKZy1zw7B6TvRr
Rk9e/ZW9Z5Z/B/3A1C9oL/qtM/Y+644Fx5V/h+vfI/Gk66RfOGfATsd1urxU
+l1j58c5rod+018vWOfTG7vXQ5+dugb9g37Vsf+2xfU3dn2Q9YfvZn3D+ctX
J/FP8Uy936k70A/o7y732iLLbfpa9Q+/c++lI7Y/8LQuH6rer8bPkf6rcICN
+/SB4d9qH/rccGK1P33T8Cfdv/P99JEVZl/3ftc/iD5kpWtX2+TXXV8b+qTl
Lnlhh9HdfVD6hGcO+9qbR3fjNvrdWy6wzgMnduuaiueQen/Phb7Xlad/97Iz
ptb1F2dg8zc+3vOXXT6X+x7Qb/EzZ13y83qO9JE//2zMzauOKn8B+u1jPv71
xpuOKV+A2s/63Sof3L3F+Hq+9LdTF1Z+FnytD7lj48OWerR+V3+Zm/qs8rWJ
fu5WPaM2/eK+/L372Knv/Ov3njif99fzKp+BW1+YfO/n0+s66A/nfq9o4szf
JM50PP2htMNJTfz5WOLPnZo49pnEsc5P73PbZetdNaTLU6DPS3s6P33VYWtO
/9cPXy8fwPJpSfzpPJVXM6Hf1n+/bEqdhz47cYh+Uvu2z108YPQVV3fXGc2P
nps/ju3Uy7zpiiY+XDnx4UlNvLdA4r3yA8jv3/7ybduNv/Sx6lf0HRIHjmrm
I7tmPlJ+QNEHvv6XA95brlvfZfxYbLHt7zlygy5fkm6c0Q/o92Wc8Vzpnx8z
cpdp63Q5tvSXesb03WJ4d93H+eQ5FJ9d3ld4PnR/9+2ew7ffbeeu/1TxNHK/
k5t4dcHEq/7ee7Np6qru62Xf1vMufle4NJ4TfcvUobse+t6p+3b/5dObeufy
ncn5lsw+rOP9/wNpN/fluZ2TcdV9eW7eR8fXvmHGW/elnS9NPa/jazzOOOy6
6QtmvuO66cemHtP11XpFvrOVP93wmirvNsf/JeN88dH4MmR+9JUm/twm8afz
OP99+S5oR/qLx89/X5boZZ3E94y+dL6Dfq94MhlP9DN/NwevI/3S8WfsMfiY
xS9/s77j9N0zv/D39R7nO1vc/+jfyHjlPPSbku/kvoqbkTjKc6HfknjmimYd
5vbEIdqZ/ueM2+Wzln7hu+N5+X/jmHYvn8z+j5+x7Ylv1vhM3zPfZfdD9x2s
/Al1xHnvtAN9ziaHb7zvKt3n6Plvnfik6oj4JWY836eJ/9dK/O881d7hQrsv
7Wodxnna+gXt4j1QZ+382vtb8Q2h+50n44vhvP5/YngC/u33xXX+3vUvd97U
S4Ze1J3P0LWb56IfDch74d+VT5V4vn8zr3wq80rH+/8RmRc7v/YXd7l+fzc0
+yyOL95m3iPtWfX1yUt3Hv//Zt5H/Uc7b5bx37/dl+9Lb+sV+zTrFW8mTnB8
7Wdl/J/crCd43x1f9eD5LvRv1hO0m+srH9TERY6niytct/4m/l+il/UEx7Wc
B8dXHVnmX/o9fU7mQa6j/B4zfzm2WTfrk++I56c9PUfnL15NM5+qdZt8d7Sj
v7tx59UP6//Nrp+g57zAsfPjkyt6WT/xb+39ePZb/R7dOOb63Zd4nu73jc+u
T7v+86Hxe95zTzcur3XsxEXOW3XciU+qfeVDJj6p+CzHe98rzwn3L+Ob39Nf
jD/+nj4+40/FedFvaMZDz3GVxOH1nkdfM/Gn9vT/4h/X19adfaVZL1038YDj
27wmur+zTuW8rt8449+tP4Xji6O+7s1TR37e9fmtef2kG1ef9NvnuvkTvfjw
On7kp7ucucsmXd3zH5w8Cv/2/9s2/raVX5Hf9VxcL19Xf68dnrry81/fddAD
NZ4UvyX93HMybi3UxM8V16+74H9u9eD9NZ7rj+bdS/SyfqWd3ceEfL+Kh5X/
X7Vpf/frffH3xVXIuorjXe+DWY9yvP/3HP27fGvPfmjTLQ8cV+NPu6/6v4pa
3Vw=
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1:eJxFnXfc1MTXxbOb3bTN2lARK4pi72BFxYoiqGDvohQRETt2QWmiSFEURBER
UewiKvbesGPBXlCxi70r7/ly5vd5/8gzN5PJZDZPMnPvueferH70gO4nVKMo
mlNEUazyzCyKfqxE0fdJFG1Qar8WRcepvDCNonGqn6L6FpLHSL5G8iRt/+q8
QmV79XGM6heqvFHnXKX6o/Io6tOIopt1kfVUvq12z6rNqyo/17HRanOoyqN1
zkTJR0p+S9tnkrdUH21Uv4fav6hzO0g+W/W/qXxPbb6Q/Ljqt9R4+qvN6epz
K8kDJJ8p+Ui1m6A2h6vtYZKvlHyE5OfrUTRS8rEqz9X+PZI31LVy7Z+n3/u0
9huSB0l+RvIdOrfU+PfXtcZp66cbNVflxqo/TNeaKHmhjo/VtoP2/1DZV1tX
yXeqTVPywWrTSfIZqvtR5eXq+1j1s6P2j9XxPVV+qWvN1LEltX+l2m8i+Qju
s+RVG+5vLdUdV/V1v1P7U2K3/1bymoX7WYUxVn3u96qfpGu9qnb7an+Sju2t
ch21/Vm/cUcd30nlyzr+UuxjD2n/aNV3U7mt2p0l+VeVk3WPzpO8t+7Zaupn
kq7RWmUrnXeA5Kt07knav1vyhiqPV7vr1P45/S+u0P/lSf6PkkdKvl3yfZIH
qs0dajNO/Z8u+XbJIyW/rmNLqM0KKu/SNlbytSo/U79/63qfqnxEdTdXfH6v
psao8Y7WGD9UP+M0hpZqs7LaHij5arV7V/VjJC9PvbYJVd+rRWpzpbaZavOJ
2oxXfSvVv6HrLam6FVX21XvxsuS3JB+i+/kw90nXvVT7f6isq1xGv+sC1Y+R
PE3jGKr6fdXfuaofqvrLGb/2B6u+u8pvdc3zVP+79p+tu76nyue0XSS5j8od
1M8EXe8Ulbupn/vV/nH1s4vkexiD5F0l3yf5UcmdJD8o+UnJc7Q1JC+vchvd
0zPV5166bm/9lqdV/7LqZ6nvQ/R779b+c9ruqvh9uEf1h6p+lvaP0b09SP0W
uifXaSt1/gWqSzX+49WmJ+dpfOer7KrrvKxzX9L2tfb/VP3ZOndtnZdoO1Xt
n9cYMsmnSU5VvqLfOUbXPEHlFTr2quTLdd56Ol5VP6n66ZFZPiqUcaj/Wr/h
I5Wfq3xedc9p+1L7I1WO0Pap+vpKZX9tq6nPhzXmO7XNV/1NGte3avuNzn1G
x1/W9T6v+H/0W+TfMk71z8Z+r9eQvLq2Bdw79XWoxtJW9+EYlTXVH61yktpW
JN+rNtdJLplDJG+lsqltuvq9T+deyj3RubnqCjb+lxXv8w58p/uylParGsMG
Glei+lz7G+ucm5i31MdGqm/Qr+ofyyz3UvlAxe1vUz+t1ea/2HPf9/pdNR3b
VeeuX/WYM+YI9beZjm+tckHD7Q/XdX9U+4T5qfD7sfg9qfi8ejj3SF3vX9Uf
ofIM1c2KPXczt/+l8oDC8zh136r/t9X/Crr27DCvM4fvo+1Ttf9Z5W48Pw3P
Xcx/PxSun6/jz5We95h379f2E/dS9XeqfmDF51LfSv2/oz7W1DZQ9/lC3bOa
5DPVZncdv1fb8mpzlOpmSV5W8o0821X3w/tYU79nSb5Iz8Y9arOcjh2qNrP1
O6+XfJb6rWt/P5VXq/83JPdR+63V9knJ50jeU/IOOj5Z8gz182bu53EtjfdT
7b+m+ndUXspvYw4ovQ5OUv1ThdeviZKfKLx+XcH/WeUJGsOtus9rqHxOY3lb
9ctUQr/q5y3Vb6DtM+6v+r8w91w1Sef+p/q5qn9P9X9Jvk//s0dUfqH/zVtq
M0bl/ep7hrY3tP+Ejt/MfKtzftCxzVln9JtWVH0rbe+rfjsdf0HjeJc1TG3m
qc1YlX8wT/DMq1yOd1dtlg7PZhqeZ559nnme/Y80vnYqe/Jcq8+bVA7W/tu6
3kDWUJX76F6/r7FPUNtHC+seL+v3Lan2d6nNKLXfX9c7XfKBan8W84nqZul/
8qn2z1H94Sp/U/tZkkfr2I1Vz11/Mz+q/1fU/2jWbf43qpuosr/2I7VZSv3c
ofYXS65oO4R7qkOl6k8sXLdMw889zz/z2wMazy1cQ9dtJF4Xtua5rPo95D06
qfD9+I25seZ3nv3bJJ8r+Q7WOeYGbXeGd5J38we1v5n5Rm3Ga3+C7vvS6n8V
lf1yr5F3oCNpm6M296hcvvQc+Ahzr87dV/IPare0xna5zr2OZ7Xutfs0le/U
vcaepbJP7rntC517SuF56w/V7dy0jri+6k8o/Jt+Uf2x2mbzzqr+gqrndOZt
5sl1q/4N/QrX/YROJ3nbCgqY1jj1+Sproca7nNqfGX7jNpKHS35F8kyN/8mq
7wnzIXPhLJ0+TPJLFesQlxZex1vpd21c9bz6BPql+hla9fzMPP1skDdVuWzF
69A2Gse1+l0XayyXFX7P6oV1uT46vqfGPKzide1P1hS1H6R+l9KY/+L90Lay
jsXcF5VLqH4nHR8p+QOdt4+ejbNZrzS2qtr05zeozcUqP1H9cqzfugfLaXtR
fR2v616vug3UdkeN6WXVj1D7jtp/Dx1Jx9dV/4+FZ2aIyqcq1gOW0zWmaoz3
qtxO7d9R3WS131X9vIZOrH6m6xq36pzhOnaJyi9UtuSdUruRvKPoX9rmSb5G
dbvrWqPVbqH2d2l4zFNVf6nqvpO8EmtzWFNYW1ZPfO+H6nq/a/9NHb9K7T/Q
fZiD7q1yNeYDtV+eOV1jm6u2F2ts26v9q+r3/obXwC3Uz7bosNqfq/oHVJ6E
rs/8zPuYW4c5Q3JvyQdLPlFyL8kHST5Bcs/c+uHxkp/WNQ/hudR1T1H9Eao/
V/UnSz5c8jnoL5KP5HmT/K/GvQXznsqndN7+2tbkOda2GnOFxveFfktfbStp
/IdwH9R+P8kHcb7ky1U+FvsdbM17ldtWwmb6U+f9jN7BPUT3ULme7t97Ot5O
26ba/6BweUzV29ZV1yW6xl3q89Ggd/H/7K76b1T3dez16QPVX6hyb9V3TP0u
tkg89o3C+NFteH8fS6yD8e4/LLmPxrOztg21P1fla9r+rHiMq6K36Nwe+t9N
0v/nTI1lqsq1VbeZyqN0/fZqsJna/aMxbC55Hs+t+thK8vuSN9c1llX7Nmrf
XvJyklfWGBeozfo6T11HK6jfLdX+PbX/p/A9eVvlRhrnwbrG79gc6P/h//Jt
btsEG+Ub9Iaq36NP0FGYc1g/JW8l+T+Vn6tqO8k7qVyo9vep/alq/5mOba/6
ZVl/VP+46gepfgeNc010Ll33Z9U/oPrzVP8r6y/zv+RjNJZt+D+hh/H8S95N
5Vfqq4Pq1tUYvpS8s+QVGUP4nzKm7dR/G/W/ie7JiboPHVT/sdoswXPIWqHr
VCQ/zbrZ8BrLWos+2Ed1O1fd79dqs4vKlbmO+tpFfbbLvO5uW/U6fKTOr/BM
86yqbIt+wfuMXqg23XT8Tp27q87dReVvOrY26zm2tMapoUQbqFzAs8Uchi2r
cwAZxjdsn6FT74zNq/M7ofupXI35iGcIW19j36Xqsf7OWia5i8bTSsd2Ut0K
6JCJ+9hM4z9G/dawRdWmU+L/28aqv0z9PB9s7UdU3qftV8bZ9HN5ltq/Xbfe
fabKT3T8Y3672p8bex95ZNP67itqP1jyj2p7qeRB2AC6xkSNMS597pvonhrD
CTpvR52zQHVfxNZZV9Hv+FLyaZK3KGw/3az216C3qv5o7e+hc47FvlcfH6ru
ozDmYbrWnsyVpXVNdM6nde5r2g7hedUYLlKbg9XmJX5X7D576diuvBfotiqn
1jwGbNeBar9B7HnydMmH6fm9W+fOY82iT13nOtYInfe26t/SuZtr6x35N80L
v2uy2ozTubPVpgs4kur+Qx/R73pLbRZq/xq1eVjH3ir9Oz6N3YY1cz72JO+b
6nuoPD6xvfC56u/V7zob3Yx3WufuFe5pV5XXaiwfSO6tc66ruT3XPp//r9o/
rPZvYpeE/k8N1zqk4v8V/9++FT8nc2K/27tn7rOTyrr6uVVjPF/9zNd2i/rs
rHHdElsPf1vXGg2upPJVHW+q/SNqf6HkUvILar+f2q+Sec09RvubVa1Xz694
Tbsttt2aq/39OvcCnbtA2/WSb0IvkjxN8gzJH4CtSZ4k+VqdN1nb9br237nX
+bP0/5rZMN5yF3hMw/b+Zsx1Oneyzp2ith9LvkbytZKX0W+fFlvvOSro/K+r
zwU6/ia/T+USGluD+816onMeQ49teN1j/WvDvKk+X0RXyT3vPhXm3lTn3gXG
oeP/aJsjeQ72pepv4/9feu1lDZYY/as/L6j+BbVZJPklyS9JfhCdVcfHS162
aSxvuI6vmln/6aV7exjzOLiGyprazADXk9yiaWxlmOSlJZ+utmuov2Ukj9Cz
dl1pHfnG2HbNhuozA/tSu491va8ld1CbG9W+VD8nSJ6pBi+q/Ra8r6ofqrb3
qn6h6m6oeX1Fn0KvWqTzf4gtsx4PUPtn1P5xte8vebbkRyX3kXwG+E5pG5K1
+l2N80jVL1D96ZL3KmwbvS/5Pl37KOYKHeuuuonq/yDtn469XvN7B94Htjen
YSwJTGl7lcfzbOu8RyTfG/td4j0Cv7xCcned+17pPjfMPWcwd2BLfxDaMwft
DB4Sed57SOO5UPU3qnxG+4+r3bMqn2p4/mW+WlnHh2h7R+e8oP3XY2O86H7D
g/4HHjOsZkyG9kO1PYhdqmtdrb6/VnmqtmX1vzhN5UU14z7YwLN5J2qeM5kP
mBeYi08LMvPD+oXv13cqVwlrImvjm5mxo415/mJjtawdI0L/q0cuLwpyV93D
lnp+xpXGXa9RfY/IeMV26msrHb9Pfe2LvVA3zgreyvP0YpD530xQuyk6foPu
85WSb9C5b6qPTbDzY69l4L1vaDu44nuGDPbLWgpOxVo4Ruc+qn5mqp+xzMk6
b2n1c27m+Y218gbVT1Sbq3Jf/8UwnlNUv0JsfXiS5I5q+3xpHIwxLFCbO4LO
gO5Qq/q61PP+PhP056GFscpXVO4Y5t+X1Oe9mdeC7VXeo+01yb/VjU2DUR+o
fjZVebW2WySfl3mtGaD7e67atAM3V9mt4nMPwD4H31X9kZH7AO/+BhOy6n3k
Q/Rb+mWen1ugY7A2q66btlMYh+pPBlvQu/BU6WcSXGpz3Z9/635eWNM2KDzW
67Hx1b49/xvJz2vbWvKBrJ/artY5k3O/f6+Ete/+mm177PovdY1ZzCsa4328
Izo+Qu1fqRpnBGPEF9NG8hmZ7XTkVVS/H3MqGEpk/XktydfkxiY5dwW1Wb9m
/fpDjferio9Rv5P636RmnexNHdtE+781bMth020r+fLCtvNW2HoV6+WbVKyb
I68VuVwvyP+CKUQeA7YcNt2fqvul4rFhv0wpbO8+hA5Y2C4fhb9C92F2ze8v
/6tNa34GNlG7h3W9b1Su07Tt+hf6rdptULOuvl3VcrvI5YZBXrqwfv154Wdz
45rfizdUbqStveTXa75HbZmzar4nPNOb6nqPqt9vVW4Cpl3zPP9X1WPjmdq8
9Px2MmNp2qZNsDt4x7DRVV5XGJd+S+WYwj6v1wvbxtjI6Pwn8C7WPG8uCP+j
9yQfrvp1JC8p+YrCOOEbKm+o2n5jPdhF+yfreCfdk/fAVng+VTetZr8CGGYH
1hc9h0NL23ycC0bxncrvg+6HLvpdkBfkxsA+btg2pP4Z1a1a9Xo2BJ25GjDr
ivGzf1R/I3Mouq/K5wqve7QHm7u84jVveGRcF11xJ41nv8zXShOvh7RhffxJ
5c+x/QHgechgeoer/Z+SD1P5fcNY+jm61o3M8aofF3k84HqMY2xpnySG4hzt
L6F2j4b+fwl9/qd+Wqque+njS4Y2/H7GdoBesG11/pO6h0NK69S/69yDVM5k
vdPxNZse11+xsT9wwT+D3FVtHlGfe6m8tWa/1RQwJZ1zksa2Je+mrvVHbOyr
L3q2zjtO5SG6xtVq+6DKFg3jlic37KdoXTMmAw6D/FfD6+WjsTGTi3P7MA/V
dTfDXkhsS96Uuc36mdfivqxdubGHJ2LjD+tm1mf7q/y8bgz4UpXrZV6rOffx
0J65iHPBLzCf2+pYR56vun0Bd8f2L35ZM964qurbqM0qqrtT5fyaMYpVI+sJ
4A1J7meaZ3t2bn/NzNiYJn08HOTN9bu6JrZhZ4b6+ar/Rr/5Zmw5cMqGfXbt
VC5U/Vz9v3pK/lHy43X3/5PkJ8C8JX+Hbi/5Tsm/SH5K8qOSf5X8tOTHJH8v
+W7Jd+XGGKfGnivjwrgifhvwsDtiY2JbapyHa5zrFbbh0H/QSfARoKM8khsD
uJ13EhtE+y+xnut4e537O74xXbMlz5nu2YmSV5D8rvq8rbQtOzv0+YTOOSNy
n+hk6HP8j5fSfV665vGtrfJV3hnmZvWzTGIM+UF0KvBb1Y0vjK3ObgS8NJx7
Ymb8c2Wd83PD78ow8I/MbY5VmTeMvX+ostEwbn9sw9g/PoAXI+twy0p+vWJf
BjLP21OsbzU/w6s37W94J7fNxLn4Dlo37a+ax31LfO+vSX18+dD/V+iyqpuv
a/6ha5+mvrvrvK903rs6fpnKVZr2VYxS2246PlD1FyfWGb8K93M1tVk7sS8S
nJb6vVWenNlOao1vKPZ97h3u9z3hnv+q685BF9M4V1Q/A3TOL6p7sWrfCfbF
RZJXqNlv8mTNOi73ZGiQed+erlkn5p48XLPPBfvnpMwyY+iTef7CV75y076c
S7CJJLfO7FfaozCe0EXjuTA2Jv1LZH2eNYD5v23N6zXr9h6qP5p6yTfo3BUj
24w/Jouh+WgjlTvUjA3xLN0IfhfZPh2a2Sb8Rf+DOdjy6mePNGByFZ/fOTbe
9J/2e7I2gZFrW4ROoLZTNPZbwOIiv8sf6ti/FY/jS8nVqq/3SmZsZ1OVlYb7
uLXwms/aj376n/r7Dhxc5Y6st7F/1y41Y5H/VLzesu6CYW4heR8wYfW/sGYM
+T7JAxv2lQ/Aj1oaEwYb/rVmrPgBtTmz4fZgz+i/YMUPqn5u6Tbgymc3jFGD
Vf9Ycz/3YxvWXD87sm6FjoX+9U9qzPd2lS9lxnk7S+6h8X4S7uFy6mtbdHNw
bvTB2L6W6YUxyRvBxfktNfucPqrZj4sMRss62BasobCP77agawHkzihsb/Pc
3V4a28dv/rH2r1T9aypvwJeOLx5bMzEGDI8IHHhU1djG+6wNievQaa8vPJfj
s+qk8b5V9ZwJFvJaOAedCP0VvegAfAOqX1bX6hIb00y17QPGrXK13NhgZ11j
/6b9CXAQPtC5l6hNnfYa/+XYPKrbqWG/yjfoydrfNfbczTyM7Ynvg/liXO55
pQN6uvp8rGZ/6AOxcRwwnK/C84vvapXgg1s3sZ6Ovg6OPyS81/hl/02N7T6g
cteaceFK1fMF8wb2yIzgCxmocp+gS6BTwI/CX7+SygWJ7/8aYGW5/3crY/ep
7ek1Y8rYFdgX3+paLXT+TbH1cOawDyv2c41Vmxci6xL4nj5W/dzI6+EGKtuj
A7EeS67pHrcBO+J/qPv8UdV+kJUiY2PIq6pcPbV9cJfKTevWtR9MrXeDgbPf
XvLekvtF9isz/vtS+wnwF3RM/FvAutePjK3zPG+h+jE14/8ra78emxcFJ6pr
wC/ALroE+avI3Ci4Vt0k/w6uEnlN/7Rq24axgpfje4U7Ac8Mvhk6AOsJY2iT
+n8NTr5eZBsOeQ2O14yb8UzAT0P3WTv3XI1PcaXU/CPsFuyUtVKXD6scr/u5
Pu+PyvdzY9frqNymbnvlabV5t2pfCbbWxNK6Vlu1WSV13QyVK4DdRuaBtA3v
9R1wTSSvIHlLXWPPmu/VUZF9uvh2n02MfYOBP51Yx0fXZ3/F1NgmnIFWqZ8l
1vrO4X7CWzu8YuwDvhl+Bt7N3SUPqtrXNgOdsmFfGz6386uWb1J9v4b5Y8fk
npdZd9ZReaiut4/KQ1TunZoHcmFivxttrlP7AQ33j0/vdrBIyX/jey+sP7+m
+sFV+/5uZt1qWMYf+B+8KPW/o8qu6v8gyZupvET/w33VZlhkXY95dfu6OV2X
qe3f+J10f7qpTX8d+0PXOlfl47l5asxRl0X29eLzvTs3j6sz1889Zy32x1S8
ZvVmQlR5Y/hf8z9nHexVtR+K56tneN6uC+8R71PHqs/dOgrraNX8ia41/y/A
oPAtwNECq4cDcxLrEXhv1fU/qH5JjW2A5FmMX232VN3Gucd+oM7fNLW+cFLQ
GfZNbV+O0r24FTxR9U+rfbfUvKlLAneU+7Z6bpy1s9rsh9+qbk7me6rbX+Mc
EnSRjrGxV/QidKKWQS/6JLHet1Jinxa+rXYBQ7iL9TY3bs08xnwGPsoavaPK
uXDCwIkS++fw04GBY1M/oXMvAp8pvD5fIHkpjW3Jujkrv2fmf05T+WtmbujP
mecu9AWwFex6uAZn69yrJX+s6xzVNB7Zom5uzdq6D1N03vjgQ9he7XdAPyvs
i++vc+upsce94Dqq7aU67w70RewGroW+nfid2AT9S+e24hbkxi1Y18BzninN
V71E9Vfgz9Ox8Zl1/sX6PnpmZn7P2ipT9fOk2o/Mjc3vxhqock3tbyf5SPwP
mTnAU7G/wdx1/fMC/g1H9jfV75yaJ/hAYqwRfuQYsKvcvxdf3qqSt4zss6ul
fva7qH2h/dV4/PFl6JyTasZ2/0z8LG+T2BfTQr+xhD+TmmMMHtg/8fP7T91+
9S7hed08tW/nmMS+HXx4+Hfw/+BvwgeEf6Ynz3Ld3LNT+O2FfZ5dq54LmFuZ
Y/Hx/aW+2quug8pFidf5neF8Fv5dy+b2MyB3UNkazFzjvrzpNYC1AL7tWswF
vBc675HU+tU/6mc31R/D3Alequ0kyQ+oPItnCkwAfTvzPNs7MXZ0gOT9tJ2q
fg7l/Ue3io2Hgg9vlBob/kPXXVHj2Ujy0uirOt5J225q8zvzNJvkNPgPjgCb
yLx2HsD/SMf3qhi/XkrykRXzg7dSX/urbFfYHwe+js9zFV1rY9Yg/Aup14n9
VH9YYiwWvHdWZh/E3Zn9XfTTVeX6uZ/DdXmfMmOHrItvqL4167Xe35mp9eLf
VH8ZWE3V3GywNO4LXO0xqf3eT6jNC6X9hMOb9sfjl4eP1DX2vYCffQX6sra1
quY8XadrzUzM27wy1MPVgLMBl3t0w1hgrr476To59whdFluRd7RpP3am+q6q
797wvD9K5eaZ7ZKKxrhX7P/BEugfmTkHC+vGGsFDuQa40ZpVY0cnVcxvPJH3
SvVtJE+KjNmvzhytcx8ujNWB3T1U2M/MnH9g3c/V+RrfpNLP1A8qv2Q+rZnT
9UB49h7Dt5/7/9wR7BZfmfo/WfUfSV4HPUTlVbruJrH3J8T2I7dFJ4/NC0cm
FuBGns3gC+VedVY/3WLzs9fW/oc183qxWb5IXddK9+OS1Dyxlql9AvgG2F83
N17bVmM7ITUHPoOjXNq/C3++FfMjurHqdontZ8WmQP9F519RW1Pnr8MamBuz
RReGg/xwwzoPft082CnYK8uqr2UkL1faZl8p6POnZ/ZTfYkfMTWe+5Xk99Vu
DbUvmZNL8zeaksvCOuy+TWNpjwf8beXSPqVVVb5TmgOTqf3Nqe3yhTzPNfOd
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
            "]], Polygon3DBox[CompressedData["
1:eJwtnXfgV+MXx+9n3f0lGSUrK4VI0S8zUiISkVEKpUlCiMrMSsoIkSgSGZkh
q2GnMkL2nkVkRVF+71fv+8ft+5z7jHs/997nec55n/c5bd17SNfTy0EQzAmD
oKq/m6dB0L4UBLUoCFrVBcHueRBcpYqtqVN580TnVV5R0znVb6T2+6l9Se1b
SL4vDoIr1P4jtVmqNo+o/T4q76fycvV/QvW3qf4o9dlb5R/Vb69KELwpeaLK
A3SM1Q19oj43qU899d9C5dU6f77Gn6+/v6t+T53bQeX3NOYsle/VWBNUv0Tn
1td4YzXeFSpfmQVBZ8l16nOsyv11rCf5X/X5XmOfpf6jdD9PSz5T5ZNUX1L9
cer/pH7bh5K/k/yb6p+W/Liuc4vaHy+5i+4vV5/Okk+WPEltQz3H1SpfrOMU
1R+ZuPyKyvvo/vaQ3FVyonFGSv6f+o9R/5Y6t0R17XX+I13vD8mBxrpEY7aR
vD7PWNc/SPUfS+4nOdfve0h92qjpvhr/R411uI45Gu8r1XdW+TL130/tP5a8
v8qNNMaBKlfVt6Wu/4z+fqtn00bn/tX12uhopfKmGnNHjTlP9fuofh+da6+6
J3X92zV+T8ltVd5f15go+RC1b657eUznbpZ8mOr/p/K9Ored6lporG/V9lHJ
h0ruKPlnyXU6jlD7jXSNsu5vjq63t8p7q387XW+6xrhM9d9I3lnl5dTr97wt
+WvVz9O551T/huSBKj+jY5rkNTxj1d+h6zXkW9H1TtDvvUf1l6r+NZ0bzTuR
vFjjrZD8j+SFksepfj3JC1S+SPfUSvWxxv9TY+2t+71W9TtLnqO64Tp2Uf19
fD+qv0H1j9BX1+6s652n+p1VP13nzlD9LhrzFclN1X9XtVmh39NO8qeS71B5
lurv0vh/q31V9e/oXKT6U1R/jspPq/5u1f+l+qOK+bJUdQ119I/8/H7Q82um
+m1UnqL33Uh122usU3U/U3QPjYp3+6XutZ2OOzReL7V5Q/f6ssZ/XfKnanOz
2lygc7vp+g9IHqq+CyW/I/knydtq7N3Ufn7Fa0BZ1+us+mVlf5MPqP4Q3rnG
myb5dPW/UfJbKo/V2FvV+fv6Ue13ZDyV/9axk8baUcduuufjNcYNKo/S+QPV
fqTGb6Hr3a/2Z2m8vpG/7fo6TlF5Lt+Arvey5H4qn6b2DdX+Vuaj2s/WuadU
P1/y1bqHJbnn/hy+a40/QO3rqf049c9Ufk9jZpIvkXyhyk/o+J/udw/WL93f
jbq/DVXeQuWB6v+Qxhmr8Xfj96vcR+0/VP0GOnqrvIeu10J19+ja49X+VZ1b
UTyvJiq/pmsu0PV2V99jVH8O65vGe0b1Z6v8uNq0VvvdNd6euuZSybur/YuS
b1b5vsTvfneN/73at9E4i1S/jOVE9Vdp/MMlr6cxeqo8MPNaeJzq+uh6F0ve
Q/W5xlujsfbVGDfp+nupTWPJh/G8JCeq/0tyVb//edWN0vU2Vf8L1b+l+keq
/13181lTVf8U677qD9TfD1TfV+eOVp9bdd2XdC+PSl6k33OW+m+n+nvVf0OV
f9L4P6ruT7Xty/gabwfJrSRXJW8meaDuZyudS9X2Ph2BxputcY9WfTeN8Y/k
bhrvYdVdoOvvqvZVnWvFXqX+56vLCRpvQ7WfpnveRvKukm+RvAnvU/dzBWu6
xqyofUv1z9V/Cc9O505U/Saqn6FyJ537QHUt9Fu+UtsR6r+j2v+j6z+m+oNV
/77qt5X8ge6njeTXy/6G+JZStT9X4/2i8fppjB66n2tVfkP3c4DuZ0PJrSVP
l7yr5LLarGQu6DieOaVrDtb1Gkt+l71T49+i8ZdL3k7jn6bxN1T9O7reNir/
ofoGkjfXOI003irJW0rehP1Y7SdqjA3VdyuNPU31b2v81yV/rvZHSr5V9fUl
b6n6i7k/1Z+o/m/q3LMaa0fVH63yLNW3Vv1KndusuP57Gr9B5r1iqdp8lvge
uddVat9P7bfVuc6SZ0q+W/Ig3XN99gv12Ur38FbuudxIz7a76n/TeJtUPef2
Ze3V8Yh+/x1qc5rGvlLth6vcU+NtpPbXSe7CWqqx9pD8ncbvq/4qBt+qvL2u
f7jKT6j97jpZX+17qX4e37TG/lzH1brWP5K/U9sDNM5ekpsWc3C4xmii9n/o
3P26x2/4ZvR+K5KXq/1wnZuq+ztb7a9U34dYzyTvpvqVkieo/dlq353vR/f/
meRfJV8jOeH56lxXlSPWJd3fL+yzGqsdB/NLbc5R+1/5plPf72+Sr5Pcjbkl
OWJ90Rgt0I0Sz6+71Le5xvsBfUj1oep/Vd13kv9T/8ckf6vyYh2ncn/q87bK
NdZcyUerfifd01r1qWNv0W/Zsc7r12dl70FbqlxS+4Fqf7DkZpJ/0hiprvcc
67/KXXSPo1QeobpVevb/Jl6bFmq8ZhrvRrU5Q/17soap3FXjLZO8SvKNajNa
7V9QeWuVd1b7/9RmB42/vcb4UGOP05j7s/aq3yWq31X1z+j+bte5Aep7rM6v
1HjXqv3GKh/EnqD6zSXfpf736L7eLeQf0dckPyj5P/WfInkMe7rk2yQ/yH6f
+Fnur/Pb63pr9bcv673qX1T5Jo1/luRekntl3m++VP/NmIMqr9HRW/Xbo4+q
vI3a3MH19L420HgX6dwDkkep/npd71Jd71mVP1H5CNX/ofpuFa8/v+jc3uq/
SO0bSL5dv6e72l/E3q+6dmr/sOrHq/0UnTtVdT/pGQxhvZD8o8pb63hA9R9I
vkH30EPt16Jra7wnNN5lOp5W+SDWRo33aeK5frTG30bymWq/jfqX1eYn1b2a
Wzdjb95S9W9KfpCx1P5qyYM1zo0av6PaNOVZqM94lR9X/SGqf1rjTdN4i7A5
VP5SbbaWPJn1kD0xC9YZOpP0p7/6bqb7n6L6uyVPUNtGkidLnip5vORH1P52
yQ+y/6r9KZKrkvvoer/o3s6QfDzri+6xr37r5eq/n8ZX1+B3/TNacgfJJbV5
TvIYyR0lH6j6/ySfznqo8SZK7outoDF3Vfl/utdQv2dU7vWzs+Q6yZfkXv/3
kRzVef59UtgDN6i8hcbooPpHVL+b6jO1P7TqPfgW1XfS9T9T+z95xvoNm2Te
C7+T/JH6zlP7Wtm63BD1X09yV/XfWOcqrEU6mqp/je9H7f+no4/6Pq/r7an2
R7KelG1jbMZ6pXG2KH7fxio/o/p7JL8h+QCVr9L9tNf4/6r9I6qvx++V3EBj
TFf9czqmV6zDosvyvLeseD7107XPZQ2U/C37MOu5xuvO+sE3r3t6QPX9WPtU
36vO+uCxGntfyUMlz5R8p/o/rjbDNd5Jie91sfoepPrJqj9P9afqWa0n+XTd
30Ua/wLV3yt5gdpfo/aDJK9hb5Q8RvJAyf9Knqf+M9X/AJ37WHVzM+/Nk1V/
l/pfmvt9dZCcSO6l+7pQ9zdBv3cfdBi1Xym5q66fq/5eyRdUrM/M1PM4XvKa
Yr49InmhrjGWuarx1mrsRZLHsfdJ/g9bS/IZki/UePtqvIZ6XjdqvJvYf3iG
iXXlt9W+g+p7Sr5F8luS20s+ufi996t/R8knSL5cciZ5W8mprtFJz+dE1hC+
7cS27c/q31j1TXW9p3W9d9lfde7x3HP/K137XNVvILmH+l+vdtfXef+eiu3L
+qqxrtD5tqr/k/0RfVz1d2m8ucwZlZ9U/27Yj9hG6n+7zg0r7PcWej6bq/9U
9i/Jt6nNIr43td+Lucr6KXkX1bXWvdUkvyT5mLLfxVmSN9V4Wdk66ZeJ7d9b
q96Dd0r9+56p2P7eQeXZ6B+SN1D7RPWvSp4neQvV3y15e/U/u2qb4D2NV8Fe
1bXP1LnbYuvfw6vGZLZQ+1/QDyXvxDNV+UEd11S9hz2kfl3VvgG/TeWTdb9z
JP+HfqL3M1jyWI2/RPXfq35zyeMkvy/5B8lbSG6p9pdovFUat4HkCbrmYvX/
SP0bSu6u+q9Vf6XabyZ5oep30PP4Xs9nY8njJS9Q+yGx9cl+NX8f1+ncpNDz
hO/ndsn3SJ6h9rH6H6LzGfaT5ETygsjfexvWXLWfXax/z2febxrH3h9WqH0n
tT838v53Nnauxt5E5+qpTSW0rTxM585Xmx4aZ5jky1gvVXeMxr9a8vxCH/xZ
43VQ3yz2fN9J9d3Ya4v5ebTk0ZJfK+yFKLTudxH2CniB5KGsfczJmuch83Fy
yXNmiOQbJT9Q8p61k37PDLX9sLBvb0VnUV2go449mz1F5QtUv7/qb9K5K0vW
MbBHwJsuCayDTlT5WOaR6kbrGW2k+zle8jDJx+idjQNLqfn9zNfxucqn6xgD
tqA2b6p8FXif5Amh7Y079Xc8eBE2LPem+pvRfUKvB6v0d03JOh326HDsI7Cf
0PrjeqF/C79psMbfT/dzHPeu40T2Q7W/jbkQer29mvkkeWro9eeE2LrqNJ3r
qXJP9RnJs9XvuTb2+NhHrBEPhV7nWO/ulDyDOuYctpbKh2u8QyQPl3yV5PqS
v9TfD5DLts+/y21bogOjC2NDo8ejz9ep7w+S9wptf38u+X61Ob1qjBKscqzq
Llbd0LLxmWskXyj5LMlHSh5X1KPzg+9cpuNcyZMBYVXeJbO+WD+0fngj30Ts
+b41ulDitWFbyfVV3lLnTpM8qGp8Fnusj8q92bMlPyz5HPAq9l+Vd9W5JwPv
YS1U3iCx7TxAciPJH6fGXvpJbij5rsRlbKIGkrfRcZbKbdVn08Tr25YlX3MT
1U1lvlaNoe3Juw2NpaCTgsfFGn8z1sbQ+M9X6r9a3+rDkreTfIB+6/uSv9cx
TOeWYVNorLkq76D6U1QfV41BvATWqutlGu91lZvWGb97W3Vf6HhY5RXqv4HK
S5hrrA86twV9dXyvc/14R+grut5SyaHub2Ns48JeGKb2W4En6fghND7VQ21P
wMZQ+Q/OlXwOvOovnTte5f1ZI/ktie2x7WPvfx8m1rUOCo2fD9bf3qxNFeOP
Z6n/RN1PCOanuqskP1m2zvUUeI9+T0VjP69yE/X/nWuWfE3wxJPVflTZmOUL
krfU9Q7S9R4t9MVRxfd2htp0UdtNQmMv84pn+FZoe+mtYs6M1fNYT+UGBZ75
vn7HTwW+1UZjfswzrhqDv1ByL73z5UV9I137Q9X/LPlRjXEAtpLk78FrJG8X
2+/wVMkYFxjcc5KfKBmTfw5sUfJcyS+UjKlyv7zvl0rGi47S9d7n+9f17tGz
eVN93mO/lPyw7udo1X8g+VTJ3TPj/fVqxoBbqfyX2tdJflX1X+nvaTqX6u9I
1e+Cfq9jPbCHYj/8gDmiurck3yn5GMkfSR6s/n2wpXT+HclNWIPU7w3J70re
Q/K9krup/YeST5N8otqP0LmH0afYY1VeqfaZ/r6CfsF91qzLPq/6T1mfi7qL
q77frdm3JDeooWBoXdDfjdF31b5V6HWY9XiPsjFwcHjw+NbgI6r7UfLXgX08
7+nazUK/m9/QN1S3v+Q9Vd5L/VvWPOeZ+zMK+2QjbADJ9xV43Gdq/y7YTskY
0ceh9YcWZWM0c/Q9bcV+FAfrQJb7QttOTXXuc9VvGNo+bib5GskNQ39/i3T0
V5/jdL0L1HVhod+yf4+Q/Hqhb6/S+EexF6nvP5Jfkbxt2bZHWdc7Xu0vVPtF
hT58rOSRkhcU+js4JnjmHPa0mvX9XH8vLNbLoayZkjupTdvc+tqmNWOGZe4t
9/PiuYHP/ae/5bIxefwZR2TGew8N7X/pmtmf1Tm0vw3DsVI2Jo6/ZdfYWM6+
PEOVD2FfVnlAxfZjR8ltJV+v9gPRIWquB5Pn+z9UR5eSMeCnVL42M97SMzRe
BH44NPAexV71tI5HVH6xbHv4QB0nlD3HP9L1Z6n+YdXPLds+Pim2b+BJnTtZ
5d6xbeVZ7Akqr1b7tSVjGODl+AzwHfxVM952qsY4UnIntTlN5eY6DlHbM3WP
ofpfnlufQq/CfzZGf0eWjPEcqfr/0V/t/6f7O4dno/aT2K9UbsP+ojarJG+j
Pl/Elv+urttqgy9V/hR8R/KmrCkqD1L/SPe2t+p3Vnkn8GHVT8WvVeDxG9Xs
QzgU3VrnN5G8EJ8Stn9u/+BMlSeyPutvovqXNd4X+jsp8fxknn6mtrvlnsvM
+QsT449rq95Db46t74c17+F3qtxSv/dw/d4hfDMqtyrkip5Hb95lZFu/h37P
2SpfpvEHqLy7yntj/xb7DRh8O56f3kdf9BOd36vO+E61Zp1mosr91L9UM8a7
kcqZxqmv641Q/9PVp2+BV0xTmxvq/HueCmxDYEvgk8U3O6pYb8HUwdZZb/At
n1LYm4003mDwBTD40JgI2Ejfwh4HQxgiuXlmXRDMCOwImxHbEZ8BvoOhOppg
z5eNJw3Rca/674Q+ARaqo5nK88r2b1yUuq4JNofKwzReO433uK5xseRLdDSv
2MbB1sGHhy+Pc+drrN0z+x7x0eKrbZnZ94QPBV/KdZH3YfZjfIl7ZrZV95R8
qcpX6DhE5Q9ZE1RulxXYiM5drvK7qX2d+DxHSW6bFdhWxb7dyapviz+0bP/u
1ZH1BPQFsBp8kvgmd5U8gv0Ge03lC1gTJR+j44TAPnJ85Zuovp/KbcGEVB6r
c/0rXqNYq3ZNjPUO0rnrJZ+cGavsInl0Zh89vvpekq8GH0+8Vt2o972P3vcD
ieu+lHx8bvwC3zwYLljuCPWPY2OgYKFTMutGh6NPqu/LibHNK8DkVPdPaqx2
nOSHwEvB0FQ+jf0N/6PkSyvGSLfmt2bGivGB4Qu7O/O33AUfF+t3nb9rzk1T
3VOpsXfGBI+akflad+ncINVdyB4YGiMFKwVvugx8RuN10ngPqs2h4HO6fikz
vszaiI8MXxmYA9gD9spAtf1Nff4uxj81NV70GHhCYH8OeMrjkr8JzBcYr2OG
5LfKxjvBsMGywZzAnu7GRkD/Yz1l/kl+qGIMu0Nmnw2+GzAK9PcrsNnAJdXn
/cw+M7CmLyr2d13Lb6rYBscWv5L5VbEPC/wFfxZ7NZgM2Mye+BwqxhzflTwK
nTqyP7t1akwGbAadH/8zGCZYJhyHt1SerfFnsXehz0runLg8W8dLmW0gbCF0
mV009lSNvWVsjBGscV/VP1ExRop/4hL8WTWv4fhT/0js28fGwNb4W3Jasg8C
X8TKxL5OfCT4Sq7SNbpo/KUa7yPJr6h+OXiOfv/z+i3HgNnF9tHgq7lS7TvH
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
Sw==
            "]], Polygon3DBox[CompressedData["
1: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
oTjP49zIpL8r4vdFJTn/B/7/8eM=
            "]], 
           Polygon3DBox[{{3205, 1478, 1379, 1378, 1664, 2626}, {2712, 1756, 
            1408, 1409, 1757, 2713}, {2488, 1473, 1661, 3231, 2374, 2375}}]},
          Annotation[#, "Charting`Private`Tag$11217#1"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0ktIVVEUh/Fl5tW05yRsUhq3yOwaNPZSZBJRCQZJZUQ4CRvYtJCa1Y0G
lWbqsEnSqKKyBjqwLGrQqPc7JUEC7SUIEoG/TXDv+b71P2uvc/Y5p7rtxL6O
ooi4759fGJF8pDiiimQWRSxX1/EKvoavwDqsxDxmcU/qKY9o0bfLjFZ1w+KI
a7xd1oxb9R2Xn1Y38VN8P57HftkR3sfv6j1j1h3ZAT4gG8Iu2TPZYJqh9zE2
u8ZD577Jj+JLWT1uWRBxsSTilfoSvsbL+Aa78C124zusKTPffs9a9169UT2s
Lqiv6PkgmzS/h3/k3/lV/ok/1dPLPye37rn6C++TfcWpTMS0/jH+pzRip7k/
1bdwXNaIP9Q3sd+eXsjG1Bf4KO/Ee3jb3A5+ne+w5xvpurzVM+nRX0jPgp/j
J/mjiogHZu61pl09yPP8EN+Mu3Et1uNKzOFBc8fNXc1X8WM8Z952XCbbgHPq
Tfa2VP1PXcuX8Fr5nP0ddh1L4wnWpPvyTLbpczvx27OYlZWnWda5bORk62Vl
yR1GrcuqW3CdntL0fVk/I8uqM+m+0S+qHJyKCev+kuL07jRU6/X6Y5r/Kvr/
Tc8DRT9Z0Q==
        "]]}, 
      {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwVzDtOQlEUheFN4YUL0oli6TDUAQAaG2oajZHGaE1nZWVrIvLwAUwDOx2A
haLxPQ1QPos//z5r7X3W9o7rR5mI2EGSRtwXIh4wzEdcLEQMOMVYtrwYcVKM
aNsrmZdwgJHsUpbFm3eHc5iY39E17/M5PvDkv6n/evIZn7mvcBXP/x1a9nbl
df6V/2Eib8j67lJ86q44j4Luy/vaPDLX7G/hW/biPcON7lS2jUP/jHWv8jLf
6lb4ET9oYiBb57bdDd7EnduEh7pVngPBMS5k
        "]], 
       Line3DBox[{2315, 2570, 3099, 1255, 3490, 3008, 2516, 3103, 1257, 3102, 
        3100, 3124, 3480, 2469, 2316, 3292, 3300, 3190, 2470, 2317, 3222, 
        3301, 2471, 2726, 3411, 2572, 2780, 1065, 1066, 2171, 733, 2781, 611, 
        2253, 1235, 1067, 2782, 3194, 3373, 2318, 3302, 2472, 2319, 2573, 
        3303, 2473, 2727, 736, 3304, 2783, 612, 842, 738, 3305, 2784, 1136, 
        3105, 3476, 3104, 3176, 2474, 2320, 3449, 2954, 2475, 3161}], 
       Line3DBox[{2321, 3098, 3195, 3474, 3173, 3101, 3196, 3475, 3125, 2517, 
        3109, 2262, 3165, 3108, 3284, 3306, 3126, 2476, 2322, 3374, 2574, 
        2477, 2728, 3263, 3437, 2575, 2785, 3072, 3073, 2729, 3412, 2892, 
        2576, 2787, 2814, 2815, 3488, 2730, 3074, 2577, 2789, 3197, 3375, 
        2323, 3198, 3332, 2324, 2578, 3307, 2478, 2731, 2893, 3223, 3308, 
        2791, 2816, 2817, 2732, 2894, 3438, 2579, 2793, 3113, 3114, 3112, 
        3477, 3111, 3177, 2479, 2325, 3309, 2480, 2326}], 
       Line3DBox[{2328, 3199, 3333, 2327, 3200, 3334, 2329, 3106, 3110, 3107, 
        3491, 3166, 2330, 3128, 1516, 3127, 2518, 2331, 3360, 2519, 2520, 
        2332, 3361, 2521, 2786, 2522, 2838, 2955, 3264, 3376, 2580, 2788, 
        2581, 3439, 3265, 3079, 2956, 2582, 2790, 2583, 3377, 2333, 3201, 
        3335, 2334, 2584, 2585, 3413, 2335, 2896, 3378, 2586, 2792, 2587, 
        2897, 2957, 2898, 3379, 2588, 2794, 2589, 3133, 2336, 3290, 3478, 
        3115, 3178, 3116, 2337, 3310, 2481, 2338}], 
       Line3DBox[{2340, 3167, 3168, 3492, 2339, 2590, 2591, 3380, 2341, 2593, 
        3336, 3225, 2342, 3214, 3457, 3009, 2523, 2343, 1523, 2524, 2344, 
        3252, 3362, 2525, 2895, 2526, 2839, 3080, 3471, 2958, 2527, 3132, 
        2528, 3016, 3414, 2345, 2598, 2795, 2599, 3382, 2346, 3202, 3337, 
        2347, 2601, 3338, 3226, 2348, 2840, 3215, 3429, 2796, 2529, 2841, 
        3081, 2959, 3383, 2602, 2797, 2603, 3136, 2349, 3291, 3482, 3134, 
        3187, 3135, 2350, 3450, 2960, 2961, 2351}], Line3DBox[CompressedData["

1:eJwVzksuQwEYhuHfSGhrAXWrIjFQqdbp3SZKYtSBSgw15kzKAsSoIXErQ/ah
JFoLYQsegzf/973fOadd6fbaJ1MR0cbuTMQkFfGNa4zxhctMRMtWm42ooqE3
9UT+xbn+4rlnNPgnd4hNW9/2KD+gbrtz7zHH/9h3UOMz+kXa9+W6XOK3UdEP
9HfvjLDB3bo3OOMT+7Kcw7ptyT2d9l1+QV7EGn/s2Xk5i7Ltw/3Eqi2xXfnt
Er/H7SPNvdny//+DH9hT3KueQ5Hr6AX50HaELrb0PyCRJCw=
        "]], Line3DBox[CompressedData["
1:eJwVzDsvw3EYxfHHbXAp3oLBy9BG4hY214YIaYmNkVeA0W5iwKap/lUvRNiw
K6sXgNYL8Olwcs73nOf3G8ntze92RMQ6ZXojLvojFgYiLnmpL6KTp/BJKqJo
b+pWdYu6NZ7gLj6Ib+wtvIGX8Ca/xddy1vshXnLzp8vblvEW/+Zl3ZU8LCdu
xvA7PvTuRXeHG+3/bGn5VXdk+9BVcFmf4af6H6rJjz0RVT5Ov+0/3EzTBG7i
ijwpf/EpXtCl/VnF2/4dpR2c6Gfs3bhmq8tZ3ZmtwVfogOq2fX5OLbrHs27f
5GO3n97P4Wf+YHvi/+pLOU0=
        "]], Line3DBox[CompressedData["
1:eJwVzLkuhGEYhuFXJBIzI5YzGPQkEqGRGb9tLI3EMgmTzFQqS60UQW0PghKF
7QwwCQWN5QAcAWfgUtx53mf5vmxlaXKxJiLKmKiPeEpHVNGbivig71hviBjX
FWQt7vNMxBg/zP+iypfkV7aj8gt6iW7dmrzd3YaCLktb0Sz/0X/LRnDmjyZZ
IhviT/lGPscP8kV3l/seC3URA7Jj/2TsTmin/I3280e2LzSxOZCl3Ye0w+bZ
3aPP09f/vc0eTfH79M5mRV9xb6GMvE2J7mJV92h7azfPb2IOOZtZuoMibvQz
dAPT6NM/eLfs/TY/hWubL1or/6QJ/QPd8jEH
        "]], 
       Line3DBox[{2382, 2618, 3204, 3387, 2805, 2619, 3316, 2495, 2806, 2620, 
        3317, 2496, 2807, 3228, 3318, 2497, 2808, 3229, 3319, 2498, 2383, 
        3230, 3320, 2499, 2384, 3389, 2626, 3205, 3388, 2385, 1479, 2386, 
        2532, 2637, 3249, 3391, 2500, 2636, 3035, 3036, 2638, 3484, 2821, 
        2988, 2501, 2918, 2854, 2855, 3321, 2639, 3037, 2502, 2749, 3235, 
        3322, 2503, 2387, 3236, 3323, 2809, 2504, 2640, 3392, 2856, 2857, 
        2642, 2822, 2505, 2641}], 
       Line3DBox[{2389, 3206, 3347, 2388, 3207, 3348, 2390, 3324, 2506, 2391, 
        3325, 2507, 2392, 3326, 2508, 2393, 3327, 2509, 2394, 3394, 2643, 
        2644, 3208, 3393, 2395, 2533, 2646, 2823, 2824, 3426, 2645, 3039, 
        2534, 3040, 1878, 3038, 2825, 2647, 2858, 2919, 2535, 2921, 3427, 
        2826, 2920, 2827, 2648, 3041, 3217, 3328, 2751, 2510, 2750, 3237, 
        3329, 2511, 2396, 3363, 2536, 2650, 2828, 2829, 2649, 3395, 2859, 
        2537, 2922, 2830, 2831, 2651}], Line3DBox[CompressedData["
1:eJwV0MsuQ3EUxeFNI0JJXOoBmhjyFqpMTUxoaaQuQbXEJX2C1nswYkBi3Egj
JuIWL0BHrnMmvjP4Za+19jr/5OxsqTK33RUR8yj0RSz0R7TQGIiYGoxYlBX5
azRlOVlRVuLbOJZNy5Zkp3Q3fSN/4JeR58v8Kh75X/NOryFfpzdwlo44xx99
Zbdm9667xQ/Jh7Ei2+Qn6A+7HXqEfsW43YXvKrJJvopPnV3zUr5vX6NHUdN5
Mzv40rnlX3oi9swT3ZTuU/J/mKUP5Ed45g/Ne52m/JvP0RnvjKGe3KfXO/SP
3UxyF+STO+Ifog4xlg==
        "]], Line3DBox[CompressedData["
1:eJwVz7cyhGEUBuCjYaSLUIiFdBUYlZ7BrrXYgEWhwAUoXIFaZ1AIncGgcRey
Qs7p+Yt33nTOF+qGi32FsojIQKEyorsm4g/34F/cUhuxR29VR3TCEvzIZ/E3
btbv6jf5DfiSzVdFfOImXR4v8yflETm6SzbHn8IsTMjW7S3IP+iS7B3fyTpg
nN5x/qq+F7/xU2Ze8a2+HcbolYqIRfqFLuif8Q3faG/bXpZvS+6BJ3rCzCO+
5hvMnJkZ5S/5K3igs2bucb2+VZahJ/GI/Dh5v3zNXjHJknvxjCytO4IU5GVp
XQ6XdEOyAxhM/i5L6Q6dMa0bkO1DP1zozpP30v/KZECq
        "]], Line3DBox[CompressedData["
1:eJwVzzdOA1EUheFrkkQqKECipKaEVZAKlzSWWAA2yR4ngcnYwmB2QSgoEA07
IBnsdYBYAt8Uv+49/3lPb2ZuI5/dzETEOqqjEddjEX1cYW0yosI9jUcMyj/m
gPlnzuteJiKe7YtoIKNrY3YkYkEuuxvyJVadv3E+4R7MmTTzJXnF3rL30ESR
W+Yu7N84xx7X4abcPZO/cIphuc3v6h+9ecJ1cYwlvqff0dV1R9xn+j38PT+E
bV1Nd8h/INHd8VVuS1cxb+Vp/l3fQJkr6BKzxB9wb9hP/4fL63J80V7nXlHD
r9wx/wEKLzJQ
        "]], Line3DBox[CompressedData["
1:eJwNzjlOQgEUheFLohKnxka0o3dAjThsgQJxBcbOqCAGOycQcSpR0agtVJZG
FqKsgsRCF+BX/Dnn/O++l5feLm0WExFRwMlwxOxYxBz2sIv2eMQxP69nUESH
25en/IJcxCR3IEs4479li1uShyjjnO/JNz4nj1BBlX+XKb41ElGzN/Qn/Rl5
/YJ70V+xZdftAX1Kb3r30h60m5jm/kYjftHgl+UPstjx7N7Nqv6BFVy5WZM1
rOPOzYObrj7h25/y2k0/6T/0L88eccPNuB3Sk7i1/wFttCma
        "]], Line3DBox[CompressedData["
1:eJwNzLdOAmAUhuHjZJ8cbfE6xK5sKLCQgJOjJnAJLjoJViwxUSxhdVdg1VUH
8ToksS8+w5uvnf+fWCtli10RkcNZb8RSf0QSN30Ri7TeHXGq75HHByOqAxEn
8rXcRkF3pzvWNdwP8U16ZduwLfDbmEfVzRx9wK1/a25m+S3M4Mg+Te+x6W3L
X5dupuQOEjh009Sv2yflC/sf/cWBLav/5n9wbvuiGd2LN/v2D/kTr7Z3mrc9
2/ZsLXlMfpJ35VG+wlf4Eb7Ml/lHOizn6SoK2NG/0Zp+maaQxgoy+AeusDPU

        "]]}, 
      {GrayLevel[0.2], 
       Line3DBox[{1312, 1434, 3293, 1313, 2304, 2305, 3300, 2306, 2307, 2203, 
        2207, 2204, 3306, 2219, 2222, 1516, 2221, 1517, 2086, 3457, 1521, 
        1522, 1619, 3381, 1527, 1838, 1528, 1902, 1800, 2001, 3441, 1634, 
        1843, 1635, 3311, 2002, 1805, 2175, 1653, 1847, 1654, 3318, 1375, 
        1483, 3325, 1386, 1702, 1703, 3330, 1813, 2014, 3445, 1704, 1855, 
        1705, 2015, 1814, 2024, 3448, 1723, 1860, 1724, 2236, 2215, 3479, 
        2213, 2296, 2214, 1417, 3357, 1512, 1425}], 
       Line3DBox[{1314, 2270, 2271, 3294, 1315, 1587, 1588, 3301, 1328, 1597, 
        3374, 1598, 1337, 1518, 3360, 2085, 1519, 1346, 1523, 1524, 1621, 
        1903, 3430, 1529, 2000, 1530, 1904, 1637, 3384, 2109, 1533, 2124, 
        1534, 2123, 3462, 1806, 1656, 1848, 1657, 3319, 1376, 1484, 3326, 
        1387, 1706, 3399, 1707, 1708, 1931, 1554, 3365, 1856, 1555, 1932, 
        1815, 2176, 3469, 1726, 1861, 1727, 2239, 3485, 2237, 2298, 2238, 
        1418, 3358, 2080, 2081, 1426}], Line3DBox[CompressedData["
1:eJwVzj9LgnEUxfHbkDUkrRENKSJEQy05tFRLQlCDCqYuGS3lo9EfaCiIWqLX
4GtoLgiHXkBLYw39eQUuQSBUH4cv59xz7u8+T2b3sNQZiYgycqMRn+MRX/jA
fCrifSJiZixiif9GOR1RoLOyFTpAW/ZgvkcOfXcysnXdojsLKPL7ugNkdRVz
wrdQ5Y/oMfb4U3oyvOdd1+4qXcOZbotu4kY+aedcdoEf/9n03Wf88Qm9ky/b
ubVb82Ybj6ijgby8Z6fJ7+AFV7jGxvD/vX3SX7o1ZX7lf3VvdFpXl7XMCbLo
oI05/AMnpipO
        "]], Line3DBox[CompressedData["
1:eJwVz00rRHEUx/EzC4+ZhRdgMYtJYSGKhVA2sjOSsr1KsmDBagxNmVkZYyfe
AYoyC0WR4h3YCjtLiqw8fe7i2/ec3znnf7u5ZHVmJRMRCfJNER8tEdXWiE9+
a4444aK+lo04VnfhFN84w5edBm/YOeccLvGDq3TP/IZn3ZfsXKvzuMMv7tFv
luFB800MYMrdn2xHvWcePCcb5gaGMK9v45J5jduxKBvnC4ylmTeWZEUs470j
olO2pR51V+bEf+/zhP6AD5HFSHorq3IFL9hFHd3yWzsLvpHgAduoyys8mf6j
ednbjzwtf+JnFNRrdtbxqu/jI/SiB/+DkDYs
        "]], 
       Line3DBox[{1320, 1437, 3296, 1321, 1443, 3302, 1331, 3332, 1449, 1340, 
        3335, 1457, 1349, 3337, 1465, 1357, 3341, 1470, 1363, 3344, 1665, 
        1666, 1474, 3314, 1369, 1538, 1676, 1873, 1874, 3391, 1381, 2067, 
        1543, 2132, 1878, 2133, 1879, 2068, 1926, 2006, 1551, 2018, 3446, 
        1884, 2019, 1885, 2191, 2071, 1556, 3454, 1734, 1497, 1402, 1735, 
        3404, 1502, 1411, 3353, 1563, 1761, 1890, 1891, 2077, 3455, 1954, 
        1571, 2033, 1895, 1896, 1429}], Line3DBox[CompressedData["
1:eJwVzj1LglEYBuAnsFKyobYikGio8BfUnwiEpqDAqZaifkUFLZVCH0PaT6ig
1d05cJaC9LXP0QKvM1zcz7nfx+NZrB5U9sciokJ5POI1H/FGnRrdYkRP9sm4
5nI64koO+OCTRtrX38kvvvlJ9+juZZMhf/yne/SP8oEN/3s4EbGuO5KbzrPm
Y3OuEHEif71jS39uvmDovDYZMWVesluUDWZ44lS34+5tntNv7M6nt8tV39q6
uvmdGj1uWLBzK8t2XuzsObfYZU6fMaDrW4czbyrZXTavkDECye00Rg==
        "]], Line3DBox[CompressedData["
1:eJwVz70vg3EUhuHjoxhqlSadyiZdrSIRiqGqSf8BCWMNJg2Jrwa1ErVZfCQG
FYPY7ISOZRaL6GCsxWW4c5/nOef3Jm9mcaVY7oqIErKJiKeBiGfc4BangxEN
HkGnP2JN/uUxt9f4TkaM8x3a5hx3u6246+FeTGFXnuaktzOcw2pfxCxX7ea4
Jhd4Hvu6Q3nBXMSRecPbCf06H8ubPGS3xWfyDk/av/E23rGH1P/3+N5NjT9w
gAf5hNP2dR719kW3LD9iCSn9qy5v1+Imqv4xw1ndMH/i3N0FvsxXfIkf/AHu
HC7H
        "]], Line3DBox[CompressedData["
1:eJwVzS1Ig2EUhuFjmFrUsGwQhCkiGGRFQYQFg+BYWHI/WGwqK1MwG0VMa4Oh
JqNtQdiKRTGIIDNY5k/Qstl3feHmec59Xs47t3dYOBiLiB2cpyL6WJiMyKCL
DppTEWf8Bwbmf9xwQ3nK9fCmb05EfKJi15d1/hVlfR01/l32cMQ/I8e1xiP2
9QekzbuyizV91dsZt6dR5C64e7nNr+AJj8k9Ps+3kfJ2iStxVbe3uDtcJf/b
bei3yTtzVl7jUv+y+8E3lrkmWvyLeR6Lbs1yDfzpJ9wxfvURrVMupw==
        "]], 
       Line3DBox[{1423, 1510, 2079, 3355, 1415, 1505, 2294, 1292, 3495, 1405, 
        1263, 1858, 3447, 812, 920, 639, 1853, 3443, 792, 1393, 1489, 3397, 
        1699, 1384, 1481, 3348, 1373, 3316, 1476, 1845, 894, 1106, 3086, 622, 
        1841, 765, 2964, 880, 879, 1836, 1616, 3339, 1353, 1461, 3380, 1615, 
        1344, 1453, 3334, 1335, 1446, 3475, 2218, 1258, 1326, 1257, 2200, 
        1256, 1310, 3456, 1123, 2196, 1253, 1578}], Line3DBox[CompressedData["

1:eJwVzK1Lg2EUhvGzsO0Nr7AiIgjiHyCCYZgEEQziBN9kmh/NojDWBLNFEAxz
QRG2NTEa7JYZBoIfOFZEWDCLCAv+Fi6uc+77PM/c/lF2mIuIDZznI4aYmYg4
5U/8JhFtTMn++ETW5w+sFiMeChGTuqF5WrbLO1hGXd7RD8w1756xJmvLDsyj
NKLLVfyYH7k8fqcv+esM2+43ZRUsYk/X42N5oi+igHlZpkvlT+Z1f91jS5bI
Vsx3uHXbsl/xO5Zkb/yKa3zbX3iBL93dcMM+yx17ky/sX/gHjOwrQg==
        "]], Line3DBox[CompressedData["
1:eJwVz78vQ2EYxfGHRDEQ/0IXm6GJJohFTHQQHTTEUiwGOogfm1jEj8Etg8HC
JBa1GXQQiQ4SOhgsTBY2CyaJzx2+Oc8553nf997sXKW43BIRszhqi/jERUfE
Oj4yEWu02BWxSvd175jg33Rb5lckukNU5VW6IXtBuT3izl5CD7Aie8aCvRn+
UteNJdkTRuTH/Ly5gWF+ky+Zb9HjzLRsUTbJ19EpG/JmST5IC7JrDJgzujyd
0vXTUXkNTXMOrfqKrkH3+Pv0Lv15+j38qa4g+/Nene7KbmhOf4ZHfpz/1V/R
Hb5Ge3Un6f87/yAbk33Z+aHb/Dfto/+jCzRU
        "]], 
       Line3DBox[{1428, 1514, 1894, 1769, 1953, 1952, 3434, 1420, 1508, 1864, 
        3424, 1760, 1410, 1501, 3403, 1733, 1401, 1496, 2148, 1732, 3486, 
        1938, 1937, 1396, 1492, 2017, 1883, 3364, 1711, 2141, 2140, 1390, 
        1487, 3426, 1877, 1690, 1542, 1380, 1479, 1368, 3313, 1473, 1661, 
        3343, 1362, 1469, 3385, 1639, 1356, 1464, 3382, 1624, 1348, 1456, 
        3377, 1608, 1339, 1448, 3375, 1600, 1330, 1442, 3373, 1591, 1319, 
        3420, 1436, 1580, 1581}], Line3DBox[CompressedData["
1:eJwNzD0oBHAYx/FHFy5vceUGSSmTwWSwUFxJhiNOztkOEzkLJWW5WxlNsjDd
pNuYsVMXKclkMIjpJuczfPu9/Z//cLG0tNsSEXmctUbcJyPecIcHjLRFfLdH
XGJI3qKb2OMHbQPdESW+4vYdT7pHpPVH8ivm+Jpun6/jmu/Fqrt+nGLNny/Y
8DZPn5H0pk6PkfImR8/tN/wyf2JP4JAv+HfKtsgvoKxv6vp0B3KOz7ibwY5t
Gz22Tjlru8W6roAO/axcQ8Ltijyvn5S/uiKq9E+exjj/qbuiDXkCo/yH7oL+
ymP4wT/TqS3L
        "]], Line3DBox[CompressedData["
1:eJwNzr8vQ3EYhfH3DldJdUBI1FBi8GMRDIYaGQwM1kYHg0Hk3rCzsRjYhBCx
29CdTUNCIvEHYMBqoJPP8OQ557zf5nZoNV/Okoio4SiN+GiL+MI7aqWIgULE
ZnvEoL7FFV7nfbdzt1f9hL9Rll/Qj2P9kfvQxKj3vdzANRb0K859M5HP5B6/
OeU1W6sz4lDuth3wk29eePfMaUfEnu1N3uUurrtNeLsj57ainPG2vWQb1x9Q
txV4xr4iJ25jehNLesrTbovyvTyCO8zrmT3kOfmWh9HAp/86a2uhihtbBRve
X/KU7QeT+NX/8A9KMS4Z
        "]], Line3DBox[CompressedData["
1:eJwV0L8rBHAcxvHP5c6vzqZYKMplQjY/JmxYKJNSSkc6LH7EoFA2ZRYWm0ko
WdjuZDz+gZsMkhK6KF43vHuez/N8P9++fdtmlyeWEhExj/3aiO+aiC7aXR3x
gR6U0hHn8lZcok9WRj9edFeydtxhSPaHYbzq7mUZ5DEq622ISPJjfIF2Ioc5
+WcqYlr+Ra+9YQAz5jTd0Q/SH11O9kuL9laxYl6nu86MOBPmPSTwJN9AVrdv
3uRvnEnyB0hh0lz21i3doXmb3srq+CPUI+xPyRp1J+YLnKJKvuYtBf4BjxiX
NdEimpG190yP7S7oWvi3yn/S98p9KPFndFHfUbnLTqbyl7SAPP4BFIw4mw==

        "]]}, {}, {}}},
    VertexNormals->CompressedData["
1:eJxEWXk8Vd/bFZWU0GRuolBpUqSSx1QUhVAZMiShOSkhhUSkhEoyVGQIiUwZ
tznzPM/zfO9NaSDqvXt/f6f3r/0551z37L2e9ay1nmv9mSvHLVhZWFiilrKw
sDFXyUH3YM5TpnCf5n4br8l8LFE//zJgZ4To8aqn3cjXTdk3rzQdXNcljO+O
GAd+/5MaL8eH0atf4ibFVx+iqqWC6ZcVBmH83qebCWLjaFky/4/jfzyRX5L3
CVV6DywzH9KZY51APmeVfvewO6B7Zxo8jL90Ae/8pP3dIWPI3vNuLW+zNToT
HWNtW9ALOSlPzr/904BuSksK3mNXQUpZUfHv99GhZvcSt0XPx8F11pZtp6Ie
1FRkl7zf0wNl+ie/Cy5kwPf05TYSQ5rAPiN7OcmkGgKkPtkuM2eA77IlXgvR
IXBsf1KymlEC9E3zejyj6bAp//PpoWUK0KBxQ9D0RB1sCYqLL0weRTPSYRES
edLojppLUQFXP6g9CRjKDGGgQYErz4/8lEILPaWHNhUWwILC7IZuPwaKFFq6
L3z+NjSxNO1lbF0h2C9XTOV7OgaR/A93x+qug98vO2I21vWCX6KdD8Zxrvw2
wXWXcQjBU9prf1xlfhNaJRlDVsGB2PW3oseBHs2te/XyMLqtUd104fAn9HtF
RU/N00FQuC6tKco7jozS+opWXHyF1DuaZj6y9sKXutwIkT/j6NTgp7E5nYco
4jGv7Yu/XbDCVVekNHAMBd6Zfr3FwQHRniVqnCjthYfmSCpssAFFH7ndKn7o
FHrm5W3KAnRoYs12FAoYh7VGwn8k7ppDwruq+FrpHhiXdTq/lomzxNhlE7Hf
p8EtU6tWmYmzeo7WgUVMnDs1QkbbPPQglb80IIuJ83y/v776TJwz2E6Ec74/
Bu9/7LEJPVkHK5bcOqSQOop+i2/cqzyljHTnN64v4OyHVVktwtlMnBV7HDax
tCii7X73BRcwcd7Jz9rcxsT5TJrVU08LOfQwffWu9fWFUHxRzGLjszG4YZZ5
R+rnVti3b89h/5peoHhJ8ZTiJ4UjhSuFJxrYf1w5qgdVPn2sjVcFUfHDf94N
wv57wQuf+Y2iSatLWp/plUg0Vicz6lMvdJk1STZ5jaOpnmaWoIBM5LLE6P2R
lm5Qf7uwwlZ9DE1/pze8Y8SghMTi3k8SfeBqd1tdaXc9Ks2OPM7L5Y58ZRea
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
rjeFMvh+STjv+a0+tFSt5N2n/V1oaaGhmqvWIMgs06AvCx6Dnc+8uLIEe2CL
W/zECt4qKM9is7gyOgHsEa1uKvJtoL5IwP02DYFa1NmIg8y5vT3ovzle6cl/
8/uVpw0W85hzZnRAM5k7IxPekHnz+e7w/jfMuSj7TRqZk/hrO8h8dDFzHkcT
M8dL2uiRXJ9d17IP5/mFSSuCce40O7GB5FDeYXGSP6tmbElOElmUT3JTVrgO
yUvDty2PYF+3c0sjPn839Tvx9y/yyaewD2n7OxFf0gxRJX50rX9qFuvmq8B8
oqMfB2qJfvrOljXjPp9yPU/6vm6XIul3V0v1cczLoXYZwtMo9WW+mJ8Ujv9w
/R+eU6HH72l7//86zXtlQaZHPfTZdSz0yBmB3z9NlQ9n98M1QW82j/J8OFRj
ZrZ/4zhos5Zu/avdA9k+b33W78+HX63c4e/nb0O8grnkdxG1q07k95B5jq9N
3Jhz+6XN/83xfkX/ze9c9gXPJZhzpqmjCZk7RR7/b97831xEzUnUfCQVfPSn
MjPHv+utJ7neuDyc5PnoFF2SOyUPcpEc6u7vSfInlZOo3ETlpZAf/OLY11O8
S4jPp3+9T/yd8iHKlyg/unc19SDWzebQu0RH9af//MD6qSq7zRT3ueF91ke4
7+/9Wt2E+53iJcVTip98Nj4Ex98H0wiuXoGPCZ4PtNyGj50b+rf+GZ7TyVid
D5ueLT/KpzsCu3pLrilH9kFusTPP49N1cFhuOfldac45kPzOZJx2ivy+VCMU
eBf/DhKxquos/l2kakkm+T3EZqJzKJY5t5/mSSVz/JFFK8n8Ts2Z1NxJzZvU
XETNSdR8lN80mYlzfG/kb5Lrf3eMOeA8T+VOKodS+ZPKSVRuovLSi21RvdjX
S734iM+7nxGaw/5O+RDlS5QfUbpJ6Siln53RnaTP/aZYSd9XPl5G+j1z2y/C
y0/7VAlPJWUdCD8pHClcKTybP8aXpwsPoudOP8rwWuEuNBe1sBnebc6KK8jt
RPFTB+LxelFxveZr4RH49OThwE/BPkStJjnX3B7t7Ictjz88XPmrDwXUdD7C
K5fKPYsVNr0g4/eXb8BqGMVu00vd69yEdiU1b9JI7IOja/TrdAZ6kccj5QK2
SwUoiEVsVGjVGOQ6rU8hnwtZJYD/jou3RQJ//twezkzjZT2IWgMTy+a+egzB
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
KmAMVc6rLfXvCEJpC109uUt6YR//KVuM4++XGZ8wrn/Li6QwntQ5qXNT591y
aXnCwLoJoO2soYnqV8LXLKW1kNcG3p56A5pJ42jo1wJzqf0fkF/aPbX2ym6g
eEPxiOKPiIhhw2dmndbbKZO63eKyJ/WyOvnUeysTR5OAJoKr2bbzBM8u9Yfk
/OYXxd5hPDr0geDAJdpqHr50HPTsLXsfDLdCu/2F0tijTf/mYWo+puZiO8Pd
c/ljEyj8u0KBX1c2ajwub7PapA3qVppONpxl6rvb6ceh3R/RitdOl5ppxf/4
TfGd4vnXb0+UMJ/23N1O+OXsnfQW88rpqNsDXO9dZ/NGcP2HhrXe4LrnsXyT
xnXq8WwgdXuQfDAM16vpveg0xvH1js8fMK6hLGdXYzy7FbP68XlCF5qQ8/2o
XEjOlffh6MUPS0Zgee/N10Zr+yFIbZud6XAt9O9MI9d2utzkuZDzeXK/+pFD
Otc7GjLgN1YUby9BiX/ncwY+boDZ9yolvZ40xL7tw+i+n3VoxebatxfMquFi
4YB695UJ5LGpYlz6dRtqf0h3+JJQAldPZJE89OhVBMlH/G6yMjgXvVO4aKbC
7OeMlVtJf7PqOZC+bjr3pcOc2VfHohdswX32bpk36a/vL/0jMe89XuqTPjgz
s4Hwv7Rjfjvm6/M4K8Jf+fhbhLdD5gbxOH8vHW8neTyiZBXJ4ZReUPpB6caM
+AbTQmbfnkg9Tfo40/ww6V+qr6g+o/qL6geqP6i+oHhM8ZriM8UbikcUfyh8
KbwpnE+lsY1gfJcUuxG81RVXRWCcldajMYyv9cg6DYx3fYGII8Y5uLiR+Idk
/auD2E+0nYKJjyitFs/Cfpzk6Eb8uWeBPfFliq8UfyneqrMdIXnIVekeyUe8
J/sKcC7aMKFriP/fkONylvz/4d3RLPJ/h0UF3/oMfw6hRC2v5rHD19DdGjtH
W7UheHYtrmnp8h4YnjjUb6NtBFeHldnY4sahcmla7aLNdDCkDW7nbTODFmfz
ueunG2HfI+VP7M6jMLIx/50E60E4OF/UUEivH1wjUh+oM/PlWtkzRjrLVdC0
/aiSWUolOKz7sqnXYwjV1zVHOZm/QcqZdM8XH4cg2mjd1HufHhBrXnCz57wP
ZE7t7LxiOg6MhD/2f7fQYdsz37Vfi/2ALd8wa+eRRnBaXqaSajoKatLLVkdl
3oAX32W/fnfqh4Lr5drS6xnop5rGZRH+G0gM3Jx3v62ET3fXVh26MIA2SbRu
H96WiURCkmtlLUfgmMg6vmMX+6CQxz20qTEWal5+ZT8hNAYr+5vrjknSgf0o
y29OWjxw6Jbu3/ujAR6Zu4vcrBmBBz/t/bnrfcEu784WX6kBWDxhAFc2MBB/
rvpY7DlfdC7QQn6FYSVIGZxnW8NOBznBpbGXTPOha7sfh9LaBqj5LvKnanoI
mlJ+5jxZGA4BYSu5hg8MgdeLTUFBmxhIdV+e87eqt4hV5ORej1cVIKfdunFx
AR0cT9/5EbkoH/YkpT6t16gCu2kL0fmbGci7eqecrkwyqkzqDlRTKAclEZdX
NGZdbWQOD+A6mytzO+D67uNwdsC4p9yZtxnX4eI+Fi+Mv6fJJz6MS5uVLsFp
Z+s3gk+Rltm+c+00MPuV1R7PXgX7eYRmD9yoBRnVxA1PeRiogrvDROJuHope
E8L/E0r/8YbiEcUfpQ2zWr3MugpaCZA6G98QI/WlcKfqQOEv253atpLJM5rU
U8I7oQrJP5hvFA8oXlB8aIlaPYTrJDw3RuomF9hE6lUheSEG4z5f4TGpg0Rv
zyKMv2lJ+IKDN+kI5DTfabHXINYjN+/99C3+hy+FN4UzdX4KDwqHJXsW/NnP
5H2lTSvpg72zhgaY/+VLVw5FMHnZbCFFeFrcyvYN81Nr5e6nmDd5L9vWYx7d
itCWxPyheEDxguJDzRQH6R/fqzmkn+Y3nSN91K/RMYD5HaZcRvjus/oe4bll
y9cKzD+NKmPCx1Ala8LDt04CLphPuhYihF/7H9YQXkUEX5TGvKnOukl4pGVE
J/yh6krVmarvuwVrCV61Ku8JfhvPSRHcero32LEGD4O37Pw7geIqkLD0xvLq
wEGwF9QRC2/+iDrPLExt7cuXn0prQJ9HGRA/PhwQkDEMG1qHpweCvOCt+NLu
zXaD0Kj4dWJGIwUt1EoMYd0vglbH/2gN6GdA29cnw7NHRkBlcsXGCkYM+Ffu
/FSbPwC895Me9Irmoa7G2nKGuQFyvwbfpVMZ8Gy3m8GkZy26fEfeS6fBFTnp
qMYtLKZD2az6upDtbeisZp0YXn9ufWB1RGAMnP16Fq8aKAIT3vflFf7pQJdl
e5R0mgGMXlFyvf+PgCB+LvzTwBvft11xcGF0Qs+/tTVKRc8taBAsbnjMbD40
gtZ7yFx7xJGF9ib+mPjyaADk1WIOv2Xicsrd5BbGaeie8DKMD6umYtQg8/wz
gnHPMR5Lmo16MA7UOalzU+d90xa8KNVuHLRQk0M+Xx2cfurjcu1cO6ytfWKN
Vk2gVR7nu5oUylGy3M8hE8d2cA5Y+mY/5yiUKdgJpD3oBVuDpK7Evjq4vajC
gdO1G96yihQUOlRDhfpBSVraGMT5WRg6xjDzVcJhGYsDBbBb0/f+7YQumFL5
xI//nivSlXxfWPCSbvw9rXXqB0ue9sGA1lpVvDpefnN6QqkPQmKrlCbYBlF3
0Z2HedNdyEm05H6oSx9cam8e0VlDQxv0r1qwq9Qj+Z27AwMV6+BZ4dK5Tfk0
CPxlOqp6vQoO7fXmOjRZC6EOc074nB9vSZFza97YSM5L7Zs6B7V/W65H3vh9
pt0divj9DqHW7vi9elETbO9+D6CMjGnWtC0NSKNJ64De1CAox3PUDdTly1tv
+LMP8zR1JJzwk+IfxUeKhxTPKN5RfCvna/bEPLMyEjPBvAvWC43FfKN4QPGC
4gNVJ6puVL3a70jci9oxgu5miojpefeh/pqNTw7a18OTtwN3nv8aAUWtPQLr
nDrgZbbE/O3CHXDuJG0j/pxhy07yd3zF+eTzCWuPvy2RaIcv3CLReG1j4c7M
eDEKZ3eXENxfHsoidfhzzYPgP3zUfSHG5cx5N4ITW3G/HManYZZTCL/PafQO
ef8n2VQ2/F6u44tvffYZATv5LTH3P/VD38G46hmfYmCN4j6AefOFsYXwiNVU
m/Dn6LE/g7iuLv4KpM5v2mNIfZtAgPz9zNUV5PtmuTlq8PesyN2d7+fe+m81
+/bE1eXiGFiX9K2qvdqOzHR+DS1+nYRc2Da5ClVNwEa4acIPXcju4E+R2uc1
SN11adHKqTFgr251r9VOQyue5+17nhyF9m4rDl3TyIC7iX++rresQYH+U02z
jz8j4xV/DFxO02HOefavWeoEeKV7HrW+ngC6YvVHL021Q0OU42hjYQvqXR9q
sIDmjzbXxtl8vUsDubRo1iXMfUxUuQvhfY1G3HfG+6H2Qe2L2o93A0spfl/0
W6UJ/H4//qdG+L3COgv34/0t0VSzxPvdfFvkFd7n3LBAQZFI5L91Y/U747gv
zHnQ16x+cKIVfryXFT4bXA+nLRbMvHwy/u+aek7d9/ks7NJ7ZwQs61nkwvTz
YHBzZGHbugEQ9v+S4PJtApoPPw9K21YFxhMltPzkJhhoNXCka/fDQov9h+t8
csFGVORr85ZR0Jn66lL9phzYRSUvOZbHwtamxDQ7KQbQzcuff9jNnLsXVzVm
67ZBMJf40IWFjRByeH3zsNUIbJAfCazgYeYe6Z/X2vn7YInOtag/J1rQFan8
c4fT89D3JO09S5VpkJ3y03wsZwj9Yf/In/i1Hu14I5/4aOsAlG2X+hMtPQJG
NVJyTvKZIHPzV9yriAG48HD/S/HLE0jU+UVj02AR4nkU8maRUjucnb6XZhE9
+G89csKxK+9BHciVavy1OsrU45YdgTYNHeAiq+AaLzAAPoJJUwYc1WjKx+dL
+uNCdP1+nHZPCB283XyTubNTwOKK1qIn9inwK84y/nIRA45I+zS/ej2KrGVp
aGi2DR3oFYjMlGkHqaOTybRfI6juaqR6QEgRKgpUz+NT6QdxSV6F3Yeb0BUt
6Yj8HYlo59Mw8yfjtH+4U3Wg8N8kc6wO41i5viwA4xpmc2YQ40nhSOFK4WlS
X/YMn4e1YIScr+ttGzkXtW/qHNT+qXNS56bOm93F6Rh8oxdRq5kFi883AyZP
5OVE2o6MoxNOIkL81Y3o5S6BbKTVCmdzfa3uWPRCchS7xNNlFZAmZryjb2IU
xqsaQhukmL66t6bjjn0TVIc5dXuv6PzXV1SfUf1V/peD9FXq8BMa7rPTrrXX
cH9dHes9iPlq9rXVGfOXV+EK4S1Dw+MA5uWp3XIOmKeSRvbfMD+zNOIuYl52
fxP0xjyd0hch/KzaF2KLeVYtuJzwTmVftwzm28vsJcKYZydjtc5i3vmcXpiA
+eZkuoHU9WHrNKkzw0AzAtc35m7yhVu+owi6DKIu1nUithNambI6LVDBziOR
97QJeMqObBB/mQf33m1SGA+hQYD6SMCSjB50mzvkQ7xjE+q9Zhiu0D4CbKOd
txv8xuGE+63lEq/bQC/I3Z0lsA40uAaUguMGkRBHkDJe5ZZPHdlpVgcRvBc6
8+L70Q+D9yeagntQsai5lMVcH6hMrTuJryfZvTrw83TVYXJfWFZC7KluH8xM
rmPrb+yEK2/NnHj8B4GqH1VPqo7UeajzUefSX7AsDu9bzlL1BT6H3OcRsv+t
n2W24XPOydaK43N3qzUDPi/1Pur91Hup/qT6lerTnMC34rifI858J/2tvMKZ
9DXVP1Q/UX10mOFP+ue3VIgc7qcjKqpncR89j5YRx/yb71Jsjfm4fnXIdsxD
in8UHykeVgeVrMC4L+Z5Ruqw3F6P4L/5ddYhncND/1afyPQOddFi2Jlde2ht
1xDYxoWtyHwyADtqBbiq3tcCvWqAXGsdekieW8UeJ/dvJJaK1R9PhliD5sMK
hX/lTU2+12wYYkDuFfvrH5/SoKYgMjqBZxucMZLJkrJuATuhkw35x+lIZ2Y6
JTJtI4qXzV8wcK0BHkae2L7frw+1zc/I6nhrjxYhPg9+7jFYe9988qxaCmhW
ua2sP3EETPruXQ1n5pON2/sYW8KHYfPvdfyNPrYwluHQX+s7CLl7jq9Ms/sE
fr53JFroZjB6e76eQxsDNjWtcA7yp0FRg3jBXJ0RxJ0cs7O+3ALxdnZtW6yT
UGVl3JolkRxofY1W/fkRBnCGOaXRfWjwqk+osj/ZBq6KTCtU3G0BzvaqezI6
dNRkdVPG3UIPxRolOWy+0gC/moV5P+oy54Ts80tPJF9AC37UigmdawDj9Z2y
G4J70a/UFwe4b75BH7eeOHn4I3PuYy8s7RgcRpyLq2+vWZ6JzoRMH4tnHQSJ
wE3LS1sRnIoNGt573RYaAl+2yecyoGFroDkwhmHpYP52rqYgGAkauNctOwiH
7K8tLisuht2Wd21OhvuC56z+XfbbDNCr30lj9aDBnUyNxMmie1C0b7HTxnct
0CBa2ViO0pFzlFj/u1Bp9OJrh59tEwMe3jCX+GJLg5HQ5w07VvvBiSCfNKuZ
FjC5ciJT4BQdHarmYLHldkJSLHvKqrQaYIOUlp6+MR3d89VJCNv3ENXP+fdw
SDSAvK6NmGFzDTQZHzD6PBoOEfo/5Dta6OCceZfHpnYEllxvVzG4mAqiQve4
js4bgIpxSS9fzkZ0fF9g/PcPhcjcTfvw2mIazPsok1SpQ4PvTZvjPN+FgE5c
dHeaZytYjj+5lKBegqKTw9juvbyKojIMlrJeYMD2GhunKgEayDwyvnokORKK
xJ1ev7ZrgyVf6XXHrejoisanWm+j52izvVDu6/568JqqfHqBOdc9/an68fPq
Nygy9cT4Gcd6mGxRE2xn8u9SiutOzMddQ773MQ+rD4k54jpln6GV4bo5Tn44
iuu1RD5QHtcVPfaUwXU2P9N1Ctd3qFVMYr7tR7Se+9m9u4sjkfTrJ2YrmLwN
HWaNji+ugCtbWVgkgkrg8Y/0z+d96TAv+fFq75d0lPFGgs8yKRGx/WrsnN5c
B8Yj7qSv3IxvH8J9Jh/wlvQX1Q9Uf/zri80phPff9+VPpTL74PNNC8L/Ed6F
qJ7ZJ0Y5A6RvqnmcSL/4FI6P72HyTGbvxNcSJu8quVe3Y76li7J9wXxyexAu
gPnF4v7iDubVZc13HUuZ/GspdzyD+aidpngf85CqH1VPqo4UDyheUHzQeKx/
EvMg45TOMsyL5phNSzEfss1mCF72HikjbEz86NKiZzBuFF4UfhRuzkc3pm8f
zwMThU5lw42+wC7GqiEZz4BLx+PU1c8Pw/CK4HKfo5Vg8D5WVuPhAHDtuvTL
GvWjwCqzIPP8YvTgjPgJXQ+mHi8erz0VVYPO5hmb2SVmoIS6/COeaXTYvPBc
EU2/BXhLvPndVlSDWWLv/NWPJ2Dt9vX3b26oQyXIgPvmaBjKY8vQXh9Dhw4Z
0d7M0k6oUEk/UuDSDhs2FP3Wzh+Bv20HrU/N6wTpOZ27tr+aIF03bo2m8Ni/
a+o5dV/Hy1BT63sPkhnldWs2bUZJZ7R3PHIaAcdQP0+9JU0oU9zpyQfDelTX
w3Mh5OoErN5BS1vo3YY0RIOecQ00oCXusU5dW8ehvfGbc73eOHqwjN+Z43oN
6l259MGpiQ7oW3jlBVqUB7bXbTWzf6fAYjHDfS9fMEBaTWpw9cpRCK62/TK3
ugpA4KaIsEXfPx2ndJ3S820WUzUs9UZwddd/+qpUO0p0ldJNSkcp/aR0ltJd
Sm8pnaJ0i9IrSo8ofaJ0KcC8m9OLqV9ODap5WM/qYtf6Yx2j9ILSD0o3Vn8L
v4J1obT5LdEJqdfhr7A+UDpC6QqlJ0az5THC5mVw5d47vriZMfBNGqt3Le2G
wBNXblw7mwojs3S/+3+LwNF45+YD5xhw9Y8/H+ZHWNxgKeZLBO8cG+ZJcmxa
772zxXDGycIjb387HHB+7OJkPQGbh0oCcZ10vutl4rq9b150G9drVsJKlbe3
GXWpXI7f3zKInqvLjWwWGoBi9IXwIHi4+Cjmxdbn0jsxH7S292jGcTbBh02y
2qMahbC6RFOGFkSDDY/KT5+JHQZ93gzNAJ16uCerKFwk3w8WQucm3t8bRHWl
QRv0XzehUq9FIkPVA2C+bSoZ+/GhSGfizwkF5fOxL3tp/SQ+17E6g/ie5K1t
jtjvPMyXcWGfq5FeRHzPJkZDHPtdZ7jh3+tMn9hef574Ru2B7FLsF5RPUL5B
+QWly5ROU/rclB5DdHl9YSbRacm1n4k+l30t4cX6GLUhlOhlav51opM7W73z
cf/vrBAiekA7OamOdcBd5PZL3Oc7pBKncd/Ht2/Xw/3+InTB/upFw+iFYN1l
waW9yFtMK/rvrQ6ozF7F/eDrICQMIRvPE00gcnRpsPSVAeBnD7v4OzwFRPiN
0zkWvgepyfh9N5hzq9YgnS78pQmM03Tjoutr4NWG7ayyMRPwSkPVMmW4Cv06
6FJS7lKG9hjxWd07QYeZp+UbL+mnoQBNq5vJPGlo1THOaxZZDAjXKK/Fn9vm
fcwY/51lpjj5fIQ612YkNQSfP90la2ZCzZXu6hIQfp6j/HmqGO0t0eyJ4K5D
oqdDUxwk6HBt1dGNuK62WYHjuM4rX8WS+t4Qv/TQUKICuSpKcZu1MvXPVvte
Jt8IJPd/PY75cXHnOcKX8Sq6EOaJmuvpaHye3JU94/h8EZmmbPhcdpriQ1U/
WiBw7wxr6Z5RCJUZ4mtx6PqHF4UfhduYcgIX1sdd7Ve9sV7SnkVoYZ2k9IXS
G0pnON/QvGu5e5CYIn/NPf4uZBQZ3fV83zAUZQR/6uMahGbdELNXLAPQamm6
ZryzDbjSTEJCNvYBa+cmVTWFIXjz0/D4asUOkM4eNsWfC2BvIX8Xc7BgLf68
1f2zVQopo8hDoOHRcvONaP36HHthrn5gTHW/u1A4igqkGEZKsRdQWNnrLOfp
PhBlO6ofsmwMbT77OSzJ4yHKSy+dTXzUBy6xv7SONYyhl42/B17cf4PeqAcd
XGnVCxy+aKtsphW6+Ls+VT6zAa1d/yRd6RAdKrMkB8w0nqDSzQ8cPgjVIZ4/
fm6SCXR4muXwQcLVH3mrvT3rdTMX3ez1qrmRwQDWfFZXHjM9lApd6z9/GkVj
V5PkTnL0Q8pPRfXIH7cRj2DwecvuUeSX7alv2tAHbcWSty6h52jWmD1L6MwY
KvbgQgrMefmw062PVi+T0d7j04l4Ff+duqiwjAEb+Pi8OaP7kDTdUclwlwDq
XaXQkPB3FPi4tzSXayTDy10v6XJn5uRNH1Vt2c3MG4clj56dvzMZ1op7h6in
7wY//Y/PHZj3C3//GGgMGobXRaId/FYCUBw7acjychCy3ZpefDhEg7XCQu+V
OPnhcsjWhsSmVtA4vutrGtM/DCUqtc+fYYGhENkz/EwfyXP7cSOt4SP6eC6b
L+pNYc7bBKGIqlEmDq2ptrlMPVK+JmqZcmQ6J3AoV/UrU5cS196M/Mi8n27j
8qHdWRpZh95yULZpgGvWLceV7g+jrFvrjdtuDOVcnDi70//jIEScok3Ge9GR
j+WdG3eP6yKzAC0vH4F6+BDKnYDrJLBgwmI3s24XyjIzcL26uq6XxqrS4LH9
l/iM/bawLRYFZda2AlUPqj5UXfoM7K/jukorZpA6O9mG3Mf1bXB+MOWnRYM8
vwIRuWtBsPKGjTJrUCtQ9aPqSdVxlVw84YFgQvAOzIsd3KGEDw9GPNBfExrc
ANf3TUIpkG5dt668oQXGp4Mycb1fdMXtwPXnCMgjdV84t3pr3PoeaLY4t4S9
ugBK1vKWXtgxDla3ckPnP2Dq8o7vMl+GotHRuUw1h9E64DE18dkoRUdPvIb1
fj14g1h5AtWuLG+E3TH6MUt+0NDL9m/vMiaj0KnSIEMX1SaIGvkmamd8FHG1
j+Y7RfWhtTbZirwsY2B/7NqS4sWAyoP1+Vx+NCDlCnMVPjk6FH+dU8A8e6gs
9xjzbs+81DrMt2Ohiu+Wv3iCEiKiJZSP9KGte9VMExTGwHRdye2fUXfRz1m7
k2en6pG9Y4WUqSUdTNVaH0fmx6IY/9jRXwd60IU7ugf03cYhciDIS/XBUzTW
YO5dMa8S1XfJaW7fxIAPF288sZxOQW1L80F4uA45eieZ99ow98O+p5Etksln
hWu1vltboCrhxiV+Nxq8mcjk+3GzFs4kXvAJ9OoH06FMjtLSYaj9JT2de28Q
5kaXe8wGt8JJlsKDt2j9kGpke012US8syak4sjVnEJ7d/RvGvqkHjuimrOHU
pIPqKsG5pm/5EDSk6nhfpg7y7Kf1P7SMQQjrPs0b3lkw11sg7rWkF1Rzd5W0
Vg6gNTvvpsUrf0TJgoJGv3ePQH/ZY3axWDoKLlTVVZxIQ1u/J9htU66FZV3H
nmyxVYFfjzvLU5h9xpD2zPVn9pfavidKV5h9CPSdQ7gvDxsFGuB+NG597Ttv
hxe0HbOUfXOEBtuFPnbfzGuFzFcjliO574Bn6H70o1M0uOIxup+u1QqNPOIK
s1Z5cPt3hdF8m1EYt7Se+j7SB0PhW9clCubCfrPBBcbGNEiYUu0TEWr5l5Oo
3ETlJQ22gPe7YseQ40+vy6kBhejJue0tF8d7IObLp86tcXT0rlLIb9q6EAW/
6LBgP1D1LydRuYnKSw/bRP1x3tqTuMUA5y9a/W2SuxTkbF1oJUOQMC2eLvKj
D0z8/t6hM/fz8zXtY/nVIZB5uku77EAvoG73u1d6OqEgPf8wzuUy70cGcE5f
tG94BudzKm9R+YvKXZsLb9446TGEbH/oi4Ym9aNxdnUr56gmSE7/6yG2kI7g
1kvVmKs1SECIl83qXSWM6V9btVGPhugbv8v2OlSiqG9mX0+ONIDa+bBl1a9K
IH5AWkv2Mw3svu3ue82oh2+fBTxSZYsBjd4ZTvafAB3DhFXTvm3/5hZqjqHm
F81VNbfxfFLYkUHmFYkf1mROCXJe6I3ngVRhq/t4PsiZfXMRzwXbjBuarLf0
ICkrHr6R6lE0/kWkuvZVPVA5gMoFVB5I6S3swHli7MXXvThf7LwZkopzBeWX
lH9SvinZGUL0GgW98cL6rT4y9hbrdq7s7Gnso3/5T/3nq6r62dhP5xJNubCP
PrmnQ3xV36CK+Cnlo5SvUn66nOenNUdUBGI9tIXHNrgHGS5+2CWvPQ6Ob/iD
3NFHhALOWavOn0D5TaJfx590wWo1hRvIEaH7K/d1DSXR0av4BSYj+2pA42hQ
0GW2MVQ+eHPUXKUXFfyIvNq4uAJ8T046qzP3Eau5sabTrAclHHVtf2BTC+uy
T7PhfBPfdX8Q5x1dwfUk57A8LvC5/WwUriiFWviZ9UJMfKcc//kaaJO8SHKk
Sux9kit1vkZE4Twp+WjJWZzzBDy+ktx36IAiyXvdi39n1830g/dXfjGX6SHo
uFfB+jOxHqg5jZrbqHmt+WX7IZzvx+9v1sJ5/3BQEsn5zuleJI+m3/IzwPm0
caCb5FJr/fkl2oe7oI+rMPGtyTg0DV2X0ZosA1NurRYXpv/N8P8mfhjB/8Pz
/+h683gq3vd/nGwRiZKoyJIohbIUcUlJKdGCypJsJVkqKqVslZDKLooUsofK
zm3f933fd845JJIs3zOnOe/f4/d6PD5/zWOuM87cc891X9fz+RxnnlgfHGtq
o/RLrjEZSv/ctZXrINY3qf2A2h+ofcHBLBFh/YCz24jSHxaSuSl9gconqfyS
yiup+IyK16g4jYrzqLiPivdaZz6EOosOoY1nWiXUmcvRQbW6qJzJcXgxe6Pv
thcRfSCur/U7cRjZLK4ndmxpgiPOrgew49oPWVD+7oYWazR2/FsBHj+zqRFU
wpV82JS+F03zphbwtw2A40MZGWzfx7Oe8jmLsVohFr/ybvZ0lxwBOjVkqv2m
v8Dfq9JfnhI6oLxqsnnicjHi26e7LrzxLQr1Y59JCySBI+eemnRJIpTtADb3
/O8QXjPGX+PbDB5vHL7U7hmA1jW7Zc3qJOhmr3r3dZZc9/FxU6+DOv5fz59k
ie7kQtvm+1/uI89/0u/hwXjy/FPHQR0XdTzVFp2s2PmMxY5Qzu++6EY5L0/j
tdrVcx2IupW99+PvAfdJeKSafuDEzXLQCGlLfSH1FjgandZH3yT9b5/6OTX+
4lLdUamd2RBhzeGpulSASrXdGo45k+CaFBvx0Cl3lCyazPRIrgOxlMeQcm4S
4NtO3Y9y+z4jBsbzo8Fb6pHcggSX6hwRLq33XqUl96EC+bSDMarasMvDQnOE
3I/ULiUH+bL2Q0/KIYHMq1ugtTO2VfrrFLh4iY8lF6WiDVbiZ3WY/ua9DVgt
WCDXk7k+opyWywSwzXJtPlOyqHREuCX61sUhoPZ1ap+n9vclu4QnacFDKGL+
aNGWv9WI97XFt5mj47BmtdEA62ceBn2yWH+T2RBC6WszxrpVGA5Y1a7MwHBB
yBYGGwwPfDIoZLGkm4RL99q+7yytgGExR9YPjgP/wwdUvEDFCZ73mBOFTkxC
6wYVTTf7Rsj9HkeT4N0HF8LGrd2ax6CNLvmEuG8jVP56ah6uMASjL67xpLFM
wnQI/w7k2w55YUEX9kyR+x883IjVu8MOpyKw+nc880YfVvcuHMpgvM46DaaM
H8LOzfyAs49uqy9q9YJhXIKM27puSHpzICAlOwbKHcObdmdPQ3/l6wLs+nkO
+Thh87GpgjYVm4eq8luhLyqKUZL/B1IbbT9KFRF39pSb+h9epOJHKm6U2B12
FsM3Q2knbTC8k8TWQcE59//KP8Pw0Dj/s0UMHw1PWqlhuIja56h9j9rvqH2O
2veo/U5JsTSO93sDckSVwbH7v6HlxfllkxgixLNkZqnuIKF0W/N0PeskFJG7
cOXISjWUc96/65zRgQJfyuYsOL5DbV1DTa/JuKZ6+528mN9EVHfrOl/PzDe0
6ZjoHq+EWji4O1tvOY+ILq0NJAxvzkSpzz1GXIProUW2NN3IeBoV/f7+KUrz
B2JIG/tkzNEDou7DFP6jLP0wHeNDHYr84hgPouYrNX+peftC/JdzhjqCcmFV
k9m+YVhw65pLJI2BW4tqGpY3H/zoKXl0Os+ODcufzqrGfJmX5XAqZDH4QdAo
vOn0CT/ZMPK/vKHmETV/ft9dvx3LDyPjBUq+dNlfPY/licHLngzLGx3A2nuG
NuPUODw23yt2/Xk/nHG/fnE6bRp9DJB13nG6AfknHzoor9sKD6taXB2uk+uO
RN71t0IIKWW68R182QhV9b0FgTkE9H70e+eF7kJ0Mod/ZjCxBTxjTFyFGEeR
LKq6P/4+A3mcfjcXu24MJLV/iPX9HIfhjNCWPRk9IDh3WujFUCeo2kzWM6Jp
5HhziaHwTAuSFnricVq/ET5pOBz8MzOJlnmWgvr0WhE6Py5FOt8J43wNmZUG
02jvr9mIIa0OdDTpylRRQS2oEXbYkcQJwG7vX/easQIeLhyXWeVrAxmF+2F1
bCPAaq9+l+/qEBQ9vaeUnNENfMEXMzD8Z3lxlYIHdyT7OGE4UE/6oxaG/4yn
Kyh48K3OSRcMB1L/nvp91O+h4iQqbqLipbwH6WxeycNITYuw0mE5hIZDGqIi
/HvgcUbkMobvF7sqKXhflK/tEYbzjWSEzmH4/lnVjasY3te7vZOC8619ONqw
+TK6EEOZvwzmHgFs3jIi+jYyG3YAu4ruwXjRMdiro3ezbvMgUHEnFYf+D38+
MKWMI/G260ZsXEicljKeZm2GFxVxU4hQVHJ1MLALxabt1zN6Xg+6swkLVWS+
3ezCSuHfiym/KLybrzRP3bl0UWnLk8uU+hocGPoFq6vEnwMJWH1hde+n1Bta
hoOnsTqjWBjbvb8mFtQQva7niSHg8ql1fuY0AR0MxWkYb9m4oFOB8ZgXzIJ6
GH/pDOrUw+qRuWcTpT5xGpRR6tKej+X3MT5gb3mOwg80LtNSeMG32M40bP2P
eGt/xeqBqMI6Sh2g5jE1r6n5XKz9cnX+QAPa2Kes9ZVzApXtyvI1Jg6AB+tL
Sv5l6LE3YPn4xZOXkofHXkiFY3mm9NIkC8s7RetFSr75B67nblnrRH697i5I
fgpp9xTA+vXNkNu3TMFP/i57yzA8ldIYT8FRo/UuxT3qY1CTuT2Dhn4Q2POL
2U+ydcBi6WIrh/qfPKePVRTdoiBBlaJXfEuoG8dwZ1LLhvcYDnU99JaCP6m4
k4pDqfhzrLJ4N4YLBYKs8jCcaHHtGQUfpjq82kQrMwrOX4Z4vt4bBMGZikaT
4K7/7VM/p8YzSL9isLp5/E4ppY6ek6e7itVPi6NMjfPkusnmH0qpo3M+G5ux
+jkYr0fhMybn2V9i/CasJnIdxmveMhZKY3xmRjWRwm/iYl9ReM0zKU89LM8S
c4afY3knxJZ/Fcs3Dpedu46xd6D7HKNzjZun0Odd019KBNtgoq+bgps73N9Q
cPT7+m2KGH6evVqTjs3jw8dPKfMaEJC6CZtPah2n1nVqPafiMCouo+KxjB3j
OVh995vxo9R73khRSp1fO/DhMlbvdJkXKfXv6vtgSt2j4jMqXqPitNt3mvqw
OnhoPplSFz9prJKweriQy1uP1aOR3Sv3sPokwpRPqUsH437M82jkw9Gg2pc3
HbsgyTGobOf7aUg8P0DBSaxRGcsYbnry7AMFL/XOL/GZxQ2iP3w8daqLOuix
wOf9aysTkLOLvQTTUwaKZQUxfeWowSFlTFeZyd7Gh+kpjD8unRxmAWQ8K3cc
01Wo/J+qB1B1gExTn9xKMo68ZeBnedJeCGUyyZ5YSxmBzJ6PFJ3ljZYi5+bg
t4huoyJFb7kUFqiF6SzClcamf744IcXXI4cwvYWqF1D1A6pusOeyH0V/YXmb
UYLpMW9t91F0GKr+QtVjqDrMXq5iir4wu1RmjukNiRU18pjOYHie+/xb7UDw
O9ev/+WEOcil37nGsEqCm5McjJi+QKsGvJje0ON6m6IzUPkelf9ReZ/PmeV7
j/XpEftVpns0i80I1TFvbFEgwlnb7RQe+FFL6QnGC2kc5w0xPkjVJak6JVWf
TIpVH8hUsIOBOmmK/udTPvYe0/3GxGe0Mf1u5c5Tip7HkmBB0fGoehxVn6Pq
cpNrqoOHCv7kyXoovjhA5ss5G19LyJD58p293MKY7sblVkvR4X59Labobxt0
lc5g+o7Ryx8UvSeNyZyi8+g2lb/G9JHF5AaKXjJq7GGO6SR7xo9cP6k9pCQ5
cminif8k3DewUvjRMACbjp2j4PXODeqKGH4fdnOi4PaCi//mJf9H5AUrA3oU
W/pvfo6dK2q+FDgFx96QDg2J8UATi/dtCbl+KLorsrmd3CdsUty3iMBRqCU8
DX98sx0iBcso1yPJe2YAuz6x280HsOuSfdK1AxvH0FI5ZVzMR2cp4xF55uaB
8Zmed4Kkhh1cqKJVmsJrntDPnewPnoKFHhGWg0N2YPZnxjnyYD8cWE6vPJVK
xptuB+munXoPTtrp9PS0/eC289L1vPkpCOUxLTjNkgYa2xzDVz/1wtysokvf
aBVUnH2ofH9DKlRzi4Txi5BgXImosst0Cu0+ynbXJS0Wnf8SYGvxoB94twSf
O0teb3lq/9YfrcQnyrrbu0PK4DM5/5IKJRvekPNRpdGTkodtg7c4DnJUwUu7
oMpX2Z2gsk34JDo5DYPXbdyY2wfgTHqb57mxNrh05n3fdMYYFFfw+4nvHwCe
zpakVTsyvx8uo6XPGASxWhM1TzsC/GGcEZo6UgB3gsuuyTxuA8WuB7SBn6fR
56V04y2+mSgy5vDf2qYuEJFPydsxegJsPhs8MiXfn8rc/X83k+/LsLSJFMaj
hg6Ur2G8qkya4xzGp4qLLH+qMXoBN6NyQtfHKTDmXbSvE+oH60KGT2mVcaBW
cWmovXYKrk+N8Hk96YMf8dWFewfzQfBgwXDijmkQCf0yuNGkB3bPuLsNexBQ
vunApVWFUqRourl7bb4FMos+qsDtUVSWuC17Z/0AGsn+vu/sm27YOmtyL12o
H419WV154zSOjPxEzCredEDThfwEXYa/eXZv/vG50+//8TgJ5onfzrP5KF01
bPcTcQLyVHm/RW2kHWgT5V21Xlehw35chknpRGTVsOvctcVSGHf7df1uTAVa
FTLnVH9DRDcGTbyGlqvgqd3q9/BfVUiZIftbWBoBaRfJu+2XbQLGD7/1zUsn
QKPrMd9CRB8sir33dCM0wyZfBu91veT7MDJ1Qtl4BJgPeA/SM/eAzp3nHjR3
eiFyLnQyP5Kcv7si2TjFyPysxafuDrluXjr/r462zMtQ6qck4wTDl0nyev6Y
6B37SRN1PlmJOFIyCJ0W+1xM/o6hgI9aqx2xzmhpRfywlsQI5G0e4bc6NYoE
VDVfvCZ8RQYHrhOUB0ZBluQ6LphEQudFadtctRaVdNYy4ydYC+HpiPv5nA8k
lJnA1HBubkmpWnffA4HiItDfscT305qElllygrsMd6O/+zjQ1r9lwBMk1GxD
XnfXtndkWbFvAscYG5VP5HUXfHqDUhJ5fC/5tRix8SZHWVPGedbstmgneXyu
8XaU8cqutslh43z9VUKoc2IcneVgykoMKUXpCbvN7FWHoPtzMmX/i2KaIPZ5
gFIaJZ7DxGPQqjCCbh6M23+MqwkZaEdx9/wagXO7bolj+8HlCpTP2VUrKPG0
n6wMvOTrnane6ml/QA85TTDf8iFz92vfK0ux9yb3nA3aPlxmgMKfbvqsXVQE
7bfE+nfZkFDuTsNtrJyWKOvOzhaNhTJg4zkoaPBmAkWeF7D96tJIrifydTDY
D9R96ufU+BPtRa2SyVHUG+oiHGvZiRpCBW23rxuEx0v7dmP7Y0uWlM/dsgMp
cWHjkZmkRBLyaV5JOmTpjCakCblinIWw+U/HXBx5nLUsmp5xdK4oemDG6Etu
EWiwb5ZPJo+zv6NFQP+xJ1qoOzvY0F0GjpaHbhsWDCLq9rrLafOu0QFga3Qx
vx1PQiNSLwJKbwaijRbi1mYChaA6RbDUek9CcWymm869DkZmuiSSdXwR8L9p
57Emfz9DbvDPntCPSBDRX97gXwbcBL96B3LedGf/y6NHkYiSP+Eh6lfuk/Nm
afhfHjng+cM8qZKEzfvuZ//ug5AkF2X+U/VFng6R573vbinlPiQJulDmX/2I
XRx2/TFZ/+bDL2KMMg+yahHG2PUf8uqhzEd7YCZlHq6cVfHDrsdP1pVyfaGf
/l3X4wuHebHrEdo4Tbk+pwNEynVp6+msjK+7iRg4RmnFjjwCo1tcdNVrJNAM
0Rlc0YyHHXFSae+fEOBh8B3vkNB26NfoiK5O/w4O7QSXKoURkL9wljm3egwC
J0XrWXLSwT9yX+S0IRF+a26x9j3RBJ6F7TnEZ6PI7sGt2b2lrWggbv6Fe+IQ
UPepn1PjZ20fPLSJGkDUbc8fF2It0zDkkaZeW1aSv0dZSeNaYTe6dVJvteXY
AFD3qZ9T4yu+5pXhQ4OIutWWzvsAYQOAjjFk9fqS0Gs/m7TSv7+UFrceyi1r
LAZh7yZJ9ssk5Cqwl894/U70nS2Nja6iAvbbXx1YIa/3LpU4MZGRS2gPq8Gp
5T9l0KtxYYMJOR9ihhSnP991RC+OsV4IJZQBVceh6jpUPUf6sCtFj3BhNbLA
9Am7VwK/MF2CqjtQdQiq/jBZ/Muum/z9q2YOwuHpAWiLAF/8yfyy//U/aj+k
9sE7N6rX0k+Nw9vywFxMh3CT9KboD1kmt6s2fybnwQ2msodtX9CZhzJeCycL
IfhVx139ABIKuyAV6CsTh7h2BH+ecCuCzFHLzc+sSMjrZQ/HxM4YpMDl97Dq
Uhmcd7p2GeOZmQkRXRjvvBdY4YTxzdjGn5R+36R98y7W/8OD/lD6Pu+Vd1+x
vnvS0N4H68PFi27rsP5r9yzUA+vTdPaPnmN9e/1T416sX+uJu+b2nCagmvxW
e8m4FPR6w4nAdPMOmCnhSN+XKQ1WRv+ee/+M//e8u5Ep+jim34kWLdlgel79
E0szTMej8k8qH6XyUN/QUy+ZPCeRY9jNvQ6ZGWhEptf78PsB6BQWpPB8GT0T
Voz3RwU/tcD4PpV/UvkolYdSeQWVZ1D5BbXvUvswtf/STT72o79FhGXib8Mb
Lg3wuawpUHaqEDQf1J1jaiXAxUrZE4V8jdDIeKszorgaRuLzUeuGaShckj+b
LNcEek4On1a2tkPPGSkxDK+MWBlQ8It694whhluoOICKC6h44N3Mrl8Y30NC
/vwY/+s9Z0XhfRfLV1anPhKA/1xbmRlTC/jx7F3e2VMGqn6XfToTpuFxf7Gf
c0grMGc+oX0g3QBTMqlcot4E8FATaNgi2gbR3VU9thfzYeZM1NqyFAEU5rId
dHa2g6F4UJy8UzGMPqDtnnw2DcLCzoKb2zpg3cJjR817lTCfOaV2kIxfQ7g0
KHh2FyoMw3DsjC9N7B7yuhKQN6Sssy+F6ynry1Bw7kwktq7WtCjrjOn4Bsr6
oq4H6vqgrotbau6FWH6LnLGh5PvxPyqUPCdIB7tj+f3y+ggl36Mtwyl5PrYc
EILpX+xWzBQ9LIThMUUHo+IPKh6h4hCTvb32Dc4ySI3Gi/L/Dgp3Vhyw/3P4
MKFNwTGeurYUXHPgqdQQhmekFDbyY7inb0M6BQdN06xQ8M8pTxlK3XkSwUSp
Q1ud/uRg9Ydad6h1iFp/NN3FkhJUZvKOdO77gcUP61TAn/IKSM1/tZG2bx8y
L7iZz0mOK2ds2pFLjk/ccsnYkkTIE91ket8Dez6jZd4gtKUJqOuKus6o6+uG
ZUAypreqqLdR9NdxhXUU3dWxS2gftk58TAju2Lrx9zV5ja0XuaZgb0x/LIiz
dMH0SAvu3b8wHZKa39R8p+b5PSXp41h+fxMgUvI95+0iJc9bZUXVsfyWt2HL
x/Ld1TqbkufUvKTmKTU/p4+V+GJ5yUP7mJKnTxjGKfnpabiVkpebPnyn5Omz
fcWU/BS5PE/Jy58aQZQ85Z4vo+Rn1oa7QlheMj6s6cLytCT7DCU/7wUOUp6X
FM7rh2HPT2zV+CjPTQ4EDlJwf2DH1g5hMg9gGVVfwvA/t/Ueyv34W3yNcn8e
XuFXxu7LEv9dyry3XT64pPqVkNeswEqZf5txVQofcGa+eAfjB3qefym8gMoH
qPyAygseGryi8IGzb61zMH7wc1hvGOMFrl6fKXg9blX1J4bf/3A4cGG4ffOY
lO4nMm+EK/94pDrHP/5I5XVUnkfld1ReR+V5VH5H5XVUnkfld3cD11H4wOO9
79wwfhAcxknhBVQ+QOUHVF5QGiJyB+N70gNqxzH+d3eelsL7doS6mmD8auQ+
UPiW6D6uZYxn0XFGXcF4zt94Wwrvce3U68L4Dr1Zv/gm8jx/ra5zzb46pyRH
ZN0zQ57nj2fRXeGQSYg5FnnpWespCOI+7bC9YgA410qWw5zHUBk/fXLX+hNI
/nNDRHD6CJyS1+s6n6OLZKMmswvI607O/ke7VksxfGUjyt3bfRYddTi6/5cu
+X6WC6nSVlWA/5FbfnaJo8g3nPtGQMENuP3c1+q73ygMR853z5LrlJ6VaYup
7WJeW3t7zg4y/t+1fvIRxiseMRIoPOO9rgWFX+T40xh9ezSMHqcq/mgrqUEO
CXsYrtiMAYP+F+3pij5E3S7omO0JLR0FRTqLtqDhZmS7cXuE3eZRpLWb44RM
4jCEmz22nX43ilRPfqkqsu5A9T2RMZZoEOi2afdttxpEGipP+7FtlkJpVKTv
ICRrZy2G3+tCVecqs1+MknGT7a+pls8DQOUtVB5D5S9/ZNe4MXyfa7mfgvff
21Y0YzhfXfOgIIanfbeyU/D1sV0fKbiaioOpuJiKh09bpPBcaDkIPqIPzp0r
mEIjAtZ11zv7wDh52Yn2716Qz3powvJhElm+bflbUjwAWZIX6V3q9iC5G238
0poT6FfUVFC3/xAsGb2RtR1PRrVxdTNPbpLQpnwb++K1Uig/Ih/95XUTvL2g
pHOriAC5NH6sZlyVMD6xqIGdb5/vD17s/Ly7RRqw8wKLqCl2Ps6/Vk+x8ysu
1y5h52VgLtyFnc/OanAddv5f13MCsfO+LOL2aoogordbrhKL+kvRiRmXV2vb
a2BMerZ179QEOpP2htMjwwdp0UCmVeEgCHz11rTeRv6e9ORX3V9Pom2LVa49
neTvySbwCJHx/ciTl7oTIIVSJkOkB8m84MqocpQ9GZdn9uttDRKZz1O+Wpvz
QJeM5xNMSuc2xCFBRf6gxqIJNLklzttxfBAinxuK8suGoOEN/lc118ZR0Z/k
NNGFIaAeR/076vHeJ3n2l18dR98Smp3udeejnp0hVzddHAbt+XXNAuTxvCjv
95hRVUZORRZJNGTeETYmqG1HHk+bLf3EG7ELqIndmO0heTy3D80tL5P5xudF
EV0FjjvIf+PdNTb2QthzROHPOfLxh5J/0N4seogiX6vCffLxjZ5WWfMJJHTN
XsnRS+EVukI/yt7FXQjVlZljbHEkdErU4KVpvy+Ks7H/ZE0+/ntKF2UcVaJ0
lHEZ8JlSxiPpIrQuOkIQrfvI8gmbp53mEi7Y/BjziRlh4yBc/DcuLYPblPEg
XsVTJI8baHb/t0GM72jMuWzFxs/JVuOMjeMs979x/faaooyH56d/iDutO2Ic
VhGZIY9rcoDIfJd8vKMZc7l02UfUacTqYBVDQmx80SdOSBaCGLuRuN3Ee2Qn
vbRrDzneUWL75Av5+F+zGyjH+S9spvydp28K5fitV56oW0eScbu5+9tQxiik
fsE2OPdyIeQ4Cyqd0UlGiLDANveO3McjMg1pLcj9UaTtzTOzRCR/48lkNJnH
DR7f9CdRrxCUGDYGzBl3gQu7sHLN62mI2jIXYX+uEPJbdnr+Ce0Adfnv2fqE
aegst5eyVy+C0rLyhh/hU8imnVv/5u0U9Fb3mKcVuZ5XZbc5hqyfQltmC3tr
aYoRs87QHjWjflBdoKu97jmBOoZv96xdbkBr0dEVqXIDUHt0TvONCglZ7+YH
u+gilHvtBp0vaxG4/GDS4qAh1817K9EfasqQWNPzfcM0JVChkFX0q5WIEloK
6xkLylH/mN+2lpdlgPZnXv8524huGmS2PqbtQCz5phtPDU+Bd7Ldp61mI6h9
X5VEkXghysk5XJOnNwaqRuqcxO2T6E6b/qMohy/IjyFB+eWdQVDP1x+5GjSF
apK7BCdc3dD0R6U3P6T7oZqV7+Fm7ynkzSmhfcc7EBVxHM7/q9IPmxc4Dw67
TiEYbX+aKWCPzhJmrXp1+0F76cLy+adTqO5X4VeOTS+QYXWUV6thP0hXJa9k
j42jda85D+28aIYcxLealnIPw0bl135cZ/LR+af7aFQLhFA1U9tN/VwSVOE+
y9txn+VC3Gf5Q/3N+vstRND2jKgctrkGRq+VJsL4GuC1Eq9LkwYJGnzmNG+y
nIb4VRHx+VeVcFz529Yacjxt4HSPRLQuSLFc6df0roRzqHs8boGMn6rnZooT
z8NLW80EVtF6MCmOF+SPJtdrG8HDP7YfRMKFK66fxgvhd0Z5S9Q1EqoP6Ngo
OSOO9gQXdMQcqoAzt3rvLKBU5HzSpl8ycAwdO3Ba8LXTCIxkNJqet+pE305x
jLzYMYRExAISxmlGoWTOjziiO4Y+X1dZut7fjE5lcW8TUBwCkbrhjALeKfRi
3vMmw4U0lJUdxxpe1g+GuA/yTtwHmV7onw+yqJK4iwN5Hvi2PiQZur6FkRMx
P5K3NsAPVeP6wbMkYHJhmrpV9RL6kvYmi/pVgvAX2e/qv4hgu8OYwcvZlYxL
9PzD5OrBWrZ9XVkjGWfXqkUoP7dGxDtXs8KkGiDJ6rryO74PyNaW20x72xT6
7SExcIRmAJI6lBb03csQu+G9GVb2STRRpuVe92EAphl/l6no9aDhE6uFn1ZG
0AqH9bpKxkHoyg/bEzk8jhJvb/30y6YB6VtLdAbzDYIS7jt8CfcdfoL7DvOf
art1r44IwjYzDa8V4sEmu3mTxFw9+N45WfJClQSd1pbvBlwigS+aa0taXCX0
VL3MGhgjAq21rvfS1zAQLu79dvlxPdAfsaK1bCKii5+1fK9oeSDGklNS5aIN
kOP6wozG0wMxWR+jLVqdQhb0gyVpK71QVK45IeTzAxU4vtrZmjiFLk3KXTkQ
2wdeFRLXD9PXo20PZ/abbZhEUxXJY6/I9yXor5HDc5ohxNVawvIwuBcJekwa
5/wYhtO432cM7v+pivt+CqQpy1pHEuFZ4Y6eV8L5sPS8YV9MQD2cpJ3POyRE
gj2Dy283Hs+AYIGZQ73jlbDB9XqYWg4RCl2/nufZkgp5l4cOsCs0QMCXjW+G
yPer9V2mmzNDGHq/xr/uF/m+z2y2W0yOuoe2TTZVfQyZRFWL/QJy5QPQ+OCy
uPuOz+gDl8kTfYtJpBUveYGfaRBignx/GHLkoS4H4t31zyZQot9cvfrsIAzi
/rliuH/uJtw/t9qdsUJ1iQA1Gix/PzXXgkqBwe/bivXAne0xZ/yNCNNBRcdV
LMqgZrV+tPtxFVReT9866UUEk20/XMR0CqD20Xcf6eV6EKmiCR53J6H4L9s5
dVhS0PGh/V8EtxcDzfjTfFt6LURzVXcdJ7EZMWZlGr5SJMJf3Gf2Ee4zK4r7
zGYPbGjgtpiGaNeOA55SHVCjuW6Ln0stpL7gbE4KJwBNs7Mfo0UT9MSy3LKc
qIY3SSqTJxwIENRFQ3DPqIZdtz/2rho2g6LqDam/RiTksxLY0XU1F1ULjmys
0ysGxcbUquSMy8Ankp2QT8b5/t/rjt6T7QdB3I81APdjrcP9WNl1K+pSbk7A
A93Py4/Jee8X96ZjHmpgfckjiefmU8De+uKvYVY3HPdfJ3tXrx5ufrvg++To
JKjU7f7wp7EZjPJoY4+K9MKffe+2cjOQUPdod8rOg2WoTVWcYVauBMwfJcoJ
yuuDcmPWDB8jCUSEWTvPX6uDszzK7V6eL2HI0LhujIEE6SEtHBev1ME3OYun
bJKfQSjm1iPBdSSwW016GKFcB7Rzu0c0h38Azes64y0EIrwIK36cTlsH+jrW
hYWpxdAU93O/NjlPL1/3CbzjWQul7deX9AQaoPOiduKNSQIUlNJ1t3TUwDcR
omafVwecH1aadrk9DXGDSqfGeWpAGPdRFf+PjyrpQoVxvNkIkN6ke6XeGwW5
gVDdZLc6eLihQ/B4xxg0vrK6765Nzr95r9VPTS1QmbtrSP8DARW8fi69PNSM
rqhpB0h9KIfwRLXlOpVLwFWkZcNsQgLNuxWlMaRyGOZQ6voZ5AJlTeH0OsYk
yExTjE3+XQ68GwxEHf1D4YK9nt5WQxJEJrje0dxaAT9jOZfLrb/CYSatrCfk
/uArn9S6zaQCtILeyb3uygXBL+JjK9tJkLtbE86vq4R3bz/uzlwoB6ELi3Vl
n4nAyf5m41XpKmjH/UzNcT/Tz7if6bH2p51Vgf3QvpX9nm3UOMhfUjV7VdYG
H75t4i8+OI0IxdvYUvm70QC3z9AJrVL4wZvvpR93EiRmT27E/v+jCnnPXNdt
hJ0pl74Z3r8PoXpVe/ZGE4HoWSpxzawR2rnizjw76guvilYLbN8TYUsah2XY
h0Ywx30/s3HfTyvc95NZ8h6tTH8ZMvE8xsFJ14nWzlz+Khc+DXeUfuuovyfz
pr/bJtddHEOvbG+cW02rgdivbL/m08dQjJSswWTyMBp5GnWjjKsM3iyvGK+e
PYKO3b0ZlP9jAp16dKPNhm0IfHAfzCrcB9Mc98Hc7VJ5eya3BWnk9H+zPEpA
pE66nCuB1TC6flBD4Ek32iQZscOdeRqxqsa7cMaXwQTHSmNE7ADyEzM0sds1
iW7Tfs93Ti2BQc2ms9KX5ZGWt8QSpvOLq/UrsBYXQUTKtMl78VtofYOweyE5
XtBUJWdVWAR7Gr2eLcFzZCa6l/09Oc5WqSxJyC4CuvfikU8O/0Aix3srjZ6T
ULWCpbrR5SKYOiwV7BWWj54xHbtaakBCtxwKksyFimDy//CdnBrqDV/Y34Ay
10r0vtkSUc3bmMdmNkXAuZKa8Lu4FSlc3r3zpzUBGYwqfsmTLIFde98sBTR1
o901/HfONk8h8bjzvm+6KmD/1TEfPY4J2GPeP/j00hAIpCorzOeS8bzXl0PS
i9JI9O6fji4yjxb6odXN0lQMyGfaL7beFNFsyHoRRo7f5RraLNteDLN3WJpW
pFyRv3hSl4YPCdEqvjTMnikGr10mj8or/FHn84al694kxNPMuc1/fwk4KzyQ
X+34jPQeO/FdcyMhIzm3ccekEniH+z+m4f6P6bj/o5cYX8p6t0rU5PVUPpSG
iBz4alpvDDTAC+Orav5Ww8BVlkgMkxiHlZmqxMCoQlCp1vP+yiUCYhNxa7P+
k/BiZJG+v34AYmIJ+iull+GSTOyrzE+T0KtyVk0hZwBMro3OfXW+B9GHjm9u
aJmEtowPQ6bkOmLXX24wC+7AGrBnl+DpKfhot76gOo2MS2Mdc54KBsEfgaNG
eQzTEEtPY3Kztxec/uOreAr3VVztVcrTTyyCVuUu77V6Iuh/Yyn9eLEarJWU
dFjMq8BJ8bOYMyLCYMw9/mmnUjD5HpSvKd8If8Vaf2VdIMLtALfxgueFoL40
dmHyazfIHCV+PHRmGo76v6kWassH9t5Xl7w8mpGcXAVl21J741W32zQ8d94r
03R4EnX/tD3WfMgFXXTkYx7TGQTHuTvylf5TqExHZ80u3hMdyuzItTncDzU4
7l3S+4d7EY57+b1vC98h472XLAuS3hw6MOp51aKVjHsNpEC2mly/WJK8Dv4U
ugQB5XQrlmR8u0CicePcTYKebSl/2/LE4HKlbXavaQ3E/LooliD4HXF+foqu
9o6inbvuWPYrjkI6LyE0kXsCeUnZrynfK0dNu8a0aUYGwQjHnxtx/EmL40+a
++e8L5DHI1m9ScVM1wu8Ku/uPsPbAOpXrbg5yeOJjpBlTOh2AXoOazqlgEpI
411o3ChMgrzwJt/35vfAr1Y9/55dDYQz1v2+2BSEYhKuy0bWTqJ7dJXa7vYD
4C1jGNBwuhJtYOko2X58AuXke3BFug4C4LhRA8eNDjhu9DsdF3uEfF+PbE5n
bVkXA3vVt4Sto22Anxct70SrkYB9+wGOgvlwyA6kzb35vRIk8tbt+LGTBE6H
3GXeG/iDg4BobmtxDQgF7dANI/Msm6QqbufvN9HNR5eEBcj4an074ea5vV5I
qGHp87HhKaR7U33FTL8P0tvv7rdJSEPnLVNvO9ydQvdDhgQ+knlTOU9gqpRs
Ezr8Xcaj1mQCbZdsPOAx2w/qOD4M/w8+jI1Sd72YQATfz6yxe+RygV0v8bF8
Wj1IaMfs1jtAAkaWyjeN9d8gxpBv/xG6KjgY0EQSJfd7h6Jz4YffxUGEv9Bf
/wxyv96xwfMAed3OBvSTTBVeoEfHleO4h+ohm2l7+DPfe8hR9Glw+ugkqjh6
V+zEpQGI/jZNyveJQlIHfhJ0aaYQXdRaYCvfALR9XXO8IFWEenSD/76/OImS
ynK2z3sN/A8fCuH4cDOOD211Lq16CxAhRtlTwINc3wVlChm3C9RDbX8+2812
InTtIAmeGSyCBq+uU2nxVXDBZlLEJpMIWiutHJWm2RAv8l2Vwb0e5BJidZy+
XkRq/r1L4hY9aNO411CB5TSs4DjQHseBEjgOTC6q4Lf6Rl7/l6+H+1e0Qb2A
pMXmhFoY55jPVfpDANPc99LDzA0gpunvys1fA6HPh9kr4y+D7ZHFN+W5E7Bu
hybx7Toy/8JxnS+O61pwXMdWbbW9pG8C0q/2rUmT5+t4Ib/sffsaaFDg3dop
MQ2/ov1Ckxk74byXyH41xjroGTlp8oq8Pmu+/luvh0P+rdNXE9KSm6Xcocy+
+UbCRyKM3zFVYXZvBHehfU+TWCJB65PYjYwb5Lp07O1V26omEPmPH70EjqMK
FW2ylidGIEXPibLts7WoOzVUB4/91HXXt16CExuFDwdcJoF+zMvM5LwKEOS/
uxBPXodynDaUdcl/+jJlPR6g0fwhp/IBnPLNNb0VyXy7n+kZCxm3z71Xppvx
TAHl/lmLYX4SWCj0bLe2qIY0wq4zup8LYIk5kk6qjQjfNMxkRxVq4C+Do/0h
ujqou2UQOiFMhI9fu3btzqyBbhwXmeG4KALHRbpVRus71QeAbnjIa4vfOMj4
khZf0LZC9q2Pap9DT4KW7uOZX81ECJrWOn5NsAGUOR3Mgz49ABPxn3m1y0TI
nL03qkqqA5cdvJR1W3SelbKOY4U8crD164jjnwoc/1zD8Y/QQNOKP8tzxLxS
/YPX/QNyoXM4KLZMAp1H5+sf2owgBgJQtmMPmHZ4OjXDgSNpl+/0yiDzrzr2
vX29aJWPRTuLaRre4jinHMc5jjjO2Z7SLJq30oIUTfISl+emkQwDyG3grYeL
HCMb8sZ7UGLHulOiulPoMxObxt8t5Dz8ttXWfXwQnSgwVL+6awIFCNttUEgr
g/ZTj71eScohOct4qYdknlRjuWmPTn8JEP6DQ3RwHPLg+YXHhUEN6IVy72T2
VSKaWeu88pW7GPpERgeY6duRpU6vpKMkAT3UfnFx19YSuCDS7ii5oQ+ZvJzM
PWM0hTykD69XlSqDi72l0vxT0ihlyuQ4SwgJbT38prFWoBi2PHnv75Foht48
fRZe8ZGE7s3pm0faFcH6oyJPtz9yRVNz3+JqoklIWc4uQq2mEEL/gx+ScPxw
sEGZ/r4NGdUSeW6QBIjIa5ffqvv7etjh9/NpiS4/0GT2EYTKv0HP1wdOLmMk
aPb/zq8TrQ6NtzNlX24uRK9vMjSOJJKgQS7arN3XAWLc+lrlr7WBo73CSZZK
AmjzHwn30XOA5Bdjl5TlyhD9H0GtxQckeITjAXUcDyTheED2592Ob0LFoL3B
3nT0FQGqVO8sbTBvhe5apj2Sj4bRrwPvFC3X9aHlwyyvObf+3/7Fong85D/x
uj0SDkfKx9COKjsbb9lWNPtOXvWXxiBsFva4n6I2iu6zQqiLVCcKd6VJTusd
hPfBKmW87iPIab/2tvjcYpSuq1VK4Bn7n9+xNO53zIb7HWf/J071QTb9fVXx
+pd+RN1Opi6fqo8l14tHlWEdB3vQI6a0ctqNA+jUp2hSYs0odON+xxG437Eh
7nfcjsdL8fh1PJ6C+yBH4D7Ij3Af5C94PASPO+Pxlk4J0atvyhHH0l35BdFW
tNCi6VtjTACRm3LRbSd/oMCDEQz1hkXoRMdA+9IzEqiK/vO1bcJ9bsdxf1tJ
PP4Hj09R/ZGFGHt/OFZAQuMG7uHfQyB2u/0064FxsAyz2CUmWw0hn+7NP0gb
B9/KJ2lsHENgNjfInLwyDaPgbTZM7ouRDSHF1hItYOHzzx+5b/c/f+RB3B85
CI8v4fFmPP5AwiHAunoSuLR4K2Rqe6GKsK3hxtt6MI5vSSqYHIfA2EeaVVat
UHY24ca7L/2wB/dHXo/7I1+Cf/7I8nhcEI+v4b7JgtJRKVZdwxDE+p3v/MQo
WG0+vu0FbT3I47//Tcd//2uA//7XPNRPcM+lAsQZ99Y4tzkdGTTzOyS+JUE+
7o9Mj/sjS+D+yNQ4Fx7nwuOZwWGNSYJEFKVxq8LEopHMu3/Jc2qWQub6zDCr
lwR0eXFQ6m1CC4q2erHYc7cMJC4WrUtgagSrpLFR3iQCnBiw3WN6rw6a/8OL
Y/D6z4C/t3Av/t7Cv/h7C2/KyfNkNI2gjs6MpESLYXTm3BX35oFWGF1yVzj7
fhp9PVld9sG8HdHQbNs+v7UW4nI+KX61SoR1Z85HaZ2fAB+mn8u/Hg/BqrTb
gzM3fcBjtuChBn0xtOswW9KFkEAM/32LLP57l2H8dy7HWE7rHGWZQNVn2I12
DwwiUnKR9rBDBSg/rzmCLo2jMWlvsccJQ2gfyXJgrL4SbuC+xn9xX+Ny3NfY
CI+v4vEWPM7eOK/deHkYXXJ+T9mmVdZ/2EDTDe/1Wx7SvB1AD492xsvyDKHd
NB6yLVmDkHvr1kFsfo1FP1LmO2Lm3zwzbbIw7l3sQDW820bXOsj3s3x3mGtH
A3gr/vM75uf+53e8A/c7foz7IPPgPsgX8Pgtc+1KCTK+PrpHuOrG5xHIJlqc
Kf3aBxVNW0/QqQ2CvMKLy4EF46CnfPc9et0AUsloW0XOOEjbnjWczx+Cw/qH
N1imFgJBmbC0l3YMMplIotMlI7B0nFZAWaYQnhP/vcfvOP4ePyv8PX7dO9Xe
xpa1wCJvixP9nSlYZ2rixZ/cDrO4D/JZ3AeZ5fQ/H+QxPH4ej9fh/sjJfF5m
H4uHgMPbpZ45exwIPMks594VwqZfu+lEeQYhSjziDc3KBPizyJhY6RUC8yvT
lr+zDSi45u/zHvpudMXkXX+v9hS4pnr67Ls1ioSdZfKTnIxgq4bPA4/WURBv
lqxsGx5HGgH7Ws9tvoUOzkkj7e3DoCXA23qbjOcCWZ6Vf+ZUA1dZ4+I1Mq5z
elLGdosc38FcVbm7UAvox9ic2PkbIPm0wZYdZP51NSlzbsPxrRDRorJNkcy/
KnGf4s97/vkUG+M+xdR4kfD/P36dKaUgooCIwhMMrEysS5X4A8bC98c3gI0t
a+UncvyuFldnSR8H8gwWNxchx5OGa/tM0BS6e3TLDq74UGQqXPSWpaUPfpoK
TfyMmkI7nwnSO5Ji0YPmIBdfpn445NegL9oyjixS/ZMCHj1HpGxC+oYDw6B/
4bh+TNw4khB+1VFxJALdXRF30NYbBs3FEO8w8vX+rvmUx7XrFqSZbkzR2NkA
dMGudYVkfldn5fUmO+EmrPsW4+ZsUQOcuO9wGO473IL7DlPjpP/EFTUJ4vSF
RHR0eV98+D095MQYXn4rpgE+H7818IUcb1ArPF561By10Sp0Nn4mx0+HjhjT
TaGH3F6K3w8XoKFryiLsof2wl99jD4/NJCq5VHU5360cxYpZcnEt9IOQdrna
toPj6H2bVuxGliRkfrx0wpdcZ7OTTJ06yNdVrhpxmrbNH45vfZWlxN4A3x9e
9lAQIMF63cZjtbfewBv7DKl1ATXwCPcpdsR9iotxn2Jq/Md/4pw8UdynS4hI
sdEk5uRtFyScqrLs9KYB4mKbO+bLiGjb4seB9WXuyCb0uVXrowaY9rBxWHAY
RrXHWFLWEyvQVeeAobCMMZj9vU/ueHM/UpQKiLC4X4u+3LMq0RCYBI0Dhqc2
1BKBrjL2GDH3K3BvvrPvb089DDnQi/uTebnRz4/GlRtTIWu9SHt3PhFS+Xdq
b+AgQWq03R853mhYWc2JPClZC+a4f3E37l/8F/3zLzbD45v3/4uv4PGvA7/P
7akjInRssuvHcjBSLPkx3HWkAbbY+KYIthBRFRpI9J8OQ9w2KYnbGBqgzj/l
UGNHCtq3afbDk/AptCooZN6+1gcZIxXtWJ7tLU+g5J1ge+JDLN/4ujZQ7t/Q
ZQZR7H4OdGZtwe7j9W/cosSiH0hcpG7duuFR9Eh049lxqVEYxf2O63C/41Tc
7/gdHZ/BLqZW5HtU/LNfaw2aeVB+K5qXAEyar8ya1VpQjka6jLxIP+rtZreL
fToBTrarkidru8DS1L7IaEMJ/GmIL3bQmYYH3ytExAd/oGzTR9cePM5Eayl9
g/szSbBGP3h/6zsi7N7yeH88I7k+qk9UcFjVQ+C3OkerY4MwvV1+VcmkCRyz
feYLrMahcNGF9lMXETKCFn/lfEuH29fs2/Tz6yDkT0vI7xoiJLYY3s2/nAmX
/2gE7SPz6Hocj0XheOwmjsd0Sprjp/uISIjOm/myYjx6Vrozx92hHrjKire8
HCOisDUj5rNKyYjjwoKQDk896OD+yFm4P/J73B95f/HYE+/KeyjWTHqXXekE
ys0Mfx5Dxhd35qzWtnUFw9OJOsuom20wYlxBX1JCgFzcv1gP9y/eg/sXU32N
b+LxnXj8PP4+Q2f8fYa++PsMGQdfq7apZEFbpt1Wt/MNsOJzyu5hBBHiX0qo
3ro+DInSX3a7POyBfB9vyUsVQ/CZJ8AnpJcAN6U8Zgh59ZCnQ7uWb1kHdx/w
Tb1ZGPrf9lGqjauIQC/8wXUDJ1w3EMZ1g5xTN08O3xuAZ+ebo2drxsFnx4XQ
nzebIcSgqDzfkAhfnlka7TtSAh6tgi8CdzfAQvvnhTAyvw1I0TjR4VIKXQbT
V/dqNAI7jkuTcFw6i+NSHtGPApumiOjxxNDDCudMpO9jd3jKphYKvqYVFxOI
aMj+ecwTtVx0aqWOddysBu7I/PNN9P37z0cxH/dPZGTMzNV+RUIxc387btd/
Q5Ihs/aRtEWw35eQZveIhPQG1w1aXcpCNy7wS0cOFIKKwL28Hb1EtDjny5R7
OR2lhz4p/hhXBxGuIRefTESBa+LyREUZAXS49Utuq7QB33/8i/lx/+IdeLwJ
j/Pgcd3//P76Cf77a/PbV8UuRpbD1xVRlWP3CFD4YUGPpqoFqhh0FdRPlkER
52jIJi4iEDK3ls/aN4LE+Wu8g6RBWFTPumKZOQpfYLwjyqIdLgq6/Fy52AK0
1gVhX2Aankql3veWagFS79q8am4jBP6xSPj4iACCaVJbNprVg9qLo+vv7JiG
aInMzfHfO+HT5XFW/coaeMPmcbL7bD8UDGu/luicgO9ZAfsPLzaCAK7zBOM6
Ty2u8wSm8mzB/r7ygxjl+3jz4ynfc1ex2vbDMQKMLV4qyItpgbmyUx7RLtVw
QISL9LB8GqZ2hEVEl7ZBVG/yfZN7NXCm5OKteN1pMK3S8riBGqCy+4vSxeY2
yMR5xBaRfzyiCucRgU89ls/VE5HCq09Br9VLkG3cM23CgSro0G0yFiD39wf2
SpG2E2WI2HJoavfGSkjH/TITcf9MTdw3UyY+WzJen4TQ8s6urRH5yHadhCC/
UhGQ4q0SK6RIaILxxNGfu0rQvda2agWJIljK8KW76UFEOx3unC62z0WrG23P
apL7bIyw2oXXBAK6FcExfmBbIQL93S4nS5phuDfDIY5mEtTKXL1Yr/ZDtKbo
4oXZBrCf/7t+Y9IIXH8wf35qXwvYZ/F/DWcYgQM4r9mI8xo5nO8cFMhOOnuc
fF1WwhMVdvWITyzi1O47FfCwrC7AfwcRrZvq6K852ohmv83uIRmWgQXup9yI
+ynH4n7KlVfmufLniIh2dMw9OqgCBe9fev5zXTHEMB/y+fiBiNgYjCyIUId+
tr6atzhWDErdHdn5UdMoI7Dc6WhDMaoN8T/O6N0JnjWOHvtIE4jVzeYzw54y
xJ3R/925eQBejWq+53vUDqziwn9LEqbhXUnu0z8t1SCA63IHcF1uL67LbTlR
Ojqa0wQvG0Z/uQQQoLWimZSZUA3ieePfEgcb4U635+MxMj+ayRHgr7hQAxaD
BsdS2Ieg+4WM4sFt45AYbLuTNPr/8TJWnJeJ4rxsfePHpMhjBBRrLS9hbtmG
ZswM4IByKeSOPnPePj6N6lwrFN31O9DQ2YwxRvoSCMJ9k9Nw3+RnuG+yLx7P
w+NmeLx2oyHr041jaKEjgostsgLJlqqIWyuNgF2uerP7XgIKClI1dF9uRWzn
16uKJlfA4ZN8Oo8GNWGCuHtTkD4JTgte8ZWyrYBrXz/Jhgg/hdAynUY9bRK8
27rrxdxiBaTLMJptYg6CXGP1eUd1EhT3v/g497kSYvPqhL+XvAKViW1Od99M
QcPz2shTx/rhzn98jRNxX2Ob/8RT8bgB7ndsjPsdR+B+x6fxuAYez8Ljdswq
7ufPZsKJxF2LjmwkaHTZqaUkUw0575h/Y/049JYbpT9PHFhuxfrys/oPei9f
fYczZjlPD0oSwW127PPOd82wmlTZbWBTClqKNRLln4hwzUDUstGkBpab/vkg
s+E+yM64DzKX4YoOm2U78J2aFR65OQLz5yu0Jm8Ow3pzQqhC5QgKcmOmMxsc
Rh777jqFHW+BAPx+ZeH3yxa/X392husEpg8hqfDI5B7rcfTdqyVxILcctsro
lpzynkK3ByJmefN7kc0Z4VjNqyXw9qFA4sDSJDqc6zL/x7gf7efaqeixVgyN
FTw1O/in0cVQ5ajm/Z1oX0xGTYtdHejlzbk10U+i3bMu4mmlA+g+1y6FLLVS
iM5qENDwaALVLWZz2av5ILBatqtGnAg+byo3xmtMosBpjpCo+G6UPVVsGujS
Cg8jyh4uDo7B3cvMNYXk+un+OkolRHsQxO5IrWF499fFJgr+9fn1jIJ7F3E/
4hDcj/gZ7kf8+z8+xfZ4vB9/38Id/H0L7Pj7Fq6v8TBheOhLVCsFH9WP81Nw
0fWZC+MKpXHIyz1L4Zs6CUVoHviwnVgB3+LPvr5+LRZxRTHNpvaXIKMWLT7F
JySISjvn+/tZGmJ9q0Xfr0dCJ5/4emr2lUIDXn8b8Hp8AK/DtHvW9vHvLUAl
xd8Z9c6SkOiLk9kDZsXAr3+W6YJ3Gwpg958z3TaFknpQys6gdoh5s5HjyKEW
lFn2SXTwIQFVFDgqMCtWgqy5gdOlJ30o+L5HhXn8JFouWUhJ462HFJvTn/aw
dCHxpadpjk7TSERkc0q7Twnw477F1O013L+YB98XxrdX8Pho8/EPaxnjSOaj
MFv98SFEN1m+brq+AqxwX2Ml3Nc4Gvc1lohe6Nl8YQiFjXfzNv9tQwU6B1uR
2yhkf4365tYziiK21/75Hj2MaNQ6lQ1ONwDvbOxXmoVJMH/FelhgqAuU3yf5
yZ9oBlLD25i78ZPgaE4f9Vu7H2banllyc1eBuHVuBvvJCVjY0C6hyzEEA3vi
2ujDCsFPLvNfvn5cS8Dyd8e+XZS8bRA6wCXY0YfoYid5M45OIdM/nIy6RiVg
guswK7gOU4XrMLLPwxqbuYYQiUPj1O3mIZRJ8+3UzYv9EIn7F4/i/sVeuH9x
JP5eCTv8PRO2+PslLm9rpbPQLYOdg5tKxlRqQfrwXLq2JxEMGtsITlyTcMrn
in513gBI6l7kSbAtAd86+qzzXCNQE1cgQQgcg9XrJukzUkWwwF3YjuG53JYc
Cr7L399LwXWPoxMcaJdS0Mp+n7wUVxJSRW6TohbFYK2yNuHMno+Wr6aX9lwn
59XM0LjEwSIYx58LXMCfC2jhzwUuhKY1/z6SjYbXbzZ5pUFCL2LLQ1MaSuGY
U+KjJe4s9Kdf0GFEiYS+TiWJOV4tB1GuxKM0BfWoZpR929XHRHQ+d2vN8z4y
TigYl3c53oxe/MyWsfAlILo8QedyoypgwX2HJXHf4Srcd5jgdC79W9UIXCKe
P21eMgoHj6UzyGwqhW2g93uuuB+ulavubc8lz9MW6627ybwqqddUJpC5H3xt
V/M+605BwcfwLs8XBbDU3M2ZGzkKhMv6m8V4yNtLytVHRYugYoQxpsniO7IR
apx7Gz2NUumbTztt6IazuI9wH+4jvAv3EV7+7ZwgNXEN/H4yXqL/noUmtr1s
PtNEAuGfv5Sfv+mH0pr5vZ+WJ8Gl7USYhHshvPAaN/qiOwLPHYvq8pZGYSA/
VFSH3NfiKvadHpzvB+bRUbfTkZMwKX+SR+VDMaiw2IwpHupGOjqvNjSgHLCS
cKrkdZ4GF61th7y6O1Ho3pdbtM8VIIvcya3+GdNgIa9RM/Y8H8ntNPh1oWop
b7fYapt9Ngme4L6ktrhPqTTuT5o7XVjDt5sEukVLR5h1VYDQMqfFbFoDwXry
DTzk+KkWC4cqFWZk+mrNw4QcL8F1JD/RfzqSBa4jXUssEFuQJ6Ksp2oMbAtr
Sm93qp1iWGmGq57VRqhiHL3O/vuEK88X6dr8Gg2WH4bflr2Mb37loWI5R+OL
GWYo9n2RZXcRCb7jPryncR9eB9yHt5qJMdJHmAT3pUdsf0tYQRNruKrT7Rpg
w3WeDFzn6cZ1HoJSwfj1o0Rks6v+SwbRCCVmKT7I+NUMLF8DkivGxlB/pZHl
ZoEfaJ/Jw+cp20eA8yK/gvORZJS1n6nbWukxWhNWfXiFRIJfuD9vMe7P+x73
5xX60W24wk+Cvwz6HgVvfUCAUy45J6oG7HB9xhfXZ6pxfeaerLLfjCoR8UtY
Ku599wylrHeNrsxqhvVMzQ87W3Lh2ErQYGqnGzx/JpJaUUaCQNy39xXu23sA
9+29Vt+9bMZKgq7LmpmfNsfAkazTTRamtWCI6yckXFehz/+nn7TEaHRKXyfz
9CnFVdOlUHTprgP7CFMziOD+vDO4Py9j7j9/3tt/+lkGXxMRl385nahsEtpB
c/ZM4IfG//nquv7HV5cF99W9gvvqjuK+unmfGn01TIbhq2BbURn/EPDudfDL
EumDgw7hey3SiWg4m72XZTAbmZH6Of68rAdnVwlljU3kfjwrZnCCKxXRv6XX
eGVUAzn/hx/uMi/TETqZKuhUP3JSRGQahKNXvgzKdwFj1fE/WT9b4Ybv5ed3
H0wBtwdLrciTNsjD/XC5cD/ccNwPN9bLp4qpjdwn+oe3vDWfgPjVC6mHnzUB
z8OJLzTSRNS5xDhuca4B8T6/qltxphxQk+jKha0E9PatRPKARTvylFCd/eBW
Ala47+1r3PdWEve9Lf0//GrL/w8/2f4fboYXHRJQB1+y//5XU8g9rcfPVqIf
rgttK48bmoS3q8er9Vv6wM6Ob9EppArOdruOIbNRuL3jsnii5QiEkW4HxPTX
QUHJ2pOPfskoblomVcqahMIeX/R96VMK0ns23JXyGABFS51cdvZJqPRcuVHw
sByCavX2fxwcR8IzcRdZ/9ijdSwS3PM7h8FfYKbkilE+muEzz4IuNeRQOYMS
ckhwEvdvXcb9W2Vw/1aVuXdNogpEVBjhzdB05QQyjHMf6f3bDNxB2u2fno2j
UwfrZdlVopFOt1XVkWfDIKlO2MIil4UCKljergTfRT5TBgkdzSR4ifu06uM+
rS9xn1YVrvpiDyCi0LS56/G37dH5i09Khwea4cw52RFC0igq8TOt1UstQPaN
KpMSgqNw60b2iVcmj+H+mqk9w7P7aKfFpFXKGglCcD/WENyP9Qbux7pM4pMe
0yIia5LOlZ+xPohQUTSqZt8MA7i/Jgn323yO+2wKDx7faXSfiBwlGz9vOR6F
Vr/cDjln2QT+59u1CqKJaKOCuKT89++Icb/x/vHPDSAv/mSBmGiBdCRFJPwX
R9Gz8GlfJbVR0K7b8oGtNBhxXl/J35Iyin6ul7zy49UoPOBtuxjE+w2J30qK
iHs0ggL2TxBd3o1BIv48NBx/HuqIPw9l1KOL/ZNNRKK/Tm1TYitE+t5GjmvZ
2HvhPS1mCi9B1nRM6/tN/eCTdovUmTAFwU7SH8QePYftjEfbA/4fXfcdjuX7
x49fpYRKCkVLKm0aRqWcVoOUMhJtQkYZ7S1CIclIVCplVSSiIk57y957b3do
GJWf83Wf1/t7fPp9v3+9j8/zcNwfcbuv87yu8/V4GjQgvRsitQuudaPJipw3
7gYEIGElk1V37zeimRt5qrM/d6EUev/NkN5/E6P334z9Hp5K0tVH7yzT7k5Y
1YcG3ylEvT5SigqdVrvvk3ZGAzMfLryxug8t798su2d/KVIb+hCQpRyIpk9R
rHNa24ekeP4+FVtUihb8c19oHr0vJBsb7KY4IRNxta+9u6+mF4VUmreueFGM
ilWnPEo26cODgyWXX3wvwL4x69NZXGmIs/uO5fGUVNRZkmbk+KgPlZ7jOP1w
Sz6qmWf9YKQuH813nPkgNLgXWYe8zyifWITy5eq7ooQQ4ndT+nB0/H3Nu86W
FaLdjFyrtNe98D6DJE5oRC616ET6xvsPLrFsRt4ucuYujndQ0IRNmxvmdKLp
ywqcn1U1owN0P3iE7gdD6H7Q6PV5YbMDweg7h9xIt8X49f83d9Hez+1o/fLy
n+3PtmFZgxVFu0RZuHiGYcmD6DxkuMFAYfDcabw3NraqZTznt+aYY/M6D3W6
nzkl2emEi68Oh/4RY+G7S742GtzI+29fw+xfrtD9i0mzwpXz+m9wRrfmxHmr
WXiP78GAM2tykfsP/tzEgI9Y5VhAY6k4CydzKjavzcpGMwQ2ivWEJuNTBw9n
H+RmYY+bIhE9vzJRrO9zy3ufv2Ln1Py6JPc+/Efp4nwniXRkS9cV1m/Y64r1
dF0RQ6/jpvQ6foFex3/S62k1vZ56M9fTseKxYnMtNJixzGTJrBa0fU6Ezt6e
DvTp9U/tZVcD0a2Ft3/FTmhFdV+ErMVFOhDfjeqBINtgZKMU0HBCrAsNiEzw
1DvVhLh+GQpsVutBk3dqtW4xL0I108M4rz4oR7V7c9Acr250UGRa0Fv5EsT/
Qdi75Fglsqc9pzm059Sc6TmledE//adblX/YHF/XijKvr1iPakrQ3bX4caRP
Kwrr5T9YGtOI+KML9rU8LkZ3h70OlWd0oCg5nx+1Hk1oer2w9SXNDjTg4Fsy
FFWEWmj/aR/tPzWm/aclNO+k+XWalwvOTJ93vAKf3rHjC++SIsxzJ6KJe1UP
0sQCn2u4WvAbycOVbsH1WEniygXt3c3oB70/wEPvD9yn9weaP7C/v4f0+31J
v88ttP9UlvafptL+0zM0N6e5Dc2jh4MMKv/KoikZWt4lulVI5PC1tOqVvcjw
+scC2XXnkCMKb5khVIEKt//qfBzYizybDgXvS72MG/nWWlqdb8C3JAJy1lp3
o3q6z+2k+1wBus81pH2jT2nfaBftG9WjuS/NZ9uw8zPvB7/xlZZhzSPBN6Yu
6cSKGmMXN0s0oO+GfQ6qJtl4QsnXxrgHtdj+7o5tv3270dcl0ocupMahYneW
0K3Fjcg5oGDrcF4XUqF9o9a0b3R6DbtvdAvNHWjuSntIZWlP5w3a27mD9nUu
pbktzdVofoP2hwbT/tAjtD/Uh+bxND9I8w563eGJYV93btDrjoA6ez3Ge/p/
12MJ6bW39MWLcfzDy23u0+vwRoE7Wf5eXeho4P4HnouCUfpVF6OEIwkoeQse
SohnIQ7aD8r8dwXtCZ3cwf7fC+l/xWn+g/aEhtKe0MO0J7SW5jdobkrzdVLs
5w7NI+znDin0ucOHUu1nLmd60dtVlxQuiH1FQmm+NyqES9BH+vVt9OuT6df7
0feHD32/WNH3iUC0fUHdui5U3hj+V12vFLValQ7af6tFcfTrU+jX76Jff4re
782l93sj6f3eqQL+UjnSvbjg2Q35b8WZeMdJ+5iCsTLk9OuVytxHvXjtKlWD
9ufp+M/nMyjPrRRFVfTweOjloJsWFvu3qCegTdMeBNVysdAZ+vpN9PVt6euP
5VfFTCzpxjfnXlr/giMLW7rOO1DIWYvuyu50Q2NdOHgt93zdP9n49I+05HO+
9ejs8td/5X814SE7tSkv9NLwiafnmkRkO9E+7xeyXcGteNOOItkqoXTM53pl
D297G9LovBympJ2Dqn3+CIReHt8HGn0wl/paicLpzzeK/rwX0p8ztzX7nMwt
R/Y5GRY9J3Pao2zMuikN3+ZbOVih54Pv5v4wl3VgoQydi9Vps9LRsi6R4Sr3
KFSou3T+gAULCa2vapWZ04F+vhHgV75ciux1Dc1bFzYhp2sbHn/hrUCR3J5S
eovT0fGU44sdxchzvZhnH/Wj0NKaS9FnL49/XpzmE1a0qUBqYq4zGhIC8X2z
r7OHVrTi8zUT86//akd6Mkt+mI6kogVTXNdGru9A2rv8enJ3tKBEDY3G6Ilh
SHDlvaN2TkUoetVhY2PPPrSBns/0pucz79Pzma/p++A1fV8cpu+HwoIbBa8d
inDhfE599RUtuHCmd9fame2ovoezVM2/DJetDomftacTy2wul9Idq0cRtOdy
F+29bNFh910y/ZcaNB+luT/t8XxEezzLaY/nF5q/o/kXmnfaacdzrelEErfX
P/JllaOGrtUPf1nVo4CevL5FE7tRSCnfWPSeajRB4cE0jbwSxNm6rkXNoA3v
3z/dI7ijBR9OPG06xbEIOfoYr+U0jcRrLiq9r5OIxP22go68ZSzUKMvu13xC
+zaTaM+mEO3d/EbzizR/Ru9ftdD7Vy/p/atvu9n3ZxbQ+zOqbez7M1tdndzl
L9eg1sDIDiXbRnTHSNfi0/s2FEr/rsZms//O7Onf1+jJxo1imh9wrWP2EiPP
esxxZqt30cduNEb7Ot02ss/5rKHnfBQ9NkuQ99OvKH9f8v4ykZ8gRt5XfPR+
0Sb6/QTQ+0X9d6ONnQ+2/fffkG9pU1YtTkUtPtOKHOJaUfviSwlvitpQzBp/
52lS6ejVLV2lxc+aUcMR2QdXnrajbxLP6ji5i1CTU73KhNYWtC0hrvX+knY0
MPFKfkrF+P5O+baIxYpEnLE4M/S52i7ct9364MUEFtpXH/Q3amsi7mjrXZo9
4bv80UVWB4vGP2/V6b7pC903SdJ9E9/OzluhSX1Y01JN+4/jZvzll7Ptz9eF
qPzAKe3nZRhHK5aefBUpg4c/6SUYJbLQtwzvyF+1Cfj3jZ1zRNUM8CrrLHuZ
VNZ/8x16h/93voNZj237Zz3WZjmx4Ex0LH6oGy25oc8ap6qdq5cpZiEDu3bX
2zvj8Y1cK+7+yXq41PFWk1z2//n+zcX/9/t3o/s1RPdrt+h+7YvlhnPV5HzR
FjmekQsa+LTbzDyv0EL0LkZgaFpKH45U932YdN0ai57MSUt4Xog20x7PFbTH
8zjt8ZSjOQ/Nj9Lc8hbXpCWTPuKP9xpr78mewkoGkT65dSw0cXrdU2u399hj
/UYOMb5reGeBl6xDD+u/eROpf+ZNmHXpZ7oufUTXpeevOEa832yCd+ZP2VMh
Z4WniccKt4/vHz/HKb54tD0Ql+hURxsfVsEfGtQreoZY//0c7vzzc3hB95uu
dL95jO43tacfM7FP7cN5tqsCpUQuY7d+busB70JkwSqXlcrqwzXtPiJ1vPfx
1GsvtGUsC1Fia+bU7J5XqLvT41fequtIOFn45cD4/2+UVNCLQKVY5L/mMYfV
Age0zGmpgN74PlqBzrOcpPMs5+k8iw+9v3Sb3l9aS+8vPaff5wf6fR6n32cX
XYe00/3vNboOGX3jWXc+rw/f6g+7KdnmiZXkeXffVy9EJu827Rgt68M6VZ67
g0cCcNsxQ0OjzgL05sRyTl6jWHzXlu/prJoOPPlg3Bn/hmY09X10V2h7H35j
Iqe3eigSx35RvhNSkI+K9uifDBn/u7oSdJeX/J1ltnTB31fZusenDV33oIUL
zj5OFCxG5u5ewrtc+tCE63uSDoz/PlqmuNrB76f/BPxedtVf02vnSsb9lcPz
k/cW4i037yY0XO5Db+h9rSJz9jqqlllH0ftOdfS+0wN63+n1XnY/prASux/z
7zJ2P2beBnYP5n7ag5lEezDXvzmYvoo7CjkMSqqvehOEpF82jio3spCRFfv6
W+fAvv4O0OvvkWXCqW6FRXj3myvG8frZmE9x2RKuul4knrol4un1RvxO86j/
2LkqPEOxc3P1nvHPp9V8x+68asF/lp2cHa2Ujm//LSnZl9+Ozp3u2XPVpQJ/
Y7U86hj+hAXU4/VUDHtR9ga0Pn+hMuIenZ2ivqIP3Yic13DQpBTlBjeu3pWy
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
v9eZsIH9On+/sF+nkc4Lb6Tzwjx0XpiXPpfUpM8lu+hzyVP0cyaOfs48oJ8z
GbTvaa07u+8pnPY9ZdLP68Ud7M9vD/q57S0TYaTn24JsbW39XLY1ocFth08W
HWhAlnaOX5POtaAqJ0/n2Np69Gdq8cKKxCZkTnudGmivUz/tdbKieR/NG2l+
KEyv4sb8PmRU45MVPTMTHfdxSZWeVIRYxwNEz5b0ooLq2rBnB3LQzirF6yYf
ipDnVnbfU2MCu+9pzjC770k6TzjIVp2FnaOdbGVuheEzgeZVxx9noavXwmtm
K7Pw8RcWBenT3uOto05mL35loZiFFTFWS1g4fdHMzt6NMTjV8/rH4zo5iC+m
ymnuhvF88xrdl2ZRWFnkuIttQTY6V5s69xQ3C18oU59wL+MTfvpS52qDby6S
+L58XtNAH97H0aQ7MPMLTtS5duDmoTzUb3/SJTsgB51aIqs1snT899Y2RzFy
oA7d5+YfqXLOQfyD04vtf7Shd1V2LQYbW9E32tN0kvY0ldGepkGaH6V5F82f
qGlp3wrsw2dnP4m+ZZOE98ervBHbVIBejn3aei6zD8fzB7U8WoCxhexgeb1G
PooNqrt89fD4+m9WaqPgwhSslWLHV1cwvn/RSh7cJd6Hi+f/lNeemoYbXmge
NXpfhHxo79Iv2rv0nfYuMb1Hs2gP0nvaf1T7z33+M/R+/hn6vNiFPi/eSp8X
h9t3WJ4KasXzYtKOSPs2Y8nw+pUfV1Whc7QX6RftRZKkvUiXaT5M8yU0P0n7
kpxpX5Im7UvaTfNLNLekuaB0b4l7cz16qPk7sMquA1ndattxf6wS2T5bMH9t
WxXi2z/rjJVbG9Jvv8uVu6sJFdFepFHaixRIe5HKac6i+WOaN9E+o4W0z+gy
7TP6SPP2H+z8Nc0LvByuiIul4uJgxzt4aQ+2KxEMN8A1aK7BpKc/nWJx1plP
8VsWNuAUT5svJdbdqOhecKMOdzmej49m+3D24K3GEsnWz0pQaMYz46CxLrRu
NbfFJcV69G5nwgwfh1z0Ve2128ivLrT0sfls8421KCG1bPWcnUUo+J/zWjfp
/a4m2h8kTvuDTtH+oBqaz6Z5Mc17a/XKBmob0FNejbvW11tQSeEN8ZmNjSia
9gep0P4gJdofFE5zJZqb0Xw17RUK9WT3CnF7sHuF/Gl+gPYNNdO+oToFA54t
GdV42/Mn0151deOg3Eup39NzUf5Mk2Hp6Ap8SGvK10q3bux7p9f654pSlDVF
ftq2D42I/9GjTLX4ThTn5eA7MzYHTXR0sBvwa0K/2z9+Ov6sHRVq534/01KK
9Mb2cZO/8wN1EfB3f1z3+xXy957wsNY/83gMnhy9P/bdt17sca/kkVBzKfKi
89rRdF67mM5rn6DnqXrpearp9DzVQpoH0dyY5ldEyprMr9fga7GyYtcGg1Bo
jOq9Q/49yMNlY9NyyRr8/tTMZcIp4bilUwWdfN2DxPrOaizekoin8vUIbo1Y
i90qZh9sH9+PlG4q5Avd8QULFp5Y7SNhgn+sf5VSnsdCWZeWfRo564v7z17m
ygvUxefFrlSf/8NCWtvk+O5wZSOhN7bfrn0ORPb7i6V372GhSc2LyiJa+/AT
m5nGx54nYm+NwM0L6nL/O6/SSO8b3Kb3Dc7zpEgKbHuL56jPPKq5uxfPnCZt
cMa+Ek2lPTVHaE9NLu2p4aT5CZpH0PwKz/xneyakYpPN3r2uc/uw/48/O25o
FCOui+/6yfr1wXVlWM8+UZ9fQ9axEdrfX27clojnpDf4W0uWJ/wK+az8dfzn
sJn21KjQnppm2lPD7L8Wn//f/dcF6g7/og7xeeoPi1N3eB11iN2oP3yNusNP
qUNsQv3huofzzvKYlaNf6oW7WmTikdzUqapubr1I1DfKygs3ozvPItcYVVSg
3dNNDfPbWtGd3MM1rVrBaO/NXOW1Gd0os2uT1v2X9Sgd79zWU9aC8/c8vuw+
uxGLdLgsmqEy/j6mbnsrddwvUL999C27D2Uz7UOxpH0oLtRbyKPegh71Fn6/
/d/+lCv065/s2GGeurULvz6i6u33zRLLT7yxPGR/E7rwePY+jfNtONjV6nmW
tDe27i12XZLVhlIXN0QQ73H/8qR8b8H1+JlBaL1nx/jndTdLjuTC094Y8QUM
y+s0feMkDuR5dSuFRqdOXBVxqSn+dxJ+73MkITK5CVUZbilesakJ9wjtzWt4
WYF5N0yecFK+HQWKqu9dOP46c/y7eE0cTbHEo42bgtuTUbTRwpj54/k+uVFj
3auHsaZvV/b98ddn+jxe/tP3wUvzMJpn01xeS1D1yYxyrPHSJ+S3RgfuORlo
MVWzEanVf+mfbNSM/xoJuE/80YA5ru3bojXahKbR1wn553W29xSZfwpk4b9e
qoqSEU64YLLQSdeWZLTe3GVT1Xh+p6Yh3kn2FlYd1H88afz7fFhsocX9koXz
StPyM4OeYtWLGwzk65JRXkJy5+RXLKy+W+lV8FUfnB8Wm3GrLRmF7XzFezzG
Hn9/IG6u9ZaFm41aFhRIJaMD//RoPKE9Gtr/j/wS7ddYSvs1bGm/RtfuA85p
N6+gihuv1kkf+Iw8gyJMHpezUDHt0bCkPRrKtEfj67exXfcXFmIbsY/39Eva
cfqeFU47HjSjL7Tf4tI//Rfz60Inp4mV4tWmGjlCAx3YxclgNI2rEa2k/oPv
P/5DHH2da/+8zuAHFb6pF1m47IXpoOKa7/I9Ll7RnBoZqNlt8ZXJ47mgEd/f
qJL1mPd6TvaW8fxwvqY/13ietynA8Fk2F455KbRxxni+WWbQ+5ZXA0pRHZOy
2ZqPfqy2XG4s14WmSZqvefmIhXO2cJtyNIVhyVd4oX/5+M//edKTA+M/r5yt
W4ueTgnF56zs99u1jr+fad/EGO2bOED7Jk7+mOa8/kULmtOj5T5pcSPqLIv0
+nmhEZnRXgkO2isxjfZK9NWx+yAiaB/EEO2D+F1ZK6Bf0oxW8eQl+A6UoJFG
/rH84jbkRnsfvGnvgyXtfaii/QtttH9BlfYvXPqnV8WO/t5deQQqt90Iwvq7
dSx/PWdhp7ZLhX8eJ6MpXk5r5jsH4ijTSZann7Kw7tnedz3TUlDH9+lSpSoh
mO+SxN93D1m4QjT6Q8zdFBT9mWWuztWNLms0DLWM728OKqkrRwXn/7euWEjX
Dy50/RC42Nnw/fjv6ZkX+/f2ypb9+5K3sTqY5C6JlRcsNXs52oenrzD3yJ5Q
gF6NeJxonlqKvrnYyeqK9aL9EctPfplVgCbF1Ju67yxGu0t8lxrz9CHvhrMm
YSZpqOCRyuMrmaVoUda3o0f9elCR6x57pfAi5EAdfn7q8DtSh/8ezflo7kHz
XjpHv5fO0TfTOXpx6u17U29fmHr77v2yV8n7s8P4p9MuLlEs/GZUeXRvBrrs
tK2SvA9ZPHqfDrYmyy+d93YH9/i/1/gfb9+MevsK1Nu3ot7+DertW1Nvfw/1
9qe2sr39yxa8xcds+/CZFfIBOhdzcUCCUTfP1mxUGvlZV258v2B4VPtL65Ns
fOaWhYLgtSwkSH37Furbr6K+/Z2vqj/E6lPx8/aLKncu9OItP8MPOEWUodpT
/eus+RPxrJjTfybmtuDwPWdPOP9uR1ampwXVHrRh1pHWc+fmV+CYhFoDvk3N
iEObQ/W4ShNu6faC/6pyl5vYNI2vt2zf3LhVVI///pHdNDmnBVteVVnVYNSE
2ndtWzTKqsLzfiwKZHW0YU0s9nN9cSP6qjDVOcF8M56GRnM/qrJwqk9P2dSq
bOSPh3+IGDrhIbcZi5buZuFgDek7W6KzUaUgx1JVBUd8Vn7kT5oTCzelVTv/
zUtDi71wlZPebZz0LdBBmtWNDR0HNzyWqUc1xmrenrtL0LGBW3uHI3uRutCR
hr7hTHROcuEFVmE33q6elD7N9gAOGbGMWvC8Hl0O3M6bU9CNv0wymKXgbooD
5seMcryqR7X39xW8bOvAv7Z/51GIWoYWGM2tXSPcgrio3y5qxfbb+6nfzuTz
T/9vHs73vEM+uw/zHG/ONnFIxxwO06t8n2Yjn9NVl6dv68JpuraqQq7u2L5i
OuuaRtN/TvvzFrbTvp067UzO3/C/+c2dfSY5oS+xT5zoRuH8TnzS6o9tYUMT
6vw0mvioIRzLyBU42Mh34Gs/LxWP5rQgPOeM/oDXS8xzKHvojGEnnri7ITDR
qhn1Kx+ZRq7v9sc+/OXnU8QjNwz2P+v4P057DHXaK6jTzuQc1v+bf37OuXf6
+OvoRKrxc7dZY6/XE6eeHH+dFdRvX0T99tfUb2fyQ//kQi9Vh/aMX2eFDcPy
Dz66h98/PZR3eHydkEdd923UdY+grjuTH/knV3kb3x/EtQn/rvAVJz1Z2R3G
P0amJaOmJduU7Wxl8IXiGVtix6/PTmlaQkXTU9CX+cq/9PukcMOmq4vzxq/L
XNrRrVs3JKOhfvcpVTUmOPj6iNj08dc5mD4SsG9GMlLtnOuz55g9PvRgwSKn
MBb+meiR5jv7/38dZ/qwPv2VsQ+3u40DZppi4rVPVjF995wnBbV2r/9wa3YQ
Njn0+uT98Tzf/IXFMcVk5CsRE6/zgoVXnXtW+vHJCyy7anKSW+v/8d5/UO99
L/XemXymyf/m6cdmDFVxRGEdxRbt6Z7j30+e0Jpbdskojrruu6nrXveP627+
j+ueRnNbmj/4x3sXpt47L/XemVzsn1z13us+IzUWvhSr9uVQdDI+Z/k4RWV9
Cvrcbf3R8kMf3rj33scC6Swcj/gdfqZkoYzJmjxknuSm6QeYL3k+YgNzJWl/
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
owe/WyrdL86Zhhg/WvgfR5p7gyH40cuWzQFPWtnVGRzpN2MKqsRZFtz4tJC4
y913PoK3HBXUdqI8vguh35cyulMbkJrx7xNPx9dDu8MmYuL/HuU5Ch7wvkpf
cIDf/Rjo5LwhjYf3msIcueMGbpgff/dp6gDxzd3XbAHvPHLnanDOGceccc0Z
zzz2dZ0wcau3q3GDY/0wTrGc+NWM78x4z4zz7G5XCl7zl2d9n4nffGoR222W
6/FtJH0bYd/Y/RtT+bdA7wZfqosw6V3of4RlSQ9DiLfjLNK/oD7JUo70LjiM
nIceBlXNLuhfOCEmvYf0LniMukEPww7rZdC/8P7SVOgzKHvEIUT6DWR9JziS
XgP3PskLogr5eGmH46enT/uwkFCP5wnFVMT0GTD9BkyvAf/kuSLE8X8/IAau
v3XqGvD84+oX9hO3fXlF1CLiuM/eILWY+O2h6xXA6Rb1fgpud41GKHjdX/3+
gMd9ofE5+NyCX8PB5R5zaAMfea12InjJMhvjwUneXn+q7OqESmw5j89goL8I
L9l4asaulm70afUncJCFf04CF7k+ohc85N1XNKDv3GLmIQX91zuQs6EO9J4n
+b+/fti0C0+fcFjeaf5LHGz/ev8iribUVpcMPehvj8dCL3rCrDHoQ6++3Gcz
9XYnDvHxiD7Kn4DDPAcL1PqbkLhcAszDs/Q511iS+XiveJiLz9GZoELmVVgz
3neT+ZXPyzQ1ydxKyIxe6FM/3TpPnfSre8Q7QK/6StF9ML99WjKliMxzz3ff
AnPcC9I1DhE3Oer4FHCUj6ix2omffHZ23DHiFxvuewOecaqjGzjGi9XGBoj7
rFidnk0c6E0bZlcQ/1mkgqWn+8kIy00t4yXussvdMPCWL+201DwtfxU/adGX
If7xDgFtcI+vpbcLRlXZozObxB4Qn3iBfNZ74hIzfSpMvwrTq8K40owzzfjS
rEF3JeINrb0pCf6Qh2vUK+IOXdlz+w5xdlaeTOog7s7Ujn0viLfDuCsVdH7q
FZ2fqgpbMkzmfp+sy3hH5oCjOE4uIPO/zYpfmsl8r9+UYzDvy/F1Csz5rqTr
aje6rs6n6+q29R/B/z2nzQce8CJbM3CAHehzgc/0ucBu+lzA/9oL6JUP4954
hvTMF/xJiyP98p4Tb0GvvOlN472kZ975xH3oly8IWAqefkPnU1vi67t9XxRJ
XP1czYb0ICVuPDwiC66278hyZ+Jp6wmy11GSdB3lR9dRq8K2xRLnumYVN7jX
3CeMwLs+SNdLU+l6yY2ul1zrOcChjhdrA5e6xsX3HfGoc+i6qJeuiyZuZ6+L
Sk0vJhA/uiajCDzp10fegiN9ka6XzOl6yYeul6b6V08kvRF3Ngg/IT0SSoPs
/ojt9Do+l17Htel1vPUsv5PJzzH5G5zZ4IKncc0BDzxqjkIy8bgrxNk+94Zv
bJfbMPOIGXGxV9nIg5Ottu4W+NiMW8041oxfrbfl4AzwqaXLwas+4LETnGrG
lWacacaXHrmxO16/Ph2b3yyR0347fv2qW/OQyywXoQfD7cR3nnKxB7xnIfHt
4DxL74x6R3znwvtK4D1bvFQH59nn3MTVxHNHLQ3gu7fmbAXX/a7UGfDoBfkl
waf3kygFl95km7g+8axVB6XBtz6kPwNca/VmG3D829SzwfWXlOMFz79Uc5kE
cYGXeN7N7gozxYG7RjyJDxwiNQnc3oQ4e3B86zqywe91qagHb/fXHPP4ZF19
JN4RGknc3QH/X1HEsR1Nu9HzUAghzbRm8Gw13UXBme3wiyvqfLYNc4a3gjcb
K/0L3OEFq62yiUMskrUS/OECTvtK4gK/ikgEJ3ivk24N8YFdJ3iB52tZUhVL
fN9N1zaB6+t8zo/t5J468PSl9xnkfqxbl3i5JW5x4NjucOfTGjh3GjvJTQDP
trruDrjGvfHq5sQ5FjLE4Btr0OcXDvT5xWP6/GKJ8fMVxCOO03oPPrG0n1QN
cYlP0ftsE+l9tgF6n21r/DbwhZVT+oLBG04dBWdY75/7bIr0PpvGW2PwfNtn
23x3dryDvHX8wfXdR++bfaX3zQTpfbOzJSPg8L4yzlMjLm+WeT54vI//uZ/G
eLxm+evAL27L63chnrHhXok24hhzDgiMEhfYbVfYXOIEV/VuLyQ+8LoLR8Dt
jWqPsCSO7yNhJfB7g859Bdc47OIOcI4tzgZagG/84BF4vrfdz+YT3/fLxU3g
+jLeMeMfM+6x/VJDcH671l5cTNzflymLwPuNos9/EX3+q0yf/z6lz3896PNf
Cfr8l58+/71Dn/8eoM9/40aWBDdZHkOG0gYFF0r7UONsm07/hYVoeO4z1lE7
d6RdLn7r8nj+el5+dIRQIdLMUk1yk3uDip/Xm53N70NTZkzilxwsQHGv31a7
Lk1E5Uv3yJx51YcOy+SvDvEuQIaHUsEjfuG10Yr4xH9QMLjEhnOjb608kISy
T3wU6nLpQ1+vfHgg9bsA+VRz9Dp9ykX3w5W6VC73IlGL53V/j5agn4etjIk7
vNgvW6XQXAvd+6R0gPjD7xzzHhLfds875FL6Vxa1iSwH57bT3uYn8Yjf57nq
EJ94UzinDXGJ1yg0gke8LUF1YrBtMMJDnh7EJT42IQo83FalRBHi486THwIX
l/FwGR+XcXEZT5lxkhgfie87+3oqSa+n9+n1lPFzGU+XcXS9qPNbS93fIOr9
ds6YPoe4t2p7bmoRB3fTl1rwb3+ofJpLvGP+IDvwj32f8NYT9/g3zXloHkDz
Ouob1P/jFZ9581WJ+FyP0264EK8rb0mmA3G6gmleQfNzNLeqLgfPd4meFfi+
q9ZLgetrQXNhmmvR3CF1Oji87kPHO4nLG7nZFTxeX5o70nw9zWWy2tqIB+1/
by340OjHBXChZZ+3hRAPOsX/MPjQBfwfvIgLPYMzfgPxnT+eigbvuVnsCTjP
ZwVqwVnm+OzzibjLF+dngLcc1N/GdoeDV7GIQ1yduu0S8YcNN7g1EHf4aXrE
NeIQF5evlCf+sHlBZgfx5hYaGYM/t0FnArhzVpzxOsTnXbY7BbzetydHwell
vFTGT2Xc1Mjk4VnES42R/g5+6lX5BHBTGY+Y8YkZl5jxiBmfmHGJ/Uo4sog7
HPxKqYc4xA/meh0m/nAEzZNo7kpzxgWe/I8PzLjAjBPM+MDXac44wYwPzHi1
jF/LuLWMDxxG/dr51K395ccCB9b/x9AIcWGX1Sd3Ew82YODvMeLASoqnjBAX
dvtfXvBgF9NzIBPpOZBL9BzIjwE18F7X7BgB/7XyiDy4r518GeC9TrPVKiL+
K0/NYRnivv6lbmkIdUwZv5RxSxnHlPFLGVeXcXYZXzdjDft5scx+9vPiWfR5
Me/g8Bjxi79u2AOecbJICDjGjC/MeMOMM8x40IwPzbjQjLPMuMuMt8w4yIyL
zHjI2fScqis9p1o9zD6nyriujPPK+K68Qk4PiDM7eDYG3Nl5aAd4sw7FBz4T
Z9bR/aAYcWdzn84Hb5Zxchk3l/FyGSeXcXMZL/f8ZP63xNFTNtn5iLh6GzI6
wNNzpbkBzefQnHFsGdeW8WwZx5ZxbRnPlnGcGdeZ8ZwZl5lxmhmfOfKgyULi
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
     "]], {}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{214.53611059078958`, 163.77842386928418`},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{{0, 2}, {0, 2}, {-0.9999859104445722, 1.0057323588036942`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{0.667195547689636, -2.820369645784291, 1.7465294621854284`},
  ViewVertical->{-0.1188217951177195, 0.5022836039120376, 
   0.8565001822802712}]], "Output",
 CellChangeTimes->{3.9400613796221027`*^9},
 CellLabel->"Out[622]=",
 CellID->948426882,ExpressionUUID->"abab9ebb-05b0-47a0-b86c-87a89044dc88"]
}, Open  ]],

Cell["\<\
We can see how well our interpolation approximates the original function\
\>", "Text",
 CellChangeTimes->{3.94006139303547*^9},
 CellID->1586977740,ExpressionUUID->"dca09970-c48c-42d2-9488-5f34c47fd64b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"newintfun", "[", 
     RowBox[{"x", ",", "y"}], "]"}], "-", 
    RowBox[{"f", "[", 
     RowBox[{"x", ",", "y"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940061397050027*^9, 3.940061415093417*^9}},
 CellLabel->"In[624]:=",
 CellID->1614995233,ExpressionUUID->"be2421cb-6d9b-48db-932e-147d69faf2cc"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJyFnHlcTun//29JlK2I7GO5kT07oVOy3SEpJWsp6xCNLIkhy1g+DMmMbew7
w9hDmooxmBljzRqmIU0SorKF+zfT9X69Dvfj8X38Pn98etzPuZyu8+zc17nO
+3pdp1bIBN8RVgaDoWExg6Hovz83B/54bGHjuW74WXVbyb57VxZN/LKp25q6
ptMauOFWxf9t7lrgtjfzttlouqrztOue5ZpYacZ4x5bHwlJ13m722NTTRu3i
r/UPG00PdG6ft9ZleUPtf01/vRCWmqHzTb6vb/zloHVbFZIRF/ZE5zn9isTH
1koqYvjvfzk6NxiinWu9/TnoyMUlRtNLnbv2O1vCtX/Sz6PXVzbF5n1y/Esj
b1t3SapafdyOsNRXOm/h7q75+2jTrri2jDW+1bn5hf/IdqO0m9/YJseFFeh8
YGDDqpEDtdaut3qlxn3QefjeR6nl/JOWP9tx22w2f9rPZxGVxtAvvMInPuOn
S6evdj3IDNbgme0j8y4vOOJIz+TR8b88rlA0CZ7Jg797FHO7Ij3r7Y/X/nVa
rhs8k/vcK9nLozY96+1XjBhufuMGz+QVd0+duimAnsmfupw58LIzPZP/lLj7
zUrdM/nFNVM7N9E9kz9vOSW+qe6ZvMegH5v01D2TG5y9rt8/Rc/wh+sT7cjF
Jz6TVzr3+4iGnvRM3m517B/7G/J6Jq9Z9MYXberRM3n0GsefDpbh9az3Z6Dn
mBX69UxuyO9ZvdVTeib/X0Jp60e6Z/LjwSvPRnrSM/kGx8t/TdU9k9+Zacr7
xDN5seX7XrnrnvXzbRHw0kf3rPezxKGgPkfpGZ7wfYdn8mB1feLfk7srn/hM
PuWP8eVcPemZPCe74rHK7vRMbt+x4ZcxjemZPC1339i69vRMnrzc9G1iKQ2e
yXvbtj48SfdMvnTtfduWumfyifamLRG6Z/JFD6Pci+ueyfPfLTh3cQA9kzf1
utI6W/dMbkgwTv7qJj3DB8ZPeCaX7zs8k8v1ieOSi098Jo/plhDcz5OeySuN
XL95cSt6JjcYHpeKHuMGz3p/oqzGFalAz+SD118b8s6fnskzax3tXk73TO78
olOLibpn8hfJba6cGknP5D2bTCv5JJCeyX96MOnWyP70rPd/9eh9ozPoGedt
iFb3I3jWuRo/4Vnn6vsOz+RyfeL3kYtPfCY3VDl/cr+RnsmTy5hePnHg9az/
3vzfg9/nctwgvzc54PIPumfyDQOzutjqnsmtVzsv/WR8Jr/bfIvmo3smPxia
vLdrf3omH1d95S+DB9Kzfl7W1fbYvKBnnJ/B4F94f4dncrkfwTO5jJ/wrHP1
fYdn/fiGrP+uT/SDXHzis84DqtrbNKNnvT+Vp1sl10mCZ3L7vZsiauvjBrlX
02+fH+1Kz+SX+/pOdO5Dz+QlHzbqaxxBz+RuI54bfPrRM3mPenVPfxhKz/r5
lnq7o09Jzj9wHv/9/3/zJXgml/s7POvt8wrvR/BMLuMnPJPL9x2e9eOr6xP9
09srn/j8aT//HfsS4Jn8UO1uAxO86Zm8UufRf5ZtTc/k1Yodtj3vR8/k8+tc
LLVzOD2T14032zzzpmdyl4Dvr98JpWe9n9HlPJuH83pGfzH/hGdymS/BM7nc
3+GZ3Fvdj+CZfIgaP+GZ/L76vsMzuVyf6Df5AeUTn8nb5HVumqOPG+Th14tV
XOtBz3r/p/+dPkf3TP6w6/2Bl0LpmdyQ/1OApxc9kz/PWfPNvZH0TB5t19zr
Yylez+gX5vPwTC7zT3gmP6bmS/BMvkzd3+GZXO5H8Ewu4yc8k/dQ33d4Jpfr
E+dDLj7xmdxwJKpD2J9u8Ez+oMeb4Pr96Zl8xKzSXRsNo2dyxyIfNw9qTs/k
ZfcsiPQZR8/67x3nO7FPZiKfA+X34/kInsllPg/P5DL/hGfySWq+BM/kDdX9
HZ7J5X4Ez+QyfsIzuXzf4Zl8ibo+cZ7k4hOfyY80dBq9MoSewZMzLzwctVb3
zPbJjs36rSuTBM/g0SfcX87qGk7PbB9Z8fiHH1snwTN+D5434Zn8kno+gmfy
22o+D8/k/1PzT3gml/kSPJPL/R2eye3U/QieyWX8hGfydPV9h2fwaLk+cf7g
8InPPM7V7BOmWv70TO78TVzG0F70zOOvvhpaY/JX9Axes+1fc75Z4knPOJ5h
sHp+h2fyp+p5E57JbdTzETyT56r5PDyTe6v5JzyT71fzJXgml/s7PJPXV/cj
eCa3UuMnPJPbq+87PJPL9Qkv5OITn3U/PWNs2wTTM/mpMt9f2zuensmPfLR6
9rotPePfGSaqegg8k3dTz+/wTC7Pm/BMLs9H8Ewu83l4Jpf5JzyTy3wJnsmb
q/s7PJPL/QieyWX8hGdy+b7DMziuT/hie/GJz2yfV6fPZeNoemb7mIyQN/ON
vA/iv/97Ms//qy/Bs85VPQSeP2lf+PwOzzpXz5vwrHP1fATP5NFqPg/Pens1
/4Rnnav5Ejzrx1H3d3jW26v7ETyTy/gJz+D4vsMz2x9Q1yc8kotPfP7Ej+Oo
n/0SH52wuVDPdEjDT58HJ+70txvI6xzcEN/w1YecN4mh32krwlI/sr3h+KOA
ubVDeVxyw6TwCl+f5vHx79Aexyd/8ejKBcdQtiOPXDrjUnYfftbPq57dqMT2
STg+65AW/SSX46O97iGysJ/4zN8rx79zeVXzBqYtGn7mDRg507nVgKQoj4i4
uDAzebT/3mtznSL4Gf/dEKA4PpPnLGm/vkIresa/c+8WUXDqlRWPj/8eXX3L
xqPl9ePr/d8b+DrtIvvP4x+ZnPiPbS/2H8dx76qOj/b47wbDgcLjoB2Og9+L
z/y9cvxSURNKFTEk8z4zu83iqc22D9G8W5WMMBgu6/4966TPtitCjvYTnUsM
v3S7s7byx/tBBsMttn+/sfLhYoOrk6O9u0/F8hv+vOs2wWFAPYMhje3NW12L
2uypr4Gjfbo2vni79e/cyv95uprBkM72NiXa7Y/Lq6OBo71NiUS7EVXttX8b
lTcYMtl+sMH7oX3USzdwtD+uHejU5Z/8xEFdVtoaDNlsXz5zSM+zyTWSzIX/
e/5JnXxwYT0f7XGcSgdWvjA1/ILtwWNmqefWq/daFZjNL3ic3G5V4s/59ksC
R/uIBrNvZCb5JW07OeaV2ZzL9g7Xu4bv3ORFjvZXOr71dp9vSpqyZsMLszmf
7feemVd++pX2Gjja5xjaVRjj2UHrMfVattn8mu0znMq9KhYaRI72GcZpFxIj
g7Qq/iUyzWZ93cHr8s7Sv04LJUf7tfceR5caEaplt+j00GzW1yNG9/npQnzD
3uRon9l5U2r0pl5aov3E+2azvk5hE96+9Lsy7ZPA0X5Vxx9K7Nnky+uW9d7u
5QvOuZfn9Qk+60n7Jn/bufE6BJ/7MD3/ZFwbXm+sK+ztfSR/ojOvK/BigQfa
zjhdk9cV+AHDMJcR5x654XoAr9Bqf3L93vr1A+5sVvUK/N3BIwoOzqtYpB//
vuAOl3a8rljai39f/feOXVVluSv/XuAZzouap4/R/17grtOinmWM1v8u4Jlj
3W+/Oa7757wyeHxMgx26Z9yH7dNsAwq6PU6EZ3DzojiHqKu16Rn867/etf7W
thM9s07T8u7p9N0e9AxuM2HFmXbT29Mzf2/MswZbRtXR4Bm8dky7c3t2l6Bn
8FtJqv4Dz+ArltfwGLpI/36BOyyPLLJ5k/49AndpcbTPxXjdM3jGqbEbHTx0
z+BrPXvH9e6gewbPDPQLtU/uSc/sp8+MzORGfvSMeY355obne7ZU4fXMOnB6
qw+/za1Dz+AfT51P8fJqR888TtKaxyWP6Z7Bbb4eOv/6PY2ewcud7zXu1pWm
9Ay+TTtbOsHpkRs8g78MUvU0eAY/fNLoUdZB9wxuX23XwXQv3TP4gclFrp27
pHsGz5h3wj/r3VB6Bo93fJHZ6lEIPYNnrfEtMO4z0TP4wBbZrqGT+tEz5okf
99u9m/rurRs8sw7s8nvL6ZNs6Zntn/rtzYo30jO4uWznAU/GNKdn8KL709u2
O+5Cz+BVfB5WXr+kCj2DV45smFurehlez+CnZ6n6JDyDf7fDo2rgfV96Brd/
9PFOqqPuGdyl/PGjE5rr4z945r2v4+b/oHsGj7/zVYN2fXTP4E+vzfevFd+V
nsHXJ/S8uLNEf3pmvbfbkt+nNaqdBM/kM6bn/51YKwmewa2+66i97OqUBM/g
xTcF7O1Q25AEz+CZ5iVjcm+/S4Rn8OwJU858yK2WBM/gNuX6jPJe34SewUtI
/Rye+XyWO6dN3X369Qy+LKld1L4BPekZvPGSop2q7mlDz+znzKnJYc8G0zP4
4gc+mYeKDaNn8LSJtrvdX3aiZ/A6EQvbx1sNomfWp+0Tjkz6K5/Xs17HTqsw
vOULN3gG//i6cumCw9a8nsk3bvYbcMCB1zO4naF+g8pFyvB6Bj+08d2QhDlv
OI8CL9khrpFVj1r0/Gn9PNomIQGewScMGfrhYro+z2H97Enn5sUbavQMPuBj
+3UVznWhZ/Cn5XfsdFisX89cj/Le2Per9UH0DH5+2I9+X/9chZ7Bp2wfeGNK
0DB6xnNhdNTMzbsPB/B6Zh14X9vMtGsBvJ7Zfl6v+Vc2BPB6Jvf3m7ewbQCv
Z/Dgb386k3nDPwme2f7Log2m/ezP6xnc+sSby1kmf3oGt5X6OTyDd7zzusaz
6v70DO7Q7M72nY160DN4v5A9N6//5kHP4M92Fu3zZ8wQega/03P7jSv7h9Az
+JuI344aAytzXgf+rufaU/65ofSM5+zgX+bdynf0pGfw6DMptTz6e9Iz68P3
52116e1Jz2zf4f5vu2p70jO4e2On3RllPOkZfNbCsismHPGkZ/D5m0pNbOrT
hZ7By0r9HJ7BZzzcUPXyMXd6Bm/ab4TfRY9a9Ax+t/ruxp3f96Jn8FfXty7K
T9THDXC3wP3R+yr2p2fwgh1jzle92JWewZOqmIdH/DaanlkHvr90xqmlPpxv
sA5ce5bNjlk+vA+yzlz00KD2k304brD9pWjPrIk+HDfY/uTzoyn/Hgee2b5T
QuYbfx/eB8Fnjh/ueriKjwbP4B+qqvo5PPM4iXunL1rsp8Ezj7Pk+5cebgF8
DgI/etQ+6myW/rwDPuzi9A+jKoXQM3hKeou0xtv96Rk8vvWgJw0++NAzc1sb
rtzvc3kcPbM+fH147o6mo+iZ9eGVxa6fazKKnsE3nRuS+UuFUfTM9p2u3lqY
PpKeWU82ldzoumokPYPPrr/BukuxkfTM41RutGmX4wh6tqyfwzO4+2qPan2z
QukZvHaxg7O9UobRM/jCmxOuxYcPo2fwC31/SS7VSL+ewZc0y+5ecolGz+Ce
C7pkHqk0mJ7B4+edGzigwQR6Rl0tLer4koy2A+kZPDnpxMZRHQfSM3hN1/Jt
1rwdQM/g0TW/i348eAA9gw879Hdu8d6B9Ax+qpzxgsfCAHoGP9xuksffR/zo
GdxG6ufwDL51R+kTe2950TO4U++C68PrudIzeOdqPX9aHWlPz+BXI6a8/bGH
WxI8g4+v1blrMxv/JHgGd2k9wyHhWig9M7fyMPJOpbZj6Zl14LHbJ9bp4s/x
mXz6jEaz+/hzfAZPbl5r7vuD/hyfWTceX7HOgt36fRBcOxq42X5uIMdn8I9b
/mpf9JtBHJ/BN3zzZEuQXTDHZ/APsj4Oz+Buq4asafb1SI7P4O/PdrhwMvdL
js/g9/YeqFU6f3wSPIMn7bJt1OdeOD2DzwkN2LN2dzg9g/9T+rtfrtqF0TN4
9q5p/ZxfD6fnT+q9bY8uO8h5nc6/+/Jl1nHO68A/ztrebOCOy6yzkZujPhy2
/5v1NPD3QSGvxp7NYn0MPCdokcO1ce9Y3wAvu6tq06MZxXk9sz9GVT+HZx6n
fxXz3CBbXs/gxw0RGaO/ue4Gz+B/rbdLub2rET2DO0RkDZ0Xol/P4DM8B5Xz
iXOnZ/Cew888qXe1KX3iZ6vQgmKJd3w5Pgxc7GE+HnZSiz4XmJ/UwYHjww+1
tz2akBr373PE8qJNItIT4fOu1KGtjtR9fsWpJscH1y1Xh58M+1Er4TJtQ8S8
Whwf4qVOG+ze6WJ2tRf0OfnjifdNTLGaUwnnoN/fVOd1O1TqXd9Z1A+tpP8R
C7p8P/qC/jzSRfp/9aL3qxLX9Oe+udL/ve/cf/h9sv58fUb6n5FxwulBf72O
YSf9d32f9sRqnF7H+J/0f/TDG4+Xl+lNjzOXTjwRa7yiJW+s97DOm3L0iZ8t
ls037O/Rhz47Huk+4G7cn9rMtxcOHV+mP0ffM0deOBb2h5Y3y3HE9nD9uePr
nnu0FcbfNKt5A1r2tHWkzxqrUg+NTz2rxQf9uHfm4jw+dyQ+KFXPK/aMVjFy
xcZJX+v12B1S13KxqL9FSv9zm169/bBA99lD+u9QYf3efyfW9Oki/c+5VSZ/
T77u84r0P8Nl6IbwabrPr6T/8X17/jH1k/pbOel/5u+t5m9Yr9ffjkj/b3q/
jKq+Wa+/5Qftyzaa7mjWB2K+cUx9z/rb2WLddsQab2uGJPtdY9bWo2f8TL5q
Oti8lSc9j+w7tfL41Bva+w+xBbt/bUPPbV6XvZYad137OG310YJVzvRss37X
ElNsitY2+GV45UcfeN3e6OzR7VjYNa1qdtdhZV9Vo+caUtc6bVF/y5H+l69X
4dylDbrnZOn/8mZXw367pXuOkf4fiE37NXq+7jlY+p9x82mIi6fu2UX67xow
3mmmn+7ZIP1/HH6kav+xuucr0v9VA87dfbRV93ysUt6y1Li/NXOt01srNKvM
63jj2ORxsca/tY+h3y6c+KwG/S5IXGIyxaZpH48ZS1St1Z6e8dNQdNH37bt7
0vNP571sxqfe16wn/zR1dkoHep45/mFSatw9rdSBtI1Hx9Xl/MHbccY0U+xd
zdnlwoRaRYrT8x9S18q0qL8dkf4frpG22K+G7nmd9H+549CQsgt1z/Ok/y5v
M1q2OaZ7Hif9z2hgGrSlQH+O3iX9jz88P2Ktve45UvqfXWmBQ5KVXuc0Sf8D
T5994thAr3NGzF6+22jK0N4n7Vly/89i9DwoZcj81LhHmmFXjdnF2uvjsGf9
hqGxxkea+egOr6VNG9Jvo6hXmik2XbN6v/HRgiBXesZPO8d7NcfZdaTngi+W
vY0Le6hV7PW6dt6KxvT8cOKgG2GpD7TdZuObTf5nWOdcIHWtXIv6W7j0f0Xj
LRF+iXr9LVD6H7Mtdk3tLrpnd+n/gR+2rN/XUK+/OUv/Myc0PBW4SPdsL/1P
7d6zXsuVev3tjfQ/x/Xol81a9KDnNOn/wIB2DlFf6XXOZllNfwlLzfrXz63W
XnHVOU9z6lSw0WjK0szn7sbOrluZ8zTzsnMzUuMeaznLxm/1CnzB+90/D1YM
iDU+/vf6tGtkFVuNfi+1Dm5jis3U7O+UWtXLtx494+dA99cd69iWpeeNqW+e
x4X9o+V1OLxh0gZHXs+eUtd62+fz+ltj6X/L8s3f1+unX8+O0v8yO6pfH1RR
r7+9l/636F277Q8/tqPndOl/Vqlm7qsn6PWKC9L/xnU7v6x/Sq+/HZH+vx5h
VWbLGE96Xif933AoeEZqfgA9P/G9cDcu7LlW091l6OsWVzhPu7Z99Ymw1Gea
dU2taullbxPh+eSb4SuNpmdapfAqTUteyKHnrT2bR6TGPdWSzZV9i4Q/5Dxt
8YYPfWKNT7WMpO/cv6pyn/O0iBe/NTbFZmuvkvrnvfJx4nwYPx2eP3HyrtuI
nvGzsLxlp9ffMqX/zeu1dbg0pyc9X5b+V7wy/ma9153p+bj03774da+r37vT
8ybpf9bbYyENvtKf7xZK/0cMHBVatHowPYdL/20Gzd3a37U1PQdK/x/k/3Wu
SA29znlN+ush8x947l78hzGpcS8087V/tv9Sri+v55MuRW7Fhb3Qog4PuOGQ
0ZPPHS4DR3WLNb7QXl30GTPGsSufO7bN/fNIWGqO9mBf782zanXic0elfS3r
mGJztNvfOjttbNGanpfcWLPcaMrR0n8N3enk56LP36Su9Xz/5/U3/HQ88H2U
c4tP6snS/4XJmRV2PuhCz/HS/9vFvVfuDNfrnE2l/8/Czx8LOqxfz1uk/+v6
R3UO/3koPVeU/kf3/XHKY+2RG+v20v8b6bE/F/jodc7msUUXGk152l/3tHt3
Q7rR83bpr4ejmhfBc+VHl4anxuVqDw3jW+9u1Juel5Zpcy0uLFez6by27M0P
fejZqt06j1hjrnamf8uYtt596XnKMKsDYakvtW+azWyx9okvPWf9b3QNU+xL
7bcNt1ZttelHzwlS12psUX9zkf6XqPTXt0PdPOkZP9s5J4yxO9OanitJ/73t
G+WF9+9Gz0uk/7kNOs08lj2Qng3S/9OTd/56PnQgPU+S/l9el17ieYfmfL7L
lP6fqPEh5b61/ny3rNtVR1PsK21OQsv3qxZ48T5YNLzdXKPplZZ4sNyCOq89
eR+cKv09slrNi+A5+7R1cGpcvpayaJnr0ZBGHJ+Ds7+8GBeWr6V1WrvzxP4c
jhspFa50jDXma4F2ieMG5zag5x5a2x/DUvM0z/ClQ4ZW6UjPVaSulW1Rf1sq
/T9ka3fH9ksf+rWS/t949frl4n7erFfg59aQaqvne/Sn5yzpf9yAF0GVmurX
81Dpf22Dbz+PKnr97ar0P9POo+7WEl703E36X63+92GVq4+h56fvNm0OS32j
ua/eU+1ZrxH0PMxY3N4U+0aLfhPQK2ByKD1f7x0202h6o90vf9XTavowevaS
/r5rqOZF8Jy4qf2g1LjXWtsvBtdcVnQQ738tft/4W1zYay1/QWir8kX7c1ze
kVusXazxtTZx75K2k//w5bgcKXWtN998Xn/Llv67TttXPWd5CD0HS//bFKy/
sGnzUPpNkf7vmJra/uz+ofSMn2Wq18orVV/3nCD939xowdo2+33o2UX6f9Tx
6eDzjX3peZv0f6pbCUfrimH03HP/hKaxxgLti+ePE97HDabnpFvX14WlvtMM
e992Gtg9iJ5bWnUsaYp9p/X9UPrV7VPB9Lyr0ZZpRtM7bU6ln6uGJg6j52rS
30kyL4LnmJnjA1Lj3mq/loq92axbKD1b70o5Exf2VjNPG+7WdmooPd/AvjeL
+puX9D+8nGPN9jv16zlR+t/Ua/76Y3296LmF9P9Nj9FeF5b2oN8d0v8bnfqP
G1ysKz3jp88/x2aNP2NPz0ul/736vPU2vBtAz1bS/2vfJGSkZI+n592hbifj
wj5o87aaai3a7s3xufq32xrEGj9oM4Y071bmQWeOz8vj7FaHpb7XLl9LKt3g
TlOOzzZp4Tam2PfaAefTqyO18vQcZXtzktH0XutS69feU5Pb0PMz6e/+EDUv
gueQwVv7psYVaJ0du91aucFEz61Q17Kov+2S/t80H/lpuF0ox+dq0n/bDpff
GVeH6s+D0v8RdzIDvpsfyrqQtfT/wSmXUv0PDWNdKFL6X25fyvlufwWxLoSf
TnOKuJ9sHkLPwdL/h1V3Nm/005f0bFOpdI/UuP9ygPemZDXz5PWMPJ3V2e/r
tOjQmp6ffXnbGGs0a3YzJ9y9lKjRc4jkEu0+Rk4ZnqTPN27+vL2IKfajZt/r
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
uJnY
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1:eJw1mXngTVX3xu89e59QCiHzTIY0GKIUMqUyhaIXjYQyJ2k0ZMicprdoLg2S
KCIUDSopKiGaNEikwZTQ4P08v+f8/ljW57ude+65Z++91rPWrnLNkC6Dk1wu
dz//BPzL+GL4rflcrh78H7gLfAZ8GdwZrgpfBLeCq8AXwi3hY+EG8CnwiXAT
uAFcHD4HbggfBzeE68K14S7wRXBl+AK4BVwUPguuBxeDz4brw7XgzvCFcCG4
PlwHLgjXg2vD2/UdcBH8j1hhuBj+Bz0ffDz+y7x/6z/YV3DEH8XKcp9W+HMY
242VgBP8Dux4uDj+d/yP2HbsF/4uiY/4nXm/t7+xn/Wb8Tn8Lr0L8F+sDPdv
iW/CWGm4BXw2fDE8GR4D3w2vgVfBk+A34dfgGfD78Ep4IrwSXgLfBa+Cl8IT
4DfgV+Hp8HvwG/Bk+C14GdwPfhx+EJ4Gvwu/Dl8HPwnPgm+BX4bnwv3hJ+CH
4C8wrZW/sFHAUvxLjI2GX4MXwBfCY+Fb4JN4yVfDZ2kdYffAkxnvDE+Bx8KX
wTPhSfAd8BJ4PtwCvhUeBl8JPwTfDY+Fl2udwg8wcefpd/I9Y/DLGF/I+FXw
LHgmfDU8G74HvhleCD8P/6rngwvgt2EF4BR/EdfcAA+A28HD4YFwe/hGeBA8
AL4PngYPhO+Hp8OD4AfgGfBUeBH8IjwbfhteAXeAR8CD4XvhFfCibI70zl+A
p8CvwPPgjvBN8JDs3Q6Dr4c7wSPhoXBX+Hb4RrgLfBs8HL4EvgMeAfeGp8Hj
4T7wdHiC3n/0GriTd9iK8YFwH8ZbwgPg3nBbeCjcH24ND4Kvhc+Hh8D98p6H
/vDVcBt4MNwXnpWtveXwcPgRxRr4RvhR+AHtP7guXEPrC64DV9MehU+Bq8N/
YzXgCnmvJ62r/8BHsGpwuXzu/xZnLVwVeC9WBj4B/w12DBzwea6pDVeFv1cc
gY/D79GehAvjv1NMgQvhv8ZSbWX8Aaw8XAK/DysLF8Xfyj2fgh+G74TnwU9n
+0h7ajZ8A/wwfB88Dn4RngPvx8rBJ+JvY/xp+BF4JvwB/Cb8F1YdLo+/nfE5
8KPwH1gF+CT8IayKYgz+MFZV8Qx/DddPhcfBCvTPwY/BI+EF8HPaF9FzMJ81
MDL6vb8I3xQ9H/PgPXAzuDJ+L9YcroL/DTsXroj/HWsKV8IfiI5r1fH7sQvg
avh90Xu7Kv5X7By4Av4XrAlcHn8Q6w6fjP8L66t1gN+G1YGL4q+MnqcHeLbL
o+f4fviq6Hn9L9w7OgfMUhyKzgEPwrdE54+X4F7Rc3wf3CM6N9wDb4LLcc0x
+J7ReeJexnfDZydZTIuOiTMZPw0bzfv8CP93dJyti/8nOoaeij8SHY/q4Hdg
DeBS+O3Y6XBJPS9WHz5Jz4WdDJ+g34fVhIvoWbAa8PH6TdhpcAm9D6wufKIS
Got2KHyG3gd2KlwcfxQbAp+O/xY7BS6G/zd6fZym/49eW8/wWzbD5RkvgP8J
awiXxh+Kjsu18D9jjeFy+D+jY3pN/OHoWFxb94uO+zXwG7FScIrfhTWCy+pd
YtXg4/CfYxXggvid2JlwGfxWrBJ8rOYKqw4Xxm/BKsKF8DdpbnkFz/Ibhkbv
h2f5LTdE76Xng3/TJVzTPu/PdYM75v2dl8IdlB/gTvD5eedraY8L8n7GXnDX
vN9fb7hn3vNzFdw972fsDnfKW7coXl2W9/z0gXvl/eyXw5fkPT/XwpfD/2KN
4NPwv/CsReFXEq+RfvCVec95X/iKvOd5LvxE3nP7PPw4PAx+AX4y73V0JdwN
/l3PClfKW7cobpRWzOS7NijP4n/i78pwKfxB7HT45CzOSGvVwv+JnQHXzHs9
XgFfmvfcXgy3hUvCHeE2ikXR+uwh7t8nWlfNhvtGa6ZH4X7R2usxuH+0xnoc
vj46Rj8BXxutqx6BB0bH4qfgwdExeg48IDoHPAmPiI77L8CDomPu0/CN0Tlj
LjwsOpc8Bx/H3hnP+DmMnQTfB58Pp/hmfORMrisBd4BbwwXg8+DG8FGsMXy6
cg7jzeFGymvcZwR/14/Wqy2kixg/QfeGm2kN8N2j4A/xRRhvCzdXnM+u0do+
Hm4DN9XaC877H+idMD4Dnsj49fC98NS8dZ101xTlOPxP2A7sN+xn7Puctb60
6xHlHq7fpDiWd+7+VPfXnMGfwGvgGcHj85XDsc3wOuXE7L4/YA8y/jH+fcVo
eB38ruIyvB5+L+/rfsue4WDGSuN/YHuxX7EFXP8t/iX8/pz1925dyzNUVM7F
v6AYCZfkw78Ga3ONP8b45/B6xodHa4hDwffV/XdiB3J+L79ktid7P39m31Uk
+z6x7nsou+Yz7THuvwX/sdYNvA3+XPEle+YteX/PYWxXznv5/9/3nuy7dZ+P
lTP1Dvj/NxPv9/3w+sR78M/g6w9l87c3e0ffaf9H69d9wTpAemCevl/7EC6Y
93s9mM3379lvUw2zMLGen6u5TRwHtL9XJV4Pig1z4K/gjdoz8Jd6ZuUG+Gt4
k/YkvBX+RHEW/gbeDP+DnQmfir+L51sLd45+nn3ZXP+m2ISvmPd72pv9rvcS
P/8fwc+8P5uL66K1+wHGv8v2kfbTHv5erd8XfI9d2fz+ku3ZoO/N9mOUVsn2
rHLQtsRx7B8++23i+KZ7fqN8CP/F+NeJY+Df8I7EezyvvJnlCOXo26Lr23+1
xvBNGU8YKwy3hs/VO8nioXL3X1kMUf76G26fc+4bG12LSnvsyX6j8s+BbO8r
Jx7M4oPy4P7s/srRPybOHblMv3QF2/G9E6LrbWmno1l8lpbYnDgXHAnWVtfA
PRSvgj8rbaBiWblPeWx74jk9ylgIzqHSGzE4b0pjlA6+j7RcbcXunPXejGjd
JP1UmPGeOesc/a265jq+99jg3CpdVDY4t0ofVg7Od9Kf87O4tFY6NzgnSotu
SryWDis2BOdTadHywTlXGvVhrtkIf8hniwbnLOmKEsG5Wxrm9ODnUb11lvRi
zjr2kehaSDo2DdYM0l3StmPgmxXPg3O6NFLj4BpWmqd5cF2sOvjE4FwszdMs
+LPSS8cEawbpwOewbok1sLTw3Yzfxf2/gs/NWav/kLhfsQDemrhPohw3NTjG
XspnpwTH3kvgyfBHcFd4ceIehbTuq4l7HdK3SxL3NKSHX09cmyhfL09cT0lX
TwuO7d24z4rEdZB09RuJ6yPp7aWJ62tp8unBuaM71y9K3A+RZl6ZOF5JA5wf
3AORVlwYnc+k+dsyPilnnXlBcN9A+vmy4Lq+Hrwsce2mWqBD8LuS9r40uG8g
rTs4uPZvDncM7jlIk3eDH8xZ93YP7htIM3cKzpvKn5PgD+EujD/F31/AG/LW
BRp/RzVD4vj2FtwLHg/fkXdfTe98NTw6uBZWXh0V3NtpF117qwZvD1/O/02A
R3F9T3gcfDt8BTwRHg33gO+Eb8t7jajuGJn32tIauxW+NLGWuCnv+ukxzR08
Lrgv1IHvmhDca+okzRzcw2kFTwyuPS+Gbw7ut7SBV0X3LKSFRgb3W1rDdwT3
oC6Cb9R6gs+DRwT3iFrC44P7Vx3h4cF9nhbw7cG9rAvhW7Xm4LaKpcG9rAvg
IcG9EfVIpKHmw8/wW/oH69smXLMhcT9QOv/TLIYrl32WuCcpXbcxce9R+n8d
fGrONc5HifsP0o0lg3saK/HFgnsdr+MLYdfBy/Clgvshq/AFg/ser+GLB/c9
3pB+C+6lrJCeDO6lLNc6StzTkP58N3FPQ/p2N9wOXgTvStxTfVl6IXHPULXq
F4l7qqrHv0zcU1WdvjZxz0Qa+OfEvdlX4C2J+6jSt6sT9xCkq3cm7rUuhN9J
3D+R9l6TuH8ijf1B4j6J9HOl1FpKc1cmi42K2XWCe01rFGuxZ+FGXNMnuM/Q
WOs5uN/YEF4a3feRBu4VvCYbwFcE9xjPhPsG1y9nwYOCexTNovW41sZi5nRg
cH3XlPHXo/sp0ur9guugs+EBwevkXOXB4J7em4q7wT0Z9WbeTtwnUR1RLbjP
thpfJbhH9w6+RnCf7V18heB+4Fv4mtjN8Pva05l2kl6qFNwnfBt/KHHP/FU4
H1wDKofuTZxPldOPYD3gpfz/vsT98MXw4cS99yVw5dRaU/u0bnBPby2+Ymr9
rb28Orquk156O7p+k4ZcGd2L/FkxOLqukG55M7ovuZvxZ6J7hZvgidG9fq3n
ydE9Cq3hSdF9Ca3hu6LPBrQXno7uOX6m9RxdK0rHvhddH0q7rs/qFmmGFdE9
sp1aL9FxarPeTXDP80ft++ge6C6tw+iaSvpkbXQNJj32YXR9JT12fXAfVfd8
K1r7Sg9/HF1fSQt9FF2nSeOtia6xpROuymKL1sO06F6E9v66TLdJy70TrVOl
OR+O7nuqz/NEdD/3E/ip6J7sBq336H7xx1pr0T3cT+FZ0f1Tzd090X0zrZN7
o/tmWm8PRfdhVdPNju6lqh58LLofvR5+NLpPvQ6+O7pvprV9Z/Q5itbbuOiz
Ga2f8dFnNlpjt0efr2jv3xp9ZiP9MD26h6OYdkf0uYviz5zo/vJGeGp0H0bx
bUz0eYbW6ujoMx7FrlHRZz+KP72xxbzbn/DXBPfDd2hfRvclv4JbBvfSt+Bb
B/fPv8B3Du6pbsP3CO6p/oDvEtwj/RbfMDhX6v3XD86Vej8tguvfz/H1gnOl
3lWD4LyseTkzOJ9qXroG91S/w1+i/QB/j784ixXSANKNqgtfTKw/VVuoJq2Q
umZW7lbtqdqrTuoa7/ucayv1VXS9Ptc+uO/9Db4N9l/4S/wZwblbmrNV8JnC
VvxFwX1jvat2wf3zr/GNtA9zXm/nBWsV5f8mwf1e7ccXorWI7rM8unesuXg+
WkPo/bwYrS30DDoL0O8rz/OPDe4FKT6MCdbb0i0vRZ8l6BnmRmsUzd28TLto
7m7Qnsk55gwN1jzK3e9H14SqwRdEn0PoPbwW3UPX3l8UfaaiuTg3+JxCcalp
cH9DseKc4LMMrcnF0ecumq+ewX317fhXo3vuWjPLonvrWnsvR/dHtK6GBZ/L
KM4siT6f0GdfiT7j0RqbGd2jVsyfEt3/lB6olbrmlwa+L7o3rtxRInXvXrqo
eOrzPGmqY1OfXUmrFE59VqfcFFP34pUfj099tqe8Viz1GZ40UrnU/RdpxRNT
nwVKU1VJXXtLpxVNfZ4n3VUk9dmhtO4Jqc8IlUND6t6ocm7J1JpVuu7B6PMe
5fHaqfsX0uo1U9fzqiNqpO4FqHY4OXX9r5qiKvxk4ro+n7rnKE1eMPW5oPJ4
mvrsTfm9euo+grR0gdTniNIJhVKf4Sl3H5P6LFBa4v7oswbl39Kpe0nShKVS
a2tpxQ3RfUbV+GVS95ikJ8um7kNJl34W3c9V7f9pdP9Otfn/ANwZ2Bs=
            "]], Polygon3DBox[CompressedData["
1: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
            "]], Polygon3DBox[CompressedData["
1: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
I/Ls2D/YBuO/Ay3T4QI=
            "]]},
          Annotation[#, "Charting`Private`Tag$11276#1"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0rsvpFEYwOGPcRsMK6Jd0RAFpSgoN4pViSjoiGK3WIlsQakQOh1/AS0R
+k3o3MfMuM2ystkIu2Tjfg3PSRS/eU7mO5nznsxX0zvQ8S0niqJR3SqsL/Vb
87lR9IE/WM0NNvKQrTxnO5/Zw9JYFCX01bqew2zmONs4xS7OsJ+L/M5l/ucJ
77Wta/3TioFSXGWaa8xwnTthJu5yk3vcYlL74Xd4wBSzTPMnMzzkDo+4y1+c
dY9TPuhYN+GOmjBbkiNc4iAX2MdpdnKSnzjGJg6xjrX6Yh1nNx+d8Zl/2cIs
G8K9+JEX9v3hncp1FfaqyoxlrGSCFSwNe1jCBItZwng4j0UsYL4KrWMsCP9x
+I6vytNLeKYnGSOa83H2/j68Acy/Svc=
        "]]}, 
      {GrayLevel[0.2], 
       Line3DBox[{690, 1004, 473, 689, 1113, 912, 691, 1114, 913, 692, 1115, 
        914, 693, 1116, 915, 694, 1117, 916, 695, 1118, 1010, 1217, 696, 1119,
         917, 697, 1120, 918, 698, 1121, 919, 699, 1122, 920, 700, 1123, 921, 
        701, 1124, 922, 702, 1322, 1005, 923, 1006}], 
       Line3DBox[{704, 1011, 1218, 703, 488, 705, 1125, 924, 706, 1126, 925, 
        707, 1127, 926, 708, 1128, 927, 709, 1129, 1012, 1219, 710, 1013, 
        1220, 711, 1130, 928, 712, 1131, 929, 713, 1132, 930, 714, 1133, 931, 
        715, 1134, 932, 716, 1135, 933, 717}], 
       Line3DBox[{719, 1014, 1221, 718, 1015, 1222, 720, 504, 721, 1136, 934, 
        722, 1137, 935, 723, 1138, 936, 724, 1139, 1016, 1223, 725, 1017, 
        1224, 726, 1018, 1225, 727, 1140, 937, 728, 1141, 938, 729, 1142, 939,
         730, 1143, 940, 731, 1144, 941, 732}], 
       Line3DBox[{734, 1019, 1226, 733, 1020, 1227, 735, 1021, 1228, 736, 520,
         737, 1145, 942, 738, 1146, 943, 739, 1147, 1022, 1229, 740, 1023, 
        1230, 741, 1024, 1231, 742, 1025, 1232, 743, 1148, 944, 744, 1149, 
        945, 745, 1150, 946, 746, 1151, 947, 747}], 
       Line3DBox[{749, 1026, 1233, 748, 1027, 1234, 750, 1028, 1235, 751, 
        1029, 1236, 752, 536, 753, 1152, 948, 754, 1153, 1030, 1237, 755, 
        1031, 1238, 756, 1032, 1239, 757, 1033, 1240, 758, 1034, 1241, 759, 
        1154, 949, 760, 1155, 950, 761, 1156, 951, 762}], 
       Line3DBox[{764, 1035, 1242, 763, 1036, 1243, 765, 1037, 1244, 766, 
        1038, 1245, 767, 1039, 1246, 768, 552, 769, 1157, 1040, 1247, 770, 
        1041, 1248, 771, 1042, 1249, 772, 1043, 1250, 773, 1044, 1251, 774, 
        1045, 1252, 775, 1158, 952, 776, 1159, 953, 777}], 
       Line3DBox[{781, 1160, 954, 779, 1161, 955, 783, 1162, 956, 785, 1163, 
        957, 787, 1164, 958, 789, 1165, 959, 791, 1166, 569, 793, 1167, 960, 
        795, 1168, 961, 797, 1169, 962, 799, 1170, 963, 801, 1171, 964, 803, 
        1172, 965, 805, 1174, 967, 807}], 
       Line3DBox[{806, 966, 1173, 804, 1265, 1057, 802, 1264, 1056, 800, 1263,
         1055, 798, 1262, 1054, 796, 1261, 1053, 794, 1260, 1052, 792, 1259, 
        568, 790, 1258, 1051, 788, 1257, 1050, 786, 1256, 1049, 784, 1255, 
        1048, 782, 1254, 1047, 778, 1253, 1046, 780}], 
       Line3DBox[{809, 1058, 1266, 808, 1175, 968, 810, 1176, 969, 811, 1177, 
        970, 812, 1178, 971, 813, 1179, 972, 814, 1180, 1059, 1267, 815, 585, 
        816, 1181, 973, 817, 1182, 974, 818, 1183, 975, 819, 1184, 976, 820, 
        1185, 977, 821, 1186, 978, 822}], 
       Line3DBox[{824, 1060, 1268, 823, 1061, 1269, 825, 1187, 979, 826, 1188,
         980, 827, 1189, 981, 828, 1190, 982, 829, 1191, 1062, 1270, 830, 
        1063, 1271, 831, 601, 832, 1192, 983, 833, 1193, 984, 834, 1194, 985, 
        835, 1195, 986, 836, 1196, 987, 837}], 
       Line3DBox[{839, 1064, 1272, 838, 1065, 1273, 840, 1066, 1274, 841, 
        1197, 988, 842, 1198, 989, 843, 1199, 990, 844, 1200, 1067, 1275, 845,
         1068, 1276, 846, 1069, 1277, 847, 617, 848, 1201, 991, 849, 1202, 
        992, 850, 1203, 993, 851, 1204, 994, 852}], 
       Line3DBox[{854, 1070, 1278, 853, 1071, 1279, 855, 1072, 1280, 856, 
        1073, 1281, 857, 1205, 995, 858, 1206, 996, 859, 1207, 1074, 1282, 
        860, 1075, 1283, 861, 1076, 1284, 862, 1077, 1285, 863, 633, 864, 
        1208, 997, 865, 1209, 998, 866, 1210, 999, 867}], 
       Line3DBox[{869, 1078, 1286, 868, 1079, 1287, 870, 1080, 1288, 871, 
        1081, 1289, 872, 1082, 1290, 873, 1211, 1000, 874, 1212, 1083, 1291, 
        875, 1084, 1292, 876, 1085, 1293, 877, 1086, 1294, 878, 1087, 1295, 
        879, 649, 880, 1213, 1001, 881, 1214, 1002, 882}], 
       Line3DBox[{884, 1088, 1296, 883, 1089, 1297, 885, 1090, 1298, 886, 
        1091, 1299, 887, 1092, 1300, 888, 1093, 1301, 889, 1215, 1094, 1302, 
        890, 1095, 1303, 891, 1096, 1304, 892, 1097, 1305, 893, 1098, 1306, 
        894, 1099, 1307, 895, 665, 896, 1216, 1003, 897}], 
       Line3DBox[{911, 1009, 685, 910, 1321, 1111, 909, 1320, 1110, 908, 1319,
         1109, 907, 1318, 1108, 906, 1317, 1107, 905, 1316, 1106, 904, 1315, 
        1314, 1105, 903, 1313, 1104, 902, 1312, 1103, 901, 1311, 1102, 900, 
        1310, 1101, 899, 1309, 1100, 898, 1112, 1308, 1007, 1008}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{251, 474, 1113, 252, 488, 280, 1222, 503, 295, 1227, 518, 
        310, 1234, 533, 325, 1243, 548, 340, 1254, 563, 1161, 355, 578, 1175, 
        370, 1269, 593, 385, 1273, 608, 400, 1279, 623, 415, 1287, 638, 430, 
        1297, 653, 445, 1309, 668, 460}], 
       Line3DBox[{253, 475, 1114, 254, 489, 1125, 281, 504, 296, 1228, 519, 
        311, 1235, 534, 326, 1244, 549, 341, 1255, 564, 1162, 356, 579, 1176, 
        371, 594, 1187, 386, 1274, 609, 401, 1280, 624, 416, 1288, 639, 431, 
        1298, 654, 446, 1310, 669, 461}], 
       Line3DBox[{255, 476, 1115, 256, 490, 1126, 282, 505, 1136, 297, 520, 
        312, 1236, 535, 327, 1245, 550, 342, 1256, 565, 1163, 357, 580, 1177, 
        372, 595, 1188, 387, 610, 1197, 402, 1281, 625, 417, 1289, 640, 432, 
        1299, 655, 447, 1311, 670, 462}], 
       Line3DBox[{257, 477, 1116, 258, 491, 1127, 283, 506, 1137, 298, 521, 
        1145, 313, 536, 328, 1246, 551, 343, 1257, 566, 1164, 358, 581, 1178, 
        373, 596, 1189, 388, 611, 1198, 403, 626, 1205, 418, 1290, 641, 433, 
        1300, 656, 448, 1312, 671, 463}], 
       Line3DBox[{259, 478, 1117, 260, 492, 1128, 284, 507, 1138, 299, 522, 
        1146, 314, 537, 1152, 329, 552, 344, 1258, 567, 1165, 359, 582, 1179, 
        374, 597, 1190, 389, 612, 1199, 404, 627, 1206, 419, 642, 1211, 434, 
        1301, 657, 449, 1313, 672, 464}], 
       Line3DBox[{261, 479, 1118, 263, 493, 1129, 285, 508, 1139, 300, 523, 
        1147, 315, 538, 1153, 330, 553, 1157, 345, 568, 1166, 360, 583, 1180, 
        375, 598, 1191, 390, 613, 1200, 405, 628, 1207, 420, 643, 1212, 435, 
        658, 1215, 450, 1314, 673, 465}], 
       Line3DBox[{265, 481, 1119, 266, 1220, 495, 287, 1224, 510, 302, 1230, 
        525, 317, 1238, 540, 332, 1248, 555, 347, 1260, 570, 1167, 362, 585, 
        377, 1271, 600, 392, 1276, 615, 407, 1283, 630, 422, 1292, 645, 437, 
        1303, 660, 452, 1316, 675, 467}], 
       Line3DBox[{267, 482, 1120, 268, 496, 1130, 288, 1225, 511, 303, 1231, 
        526, 318, 1239, 541, 333, 1249, 556, 348, 1261, 571, 1168, 363, 586, 
        1181, 378, 601, 393, 1277, 616, 408, 1284, 631, 423, 1293, 646, 438, 
        1304, 661, 453, 1317, 676, 468}], 
       Line3DBox[{269, 483, 1121, 270, 497, 1131, 289, 512, 1140, 304, 1232, 
        527, 319, 1240, 542, 334, 1250, 557, 349, 1262, 572, 1169, 364, 587, 
        1182, 379, 602, 1192, 394, 617, 409, 1285, 632, 424, 1294, 647, 439, 
        1305, 662, 454, 1318, 677, 469}], 
       Line3DBox[{271, 484, 1122, 272, 498, 1132, 290, 513, 1141, 305, 528, 
        1148, 320, 1241, 543, 335, 1251, 558, 350, 1263, 573, 1170, 365, 588, 
        1183, 380, 603, 1193, 395, 618, 1201, 410, 633, 425, 1295, 648, 440, 
        1306, 663, 455, 1319, 678, 470}], 
       Line3DBox[{273, 485, 1123, 274, 499, 1133, 291, 514, 1142, 306, 529, 
        1149, 321, 544, 1154, 336, 1252, 559, 351, 1264, 574, 1171, 366, 589, 
        1184, 381, 604, 1194, 396, 619, 1202, 411, 634, 1208, 426, 649, 441, 
        1307, 664, 456, 1320, 679, 471}], 
       Line3DBox[{275, 486, 1124, 276, 500, 1134, 292, 515, 1143, 307, 530, 
        1150, 322, 545, 1155, 337, 560, 1158, 352, 1265, 575, 1172, 367, 590, 
        1185, 382, 605, 1195, 397, 620, 1203, 412, 635, 1209, 427, 650, 1213, 
        442, 665, 457, 1321, 680, 472}], 
       Line3DBox[{277, 682, 1322, 683, 278, 501, 1135, 293, 516, 1144, 308, 
        531, 1151, 323, 546, 1156, 338, 561, 1159, 353, 576, 1173, 1174, 368, 
        591, 1186, 383, 606, 1196, 398, 621, 1204, 413, 636, 1210, 428, 651, 
        1214, 443, 666, 1216, 458, 685, 686, 687}], 
       Line3DBox[{459, 667, 684, 1308, 444, 652, 1296, 429, 637, 1286, 414, 
        622, 1278, 399, 607, 1272, 384, 592, 1268, 369, 577, 1266, 354, 1160, 
        562, 1253, 339, 547, 1242, 324, 532, 1233, 309, 517, 1226, 294, 502, 
        1221, 279, 487, 1218, 250, 473, 681, 688}], 
       Line3DBox[{466, 674, 1315, 451, 659, 1302, 436, 644, 1291, 421, 629, 
        1282, 406, 614, 1275, 391, 599, 1270, 376, 584, 1267, 361, 569, 1259, 
        346, 554, 1247, 331, 539, 1237, 316, 524, 1229, 301, 509, 1223, 286, 
        494, 1219, 264, 480, 1217, 262}]}, {}, {}}},
    VertexNormals->CompressedData["
1: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
iJO7nroyD7b4f/T9l6eDXE8Nxm+fnwTN+KW77IYX4HGDoW7cBnVou+IteB33
fycW4PCbKg+to6vvKB2xB10u6oozuH9qopH72mNZaPJLYy/rJUc4cZZ3V9cC
PpdOf2sL6K+AkcjIRKYeO2g6z8256eckSG4OP2U3Uov2SfYrmagbAUevW8af
oUmokqDtP7JJCVTaXOUc/bRB/tCny4v4ufV9+VP55zqhllWZSVzhOFpoubVw
gWcCzomFVy1huz695wpp5zMc6En7Xtks17akviRrrePbCdguuR3iJ+1REQvL
B0t8br4+v3yOvhVbPj8p+5yy7yn7XX0q3NIPr0uUt4dcpz8zy8j1eehP2Vsh
rMfIratJvQo5LD0m9Plwa9jiEmxClJZq0P4fMT7r+18Tu+ly4Yn0w1t9Q4A2
Jhw59RfrTZozj1VAIxiOyVym3jdmjVjFxJLqiO81UdOfMZiFTuiFn2X7ZYEy
jFIE6rE+v/wqfGQyk41OtT7KFOY2Rj5nrdMDsHyRLiAp/0k58NrrfqUxPgSa
niM2PL8mwYIvzU/8300UQlPwvPSpCci7e3S6fJ2EjpRLsdw+VujMIp3Xj3gn
cFd+FE2cqz+ep/T8nXoHxvpo91X/I3Da+Fzau/5xiBY/sK4M+0nfUt+RfpNP
hRfpL51UFiHt+o1D5h8IO7+/R3/Zvh/hueeH7dBCmjQbYZdEN+uR9ujtvmt9
X/C5qbRtLXmOKhhXkecnZZ9T9j1lv0vL3PdZk6+D96OMP7FO3xetSiDW51v+
QVKPYdN0lYRela/qkvpstti29dvBTLjbzmBMtJ76/Gcl8TjDOgrc04f8QF/4
zsah3UnAKZZQo4DtuJKS5KMXPUlIM3HCO1AuBhjY7332wecD19XG8yXrc5BH
YsXu/KUgSJzMT6PCem5fX7H9WuYN2LZ2zeet5jaQTmPnz/8b+6sntu3i876B
njV2BfwdtUAKBRccdLH8+PN65z1DPuj26tLg9XvMkPkNZYFerOfxHClnGHkP
c+GOxYP2dijOq8GvyX8cvr/gNjbAfmcEezfph1qpSpD+54CJ7RhX6mG08+Sy
33RlbpD0lz5o0ZJ2Pc9XJJCw89EXaUj73hrSOtGH7VBTtfjIArZLkWU1pD0y
TafOXIgVhW1t812K+BzNc/Igz8+PvRd0g/E+19pIVU/s+/2OPuR+d2yOpubF
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
     "]], {}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{{0, 2}, {0, 2}, {-0.0042620837313390725`, 0.004661097477556719}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.9400614108747883`*^9, 3.940061415466501*^9}},
 CellLabel->"Out[624]=",
 CellID->1519694840,ExpressionUUID->"dc62440e-b5bf-474a-9447-0f43ca3e64f2"]
}, Open  ]],

Cell["\<\
Notice that here we created our own higher-order function, since it takes a \
name of another function as one of its arguments.\
\>", "Text",
 CellChangeTimes->{{3.940061429375745*^9, 3.940061435005176*^9}},
 CellID->1488162109,ExpressionUUID->"cd2263f3-404b-4b5e-9620-3531602ee136"],

Cell["\<\
The same method will work for functions with more variables. The only real \
change will be that we will have to Flatten the list of values to more depth.\
\
\>", "Text",
 CellChangeTimes->{{3.940061429375745*^9, 3.9400614372619247`*^9}},
 CellID->1323555413,ExpressionUUID->"4f101138-fa9d-4705-82d4-f2172e497e4d"],

Cell["Example: imitating Outer", "ItemNumbered",
 CellChangeTimes->{3.940061452889802*^9},
 CellID->1097224340,ExpressionUUID->"e3c9ef36-dba0-4f13-959f-bc86a9cb2855"],

Cell["\<\
In this example, we will try to imitate Outer in the case when we have only \
two lists, with the functions that we already know. Let us start with a \
sub-problem: given a list of elements and an object, form all the pairs of \
this object with the elements of the list. For example, our list will be {a, \
b, c}, and our stand-alone element will be d. Then the solution will be:\
\>", "Text",
 CellChangeTimes->{{3.9400614617815027`*^9, 3.940061476531443*^9}},
 CellID->607405591,ExpressionUUID->"0c8cbd17-cde4-4aa7-8690-463d898987a1"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Thread", "[", 
  RowBox[{"List", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", "d"}], "]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.940061491973609*^9, 3.940061503610981*^9}},
 CellLabel->"In[625]:=",
 CellID->334794713,ExpressionUUID->"bf8d1e5d-92f8-4a58-9c5f-ebc63cd5acc4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940061504153612*^9},
 CellLabel->"Out[626]=",
 CellID->1320897203,ExpressionUUID->"ba61615d-72c6-412b-ae33-70bc10cf3279"]
}, Open  ]],

Cell["\<\
To create all possible combinations of elements of the two lists, say {a,b,c} \
and {d,e,f}, we have to repeat this operation with the same list {a,b,c} but \
different elements (d,e, and f). This means that we have to do something like \
this:\
\>", "Text",
 CellChangeTimes->{{3.940061515123073*^9, 3.9400615195403423`*^9}},
 CellID->1780831782,ExpressionUUID->"ce1ef16e-5ec4-4af9-bf69-a101b4efff99"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Thread", "[", 
     RowBox[{"List", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", "#"}], "]"}], "]"}], 
    "&"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940061529519287*^9, 3.940061542754466*^9}},
 CellLabel->"In[627]:=",
 CellID->1605826599,ExpressionUUID->"07a1372b-8067-414b-b454-60d12463e9d0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "d"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "d"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", "d"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "e"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "e"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", "e"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "f"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "f"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", "f"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400615434207277`*^9},
 CellLabel->"Out[627]=",
 CellID->351428122,ExpressionUUID->"3761e025-bb06-49b4-9fc2-f107f7b7bcc0"]
}, Open  ]],

Cell["\<\
Finally, we have to generalize to any head, which amounts to substituting \
List in the code by that head (this is why I used here the literal head List \
instead of {} from the beginning - to make this transition natural):\
\>", "Text",
 CellChangeTimes->{{3.940061552879675*^9, 3.9400615606546993`*^9}},
 CellID->872417204,ExpressionUUID->"f5cec7db-fff8-4e8d-9e3e-aedc92f3396e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Thread", "[", 
     RowBox[{"g", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", "#"}], "]"}], "]"}], 
    "&"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940061562996813*^9, 3.9400615776144648`*^9}},
 CellLabel->"In[628]:=",
 CellID->1518027777,ExpressionUUID->"dc475529-2335-4b0a-b24c-acd025d48af0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"a", ",", "d"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"b", ",", "d"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"c", ",", "d"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"a", ",", "e"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"b", ",", "e"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"c", ",", "e"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"a", ",", "f"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"b", ",", "f"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"c", ",", "f"}], "]"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400615781379128`*^9},
 CellLabel->"Out[628]=",
 CellID->2100174544,ExpressionUUID->"c85660eb-ed77-4999-8e5f-274084ea23e2"]
}, Open  ]],

Cell["Thus, our final function will look like:", "Text",
 CellChangeTimes->{3.940061595133666*^9},
 CellID->1592338916,ExpressionUUID->"28ab7ff0-2212-4617-9db7-2b61c1275615"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "myOuter", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"myOuter", "[", 
    RowBox[{"g_", ",", "list1_List", ",", "list2_List"}], "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Thread", "[", 
       RowBox[{"g", "[", 
        RowBox[{"#", ",", "list2"}], "]"}], "]"}], "&"}], ",", "list1"}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940061598998231*^9, 3.940061625094122*^9}},
 CellLabel->"In[50]:=",
 CellID->2115114598,ExpressionUUID->"564ed7c6-bb02-43a1-b57e-ec8af1d5732e"],

Cell["\<\
I have interchanged list1 and list2, and also the order of arguments inside \
g, to get exactly the same output that Outer gives, where the innermost \
sublists in the output list correspond to the sweeping through the rightmost \
input list.\
\>", "Text",
 CellChangeTimes->{{3.940061635080295*^9, 3.940061642273143*^9}},
 CellID->1655898574,ExpressionUUID->"b03a3293-54bf-48c1-a8ad-105c715deee5"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940061635080295*^9, 3.9400616401108103`*^9}},
 CellID->1513397144,ExpressionUUID->"3bb53b88-4a07-4c27-8284-fd5da5c93bbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myOuter", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940061645303145*^9, 3.940061654430142*^9}},
 CellLabel->"In[631]:=",
 CellID->1941206792,ExpressionUUID->"d5f5da74-621a-49a2-8291-eed7c0291763"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"a", ",", "d"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"a", ",", "e"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"a", ",", "f"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"b", ",", "d"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"b", ",", "e"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"b", ",", "f"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"c", ",", "d"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"c", ",", "e"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"c", ",", "f"}], "]"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940061654930434*^9},
 CellLabel->"Out[631]=",
 CellID->1564934615,ExpressionUUID->"c9ace94f-c7b5-46a3-8858-49fb6098a605"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Outer", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940061657365368*^9, 3.940061663917067*^9}},
 CellLabel->"In[632]:=",
 CellID->1816293196,ExpressionUUID->"8741b987-3f8e-4544-8a32-ee76766da74b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"a", ",", "d"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"a", ",", "e"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"a", ",", "f"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"b", ",", "d"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"b", ",", "e"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"b", ",", "f"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"c", ",", "d"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"c", ",", "e"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"c", ",", "f"}], "]"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.94006166457161*^9},
 CellLabel->"Out[632]=",
 CellID->641379301,ExpressionUUID->"1ffdddd9-c7cd-4f48-b485-43ab735ae696"]
}, Open  ]],

Cell["Let us check the performance:", "Text",
 CellChangeTimes->{3.940061676970449*^9},
 CellID->1441487614,ExpressionUUID->"7a3d9eb8-aba3-43de-adf7-6ba81b6d0c2e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"myOuter", "[", 
     RowBox[{"List", ",", 
      RowBox[{"Range", "[", "15", "]"}], ",", 
      RowBox[{"Range", "[", "20", "]"}]}], "]"}], "//", 
    RowBox[{
     RowBox[{"Short", "[", 
      RowBox[{"#", ",", "2"}], "]"}], "&"}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940061680898827*^9, 3.940061717257358*^9}, {
  3.940138518775519*^9, 3.9401385236784267`*^9}},
 CellLabel->"In[52]:=",
 CellID->818900362,ExpressionUUID->"e3334aca-3bc3-4f33-9d8e-ef9312842ddc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00005`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}], ",", 
        RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "18"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "19"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "20"}], "}"}]}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "13", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "}"}]}], "}"}],
    Short[#, 2]& ]}], "}"}]], "Output",
 CellChangeTimes->{{3.940061692881918*^9, 3.9400617175991697`*^9}, 
   3.940138524446102*^9},
 CellLabel->"Out[52]=",
 CellID->610312105,ExpressionUUID->"18f8351c-edac-4dcf-ba2b-c8843369f81b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Outer", "[", 
     RowBox[{"List", ",", 
      RowBox[{"Range", "[", "15", "]"}], ",", 
      RowBox[{"Range", "[", "20", "]"}]}], "]"}], "//", 
    RowBox[{
     RowBox[{"Short", "[", 
      RowBox[{"#", ",", "2"}], "]"}], "&"}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.94006170262162*^9, 3.940061710311524*^9}, {
  3.940138528209762*^9, 3.940138533607834*^9}},
 CellLabel->"In[53]:=",
 CellID->147331908,ExpressionUUID->"504e53fb-39df-4ec4-ba07-e2b2bfbb9102"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000016`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}], ",", 
        RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "18"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "19"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "20"}], "}"}]}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "13", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "}"}]}], "}"}],
    Short[#, 2]& ]}], "}"}]], "Output",
 CellChangeTimes->{{3.9400617030576267`*^9, 3.940061710645462*^9}, 
   3.940138534031682*^9},
 CellLabel->"Out[53]=",
 CellID->274001088,ExpressionUUID->"b0c1aa61-c051-44f7-a10e-0b9c0fb1d656"]
}, Open  ]],

Cell["\<\
We are actually fairly close (at least for these lists), given that Outer is \
a built-in function.\
\>", "Text",
 CellChangeTimes->{{3.940061732190536*^9, 3.940061736524925*^9}},
 CellID->159787954,ExpressionUUID->"50edddc1-8c51-4986-9cbe-d984f2581619"],

Cell["\<\
For completeness, let me mention that there exists (at least one more) \
solution with comparable (slightly worse) performance. This solution may be \
obtained along the lines discussed above, where we noticed that whenever a \
function is Mapped onto a list with some arguments fixed, this can be \
rewritten using MapThread. Here is the solution:\
\>", "Text",
 CellChangeTimes->{{3.940061732190536*^9, 3.940061743323657*^9}},
 CellID->998698326,ExpressionUUID->"5aa5de15-304c-4f5b-8917-140f65faf1f6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "myOuter1", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"myOuter1", "[", 
    RowBox[{"g_", ",", "list1_List", ",", "list2_List"}], "]"}], ":=", 
   RowBox[{"MapThread", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Thread", "[", 
       RowBox[{"g", "[", "##", "]"}], "]"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{"list1", ",", 
       RowBox[{"Table", "[", 
        RowBox[{"list2", ",", 
         RowBox[{"{", 
          RowBox[{"Length", "[", "list1", "]"}], "}"}]}], "]"}]}], "}"}]}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940061749481757*^9, 3.940061796097447*^9}},
 CellLabel->"In[47]:=",
 CellID->324652224,ExpressionUUID->"b2dc2b6b-1f54-4019-bf44-46fa20325b3e"],

Cell["\<\
I leave it as an exercise to the reader to figure out precisely how it works. \
For now, let us check:\
\>", "Text",
 CellChangeTimes->{3.9400618055080223`*^9},
 CellID->1922364246,ExpressionUUID->"4034fe1e-460c-45c1-9f55-7cb59934bb5d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myOuter1", "[", 
  RowBox[{"g", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940061807485113*^9, 3.940061814930531*^9}},
 CellLabel->"In[639]:=",
 CellID->1985016874,ExpressionUUID->"377921c3-d14c-4bd8-adc7-a3fbb3dfa912"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"a", ",", "d"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"a", ",", "e"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"a", ",", "f"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"b", ",", "d"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"b", ",", "e"}], "]"}], ",", 
     RowBox[{"g", "[", 
      RowBox[{"b", ",", "f"}], "]"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940061815281049*^9},
 CellLabel->"Out[639]=",
 CellID->118525701,ExpressionUUID->"73672dbf-53b8-4d98-bf46-0dcbf999be33"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"myOuter1", "[", 
     RowBox[{"List", ",", 
      RowBox[{"Range", "[", "15", "]"}], ",", 
      RowBox[{"Range", "[", "20", "]"}]}], "]"}], "//", 
    RowBox[{
     RowBox[{"Short", "[", 
      RowBox[{"#", ",", "2"}], "]"}], "&"}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940061822432745*^9, 3.940061840881922*^9}, {
  3.940138479176325*^9, 3.940138484696871*^9}},
 CellLabel->"In[49]:=",
 CellID->1057629623,ExpressionUUID->"d58e6ee2-374e-430a-97d9-de95758d96db"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000071`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}], ",", 
        RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "18"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "19"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "20"}], "}"}]}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "13", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "}"}]}], "}"}],
    Short[#, 2]& ]}], "}"}]], "Output",
 CellChangeTimes->{
  3.940061841280446*^9, {3.940138485099023*^9, 3.940138495391555*^9}},
 CellLabel->"Out[49]=",
 CellID->2078584063,ExpressionUUID->"90a11445-2982-4ddb-8fac-cf169dc7625f"]
}, Open  ]],

Cell["Case study: creating ordered subsets for a given set", "ItemNumbered",
 CellChangeTimes->{{3.940061870508038*^9, 3.940061880202475*^9}},
 CellID->234570794,ExpressionUUID->"461b52ae-6986-4619-a3da-a1e2d9599504"],

Cell[TextData[StyleBox["Creating ordered pairs",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940061889136332*^9, 3.940061893878174*^9}},
 CellID->811565782,ExpressionUUID->"0ff7e425-6943-4564-80d6-0f75e38772ee"],

Cell["\<\
We can use Outer to create all possible pairs of elements in a given list. \
For example:\
\>", "Text",
 CellChangeTimes->{3.940061889136332*^9},
 CellID->409254758,ExpressionUUID->"e74af560-0fe7-4277-80ee-7d766a6070fd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pairs", "=", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{"Outer", "[", 
     RowBox[{"List", ",", 
      RowBox[{"{", 
       RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], "]"}], ",", "1"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.940061898776091*^9, 3.940061910849761*^9}},
 CellLabel->"In[641]:=",
 CellID->1405284887,ExpressionUUID->"f458b762-0a0a-412b-a81e-93566838eaaf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "c"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.94006191125525*^9},
 CellLabel->"Out[641]=",
 CellID->688391986,ExpressionUUID->"597df4f0-672c-43ac-91f6-2443b50622c9"]
}, Open  ]],

Cell["\<\
This is almost the same as all ordered subsets of length 2 - the difference \
is that we have also lists of identical elements. The latter may easily be \
eliminated in this case:\
\>", "Text",
 CellChangeTimes->{{3.940061935652109*^9, 3.940061938432392*^9}},
 CellID->1309702313,ExpressionUUID->"a3104b41-a2e9-4086-b3fa-b9efd1b0f458"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeleteCases", "[", 
  RowBox[{"pairs", ",", 
   RowBox[{"{", 
    RowBox[{"z_", ",", "z_"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940061940972082*^9, 3.9400619480359087`*^9}},
 CellLabel->"In[642]:=",
 CellID->416494263,ExpressionUUID->"a4bcb9a4-924f-43bb-82c0-d4626d628f64"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "b"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940061948794671*^9},
 CellLabel->"Out[642]=",
 CellID->854580734,ExpressionUUID->"ae93ffb7-d2f0-437f-b4fe-bbd0a03b8798"]
}, Open  ]],

Cell["\<\
Let us now write a general function which will create all ordered subsets for \
a given set (list) of distinct elements. As a first step, we will re-package \
our code into a function (for ordered pairs)\
\>", "Text",
 CellChangeTimes->{{3.940061958195025*^9, 3.940061976803232*^9}},
 CellID->567765202,ExpressionUUID->"2dc8e9aa-ab00-47d8-8e0d-4f10e2fbffb5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "orderedPairs", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"orderedPairs", "[", "set_List", "]"}], ":=", 
  RowBox[{"DeleteCases", "[", 
   RowBox[{
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"Outer", "[", 
       RowBox[{"List", ",", "set", ",", "set"}], "]"}], ",", "1"}], "]"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"z_", ",", "z_"}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940061979146682*^9, 3.940062016096333*^9}},
 CellLabel->"In[40]:=",
 CellID->833949770,ExpressionUUID->"b5b30f23-1630-4563-926c-a1911d631a85"],

Cell["check:", "Text",
 CellChangeTimes->{{3.940062020230568*^9, 3.940062021040248*^9}},
 CellID->1470780404,ExpressionUUID->"ed1d2bd1-f8ac-47b1-afbf-c957a2515397"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"orderedPairs", "[", 
  RowBox[{"{", "a", "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.94006202839347*^9, 3.940062031176853*^9}},
 CellLabel->"In[645]:=",
 CellID->999384780,ExpressionUUID->"55c36423-0d87-4e99-bb33-723b08270a95"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.940062031816156*^9},
 CellLabel->"Out[645]=",
 CellID->158103633,ExpressionUUID->"aeea4b30-410a-401c-8b12-d22e3f99cf48"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"orderedPairs", "[", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.940062033027203*^9, 3.940062035393384*^9}},
 CellLabel->"In[646]:=",
 CellID->391312123,ExpressionUUID->"d704e380-eb88-43df-8960-99d05dde8cd8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "a"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940062035750498*^9},
 CellLabel->"Out[646]=",
 CellID->1950611706,ExpressionUUID->"f20313c1-e6cf-4474-aeef-c7715a62eb92"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"orderedPairs", "[", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.940062037662277*^9, 3.940062044286077*^9}},
 CellLabel->"In[647]:=",
 CellID->715988391,ExpressionUUID->"43b74420-90bf-4bfd-b8af-3c6b04825fad"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "c"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9400620445924587`*^9},
 CellLabel->"Out[647]=",
 CellID->1537757465,ExpressionUUID->"37548b00-9f60-46ee-93f7-73438ec61412"]
}, Open  ]],

Cell[TextData[StyleBox["Generalizing to ordered subsets",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940136890109495*^9, 3.940136901187887*^9}},
 CellID->1119405014,ExpressionUUID->"90dc115b-6ac6-49d1-9081-0e12e1d960a8"],

Cell["\<\
To generalize to higher tuples, we need to duplicate <set> in Outer several \
times, to Flatten to a deeper level, and to use a more complicated pattern:\
\>", "Text",
 CellChangeTimes->{{3.940136890109495*^9, 3.94013690722339*^9}},
 CellID->1834188568,ExpressionUUID->"95395070-c2bc-4a24-bc1b-fb557cbfced1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "orderedSubsets", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"orderedSubsets", "[", 
   RowBox[{"set_List", ",", "order_Integer"}], "]"}], ":=", 
  RowBox[{"DeleteCases", "[", 
   RowBox[{
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"Outer", "[", 
       RowBox[{"List", ",", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"Table", "[", 
          RowBox[{"set", ",", 
           RowBox[{"{", "order", "}"}]}], "]"}]}]}], "]"}], ",", 
      RowBox[{"order", "-", "1"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x___", ",", "t_", ",", "y___", ",", "t_", ",", "z___"}], 
     "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940136913355667*^9, 3.9401369290871468`*^9}, {
   3.940137421814519*^9, 3.9401374986220293`*^9}, 3.940137546099152*^9},
 CellLabel->"In[42]:=",
 CellID->1911446443,ExpressionUUID->"f875f2f5-e404-40db-ac88-c2f8593ff33f"],

Cell["Check now:", "Text",
 CellChangeTimes->{{3.940137502655058*^9, 3.940137505387238*^9}},
 CellID->1709535772,ExpressionUUID->"b7bcad25-6b87-4ffe-8aa3-614e80a1d95e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"orderedSubsets", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", "2"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940137506519567*^9, 3.9401375134121923`*^9}},
 CellLabel->"In[6]:=",
 CellID->1095542290,ExpressionUUID->"0b03758e-1f74-4365-bdee-74864ab231d6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "c"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9401375138555317`*^9, 3.9401375519411287`*^9},
 CellLabel->"Out[6]=",
 CellID->1495079089,ExpressionUUID->"793119d6-028b-417a-a517-6a14b3509628"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"orderedSubsets", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", "3"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9401375596624193`*^9, 3.940137576142477*^9}},
 CellLabel->"In[7]:=",
 CellID->1001070949,ExpressionUUID->"1e0b415a-1737-4305-ae21-9ff2758c7354"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "c", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "d", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "d", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "a", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "d", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "d", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "a", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "b", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "b", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "b", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "c", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "c", ",", "b"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940137576520712*^9},
 CellLabel->"Out[7]=",
 CellID->1765910930,ExpressionUUID->"8c2463c8-56d5-45f1-b147-012e9dc940b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"orderedSubsets", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", "4"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940137579464756*^9, 3.940137584693118*^9}},
 CellLabel->"In[8]:=",
 CellID->1696601571,ExpressionUUID->"798439da-da8d-42f9-9fdc-b638b4efab28"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "d", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "c", ",", "b", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "c", ",", "d", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "d", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "d", ",", "c", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "a", ",", "c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "a", ",", "d", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c", ",", "a", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c", ",", "d", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "d", ",", "a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "d", ",", "c", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "a", ",", "b", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "a", ",", "d", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "b", ",", "a", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "b", ",", "d", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d", ",", "a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d", ",", "b", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "a", ",", "c", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "b", ",", "a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "b", ",", "c", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "c", ",", "a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "c", ",", "b", ",", "a"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940137585118239*^9},
 CellLabel->"Out[8]=",
 CellID->1842123166,ExpressionUUID->"fb3a16f0-5efe-4916-88d2-653e7dda7dce"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"orderedSubsets", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", "5"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940137589689604*^9, 3.940137595311954*^9}},
 CellLabel->"In[9]:=",
 CellID->1595422852,ExpressionUUID->"5a2f3f1c-d9d5-44ab-93ab-4d4e17bd8021"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.940137595932702*^9},
 CellLabel->"Out[9]=",
 CellID->295066105,ExpressionUUID->"4bf2aaab-337b-4fcd-af43-07faa19bd6f2"]
}, Open  ]],

Cell["\<\
In the last case, the result is an empty list due to the pigeonhole \
principle: we have only 4 distinct elements and are trying to create subsets \
of length 5, which means that in any such subset at least two elements will \
be the same, and it is then eliminated by DeleteCases.\
\>", "Text",
 CellChangeTimes->{{3.9401376127977247`*^9, 3.940137631352991*^9}},
 CellID->636285812,ExpressionUUID->"1d02de04-8749-4f00-a73a-89912aa4d10f"],

Cell[TextData[StyleBox["Efficiency analysis",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.9401376127977247`*^9, 3.940137629288456*^9}},
 CellID->566503762,ExpressionUUID->"307455f7-ae8b-4bac-90a3-55827a000e35"],

Cell["\<\
Even though our code works correctly, it does not work efficiently. For \
instance:\
\>", "Text",
 CellChangeTimes->{3.940137657629287*^9},
 CellID->1311486347,ExpressionUUID->"f2bdabe5-3250-4b90-b9ef-38bb1242b35a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"orderedSubsets", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", "7"}], "]"}], "//",
   "Timing"}]], "Input",
 CellChangeTimes->{{3.940137662932919*^9, 3.940137674898559*^9}},
 CellLabel->"In[10]:=",
 CellID->567667992,ExpressionUUID->"3f381174-9009-4282-a0ff-fa92a529348d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.028839`", ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940137675260345*^9},
 CellLabel->"Out[10]=",
 CellID->1477012221,ExpressionUUID->"18e9ddb4-83e6-41f4-9616-5ecb06e4bd3b"]
}, Open  ]],

Cell["\<\
This is because, a huge list is created first to be completely eliminated \
later. We will be better off by adding an explicit condition:\
\>", "Text",
 CellChangeTimes->{{3.940137695204397*^9, 3.9401376976293287`*^9}},
 CellID->1380922674,ExpressionUUID->"2a44f5b4-27da-49ed-a007-3987f735b418"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "orderedSubsets", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"orderedSubsets", "[", 
     RowBox[{"set_List", ",", "order_Integer"}], "]"}], "/;", 
    RowBox[{"order", "<=", 
     RowBox[{"Length", "[", "set", "]"}]}]}], ":=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"Outer", "[", 
        RowBox[{"List", ",", 
         RowBox[{"Sequence", "@@", 
          RowBox[{"Table", "[", 
           RowBox[{"set", ",", 
            RowBox[{"{", "order", "}"}]}], "]"}]}]}], "]"}], ",", 
       RowBox[{"order", "-", "1"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x___", ",", "t_", ",", "y___", ",", "t_", ",", "z___"}], 
      "}"}]}], "]"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"orderedSubsets", "[", 
     RowBox[{"set_List", ",", "order_Integer"}], "]"}], "/;", 
    RowBox[{"order", ">", 
     RowBox[{"Length", "[", "set", "]"}]}]}], "=", 
   RowBox[{"{", "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9401377055984163`*^9, 3.9401377620236473`*^9}},
 CellLabel->"In[11]:=",
 CellID->30487468,ExpressionUUID->"2c91fdbf-ffc3-4266-9733-15a0d42fe441"],

Cell["\<\
As usual, we may ask is how efficient is our implementation.The main source \
of inefficiency here is that many of the combinations generated will have \
identical elements and will then be deleted later. It would be better if they \
were not generated from the beginning. Thus, in terms of this factor, our \
implementation is rather efficient for ordered pairs and large <set>, but \
completely inefficient for subsets of length comparable to the length of \
initial set itself.\
\>", "Text",
 CellChangeTimes->{{3.940137781230914*^9, 3.940137798672082*^9}},
 CellID->1304571200,ExpressionUUID->"cf2faf34-c3b8-4cf1-970c-65b768c9936a"],

Cell[TextData[StyleBox["Improving orderedPairs",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940137781230914*^9, 3.940137807405404*^9}},
 CellID->1845730048,ExpressionUUID->"1d236626-3eb7-4c0b-b603-11e363ae8648"],

Cell["\<\
Another suspected source of inefficiency is the pattern-matching in \
DeleteCases. For ordered pairs, we can eliminate the pattern-matching stage \
the help of MapThread:\
\>", "Text",
 CellChangeTimes->{{3.940137781230914*^9, 3.94013782359614*^9}},
 CellID->357154540,ExpressionUUID->"50817264-f267-4d74-a2af-a128ffc68b0b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "orderedPairsNew", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"orderedPairsNew", "[", "set_List", "]"}], ":=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"MapThread", "[", 
      RowBox[{"Drop", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Outer", "[", 
          RowBox[{"List", ",", "set", ",", "set"}], "]"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{"List", ",", 
           RowBox[{"Range", "[", 
            RowBox[{"Length", "[", "set", "]"}], "]"}]}], "]"}]}], "}"}]}], 
      "]"}], ",", "1"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9401378357853527`*^9, 3.9401378858747673`*^9}},
 CellLabel->"In[28]:=",
 CellID->1299257861,ExpressionUUID->"ca911e98-c04f-48f2-acb5-b50f60f1a47d"],

Cell["\<\
What happens is that first, second, etc elements are dropped from first, \
second, etc sublists of a list generated by Outer. These are exactly the \
elements containing duplicates. Make sure you understand how the code works. \
Check:\
\>", "Text",
 CellChangeTimes->{{3.9401378943836727`*^9, 3.940137903864088*^9}},
 CellID->965293844,ExpressionUUID->"4170668a-66b1-480b-80d6-852e81e1869d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"orderedPairsNew", "[", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.940137906252839*^9, 3.940137910147874*^9}},
 CellLabel->"In[16]:=",
 CellID->18258210,ExpressionUUID->"b3c1bd27-2715-49a5-bd3e-298e73b8d142"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "c"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940137910448985*^9},
 CellLabel->"Out[16]=",
 CellID->1274972368,ExpressionUUID->"828cbbe3-8151-456d-b832-93a627a6b375"]
}, Open  ]],

Cell["We can now check how much did we gain if at all:", "Text",
 CellChangeTimes->{3.940137923916583*^9},
 CellID->868759210,ExpressionUUID->"4d80d886-681b-4cbb-8cb6-070f261382fa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"orderedPairs", "[", 
     RowBox[{"Range", "[", "70", "]"}], "]"}], "//", 
    RowBox[{
     RowBox[{"Short", "[", 
      RowBox[{"#", ",", "2"}], "]"}], "&"}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940137925677239*^9, 3.9401379606933537`*^9}, {
  3.940138323984744*^9, 3.940138330060183*^9}, {3.9401383977845907`*^9, 
  3.940138398714473*^9}},
 CellLabel->"In[44]:=",
 CellID->1959373682,ExpressionUUID->"aa7502ba-2e82-414c-8944-8d8aef648ec3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000947`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "5"}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "4823", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"70", ",", "67"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"70", ",", "68"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"70", ",", "69"}], "}"}]}], "}"}],
    Short[#, 2]& ]}], "}"}]], "Output",
 CellChangeTimes->{{3.940137934550686*^9, 3.94013796184858*^9}, 
   3.940138332412764*^9, 3.940138399254678*^9, 3.940138447885099*^9},
 CellLabel->"Out[44]=",
 CellID->1588672692,ExpressionUUID->"a54d1a0d-2701-405c-ada9-8b4eb64db5ba"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"orderedPairsNew", "[", 
     RowBox[{"Range", "[", "70", "]"}], "]"}], "//", 
    RowBox[{
     RowBox[{"Short", "[", 
      RowBox[{"#", ",", "2"}], "]"}], "&"}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940137935818379*^9, 3.9401379675778503`*^9}, {
  3.9401383365536222`*^9, 3.940138344742091*^9}},
 CellLabel->"In[45]:=",
 CellID->452845618,ExpressionUUID->"57b506a4-b101-4052-bc20-6b0d993149f2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000515`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "5"}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "4823", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"70", ",", "67"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"70", ",", "68"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"70", ",", "69"}], "}"}]}], "}"}],
    Short[#, 2]& ]}], "}"}]], "Output",
 CellChangeTimes->{{3.9401379441016617`*^9, 3.940137967982339*^9}, 
   3.940138345039592*^9, 3.940138405655458*^9, 3.9401384510241756`*^9},
 CellLabel->"Out[45]=",
 CellID->646630489,ExpressionUUID->"b887e525-fc02-429c-8242-298b56b66fb5"]
}, Open  ]],

Cell["\<\
We see that we get a 2-3 times difference which is substantial (this factor \
is not constant. It will be less for smaller sets and larger for larger \
sets). Thus, this is currently our best implementation of the ordered pairs.\
\>", "Text",
 CellChangeTimes->{{3.940137984365506*^9, 3.9401380020372143`*^9}},
 CellID->1337348573,ExpressionUUID->"b21977ea-9668-45ed-967c-8b51ac80c40c"],

Cell["\<\
For the case of general subsets, there is no point in checking, since we \
already did the analysis and found that our implementation is inefficient. \
Can we find a better one?\
\>", "Text",
 CellChangeTimes->{{3.940137984365506*^9, 3.940138010669517*^9}},
 CellID->776907362,ExpressionUUID->"349a98eb-eea1-43ba-afb3-bd8874ebb4f6"],

Cell[TextData[StyleBox["A better overall implementation",
 FontWeight->"Bold",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940137984365506*^9, 3.940138016579957*^9}},
 CellID->723793424,ExpressionUUID->"d50c8f4e-3742-45b8-960d-3738b2346cbc"],

Cell["\<\
Let us try to find an alternative implementation for the ordered subsets \
function. One possibility is the following: there is a built-in function \
Subsets, which generates all distinct subsets of a given size. All that \
remains is to create all permutations for any of the subsets generated. \
Another built-in command Permutations will help us with this. So, let us \
start with the test set, for instance\
\>", "Text",
 CellChangeTimes->{{3.940137984365506*^9, 3.940138027703342*^9}},
 CellID->739091491,ExpressionUUID->"d417a574-fe4f-434f-837b-84d57a9efac6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"testset", "=", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}]}], "Input",
 CellChangeTimes->{{3.940138030899426*^9, 3.940138044215447*^9}},
 CellLabel->"In[21]:=",
 CellID->1449709438,ExpressionUUID->"3825e476-eb1c-44ac-bd6e-e5fd27370e30"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]], "Output",
 CellChangeTimes->{3.940138046477294*^9},
 CellLabel->"Out[22]=",
 CellID->1427681127,ExpressionUUID->"c93fcafa-121c-49fa-930f-6376b2d38c70"]
}, Open  ]],

Cell["Now, let us find say all subsets of length 3:", "Text",
 CellChangeTimes->{3.9401380579199953`*^9},
 CellID->1201913558,ExpressionUUID->"6005b630-660b-4d1c-afc1-50be722767c0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Subsets", "[", 
  RowBox[{"testset", ",", 
   RowBox[{"{", "3", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940138059690693*^9, 3.940138066759721*^9}},
 CellLabel->"In[23]:=",
 CellID->2058584592,ExpressionUUID->"019b6e89-2d96-4c3a-9d5c-801478b024f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c", ",", "d"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940138067122676*^9},
 CellLabel->"Out[23]=",
 CellID->254422579,ExpressionUUID->"29836965-e644-4479-897c-a618dbac5825"]
}, Open  ]],

Cell["\<\
Let us pick one of them, say a first one. To make all the permutations, we \
use the Permutations command:\
\>", "Text",
 CellChangeTimes->{3.940138079908959*^9},
 CellID->440344076,ExpressionUUID->"e7572b61-d509-4206-8011-82f867090dbe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Permutations", "[", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.940138087297091*^9, 3.940138090489896*^9}},
 CellLabel->"In[24]:=",
 CellID->1672860329,ExpressionUUID->"bd924b1b-8182-44db-9e08-812e28e1c9ed"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "c", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "b", ",", "a"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9401380909340963`*^9},
 CellLabel->"Out[24]=",
 CellID->1429327703,ExpressionUUID->"b14bbead-d7dc-47af-a9d8-ad05358f2a45"]
}, Open  ]],

Cell["\<\
All that remains to be done is to Map Permutations on the list generated by \
Subsets, and then Flatten the latter\
\>", "Text",
 CellChangeTimes->{{3.940138100753252*^9, 3.940138103091031*^9}},
 CellID->958628979,ExpressionUUID->"1abb4513-338c-4618-bb75-ff165b646bf7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{
   RowBox[{"Permutations", "/@", 
    RowBox[{"Subsets", "[", 
     RowBox[{"testset", ",", 
      RowBox[{"{", "3", "}"}]}], "]"}]}], ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.940138108373967*^9, 3.9401381201470623`*^9}},
 CellLabel->"In[25]:=",
 CellID->1814792006,ExpressionUUID->"ab6d9a90-db15-4fdb-b5cd-beed5c57c47b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "c", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "b", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "d", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "a", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "d", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "b", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "d", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "a", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "c", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "d", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "b", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "d", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "c", ",", "b"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940138120565975*^9},
 CellLabel->"Out[25]=",
 CellID->696379397,ExpressionUUID->"39918a72-1af4-4c74-9219-5b9f84a719e1"]
}, Open  ]],

Cell["\<\
We expect this implementation to be vastly superior to the previous one, due \
to a more direct use of built-in commands, but most of all, the fact that we \
avoided creation of large number of elements which then have to be deleted. \
Let us package this solution into a function:\
\>", "Text",
 CellChangeTimes->{{3.9401381339953823`*^9, 3.940138141238208*^9}},
 CellID->262649229,ExpressionUUID->"d5300ca4-6752-416c-b0a7-103883fd16ec"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "orderedSubsetsNew", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"orderedSubsetsNew", "[", 
    RowBox[{"set_List", ",", "order_Integer"}], "]"}], ":=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Map", "[", 
     RowBox[{"Permutations", ",", 
      RowBox[{"Subsets", "[", 
       RowBox[{"set", ",", 
        RowBox[{"{", "order", "}"}]}], "]"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940138146923979*^9, 3.94013818187492*^9}, {
  3.94013824025629*^9, 3.940138248907423*^9}},
 CellLabel->"In[30]:=",
 CellID->650305432,ExpressionUUID->"ebb50bef-656b-4234-96aa-5ac565889898"],

Cell["\<\
Let me remark that there is also some notion of beauty or aesthetics which we \
can assign to the implementations in Mathematica. This implementation is \
certainly more beautiful than the previous one (at least, in my taste).\
\>", "Text",
 CellChangeTimes->{{3.940138192616827*^9, 3.9401382006721087`*^9}},
 CellID->1658082855,ExpressionUUID->"f2e992ae-ed21-4437-85f1-9734698039bf"],

Cell["\<\
Let us compare the performance in the case where our solution is not that bad \
- for ordered pairs:\
\>", "Text",
 CellChangeTimes->{{3.940138192616827*^9, 3.940138198085699*^9}},
 CellID->398915350,ExpressionUUID->"a84b15bc-61e6-48ce-992f-8ea4733e23df"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"orderedSubsetsNew", "[", 
     RowBox[{
      RowBox[{"Range", "[", "70", "]"}], ",", "2"}], "]"}], "//", 
    RowBox[{
     RowBox[{"Short", "[", 
      RowBox[{"#", ",", "2"}], "]"}], "&"}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9401382065936127`*^9, 3.940138209037459*^9}, {
  3.9401382551364317`*^9, 3.940138298002605*^9}},
 CellLabel->"In[34]:=",
 CellID->1708016176,ExpressionUUID->"1fe2af1b-5104-42ab-af72-96e9f40f4551"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.001502`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "2", ",", "1", ",", "1", ",", "3", ",", "3", ",", 
      "1", ",", "1", ",", "4", ",", 
      RowBox[{"\[LeftSkeleton]", "9640", "\[RightSkeleton]"}], ",", "69", ",",
       "68", ",", "68", ",", "70", ",", "70", ",", "68", ",", "69", ",", "70",
       ",", "70", ",", "69"}], "}"}],
    Short[#, 2]& ]}], "}"}]], "Output",
 CellChangeTimes->{3.940138267184774*^9, 3.940138298964552*^9},
 CellLabel->"Out[34]=",
 CellID->2132543673,ExpressionUUID->"c09af326-8b0b-447c-b1cd-66ecd6cd1d33"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"orderedPairsNew", "[", 
     RowBox[{"Range", "[", "70", "]"}], "]"}], "//", 
    RowBox[{
     RowBox[{"Short", "[", 
      RowBox[{"#", ",", "2"}], "]"}], "&"}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.94013826857314*^9, 3.940138311668659*^9}},
 CellLabel->"In[35]:=",
 CellID->300315331,ExpressionUUID->"d09996dc-9720-46cb-b2bc-13af65a7eddb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000739`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "5"}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "4823", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"70", ",", "67"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"70", ",", "68"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"70", ",", "69"}], "}"}]}], "}"}],
    Short[#, 2]& ]}], "}"}]], "Output",
 CellChangeTimes->{3.940138276899818*^9, 3.940138312021757*^9},
 CellLabel->"Out[35]=",
 CellID->911885156,ExpressionUUID->"aa293c03-1742-4c36-8eb2-bd17c94e012e"]
}, Open  ]],

Cell["\<\
We observe that for ordered pairs, our specialized solution based on Outer is \
slightly better than an implementation based on Subsets-Permutations pair. \
However, already for 3-tuples our general <orderedSub -sets> function is \
hopelessly slower:\
\>", "Text",
 CellChangeTimes->{{3.940138570612875*^9, 3.9401385776081667`*^9}},
 CellID->931346848,ExpressionUUID->"40ef8c36-e418-4c7d-9180-55be65b85fa2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"orderedSubsets", "[", 
     RowBox[{
      RowBox[{"Range", "[", "70", "]"}], ",", "3"}], "]"}], "//", 
    RowBox[{
     RowBox[{"Short", "[", 
      RowBox[{"#", ",", "2"}], "]"}], "&"}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940138582768365*^9, 3.940138601199*^9}},
 CellLabel->"In[54]:=",
 CellID->340094059,ExpressionUUID->"5ca7368a-670d-40e7-966b-123c408f5a28"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.354571`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "5"}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "328435", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"70", ",", "69", ",", "67"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"70", ",", "69", ",", "68"}], "}"}]}], "}"}],
    Short[#, 2]& ]}], "}"}]], "Output",
 CellChangeTimes->{3.9401386027818108`*^9},
 CellLabel->"Out[54]=",
 CellID->1083611526,ExpressionUUID->"a83fb507-f01e-4e3c-a9c4-010ba45f8b7f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"orderedSubsetsNew", "[", 
     RowBox[{
      RowBox[{"Range", "[", "70", "]"}], ",", "3"}], "]"}], "//", 
    RowBox[{
     RowBox[{"Short", "[", 
      RowBox[{"#", ",", "2"}], "]"}], "&"}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940138604830106*^9, 3.94013862338205*^9}},
 CellLabel->"In[55]:=",
 CellID->722587613,ExpressionUUID->"28a3f95b-edc0-4206-b117-4724b99fc348"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.060864`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "1", ",", "3", ",", "2", ",", "2", ",", 
      "1", ",", "3", ",", "2", ",", 
      RowBox[{"\[LeftSkeleton]", "985300", "\[RightSkeleton]"}], ",", "70", 
      ",", "69", ",", "70", ",", "68", ",", "70", ",", "68", ",", "69", ",", 
      "70", ",", "69", ",", "68"}], "}"}],
    Short[#, 2]& ]}], "}"}]], "Output",
 CellChangeTimes->{3.9401386243048077`*^9},
 CellLabel->"Out[55]=",
 CellID->1330556018,ExpressionUUID->"1b3e210d-dbb2-4d14-8d9f-2d5e0c149e31"]
}, Open  ]],

Cell["\<\
This looks like quite a long execution time even for the better solution. But \
let us see how many combinations (3-tuples) have been produced:\
\>", "Text",
 CellChangeTimes->{{3.940138636325404*^9, 3.940138640321431*^9}},
 CellID->907778315,ExpressionUUID->"bbdcc8f6-8ca2-4e07-9819-7efc5df94dcd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"orderedSubsetsNew", "[", 
   RowBox[{
    RowBox[{"Range", "[", "70", "]"}], ",", "3"}], "]"}], "//", 
  "Length"}]], "Input",
 CellChangeTimes->{{3.940138643175523*^9, 3.9401386549585123`*^9}},
 CellLabel->"In[56]:=",
 CellID->2001447249,ExpressionUUID->"407e6100-0a4c-4197-bb07-08b06b352a35"],

Cell[BoxData["985320"], "Output",
 CellChangeTimes->{3.940138655335836*^9},
 CellLabel->"Out[56]=",
 CellID->242445592,ExpressionUUID->"8362628a-fcfb-4385-ac5c-1b1116c824d9"]
}, Open  ]],

Cell["\<\
We see that for the general case (not just ordered pairs), the Outer-based \
solution is miles away from the Subsets-Permutations based one. The main \
reason is of course that while the Outer was a possible choice, it was not \
exactly the right idiom in this case. It produces a lot of combinations that \
have to be eliminated later, which means that this is just a bad algorithm \
for general tuples (but reasonable for pairs).\
\>", "Text",
 CellChangeTimes->{{3.940138665423616*^9, 3.94013867277859*^9}},
 CellID->1006586385,ExpressionUUID->"8c86b6a7-b46a-41bf-bf1c-7f06bdca4a0c"],

Cell["Using Outer in more complicated cases: a caution", "ItemNumbered",
 CellChangeTimes->{3.9401386890523977`*^9},
 CellTags->"5.3.4.8",
 CellID->579170669,ExpressionUUID->"3f8e0a34-ac9d-4019-8eff-20952d1b5641"],

Cell["\<\
Outer may be used in more general setting, in particular when the input lists \
are not simple, but nested lists. There is one specific instance of that case \
which I would like to discuss now.\
\>", "Text",
 CellChangeTimes->{{3.940138701417263*^9, 3.940138703967022*^9}},
 CellID->1725545679,ExpressionUUID->"eacd7b38-58c8-4586-8099-b833481431df"],

Cell["Consider the following situation:", "Text",
 CellChangeTimes->{3.940138718720996*^9},
 CellID->1816324869,ExpressionUUID->"ab5e508c-ca77-4cac-9a27-653955dcbd4a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "f", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Outer", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8"}], "}"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.940138720240226*^9, 3.9401387389615192`*^9}},
 CellLabel->"In[57]:=",
 CellID->1755967696,ExpressionUUID->"50ab8640-8c73-4dc3-8f37-fa9251e4f56e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"1", ",", "5"}], "]"}], ",", 
         RowBox[{"f", "[", 
          RowBox[{"1", ",", "6"}], "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"1", ",", "7"}], "]"}], ",", 
         RowBox[{"f", "[", 
          RowBox[{"1", ",", "8"}], "]"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", ",", "5"}], "]"}], ",", 
         RowBox[{"f", "[", 
          RowBox[{"2", ",", "6"}], "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", ",", "7"}], "]"}], ",", 
         RowBox[{"f", "[", 
          RowBox[{"2", ",", "8"}], "]"}]}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", ",", "5"}], "]"}], ",", 
         RowBox[{"f", "[", 
          RowBox[{"3", ",", "6"}], "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", ",", "7"}], "]"}], ",", 
         RowBox[{"f", "[", 
          RowBox[{"3", ",", "8"}], "]"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", ",", "5"}], "]"}], ",", 
         RowBox[{"f", "[", 
          RowBox[{"4", ",", "6"}], "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", ",", "7"}], "]"}], ",", 
         RowBox[{"f", "[", 
          RowBox[{"4", ",", "8"}], "]"}]}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940138739304817*^9},
 CellLabel->"Out[58]=",
 CellID->347845572,ExpressionUUID->"cbee5fdf-5ea1-42e4-a728-62da1c4609b2"]
}, Open  ]],

Cell["\<\
This output is not what one would immediately expect. What if I want to get \
my function <f> applied to the sublists, like {{f[{1,2},{5,6}],...}}. To \
achieve this, we have to tell Outer that it should treat sublists as \
individual elements. This is done by specifying elements on which level of \
the input lists (first in this case) should be treated as individual elements:\
\>", "Text",
 CellChangeTimes->{{3.940138749445101*^9, 3.9401387569924707`*^9}},
 CellID->790041470,ExpressionUUID->"d0c81e1f-4ee4-4ff4-9b34-84feac55ac10"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Outer", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8"}], "}"}]}], "}"}], ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.94013876312599*^9, 3.9401387765495787`*^9}},
 CellLabel->"In[59]:=",
 CellID->1206181539,ExpressionUUID->"7f9e9775-e107-422e-88c5-afb011cf86d6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6"}], "}"}]}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "8"}], "}"}]}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "6"}], "}"}]}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "8"}], "}"}]}], "]"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940138776953268*^9},
 CellLabel->"Out[59]=",
 CellID->505650254,ExpressionUUID->"ccac9379-fb3c-4a6b-9f11-c96311ff7985"]
}, Open  ]],

Cell[TextData[{
 "Now we get what we wanted. In this particular case, another possibility to \
get it is to use ",
 StyleBox["Distribute",
  FontWeight->"Bold"],
 ":"
}], "Text",
 CellChangeTimes->{3.940138798626815*^9},
 CellID->871027799,ExpressionUUID->"c38b75ec-131d-4b7f-991d-a03112b00ec2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Distribute", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"5", ",", "6"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7", ",", "8"}], "}"}]}], "}"}]}], "]"}], ",", "List"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940138804571784*^9, 3.940138834512855*^9}},
 CellLabel->"In[60]:=",
 CellID->196860661,ExpressionUUID->"f4d30d7a-ac32-4f75-95f4-16108a311642"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8"}], "}"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "8"}], "}"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940138835094121*^9},
 CellLabel->"Out[60]=",
 CellID->978254804,ExpressionUUID->"9bfa5726-7f35-40b4-b16f-d9229f4eb071"]
}, Open  ]],

Cell["\<\
For more details on Distribute, consult Mathematica Help and Mathematica Book.\
\>", "Text",
 CellChangeTimes->{3.940138844350986*^9},
 CellID->393689396,ExpressionUUID->"2fd61190-6b06-47c3-8dc2-bd17df82edfd"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Nest Family", "Subsection",
 CellChangeTimes->{3.940138856875098*^9},
 CellID->340562165,ExpressionUUID->"7e6c1de9-75ed-49be-9430-e6a946f9c79c"],

Cell[CellGroupData[{

Cell["Nest and NestList", "Subsubsection",
 CellChangeTimes->{3.940138864495286*^9},
 CellID->784387900,ExpressionUUID->"02562baa-63a3-4c68-94fb-a8f87592beba"],

Cell["\<\
This function is used to repeatedly apply the same function on an expression. \
The format is:\
\>", "Text",
 CellChangeTimes->{3.940138875414379*^9, 3.9407406137176847`*^9},
 CellID->1952810014,ExpressionUUID->"c9c6af04-d75b-4cc8-b753-81e03cd5b31b"],

Cell[BoxData[
 RowBox[{"Nest", "[", 
  RowBox[{"function", ",", " ", "expression", ",", "n"}], "]"}]], "Input",
 CellChangeTimes->{{3.940138880876639*^9, 3.940138885766748*^9}},
 CellID->1944300563,ExpressionUUID->"806006ac-d30d-4129-b9a2-b1cd179ed2e4"],

Cell["\<\
where <n > should be an integer giving the number of times that the function \
has to be applied. For example:\
\>", "Text",
 CellChangeTimes->{{3.94013889419322*^9, 3.940138896624699*^9}},
 CellID->1455891219,ExpressionUUID->"907c454f-020b-4ce9-8b41-62a48fbe5667"],

Cell["Simple examples", "ItemNumbered",
 CellChangeTimes->{3.940138905906274*^9},
 CellID->1555461161,ExpressionUUID->"f6cde26d-d59f-42c3-8f5e-7872571b2244"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"f", ",", "x"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Nest", "[", 
  RowBox[{"f", ",", "x", ",", "5"}], "]"}]}], "Input",
 CellChangeTimes->{{3.940138907666582*^9, 3.940138914260976*^9}},
 CellLabel->"In[61]:=",
 CellID->1418501849,ExpressionUUID->"454b99da-9863-457d-8032-d6087b5d67cf"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"f", "[", 
   RowBox[{"f", "[", 
    RowBox[{"f", "[", 
     RowBox[{"f", "[", "x", "]"}], "]"}], "]"}], "]"}], "]"}]], "Output",
 CellChangeTimes->{3.940138914719696*^9},
 CellLabel->"Out[62]=",
 CellID->1692669456,ExpressionUUID->"a6d36e0b-a900-4cc1-8f79-7feaa4e2f40c"]
}, Open  ]],

Cell["Consider, for instance,", "Text",
 CellChangeTimes->{3.940138924879567*^9},
 CellID->979675183,ExpressionUUID->"94b2e8cb-1eb6-497c-a24e-ae657c61c7c5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "x_", "]"}], ":=", 
   RowBox[{"x", "^", "2"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.940138927283147*^9, 3.9401389314249077`*^9}},
 CellLabel->"In[64]:=",
 CellID->1986592717,ExpressionUUID->"8661b3a7-7676-445f-9270-42f94e94dd9d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Nest", "[", 
  RowBox[{"f", ",", "2", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.940138932609144*^9, 3.940138934408032*^9}},
 CellLabel->"In[65]:=",
 CellID->660409639,ExpressionUUID->"05c63beb-764a-41ac-a373-77566aa009ef"],

Cell[BoxData["256"], "Output",
 CellChangeTimes->{{3.940138934888673*^9, 3.940138949644539*^9}},
 CellLabel->"Out[65]=",
 CellID->96735598,ExpressionUUID->"18b45a9a-51dc-4b53-94d2-3b674b10642c"]
}, Open  ]],

Cell["NestList", "ItemNumbered",
 CellChangeTimes->{3.940138958675931*^9},
 CellID->190074807,ExpressionUUID->"cc219751-52af-4a4e-b981-b13369896d28"],

Cell["\<\
The function NestList is really the same as Nest but it gives more \
information, since its output is a list of all intermediate steps of the \
application of Nest. For the above example:\
\>", "Text",
 CellChangeTimes->{{3.940138970885008*^9, 3.940138976426908*^9}},
 CellID->1279098160,ExpressionUUID->"08902b62-0bce-4ff8-90b4-ca63972a34e0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestList", "[", 
  RowBox[{"f", ",", "2", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.940138980205043*^9, 3.9401389831591387`*^9}},
 CellLabel->"In[66]:=",
 CellID->81293786,ExpressionUUID->"b22f2e79-9af0-4099-9323-202f913a1150"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4", ",", "16", ",", "256"}], "}"}]], "Output",
 CellChangeTimes->{3.940138983533626*^9},
 CellLabel->"Out[66]=",
 CellID->1543009376,ExpressionUUID->"64b4a699-a177-402b-a99d-e1ab53ed8a3d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestList", "[", 
  RowBox[{"f", ",", "x", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.9401389869908447`*^9, 3.940138990612824*^9}},
 CellLabel->"In[67]:=",
 CellID->865880744,ExpressionUUID->"c578b383-d99b-4ea3-98e7-89e62d1691d8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", 
   SuperscriptBox["x", "2"], ",", 
   SuperscriptBox["x", "4"], ",", 
   SuperscriptBox["x", "8"]}], "}"}]], "Output",
 CellChangeTimes->{3.940138991033223*^9},
 CellLabel->"Out[67]=",
 CellID->703966528,ExpressionUUID->"b4261586-23c2-43d4-9292-c2bec44bfb38"]
}, Open  ]],

Cell["\<\
We also see that the first element in the NestList is always the original \
expression, which corresponds to the function <f> applied zero times.\
\>", "Text",
 CellChangeTimes->{{3.940139001065237*^9, 3.9401390097203293`*^9}},
 CellID->1078024773,ExpressionUUID->"a0732195-07be-4c71-bbc9-419e71417e36"],

Cell["\<\
It is important that NestList is as efficient as Nest - there is no penalty \
for getting all the intermediate results. Indeed, the function still has to \
apply in stages - once, twice, etc - so the intermediate results are in \
principle internally available to the system. Simple Nest just does not \
collect them.\
\>", "Text",
 CellChangeTimes->{{3.940139001065237*^9, 3.940139022556019*^9}},
 CellID->758483646,ExpressionUUID->"18350093-c041-4448-a704-5789d4113d3e"],

Cell["Pure functions", "ItemNumbered",
 CellChangeTimes->{3.940139036394643*^9},
 CellID->1536510645,ExpressionUUID->"e6b538ae-195d-458a-99c1-a68b8db92046"],

Cell["Both Nest and NestList work with pure functions as well:", "Text",
 CellChangeTimes->{3.940139046897643*^9},
 CellID->643555340,ExpressionUUID->"c0e5febb-9f05-4eb5-9d5b-62c1815662d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestList", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "^", "2"}], "&"}], ",", "2", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.94013905035538*^9, 3.9401390554145737`*^9}},
 CellLabel->"In[68]:=",
 CellID->2085900945,ExpressionUUID->"6d509bc9-f573-469d-a89d-31f8660eec03"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4", ",", "16", ",", "256"}], "}"}]], "Output",
 CellChangeTimes->{3.940139055791753*^9},
 CellLabel->"Out[68]=",
 CellID->1531095402,ExpressionUUID->"f2ac75ad-4ff7-4b33-8d59-401a3ebfab1d"]
}, Open  ]],

Cell["Example: imitating Nest", "ItemNumbered",
 CellChangeTimes->{3.9401390681803427`*^9},
 CellID->1971363060,ExpressionUUID->"4ee3c57d-865e-44fc-abb9-0939e0d210ca"],

Cell["\<\
It is not at all difficult to write our own version of Nest. And this is \
perhaps one of the rare cases where the procedural programming style is quite \
good:\
\>", "Text",
 CellChangeTimes->{{3.940139124534601*^9, 3.940139126606496*^9}},
 CellID->1321243504,ExpressionUUID->"628f2ce8-a13f-4124-9cb9-e31cb314c298"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"myNest", "[", 
    RowBox[{"f_", ",", "x_", ",", "n_Integer"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"var", "=", "x"}], "}"}], ",", 
     RowBox[{
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"var", "=", 
         RowBox[{"f", "[", "var", "]"}]}], ",", 
        RowBox[{"{", "n", "}"}]}], "]"}], ";", "var"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.940139360893222*^9, 3.940139385489563*^9}},
 CellLabel->"In[69]:=",
 CellID->1155377711,ExpressionUUID->"d9eafa08-06f3-4117-a0e3-3524e3cb3511"],

Cell["Let us check:", "Text",
 CellChangeTimes->{{3.9401393881613503`*^9, 3.9401393909805613`*^9}},
 CellID->1010081329,ExpressionUUID->"6bb90d16-2b70-42ea-a2bd-89676fa0e3c2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "f", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"myNest", "[", 
  RowBox[{"f", ",", "x", ",", "5"}], "]"}]}], "Input",
 CellChangeTimes->{{3.940139392017329*^9, 3.9401393979874897`*^9}},
 CellLabel->"In[70]:=",
 CellID->341547123,ExpressionUUID->"fa1bb005-a00b-42c3-9df1-ef9ebdef4c97"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"f", "[", 
   RowBox[{"f", "[", 
    RowBox[{"f", "[", 
     RowBox[{"f", "[", "x", "]"}], "]"}], "]"}], "]"}], "]"}]], "Output",
 CellChangeTimes->{3.940139398394635*^9},
 CellLabel->"Out[71]=",
 CellID->1078687567,ExpressionUUID->"68b55436-1617-4244-914e-cf7d41036d9f"]
}, Open  ]],

Cell["Our function will also work with pure functions:", "Text",
 CellChangeTimes->{3.940139420189*^9},
 CellID->444990595,ExpressionUUID->"789abbc1-4622-4b52-bc52-2297be5fbf49"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myNest", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "^", "2"}], "&"}], ",", "x", ",", "4"}], "]"}]], "Input",
 CellChangeTimes->{{3.940139422111219*^9, 3.940139428733885*^9}},
 CellLabel->"In[72]:=",
 CellID->1311707689,ExpressionUUID->"f4508b10-9928-4a0d-880c-8e9b59bb48ce"],

Cell[BoxData[
 SuperscriptBox["x", "16"]], "Output",
 CellChangeTimes->{3.940139429195736*^9},
 CellLabel->"Out[72]=",
 CellID->1601943153,ExpressionUUID->"ea661988-2999-4210-92f4-8b50719081a4"]
}, Open  ]],

Cell["Let us compare the performance with that of a built-in one:", "Text",
 CellChangeTimes->{3.940139438074624*^9},
 CellID->856090032,ExpressionUUID->"6398f0b3-e096-4851-8373-ee7770f9486d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Nest", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "^", "1.001"}], "&"}], ",", "2", ",", "100"}], "]"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9401394504540863`*^9, 3.9401394569627457`*^9}, {
  3.940139489336977*^9, 3.9401394904738626`*^9}},
 CellLabel->"In[76]:=",
 CellID->396575264,ExpressionUUID->"f95e66d9-f639-4875-a87e-21b9dbf8f4b1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000283`", ",", "2.151161287557843`"}], "}"}]], "Output",
 CellChangeTimes->{3.940139457211162*^9, 3.940139490864572*^9},
 CellLabel->"Out[76]=",
 CellID->30788564,ExpressionUUID->"4b8525ed-49a0-4cde-8bc5-c1836f002341"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"myNest", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "^", "1.001"}], "&"}], ",", "2", ",", "100"}], "]"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.94013947739375*^9, 3.9401394786524677`*^9}},
 CellLabel->"In[75]:=",
 CellID->1647137486,ExpressionUUID->"a19d9185-c7d9-42b0-ba65-a5feb1aa4869"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000143`", ",", "2.151161287557843`"}], "}"}]], "Output",
 CellChangeTimes->{3.9401394790535297`*^9},
 CellLabel->"Out[75]=",
 CellID->319205475,ExpressionUUID->"0db8375e-1182-4472-b363-9d3e9b6a35c6"]
}, Open  ]],

Cell["We still have several times difference in this example.", "Text",
 CellChangeTimes->{{3.940139514127056*^9, 3.940139518087153*^9}},
 CellID->1763389878,ExpressionUUID->"d074a4f9-791e-485c-b67c-cad2ccad4a05"],

Cell["\<\
The reason that I insert the rather boring performance comparisons in so many \
places is to point out one single thing: try to avoid writing your own \
functions if you can find a better idiom to solve your problem, which matches \
some of the built-in ones. The fact that we can rewrite most of the built-in \
functions and imitate their behavior shows once again that in some sense \
Mathematica\[CloseCurlyQuote]s language is overcomplete. Why, then, all these \
extra functions were written? The answer is simple: to give better \
performance in certain cases. Also, note that while the functions like Nest \
and others considered in this chapter are in some sense specific, they are on \
the other hand quite abstract and then can handle a lot of different \
problems. The
trick is to learn to translate your given problem into a right Mathematica \
idiom.\
\>", "Text",
 CellChangeTimes->{{3.940139514127056*^9, 3.9401395479975357`*^9}},
 CellID->1979229022,ExpressionUUID->"3a5ff93b-44db-48e6-ae0c-a2b6dd7eaada"],

Cell["\<\
One can argue that in other languages like C one can always start from \
scratch, write any such \[OpenCurlyDoubleQuote]derivative\
\[CloseCurlyDoubleQuote] function with very few initial building blocks, and \
be sure that it will give a reasonable performance. But this is just not so \
given a real level of abstraction that functions like Nest, Thread, Outer, \
etc can handle - they can work on essentially any objects without any \
modification. And this leads to another important
consequence: the well-written Mathematica code is usually very concise, more \
so than in most other programming languages. But as Paul Graham has put it, \
\[OpenCurlyDoubleQuote]succinctness is power\[CloseCurlyDoubleQuote] [14].\
\>", "Text",
 CellChangeTimes->{{3.940139514127056*^9, 3.940139558814773*^9}},
 CellID->651357616,ExpressionUUID->"6c2185ff-a2c7-4327-b532-cf6326f97328"],

Cell["Example: approximating the square root of a number", "ItemNumbered",
 CellChangeTimes->{3.940139607341144*^9},
 CellID->1382327821,ExpressionUUID->"c2667634-6351-4c87-a250-62beda3b26d7"],

Cell["\<\
Nest is well-suited to be used with recursive functions (in the mathematical \
sense). For example, for the approximate computation of the square root of \
some number A, one may use a sequence:\
\>", "Text",
 CellChangeTimes->{{3.940142684043541*^9, 3.94014268656222*^9}, 
   3.940740613740782*^9},
 CellID->1305594301,ExpressionUUID->"e270bb4d-9fbe-4a5c-9690-6807a93b7f69"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["t", 
   RowBox[{"n", "+", "1"}]], "=", 
  RowBox[{
   RowBox[{"1", "/", "2"}], 
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["t", "n"], "+", 
     RowBox[{"A", "/", 
      SubscriptBox["t", "n"]}]}], ")"}]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.940142756829076*^9, 3.940142775923612*^9}},
 CellID->1775494403,ExpressionUUID->"295c5b1e-a7ce-4bbb-8944-aaa73d949599"],

Cell["\<\
We can define a function which will do this transformation. Let us start with \
some fixed number, say 3. Then we can use a pure function:\
\>", "Text",
 CellChangeTimes->{{3.9401427913777113`*^9, 3.9401427936244087`*^9}},
 CellID->1590248585,ExpressionUUID->"255c2f43-2e00-488b-b20e-746fc19fdfd0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestList", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"#", "+", 
       RowBox[{"3", "/", "#"}]}], ")"}], "/", "2"}], "&"}], ",", "5.", ",", 
   "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.9401427987113657`*^9, 3.940142815734849*^9}},
 CellLabel->"In[77]:=",
 CellID->943004487,ExpressionUUID->"876cf251-99ae-49c1-b3ca-ef08c46eecde"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "5.`", ",", "2.8`", ",", "1.9357142857142855`", ",", "1.7427648919346337`", 
   ",", "1.7320837413295722`", ",", "1.7320508078819778`"}], "}"}]], "Output",\

 CellChangeTimes->{3.9401428163607397`*^9},
 CellLabel->"Out[77]=",
 CellID->1092166391,ExpressionUUID->"908df952-95db-4c23-9bee-628d29bf4762"]
}, Open  ]],

Cell["\<\
Here our starting number was 5, and we used 5 iterations altogether. The list \
of intermediate results shows that this method converges quite fast. If we \
are interested in final result only, then we use Nest:\
\>", "Text",
 CellChangeTimes->{{3.940142827674055*^9, 3.94014283052414*^9}},
 CellID->1497802628,ExpressionUUID->"dfe4b9e3-e4f4-46f3-b6cf-21b140b16153"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"Nest", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"#", "+", 
        RowBox[{"3", "/", "#"}]}], ")"}], "/", "2"}], "&"}], ",", "5.", ",", 
    "5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940142839130786*^9, 3.940142851026524*^9}},
 CellLabel->"In[78]:=",
 CellID->1716502429,ExpressionUUID->"70ffdc29-326f-4363-8ae6-4cafefd5f999"],

Cell[BoxData["1.7320508078819778`"], "Output",
 CellChangeTimes->{3.9401428514613953`*^9},
 CellLabel->"Out[78]=",
 CellID->1850302843,ExpressionUUID->"db76dac4-4013-42bf-aa40-10cb26878ad9"]
}, Open  ]],

Cell["We can see how close we are:", "Text",
 CellChangeTimes->{3.940142862864977*^9},
 CellID->329190094,ExpressionUUID->"d8dd9805-7c12-4610-b7f1-1b39843e33f0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "^", "2"}], "-", "3"}]], "Input",
 CellChangeTimes->{{3.940142864956417*^9, 3.940142867722633*^9}},
 CellLabel->"In[79]:=",
 CellID->1811189814,ExpressionUUID->"19e09e0a-d75c-4761-8fde-29a718c93aed"],

Cell[BoxData["1.0846119558038936`*^-9"], "Output",
 CellChangeTimes->{3.940142868140073*^9},
 CellLabel->"Out[79]=",
 CellID->935917050,ExpressionUUID->"8d0fc19c-62ad-4f13-8d3c-3bc9a94620b5"]
}, Open  ]],

Cell["\<\
Now, we would like to be able to indicate the number <A> from the beginning. \
One way is to make a function like this:\
\>", "Text",
 CellChangeTimes->{{3.940142880213521*^9, 3.940142882199024*^9}},
 CellID->1787628722,ExpressionUUID->"f63346da-c80a-4d4b-9ffb-88771a3b95c6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mySquareRoot", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mySquareRoot", "[", 
    RowBox[{
     RowBox[{"number_", "?", "NumericQ"}], ",", 
     RowBox[{"iternum_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Nest", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"#", "+", 
         RowBox[{"number", "/", "#"}]}], ")"}], "/", "2"}], "&"}], ",", "1.", 
     ",", "iternum"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940142885245749*^9, 3.940142921978874*^9}},
 CellLabel->"In[80]:=",
 CellID->970459634,ExpressionUUID->"0255c0e4-cb9c-4168-b62c-991e58e6fabe"],

Cell["\<\
Here we adopt a convention that our approximate solution always starts from \
1. By using a more elaborate starting point which will depend on the number \
A, one may reduce somewhat the number of iterations needed, but the \
convergence is quite fast anyway.\
\>", "Text",
 CellChangeTimes->{{3.9401429345038977`*^9, 3.940142946099333*^9}},
 CellID->78723954,ExpressionUUID->"6884342e-e10c-4404-9dfd-de3c8d8f03b6"],

Cell["\<\
There are two interesting details in the above code. The first is that the \
parameter passed to the function through the pattern-defined definition gets \
then embedded into a pure function inside Nest. This possibility is very \
often useful.\
\>", "Text",
 CellChangeTimes->{{3.9401429345038977`*^9, 3.940142954660233*^9}},
 CellID->435545890,ExpressionUUID->"d4f54400-a60a-4f61-9ecc-5190e683a482"],

Cell["\<\
The second is the use of <NumericQ> predicate. It gives true on any object on \
which the application of Mathematica <N> command results in a number. For \
instance,\
\>", "Text",
 CellChangeTimes->{{3.9401429345038977`*^9, 3.940142958081411*^9}},
 CellID->1248814440,ExpressionUUID->"0d2b7135-a808-4dc7-9f6c-f6f291e15467"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NumericQ", "[", "Pi", "]"}]], "Input",
 CellChangeTimes->{{3.940142966863756*^9, 3.9401429690620813`*^9}},
 CellLabel->"In[82]:=",
 CellID->113619948,ExpressionUUID->"2c25a849-544e-474c-b559-5a5fe17b82e8"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9401429692897243`*^9},
 CellLabel->"Out[82]=",
 CellID->396660953,ExpressionUUID->"9e433105-df89-43d4-9724-d2cbd3e0af72"]
}, Open  ]],

Cell["\<\
There is another predicate of the similar type - <NumberQ>. This one however \
is restricted to numbers only:\
\>", "Text",
 CellChangeTimes->{{3.940142978128821*^9, 3.940142980033308*^9}},
 CellID->891396783,ExpressionUUID->"f40c2049-7124-4ca4-9df8-6eb5a7ea1d94"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NumberQ", "/@", 
  RowBox[{"{", 
   RowBox[{"Pi", ",", "2"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.94014298201495*^9, 3.940142985199607*^9}},
 CellLabel->"In[83]:=",
 CellID->906949168,ExpressionUUID->"f3617445-baf5-464a-ba4f-0142e7ec139d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.94014298562501*^9},
 CellLabel->"Out[83]=",
 CellID->1513369199,ExpressionUUID->"71aa2606-0bbc-4985-b8c9-b0e8c8aeb8d6"]
}, Open  ]],

Cell["\<\
Let us now check our function, by Mapping it on a list of numbers:\
\>", "Text",
 CellChangeTimes->{3.940142999667552*^9},
 CellID->399812525,ExpressionUUID->"812498cc-8508-45c9-bd24-8b04dc1a01cd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reslist", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"mySquareRoot", "[", 
     RowBox[{"#", ",", "5"}], "]"}], "&"}], "/@", 
   RowBox[{"Range", "[", "10", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.940143001559886*^9, 3.940143015970645*^9}},
 CellLabel->"In[84]:=",
 CellID->451904340,ExpressionUUID->"f2e90604-2197-464f-ae1d-47599caf0eee"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "1.414213562373095`", ",", "1.7320508075688774`", ",", 
   "2.000000000000002`", ",", "2.236067977499978`", ",", 
   "2.4494897427875517`", ",", "2.6457513111113693`", ",", 
   "2.8284271250498643`", ",", "3.000000001396984`", ",", 
   "3.162277665175675`"}], "}"}]], "Output",
 CellChangeTimes->{3.940143016301406*^9},
 CellLabel->"Out[84]=",
 CellID->845158403,ExpressionUUID->"db31cbbc-8a08-4211-ae07-df1939447080"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reslist", "^", "2"}]], "Input",
 CellChangeTimes->{{3.940143019905942*^9, 3.940143022061183*^9}},
 CellLabel->"In[85]:=",
 CellID->2064227245,ExpressionUUID->"06cc7392-8dd5-4eb3-b666-87b9ab18c1c3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "1.9999999999999996`", ",", "3.0000000000000004`", ",", 
   "4.000000000000009`", ",", "5.000000000000843`", ",", "6.000000000021426`",
    ",", "7.00000000024753`", ",", "8.00000000171784`", ",", 
   "9.000000008381903`", ",", "10.000000031668918`"}], "}"}]], "Output",
 CellChangeTimes->{3.94014302247301*^9},
 CellLabel->"Out[85]=",
 CellID->1093082678,ExpressionUUID->"7cfd187c-bf7e-4c86-a771-d0ce29f206af"]
}, Open  ]],

Cell["\<\
There is another solution to the problem above - to write a function that \
will automatically embed the number <A> into a pure function, and then use \
this function in Nest. But then, we have to write a function that returns a \
pure function. Is this possible? Well, why not:\
\>", "Text",
 CellChangeTimes->{{3.9401430939876747`*^9, 3.940143099568111*^9}},
 CellID->1865452708,ExpressionUUID->"83bb267a-2bfd-4ac3-bd78-e4315234aa70"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "iterFun", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"iterFun", "[", 
    RowBox[{"number_", "?", "NumericQ"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"#", "+", 
       RowBox[{"number", "/", "#"}]}], ")"}], "/", "2"}], "&"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940143103684061*^9, 3.940143129629476*^9}},
 CellLabel->"In[86]:=",
 CellID->1004887566,ExpressionUUID->"517d9244-a285-469e-b7a9-f130c3b3bdc5"],

Cell["We now rewrite our square root function:", "Text",
 CellChangeTimes->{3.940143136879668*^9},
 CellID->315434975,ExpressionUUID->"69d5900e-5049-4f6a-9156-cb327df9dfd5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mySquareRootNew", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mySquareRootNew", "[", 
    RowBox[{
     RowBox[{"number_", "?", "NumericQ"}], ",", 
     RowBox[{"iternum_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Nest", "[", 
    RowBox[{
     RowBox[{"iterFun", "[", "number", "]"}], ",", "1.", ",", "iternum"}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9401431386345243`*^9, 3.940143170143518*^9}, {
  3.940143213722234*^9, 3.9401432236653013`*^9}},
 CellLabel->"In[94]:=",
 CellID->1963862929,ExpressionUUID->"1b96d153-178c-48d4-b2dd-710264b873ee"],

Cell["Let us test again:", "Text",
 CellChangeTimes->{{3.9401431724989853`*^9, 3.94014317651888*^9}},
 CellID->1133226940,ExpressionUUID->"070af291-5f79-4d1b-a6a2-0a4b3e889e4d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mySquareRootNew", "[", 
  RowBox[{"2", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.9401431773192472`*^9, 3.940143181020056*^9}},
 CellLabel->"In[96]:=",
 CellID->1537850354,ExpressionUUID->"5306c1cf-ec65-411f-b224-88046f84a1c3"],

Cell[BoxData["1.414213562373095`"], "Output",
 CellChangeTimes->{{3.94014318147957*^9, 3.940143192775736*^9}, 
   3.940143227220991*^9},
 CellLabel->"Out[96]=",
 CellID->1096972174,ExpressionUUID->"3e37b739-f0ef-4cc3-93a7-822c9696a210"]
}, Open  ]],

Cell["\<\
It is interesting that if I want to call the <iterFun> function on a \
particular number (which is a current approximation to the square root), I \
need a rather unusual syntax:\
\>", "Text",
 CellChangeTimes->{{3.94014323656636*^9, 3.940143238787449*^9}},
 CellID->664218923,ExpressionUUID->"4ad1cc04-1b3c-4079-a607-1a7b2b2b4e4a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"iterFun", "[", "2", "]"}], "[", "1.4", "]"}]], "Input",
 CellChangeTimes->{{3.940143242557537*^9, 3.940143247262878*^9}},
 CellLabel->"In[97]:=",
 CellID->690314988,ExpressionUUID->"f8cf83f4-404b-4f32-bd70-1d5484ce9e5f"],

Cell[BoxData["1.4142857142857141`"], "Output",
 CellChangeTimes->{3.940143247669827*^9},
 CellLabel->"Out[97]=",
 CellID->751356130,ExpressionUUID->"58bb6edf-e4ff-41b8-ac8c-c143ad7d6cac"]
}, Open  ]],

Cell["\<\
It is actually not difficult do understand: iterFun[2] gives you a pure \
function\
\>", "Text",
 CellChangeTimes->{3.940143257204867*^9},
 CellID->838632550,ExpressionUUID->"a0741935-4947-4cb6-b010-bad116e21779"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"iterFun", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.940143259985273*^9, 3.9401432622615023`*^9}},
 CellLabel->"In[98]:=",
 CellID->1485765060,ExpressionUUID->"9a63fdf2-c8e0-497f-a8d5-6c60c9c9cea9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   FractionBox["1", "2"], " ", 
   RowBox[{"(", 
    RowBox[{"#1", "+", 
     FractionBox["2", "#1"]}], ")"}]}], "&"}]], "Output",
 CellChangeTimes->{3.940143262653564*^9},
 CellLabel->"Out[98]=",
 CellID->377137725,ExpressionUUID->"cf594e85-dd7a-466f-ace2-c6d0350bcd2b"]
}, Open  ]],

Cell["\<\
So, think of this composite (normal) expression as of a function head.What is \
really nice is that Mathematica\[CloseCurlyQuote]s syntax allows such \
expressions.\
\>", "Text",
 CellChangeTimes->{{3.9401442377611103`*^9, 3.940144248044396*^9}},
 CellID->1329501778,ExpressionUUID->"064eb0da-eecb-445a-9bcf-225a35e74a20"],

Cell["\<\
To complete the story: it is not necessary for <iterFun > to return a pure \
function. We can define it also through SubValues, and this allows us to add \
an argument - check:\
\>", "Text",
 CellChangeTimes->{{3.9401442377611103`*^9, 3.940144250979589*^9}, 
   3.940276417595496*^9, 3.9407406137654657`*^9},
 CellID->696986301,ExpressionUUID->"07c17f27-68dd-485e-8372-bb113316247e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "iterFunSV", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"iterFunSV", "[", 
     RowBox[{"number_", "?", "NumericQ"}], "]"}], "[", 
    RowBox[{"x_", "?", "NumericQ"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", "+", 
      RowBox[{"number", "/", "x"}]}], ")"}], "/", "2"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940144256474884*^9, 3.9401442861422577`*^9}},
 CellLabel->"In[99]:=",
 CellID->400838840,ExpressionUUID->"179c64c9-0900-43a4-897c-77f86885c710"],

Cell["\<\
It is easy to check that this function also works when we use it in Nest.\
\>", "Text",
 CellChangeTimes->{{3.940144299491707*^9, 3.940144314908346*^9}},
 CellID->634263340,ExpressionUUID->"b25d050d-5e7e-4790-a034-c3992ed19b2a"],

Cell["\<\
Keep in mind that Functions <iterFunSV > and <iterFun > differ in certain \
subtle aspects. Unimportant here, they may become important in different \
circumstances. For instance, <iterFun > called on a specific number returns a \
pure function with this number embedded in it once and for all. We can then \
keep this specific one in a variable and use (call on some arguments) any \
number of times (this is a simple example of what is called a closure), for \
instance:\
\>", "Text",
 CellChangeTimes->{{3.940144299491707*^9, 3.940144329759297*^9}, {
  3.9402764176178923`*^9, 3.940276417662373*^9}},
 CellID->1213774012,ExpressionUUID->"956b5c3d-c73f-42a1-be58-61d2c726e7f8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fn", "=", 
  RowBox[{"iterFun", "[", "5", "]"}]}]], "Input",
 CellChangeTimes->{{3.940144331744019*^9, 3.940144334647964*^9}},
 CellLabel->"In[101]:=",
 CellID->368039614,ExpressionUUID->"45f5b95b-b8cf-4888-95fc-e25ce1ff882a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   FractionBox["1", "2"], " ", 
   RowBox[{"(", 
    RowBox[{"#1", "+", 
     FractionBox["5", "#1"]}], ")"}]}], "&"}]], "Output",
 CellChangeTimes->{3.9401443354655437`*^9},
 CellLabel->"Out[101]=",
 CellID->495148333,ExpressionUUID->"963e2c87-e19d-4974-95b0-253e4f9f8938"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"fn", ",", 
   RowBox[{"Range", "[", "10", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940144336901538*^9, 3.940144341325284*^9}},
 CellLabel->"In[102]:=",
 CellID->1128708665,ExpressionUUID->"dcd3228e-37ef-4658-b784-323be10f93e2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", 
   FractionBox["9", "4"], ",", 
   FractionBox["7", "3"], ",", 
   FractionBox["21", "8"], ",", "3", ",", 
   FractionBox["41", "12"], ",", 
   FractionBox["27", "7"], ",", 
   FractionBox["69", "16"], ",", 
   FractionBox["43", "9"], ",", 
   FractionBox["21", "4"]}], "}"}]], "Output",
 CellChangeTimes->{3.9401443418148527`*^9},
 CellLabel->"Out[102]=",
 CellID->1449955416,ExpressionUUID->"d7c25f5b-bf26-41ae-ad6d-72cb24362d4e"]
}, Open  ]],

Cell["\<\
In contrast, <iterFunSV > can not be called with only the first \
\[OpenCurlyDoubleQuote]argument\[CloseCurlyDoubleQuote] (a number to embed) - \
it needs both arguments at the same time:\
\>", "Text",
 CellChangeTimes->{{3.940144355766653*^9, 3.940144358156509*^9}, 
   3.940276417684383*^9},
 CellID->590801605,ExpressionUUID->"fb356922-6f47-43c9-a7e1-3e3850961610"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"iterFunSV", "[", "5", "]"}], ",", 
   RowBox[{
    RowBox[{"iterFunSV", "[", "5", "]"}], "[", "3", "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.940144361788673*^9, 3.940144375900992*^9}},
 CellLabel->"In[103]:=",
 CellID->1529287174,ExpressionUUID->"fe592074-9ffa-4eea-a3b2-a4794e84cbcb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"iterFunSV", "[", "5", "]"}], ",", 
   FractionBox["7", "3"]}], "}"}]], "Output",
 CellChangeTimes->{3.940144376380226*^9},
 CellLabel->"Out[103]=",
 CellID->136959928,ExpressionUUID->"43f4c08c-1516-44e2-af97-c4773dfe8d8d"]
}, Open  ]],

Cell["\<\
In some cases this may be inefficient, but on the other hand, as we saw, we \
can use patterns for more detailed type checks. The bottom line: these \
functions are different.\
\>", "Text",
 CellChangeTimes->{{3.940144386293748*^9, 3.9401443885123377`*^9}},
 CellID->1930523959,ExpressionUUID->"28a8f8fb-f1ea-404d-8c4f-a0ef90e341a3"],

Cell["Example: generating Hermite polynomials", "ItemNumbered",
 CellChangeTimes->{3.94014440039471*^9},
 CellID->1023769026,ExpressionUUID->"7eb9f892-08da-42d7-9215-528460980d87"],

Cell["\<\
Here we will generate the nth Hermite polynomial using the Rodriguez\
\[CloseCurlyQuote]s formula:\
\>", "Text",
 CellChangeTimes->{{3.940144409087974*^9, 3.940144414870669*^9}},
 CellID->847040218,ExpressionUUID->"250ca666-b2cf-40e9-a9f3-69c8993bd9d5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"HoldForm", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "^", "n"}], " ", 
    RowBox[{"Exp", "[", 
     RowBox[{"x", "^", "2"}], "]"}], 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{"-", 
        RowBox[{"x", "^", "2"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "n"}], "}"}]}], "]"}]}], "]"}], "//", 
  "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.940144420690254*^9, 3.940144470851245*^9}},
 CellLabel->"In[106]:=",
 CellID->1597782270,ExpressionUUID->"394b2cb5-1937-4d7d-86dd-548bfcf5e269"],

Cell[BoxData[
 FormBox[
  TagBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "n"], " ", 
    RowBox[{"exp", "(", 
     SuperscriptBox["x", "2"], ")"}], " ", 
    TagBox[
     RowBox[{
      FractionBox[
       SuperscriptBox["\[PartialD]", "n"], 
       RowBox[{"\[PartialD]", 
        SuperscriptBox["x", "n"]}]], 
      RowBox[{"exp", "(", 
       RowBox[{"-", 
        SuperscriptBox["x", "2"]}], ")"}]}],
     D]}],
   HoldForm], TraditionalForm]], "Output",
 CellChangeTimes->{{3.940144446169134*^9, 3.9401444716605043`*^9}},
 CellLabel->"Out[106]//TraditionalForm=",
 CellID->1751926528,ExpressionUUID->"47eab4e6-7bec-4d0f-a8f7-84248574fbba"]
}, Open  ]],

Cell["Here is the code:", "Text",
 CellChangeTimes->{{3.9401444758559237`*^9, 3.940144478615279*^9}},
 CellID->480872079,ExpressionUUID->"4bfe3d56-f8f2-43c8-8c48-922eb5c219fd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "ourHermiteH", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ourHermiteH", "[", 
   RowBox[{"n_Integer", ",", "x_"}], "]"}], ":=", 
  RowBox[{"Expand", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "^", "n"}], "*", 
    RowBox[{"Exp", "[", 
     RowBox[{"x", "^", "2"}], "]"}], "*", 
    RowBox[{"Nest", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{"#", ",", "x"}], "]"}], "&"}], ",", 
      RowBox[{"Exp", "[", 
       RowBox[{"-", 
        RowBox[{"x", "^", "2"}]}], "]"}], ",", "n"}], "]"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.940144483448896*^9, 3.940144520517151*^9}},
 CellLabel->"In[107]:=",
 CellID->2133011164,ExpressionUUID->"505a3429-d047-4e72-a1ef-d4f70ca5a1ef"],

Cell["\<\
For the sake of example we ignored that the built-in D can take also \
higher-order derivatives. Here are a few first polynomials:\
\>", "Text",
 CellChangeTimes->{{3.940144531491371*^9, 3.940144533712399*^9}},
 CellID->871988528,ExpressionUUID->"a8e60177-2fea-42a9-bdbb-07b71213dcc0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ourHermiteH", "[", 
    RowBox[{"#", ",", "x"}], "]"}], "&"}], "/@", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "3"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940144537601673*^9, 3.940144545307867*^9}},
 CellLabel->"In[109]:=",
 CellID->252681447,ExpressionUUID->"273a7da8-9b2c-4b3b-8f54-6249917b26dd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"2", " ", "x"}], ",", 
   RowBox[{
    RowBox[{"-", "2"}], "+", 
    RowBox[{"4", " ", 
     SuperscriptBox["x", "2"]}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "12"}], " ", "x"}], "+", 
    RowBox[{"8", " ", 
     SuperscriptBox["x", "3"]}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.940144545764406*^9},
 CellLabel->"Out[109]=",
 CellID->447845570,ExpressionUUID->"b43a3a40-31df-429f-b3bb-4aa1269f9210"]
}, Open  ]],

Cell["We check with the built-in ones:", "Text",
 CellChangeTimes->{3.940144555020031*^9},
 CellID->10312255,ExpressionUUID->"336dab3b-d39b-4917-99d7-ec966a7f3065"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HermiteH", "[", 
    RowBox[{"#", ",", "x"}], "]"}], "&"}], "/@", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "3"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9401445565891953`*^9, 3.9401445656052923`*^9}},
 CellLabel->"In[110]:=",
 CellID->458419698,ExpressionUUID->"b6083ce0-74d4-4a7d-b796-66ae3e16d4a9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"2", " ", "x"}], ",", 
   RowBox[{
    RowBox[{"-", "2"}], "+", 
    RowBox[{"4", " ", 
     SuperscriptBox["x", "2"]}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "12"}], " ", "x"}], "+", 
    RowBox[{"8", " ", 
     SuperscriptBox["x", "3"]}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.9401445660023413`*^9},
 CellLabel->"Out[110]=",
 CellID->84999170,ExpressionUUID->"d358c517-4cee-4688-aa00-51e77471cca6"]
}, Open  ]],

Cell["\<\
If we need a long list of polynomials, it would be more efficient to use \
NestList. And in this case, the use of Nest (NestList) is justified even \
though there exists a built-in D[expr,{x,n}] which takes higher derivatives.\
\>", "Text",
 CellChangeTimes->{{3.94014457823842*^9, 3.940144596074575*^9}},
 CellID->504424935,ExpressionUUID->"47df8fa0-051a-475e-8cba-e0db5b2486ed"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "ourHermiteList", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ourHermiteList", "[", 
   RowBox[{"n_Integer", ",", "x_"}], "]"}], ":=", 
  RowBox[{"Expand", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "^", "n"}], "*", 
    RowBox[{"Exp", "[", 
     RowBox[{"x", "^", "2"}], "]"}], "*", 
    RowBox[{"NestList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{"#", ",", "x"}], "]"}], "&"}], ",", 
      RowBox[{"Exp", "[", 
       RowBox[{"-", 
        RowBox[{"x", "^", "2"}]}], "]"}], ",", "n"}], "]"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.940144606322557*^9, 3.9401446447889357`*^9}},
 CellLabel->"In[111]:=",
 CellID->1503200940,ExpressionUUID->"4cabf31f-17d0-431a-b477-30fdf5e8abe0"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940144647399695*^9, 3.940144648464912*^9}},
 CellID->623050805,ExpressionUUID->"d4f475cf-b455-47d3-8173-49ef390e14c1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ourHermiteList", "[", 
  RowBox[{"5", ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.940144650386121*^9, 3.940144654493227*^9}},
 CellLabel->"In[113]:=",
 CellID->213093334,ExpressionUUID->"b541a36e-b401-4156-8fd7-6c5768371f72"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "1"}], ",", 
   RowBox[{"2", " ", "x"}], ",", 
   RowBox[{"2", "-", 
    RowBox[{"4", " ", 
     SuperscriptBox["x", "2"]}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "12"}], " ", "x"}], "+", 
    RowBox[{"8", " ", 
     SuperscriptBox["x", "3"]}]}], ",", 
   RowBox[{
    RowBox[{"-", "12"}], "+", 
    RowBox[{"48", " ", 
     SuperscriptBox["x", "2"]}], "-", 
    RowBox[{"16", " ", 
     SuperscriptBox["x", "4"]}]}], ",", 
   RowBox[{
    RowBox[{"120", " ", "x"}], "-", 
    RowBox[{"160", " ", 
     SuperscriptBox["x", "3"]}], "+", 
    RowBox[{"32", " ", 
     SuperscriptBox["x", "5"]}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.940144654831573*^9},
 CellLabel->"Out[113]=",
 CellID->113234912,ExpressionUUID->"803a26a8-3072-4232-828d-d8b661e7e3a1"]
}, Open  ]],

Cell["\<\
We can check how much we win by using NestList. This is the version using \
capabilities of D to take higher derivatives (we produce first 25 polynomials)\
\>", "Text",
 CellChangeTimes->{{3.940144674565711*^9, 3.940144676576564*^9}},
 CellID->468654742,ExpressionUUID->"e1c40aff-3c0e-45b6-ba09-bf7d02c2bee5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Expand", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"-", "1"}], ")"}], "^", "#"}], "*", 
        RowBox[{"Exp", "[", 
         RowBox[{"x", "^", "2"}], "]"}], "*", 
        RowBox[{"D", "[", 
         RowBox[{
          RowBox[{"Exp", "[", 
           RowBox[{"-", 
            RowBox[{"x", "^", "2"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "#"}], "}"}]}], "]"}]}], "]"}], "&"}], "/@", 
     RowBox[{"Range", "[", 
      RowBox[{"0", ",", "25"}], "]"}]}], "//", 
    RowBox[{
     RowBox[{"Short", "[", 
      RowBox[{"#", ",", "2"}], "]"}], "&"}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940144681879045*^9, 3.940144777427043*^9}},
 CellLabel->"In[115]:=",
 CellID->702528167,ExpressionUUID->"2db757b2-11b8-44fc-84ea-ee285c9e92ca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000807`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"2", " ", "x"}], ",", 
      RowBox[{
       RowBox[{"-", "2"}], "+", 
       RowBox[{"4", " ", 
        SuperscriptBox["x", "2"]}]}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "12"}], " ", "x"}], "+", 
       RowBox[{"8", " ", 
        RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}]}], ",", 
      RowBox[{"\[LeftSkeleton]", "19", "\[RightSkeleton]"}], ",", 
      RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], ",", 
      RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], ",", 
      RowBox[{
       RowBox[{"\[LeftSkeleton]", "18", "\[RightSkeleton]"}], "+", 
       RowBox[{"33554432", " ", 
        SuperscriptBox["x", "25"]}]}]}], "}"}],
    Short[#, 2]& ]}], "}"}]], "Output",
 CellChangeTimes->{{3.940144763425296*^9, 3.940144777775549*^9}},
 CellLabel->"Out[115]=",
 CellID->1024047377,ExpressionUUID->"56aa3639-6321-41c4-9d36-b5bfc3b0788c"]
}, Open  ]],

Cell["This is the same using our version with NestList", "Text",
 CellChangeTimes->{3.940144790189549*^9},
 CellID->1230318181,ExpressionUUID->"2c45cdca-94df-45ef-9e0e-b22df5a44722"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"ourHermiteList", "[", 
     RowBox[{"25", ",", "x"}], "]"}], "//", 
    RowBox[{
     RowBox[{"Short", "[", 
      RowBox[{"#", ",", "2"}], "]"}], "&"}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940144792413527*^9, 3.940144806991591*^9}},
 CellLabel->"In[116]:=",
 CellID->1195959858,ExpressionUUID->"1f31c375-14c5-4f4f-af1c-ba263cfe2097"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.002013`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", 
      RowBox[{"2", " ", "x"}], ",", 
      RowBox[{"2", "-", 
       RowBox[{"4", " ", 
        SuperscriptBox["x", "2"]}]}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "12"}], " ", "x"}], "+", 
       RowBox[{"8", " ", 
        RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}]}], ",", 
      RowBox[{"\[LeftSkeleton]", "19", "\[RightSkeleton]"}], ",", 
      RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], ",", 
      RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], ",", 
      RowBox[{
       RowBox[{"\[LeftSkeleton]", "18", "\[RightSkeleton]"}], "+", 
       RowBox[{"33554432", " ", 
        SuperscriptBox["x", "25"]}]}]}], "}"}],
    Short[#, 2]& ]}], "}"}]], "Output",
 CellChangeTimes->{3.940144807432171*^9},
 CellLabel->"Out[116]=",
 CellID->1649917375,ExpressionUUID->"077c4236-8c24-469e-ae5f-06099d81c9d6"]
}, Open  ]],

Cell["\<\
We get a speed-up of about factor of 2, which is substantial.\
\>", "Text",
 CellChangeTimes->{3.940144826301174*^9},
 CellID->1852471561,ExpressionUUID->"385017ee-cf7d-48a5-8ec1-504218a6b5b9"],

Cell["Case study: Sorting a list of numbers", "ItemNumbered",
 CellChangeTimes->{3.940144836259942*^9},
 CellID->271611521,ExpressionUUID->"1748cf92-ff28-49f0-8e32-53abde2daf98"],

Cell[TextData[StyleBox["The problem",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940144845828374*^9, 3.940144849731782*^9}},
 CellID->1572083572,ExpressionUUID->"a1dc3f2d-c471-436d-9121-867b92ae9b1c"],

Cell["Let us start with a list of numbers:", "Text",
 CellChangeTimes->{3.940144845828374*^9},
 CellID->2015582445,ExpressionUUID->"38eb8ee5-ce68-4a80-87e1-9ad18377518b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "10", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9401448517050943`*^9, 3.9401448619178677`*^9}},
 CellLabel->"In[117]:=",
 CellID->648193172,ExpressionUUID->"145f4824-83bd-4840-8748-63ab0c01120a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "9", ",", "6", ",", "9", ",", "3", ",", "5", ",", "9", ",", "7", ",", "2", 
   ",", "6", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.940144862148003*^9},
 CellLabel->"Out[117]=",
 CellID->693499916,ExpressionUUID->"53dcb0c0-460c-4de2-a5c4-484fe888f932"]
}, Open  ]],

Cell["\<\
We would like now to sort this list in the decreasing order according to the \
following algorithm: at any given time, we maintain a list with two sublists: \
the first (initially empty) gives the numbers that are already sorted, the \
second (initially coinciding with the original list) contains the numbers not \
yet sorted. A single iteration consists of finding a maximal number in the \
unsorted part, deleting it from there and appending it to the list of sorted \
numbers. The number of iterations needed to sort a list is obviously equal to \
the length of the list.\
\>", "Text",
 CellChangeTimes->{{3.940144871931548*^9, 3.940144888964065*^9}},
 CellID->1259335943,ExpressionUUID->"98dc0c88-b260-4a0d-8893-7a73541400f9"],

Cell[TextData[StyleBox["The sketch of the solution",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940144871931548*^9, 3.940144893561679*^9}},
 CellID->1270461953,ExpressionUUID->"95cee8da-71ed-44c4-a97d-1432dacfaa2d"],

Cell["Here is a function which realizes a single iteration:", "Text",
 CellChangeTimes->{{3.940144871931548*^9, 3.940144887823428*^9}},
 CellID->715318558,ExpressionUUID->"da656191-60ec-4dad-856f-7de1146ca02a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "iterSort", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"iterSort", "[", 
   RowBox[{"{", 
    RowBox[{"sorted_List", ",", "unsorted_List"}], "}"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"max", "=", 
       RowBox[{"Max", "[", "unsorted", "]"}]}], ",", "pos"}], "}"}], ",", 
    RowBox[{
     RowBox[{"pos", "=", 
      RowBox[{"Position", "[", 
       RowBox[{"unsorted", ",", "max", ",", "1", ",", "1"}], "]"}]}], ";", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Append", "[", 
        RowBox[{"sorted", ",", "max"}], "]"}], ",", 
       RowBox[{"Delete", "[", 
        RowBox[{"unsorted", ",", "pos"}], "]"}]}], "}"}]}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.940144899780546*^9, 3.940144948765429*^9}},
 CellLabel->"In[118]:=",
 CellID->912815633,ExpressionUUID->"d0c95028-2ee4-4921-a4f4-c7bf3e04cece"],

Cell["\<\
The code is more or less self-explanatory. We use several built-in functions, \
such as Max, Position, Append, Delete. Let us use it now on our test list. \
This is how it looks at some intermediate sorting step:\
\>", "Text",
 CellChangeTimes->{{3.940144959182603*^9, 3.940144961180194*^9}},
 CellID->1067040215,ExpressionUUID->"debecdc6-f579-4b9d-b929-c6d968803568"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Nest", "[", 
  RowBox[{"iterSort", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "testlist"}], "}"}], ",", "3"}], "]"}]], "Input",\

 CellChangeTimes->{{3.9401449663248577`*^9, 3.940144974990144*^9}},
 CellLabel->"In[120]:=",
 CellID->859203401,ExpressionUUID->"10edc3c9-5891-45a7-bcd1-37470cc4db5a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"9", ",", "9", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "3", ",", "5", ",", "7", ",", "2", ",", "6", ",", "5"}],
     "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940144975395743*^9},
 CellLabel->"Out[120]=",
 CellID->175070835,ExpressionUUID->"206bb282-a9f3-47fe-a36c-0fcbd5cd1e52"]
}, Open  ]],

Cell["To sort the list completely:", "Text",
 CellChangeTimes->{3.9401449911010113`*^9},
 CellID->362927455,ExpressionUUID->"9387d340-5380-4a1e-ad6c-4627194da2e8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Nest", "[", 
  RowBox[{"iterSort", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "testlist"}], "}"}], ",", 
   RowBox[{"Length", "[", "testlist", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940144993249249*^9, 3.940145007805986*^9}},
 CellLabel->"In[121]:=",
 CellID->1475597217,ExpressionUUID->"f3463dc1-6c12-4580-a7d6-330eb30760b0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "9", ",", "9", ",", "9", ",", "7", ",", "6", ",", "6", ",", "5", ",", "5",
      ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940145008123674*^9},
 CellLabel->"Out[121]=",
 CellID->1167258363,ExpressionUUID->"f8fd08a3-82ab-4a79-815b-5502e75d3c08"]
}, Open  ]],

Cell[TextData[StyleBox["Possible bugs and automatic rule reordering",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940145025292926*^9, 3.940145029473674*^9}},
 CellID->848191596,ExpressionUUID->"9b3b871c-dbeb-4068-8440-e187ef3de98f"],

Cell["\<\
It is amusing to see what happens if we by mistake use one (or more) extra \
iteration\
\>", "Text",
 CellChangeTimes->{3.940145025292926*^9},
 CellID->383754160,ExpressionUUID->"bb46986c-7405-49a6-a555-3360d3a0b0a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Nest", "[", 
  RowBox[{"iterSort", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "testlist"}], "}"}], ",", 
   RowBox[{
    RowBox[{"Length", "[", "testlist", "]"}], "+", "1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940145033166183*^9, 3.940145080201932*^9}},
 CellLabel->"In[123]:=",
 CellID->236593568,ExpressionUUID->"3c005d37-3b39-4c78-8089-04d9a04273b1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "9", ",", "9", ",", "9", ",", "7", ",", "6", ",", "6", ",", "5", ",", "5",
      ",", "3", ",", "2", ",", 
     RowBox[{"-", "\[Infinity]"}]}], "}"}], ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.940145050708517*^9, 3.9401450805072527`*^9}},
 CellLabel->"Out[123]=",
 CellID->1334387449,ExpressionUUID->"85c9c5b0-7a05-4687-8e83-90c96f05c88b"]
}, Open  ]],

Cell["This is due to the following behavior (or convention):", "Text",
 CellChangeTimes->{3.9401450895034113`*^9},
 CellID->878129722,ExpressionUUID->"8f3dc924-f27a-4b59-9245-2a03e08d5990"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Max", "[", 
  RowBox[{"{", "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.940145091598813*^9, 3.9401450931302843`*^9}},
 CellLabel->"In[124]:=",
 CellID->718662851,ExpressionUUID->"1213b0e7-8b83-479b-b4f6-4ee9ad5fe7e9"],

Cell[BoxData[
 RowBox[{"-", "\[Infinity]"}]], "Output",
 CellChangeTimes->{3.940145093845545*^9},
 CellLabel->"Out[124]=",
 CellID->801624128,ExpressionUUID->"2270ae57-c02a-420d-a634-461a5a888b56"]
}, Open  ]],

Cell["\<\
If we want to be on the safe side, we will add one more definition to our \
function <iterSort>:\
\>", "Text",
 CellChangeTimes->{3.940145118829039*^9},
 CellID->1734833814,ExpressionUUID->"ff45dfc4-2b1f-454f-89ec-ff237479f865"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "iterSort", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"iterSort", "[", 
     RowBox[{"{", 
      RowBox[{"sorted_List", ",", "unsorted_List"}], "}"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"max", "=", 
         RowBox[{"Max", "[", "unsorted", "]"}]}], ",", "pos"}], "}"}], ",", 
      RowBox[{
       RowBox[{"pos", "=", 
        RowBox[{"Position", "[", 
         RowBox[{"unsorted", ",", "max", ",", "1", ",", "1"}], "]"}]}], ";", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Append", "[", 
          RowBox[{"sorted", ",", "max"}], "]"}], ",", 
         RowBox[{"Delete", "[", 
          RowBox[{"unsorted", ",", "pos"}], "]"}]}], "}"}]}]}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"iterSort", "[", 
    RowBox[{"{", 
     RowBox[{"sorted_List", ",", 
      RowBox[{"{", "}"}]}], "}"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"sorted", ",", 
     RowBox[{"{", "}"}]}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9401451220225477`*^9, 3.940145183074215*^9}},
 CellLabel->"In[125]:=",
 CellID->1480760992,ExpressionUUID->"27c12f87-0316-4a52-815f-ae9fe05fff85"],

Cell[TextData[StyleBox["Use NestList to see intermediate steps",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940145530619446*^9, 3.940145535730835*^9}},
 CellID->898806822,ExpressionUUID->"fae8ef6d-bddf-402c-9b04-467af7c6b0fa"],

Cell["\<\
The existence of the NestList command allows us to see all of the \
intermediate steps of our sorting algorithm without any extra cost - just \
change Nest to NestList:\
\>", "Text",
 CellChangeTimes->{{3.940145530619446*^9, 3.940145542821019*^9}},
 CellID->705241960,ExpressionUUID->"ed37b300-945d-4ed0-870f-9fe979c29bd0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestList", "[", 
  RowBox[{"iterSort", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "testlist"}], "}"}], ",", 
   RowBox[{
    RowBox[{"Length", "[", "testlist", "]"}], "+", "1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940145548751402*^9, 3.940145564180737*^9}},
 CellLabel->"In[131]:=",
 CellID->2001443139,ExpressionUUID->"8cd78efb-4119-43c5-89f4-be0c8d7c2f1a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "9", ",", "6", ",", "9", ",", "3", ",", "5", ",", "9", ",", "7", ",", 
       "2", ",", "6", ",", "5"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "9", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "6", ",", "9", ",", "3", ",", "5", ",", "9", ",", "7", ",", "2", ",", 
       "6", ",", "5"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "6", ",", "3", ",", "5", ",", "9", ",", "7", ",", "2", ",", "6", ",", 
       "5"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "9", ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "6", ",", "3", ",", "5", ",", "7", ",", "2", ",", "6", ",", "5"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "9", ",", "9", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "3", ",", "5", ",", "2", ",", "6", ",", "5"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "9", ",", "9", ",", "7", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "2", ",", "6", ",", "5"}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"9", ",", "9", ",", "9", ",", "7", ",", "6", ",", "6"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "2", ",", "5"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "9", ",", "9", ",", "9", ",", "7", ",", "6", ",", "6", ",", "5"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "5"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "9", ",", "9", ",", "9", ",", "7", ",", "6", ",", "6", ",", "5", ",", 
       "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "9", ",", "9", ",", "9", ",", "7", ",", "6", ",", "6", ",", "5", ",", 
       "5", ",", "3"}], "}"}], ",", 
     RowBox[{"{", "2", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "9", ",", "9", ",", "9", ",", "7", ",", "6", ",", "6", ",", "5", ",", 
       "5", ",", "3", ",", "2"}], "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "9", ",", "9", ",", "9", ",", "7", ",", "6", ",", "6", ",", "5", ",", 
       "5", ",", "3", ",", "2"}], "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9401455646187363`*^9},
 CellLabel->"Out[131]=",
 CellID->1859001739,ExpressionUUID->"8582082d-809f-48bd-8d0b-541d972a197f"]
}, Open  ]],

Cell["\<\
This capability is often quite handy, in particular for debugging programs \
which use Nest. \
\>", "Text",
 CellChangeTimes->{{3.940145585850525*^9, 3.9401455901533117`*^9}},
 CellID->502647170,ExpressionUUID->"7de4e918-b3f6-4d35-8746-51289cafb804"],

Cell[TextData[StyleBox["Final solution",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940145585850525*^9, 3.940145597187559*^9}},
 CellID->1785521930,ExpressionUUID->"59342dd0-1ce7-4bbc-a95b-e5424237d53d"],

Cell["\<\
Finally, let us package our entire sort procedure into a function: first, \
here is our <iterSort> function once again:\
\>", "Text",
 CellChangeTimes->{{3.940145585850525*^9, 3.940145599612711*^9}},
 CellID->437974059,ExpressionUUID->"45ae2929-6474-4522-a75a-181f624f58c6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "iterSort", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"iterSort", "[", 
     RowBox[{"{", 
      RowBox[{"sorted_List", ",", "unsorted_List"}], "}"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"max", "=", 
         RowBox[{"Max", "[", "unsorted", "]"}]}], ",", "pos"}], "}"}], ",", 
      RowBox[{
       RowBox[{"pos", "=", 
        RowBox[{"Position", "[", 
         RowBox[{"unsorted", ",", "max", ",", "1", ",", "1"}], "]"}]}], ";", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Append", "[", 
          RowBox[{"sorted", ",", "max"}], "]"}], ",", 
         RowBox[{"Delete", "[", 
          RowBox[{"unsorted", ",", "pos"}], "]"}]}], "}"}]}]}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"iterSort", "[", 
     RowBox[{"{", 
      RowBox[{"sorted_List", ",", "unsorted_List"}], "}"}], "]"}], "/;", 
    RowBox[{"unsorted", "===", 
     RowBox[{"{", "}"}]}]}], ":=", 
   RowBox[{"{", 
    RowBox[{"sorted", ",", 
     RowBox[{"{", "}"}]}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940145606338464*^9, 3.940145673772201*^9}},
 CellLabel->"In[132]:=",
 CellID->1111442409,ExpressionUUID->"3a889469-961f-41f5-a089-fe76250efad9"],

Cell["Now, the sorting function:", "Text",
 CellChangeTimes->{{3.940145679666531*^9, 3.940145686282654*^9}},
 CellID->194276173,ExpressionUUID->"e8808ad0-94d0-43af-91a6-e34195baeaa0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "ourSort", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ourSort", "[", "sortme_List", "]"}], ":=", 
   RowBox[{"First", "[", 
    RowBox[{"Nest", "[", 
     RowBox[{"iterSort", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "sortme"}], "}"}], ",", 
      RowBox[{"Length", "[", "sortme", "]"}]}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940145688567038*^9, 3.940145716024579*^9}},
 CellLabel->"In[135]:=",
 CellID->1646378419,ExpressionUUID->"60ddfd22-3d76-4ac2-a956-69e434b404cd"],

Cell["Test:", "Text",
 CellChangeTimes->{{3.940145718623497*^9, 3.940145719596841*^9}},
 CellID->1198072132,ExpressionUUID->"89abe83d-2930-44ec-ac2a-19c613f67d8a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ourSort", "[", 
  RowBox[{"Range", "[", "10", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.940145721537657*^9, 3.940145733622024*^9}},
 CellLabel->"In[138]:=",
 CellID->1299402618,ExpressionUUID->"c4241068-19cb-417c-b49a-fb76e60757e0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5", ",", "4", ",", "3", 
   ",", "2", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{{3.940145723289947*^9, 3.940145733843615*^9}},
 CellLabel->"Out[138]=",
 CellID->283629827,ExpressionUUID->"e3cdb981-8c1f-453f-afff-fe3e096b990e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["NestWhile and NestWhileList", "Subsubsection",
 CellChangeTimes->{3.940145747505124*^9},
 CellID->1700289696,ExpressionUUID->"52b235a4-127f-45dd-a130-8ec4188d49db"],

Cell["\<\
These commands are used to organize a <While> loop around the Nest command. \
Basically, they are used when Nest is appropriate but we \
don\[CloseCurlyQuote]t know in advance how many iterations are needed. The \
format of the command in the simplest form is:\
\>", "Text",
 CellChangeTimes->{{3.940145754957026*^9, 3.940145760654046*^9}, 
   3.940740613791814*^9},
 CellID->204030043,ExpressionUUID->"6d5dc739-82ec-420a-bd4b-915d7dabe13e"],

Cell[BoxData[
 RowBox[{"NestWhile", "[", 
  RowBox[{"function", ",", "expr", ",", "test"}], "]"}]], "Input",
 CellChangeTimes->{{3.940145763448629*^9, 3.94014577406434*^9}},
 CellID->802785095,ExpressionUUID->"68fd2569-19dd-412b-a7ef-76fcb9a8d6e2"],

Cell["\<\
So, the last argument of Nest is replaced by the argument <test> here. The \
argument <test> has to be a function (pure or pattern-defined), which applies \
to the result of the last iteration, and gives True or False (i.e., a \
predicate). Once it no longer gives True (notice that this is not the same as \
giving explicit False), the loop stops. Simple examples:\
\>", "Text",
 CellChangeTimes->{{3.940145785576305*^9, 3.940145792003084*^9}},
 CellID->1237450518,ExpressionUUID->"11d6a9e3-48bb-4ee8-967e-68ebedaff263"],

Cell["Simple examples", "ItemNumbered",
 CellChangeTimes->{3.940145802348095*^9},
 CellTags->"5.4.2.1",
 CellID->1445623944,ExpressionUUID->"445fd047-3365-42dd-bf75-efcfa351ba9a"],

Cell[TextData[StyleBox["Deleting numbers from the list",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940145809698674*^9, 3.940145814011458*^9}},
 CellID->2119128297,ExpressionUUID->"17d66cd8-f4d5-45a5-b910-b8f2cfc96015"],

Cell["\<\
Here is a list containing in general zeros, positive and negative integers.\
\>", "Text",
 CellChangeTimes->{3.940145809698674*^9},
 CellID->1347110188,ExpressionUUID->"5291c7af-9311-4d66-8279-2e3ac5dcdffa"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "testlist", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "10"}], ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "15", "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940145818813764*^9, 3.9401458326747847`*^9}},
 CellLabel->"In[139]:=",
 CellID->1414678086,ExpressionUUID->"9c3374f1-abc4-4b53-b13c-5ff68b21fec9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"8", ",", "4", ",", 
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "6"}], ",", "1", ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "7"}], ",", "5", ",", "6", ",", 
   RowBox[{"-", "1"}], ",", "9", ",", "9", ",", 
   RowBox[{"-", "8"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940145833322159*^9},
 CellLabel->"Out[140]=",
 CellID->343975557,ExpressionUUID->"6f4f23a3-f0f6-4242-8378-b1297314de82"]
}, Open  ]],

Cell["\<\
This will drop the first element in the list repeatedly until it meets a \
first negative number:\
\>", "Text",
 CellChangeTimes->{3.9401458428300343`*^9},
 CellID->171208775,ExpressionUUID->"3ac5d513-3e16-4eb9-95d4-4cad88d81c47"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestWhile", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Drop", "[", 
     RowBox[{"#", ",", "1"}], "]"}], "&"}], ",", "testlist", ",", 
   RowBox[{
    RowBox[{"NonNegative", "[", 
     RowBox[{"First", "[", "#", "]"}], "]"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9401458459885*^9, 3.9401458624895267`*^9}},
 CellLabel->"In[141]:=",
 CellID->1233087294,ExpressionUUID->"bf619f13-a159-407a-89e3-969ca1d1a562"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "4"}], ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "6"}], ",", "1", ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "8"}], ",", 
   RowBox[{"-", "7"}], ",", "5", ",", "6", ",", 
   RowBox[{"-", "1"}], ",", "9", ",", "9", ",", 
   RowBox[{"-", "8"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940145862806416*^9},
 CellLabel->"Out[141]=",
 CellID->88081967,ExpressionUUID->"7e26e544-714b-4591-82b4-31fbcb8ad23f"]
}, Open  ]],

Cell[TextData[StyleBox["Warning: efficiency pitfall",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.940145892106607*^9, 3.940145898015069*^9}, 
   3.9407406138125553`*^9},
 CellID->777386586,ExpressionUUID->"a8ed7dd2-3b0b-4b36-bdad-2804b50c0f47"],

Cell["\<\
Note that this method in fact contains a rather unobvious efficiency pitfall \
which will cause problems for large lists. We already discussed that it is \
inefficient to use Append and Prepend in creation of lists. This was so \
because at every stage a whole list was copied to append a single element. \
But let us recall that most functions in Mathematica work without side \
effects, which means that they create a copy and operate on this copy. Here \
we drop element by element, rather than append, and thus our first reaction \
is that things are fine (really, the size of the list does not have to be \
increased). But this does not matter. What matters is that Drop creates a \
copy of the list just as Append, and is no better in this sense. To \
illustrate, consider deleting elements in a loop one by one. We will create a \
test function and measure timings for
various list sizes: 10, 100, 1000, 10000 and 50000 elements.\
\>", "Text",
 CellChangeTimes->{{3.940145892106607*^9, 3.940145925338503*^9}, {
  3.940198186486206*^9, 3.9401981894968443`*^9}},
 CellID->1684973451,ExpressionUUID->"c200ed36-795f-444b-aba8-c6c306f0ab64"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "testFun", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testFun", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"m", "=", "1"}], "}"}], ",", 
    RowBox[{"NestWhile", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Drop", "[", 
        RowBox[{"#", ",", "1"}], "]"}], "&"}], ",", 
      RowBox[{"Range", "[", "n", "]"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"m", "++"}], "<", "n"}], "&"}]}], "]"}]}], "]"}]}]}], "Input",\

 CellChangeTimes->{{3.9401459441693363`*^9, 3.94014597132758*^9}},
 CellLabel->"In[151]:=",
 CellID->1568870518,ExpressionUUID->"9608249c-f714-4948-8798-b72aade84f12"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940145974465296*^9, 3.940145975766509*^9}},
 CellID->586579807,ExpressionUUID->"b51b90d6-6f4b-4fc5-af11-a82471c39d79"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Timing", "[", 
     RowBox[{"testFun", "[", "#", "]"}], "]"}], "&"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "100", ",", "1000", ",", "10000", ",", "500000"}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940145981103957*^9, 3.940146194586174*^9}, {
  3.9401979639940147`*^9, 3.940197989673781*^9}, {3.940198284871727*^9, 
  3.940198339961856*^9}, {3.940198451843809*^9, 3.940198458406129*^9}},
 CellLabel->"In[168]:=",
 CellID->1284411702,ExpressionUUID->"0d6ffa5e-87db-4f25-afbf-cd9e927f4fd4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.000081`", ",", 
     RowBox[{"{", "10", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.00016`", ",", 
     RowBox[{"{", "100", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.001194`", ",", 
     RowBox[{"{", "1000", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.030053`", ",", 
     RowBox[{"{", "10000", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"249.33005`", ",", 
     RowBox[{"{", "500000", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940146164692115*^9, 3.9401462248565702`*^9, 
  3.940197990207592*^9, 3.940198316919054*^9, 3.940198370073234*^9, 
  3.940198490466875*^9},
 CellLabel->"Out[168]=",
 CellID->246206066,ExpressionUUID->"7ef40e4e-6336-4658-9260-054a7ebcb922"]
}, Open  ]],

Cell["\<\
The first several numbers look as if the timing was linear as a function of \
the list size, and this would contradict our guess above, but this is an \
illusion. This simply means that for small lists, copying lists is very \
efficient and the main time is spent on incrementing <m > and checking the \
terminating condition. Indeed, this version does not involve NestWhile and \
condition checks:\
\>", "Text",
 CellChangeTimes->{{3.9401984797266006`*^9, 3.940198484186067*^9}, {
   3.9401985255652723`*^9, 3.940198532834387*^9}, 3.940276417707101*^9},
 CellID->999233928,ExpressionUUID->"b5904d13-cd47-473a-abf9-a1a71cad7ba0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "testFun1", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"testFun1", "[", "n_Integer", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"start", "=", 
       RowBox[{"Range", "[", "n", "]"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"start", "=", 
         RowBox[{"Drop", "[", 
          RowBox[{"start", ",", "1"}], "]"}]}], ",", 
        RowBox[{"{", "n", "}"}]}], "]"}], ";", "start"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940198538283593*^9, 3.940198565307715*^9}},
 CellLabel->"In[169]:=",
 CellID->1565454853,ExpressionUUID->"cbffb270-c03e-4022-a3ff-f21141488104"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940198567619626*^9, 3.94019856871355*^9}},
 CellID->1359628013,ExpressionUUID->"9f31e22c-6cf0-41d4-a59f-171f67e9692d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Timing", "[", 
     RowBox[{"testFun1", "[", "#", "]"}], "]"}], "&"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "100", ",", "1000", ",", "10000", ",", "500000"}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{3.940198576979238*^9},
 CellLabel->"In[171]:=",
 CellID->1875275549,ExpressionUUID->"0b918462-2d39-4003-a30f-d6e04d379fe9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.000137`", ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.000158`", ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.001144`", ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.031825`", ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"238.057252`", ",", 
     RowBox[{"{", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9401986077426662`*^9},
 CellLabel->"Out[171]=",
 CellID->2022218323,ExpressionUUID->"05ac0a37-ae93-4082-8741-802cda0bcaac"]
}, Open  ]],

Cell["\<\
This reveals that the timing is not really linear in the list size even for \
smaller lists, although it is close to linear up to rather large list sizes \
(1000), and even better than linear for small lists. But in any case, for \
larger lists the timings confirm our guess above. Using a built-in NestWhile \
does not change the fact that the copy of the list is created at every \
iteration - this is a property the function being nested (Drop in this
case).\
\>", "Text",
 CellChangeTimes->{{3.9401986187502003`*^9, 3.9401986335642843`*^9}},
 CellID->1347157239,ExpressionUUID->"7585d108-d514-468f-9c24-088c3e65a08c"],

Cell["\<\
The bottom line: avoid modifying large lists in place many times by small \
changes like deleting or appending a single element at a time. Also, remember \
that most built-in functions work without side effects and this means that \
they necessarily make copies of objects passed to them.\
\>", "Text",
 CellChangeTimes->{{3.9401986187502003`*^9, 3.94019864102712*^9}},
 CellID->1948705564,ExpressionUUID->"395c22e0-f932-45ed-b2b6-004e6f0a39cb"],

Cell[TextData[StyleBox["Imitating FromDigits",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.9401986187502003`*^9, 3.940198650653123*^9}},
 CellID->18381704,ExpressionUUID->"467bb221-95ab-4a0c-9a8f-c2c8f34b44f7"],

Cell["\<\
We are given a number, say 7423. We want to split it into a list of digits \
(this is done by the built-in From Digits command). Here is the almost \
complete code:\
\>", "Text",
 CellChangeTimes->{{3.9401986187502003`*^9, 3.940198660922667*^9}},
 CellID->801899881,ExpressionUUID->"eaca2a06-e9a7-4b10-b493-67fe39030359"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestWhile", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Prepend", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{"Mod", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}], ",", "10"}], "]"}]}], "]"}], ",", 
      RowBox[{"IntegerPart", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "/", "10"}], "]"}]}], "}"}], "&"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "7423"}], "}"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"[", "2", "]"}], "]"}], "!=", "0"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940198666578319*^9, 3.940198721397852*^9}},
 CellLabel->"In[172]:=",
 CellID->309424680,ExpressionUUID->"258c660d-a8b8-43d5-901a-b5ed4587c407"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"7", ",", "4", ",", "2", ",", "3"}], "}"}], ",", "0"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9401987216159*^9},
 CellLabel->"Out[172]=",
 CellID->1417528396,ExpressionUUID->"24c144f0-b8a8-402d-b72f-1926071b125a"]
}, Open  ]],

Cell["\<\
We see, that it remains to take the first part of the list. To see, what is \
going on, it would be handy to see the intermediate steps. Here we recall \
that NestWhileList, which is related to NestWhile in the same way as NestList \
is related to Nest, gives all intermediate results in a list. So:\
\>", "Text",
 CellChangeTimes->{{3.940198734731674*^9, 3.9401987385456944`*^9}},
 CellID->216171754,ExpressionUUID->"4f0fcb9b-b51c-44f3-9555-22a6dc1a68c4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestWhileList", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Prepend", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{"Mod", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}], ",", "10"}], "]"}]}], "]"}], ",", 
      RowBox[{"IntegerPart", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "/", "10"}], "]"}]}], "}"}], "&"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "7423"}], "}"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"[", "2", "]"}], "]"}], "!=", "0"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940198748384274*^9, 3.940198748941839*^9}},
 CellLabel->"In[173]:=",
 CellID->1783776073,ExpressionUUID->"ea6a4b9d-5f85-4ccb-84fc-b4cbb806e47e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "7423"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "3", "}"}], ",", "742"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", "74"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "2", ",", "3"}], "}"}], ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7", ",", "4", ",", "2", ",", "3"}], "}"}], ",", "0"}], "}"}]}],
   "}"}]], "Output",
 CellChangeTimes->{3.940198749315064*^9},
 CellLabel->"Out[173]=",
 CellID->1646836892,ExpressionUUID->"593db8dc-681a-47d0-ba30-69c7af104d24"]
}, Open  ]],

Cell["\<\
So, we start with an empty first sublist and a number. Then, we place the \
remainders of division by 10 (i.e., digits) to the left sublist (notice the \
use of the Prepend command. Should we use append here, and the numbers would \
be in reverse order), while replacing the number by an integer part of itself \
divided by 10. The loop stops when this integer part becomes zero. This \
procedure can be trivially generalized to any base. So, our function would be\
\
\>", "Text",
 CellChangeTimes->{{3.940198766547351*^9, 3.940198774755677*^9}},
 CellID->1618401308,ExpressionUUID->"60906bfa-435f-48d3-885a-8d2998f959e5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "ourFromDigits", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ourFromDigits", "[", 
    RowBox[{"num_Integer", ",", "base_Integer"}], "]"}], ":=", 
   RowBox[{"First", "[", 
    RowBox[{"NestWhile", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Prepend", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"Mod", "[", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", "base"}], "]"}]}], "]"}], 
         ",", 
         RowBox[{"IntegerPart", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "/", "base"}], "]"}]}], "}"}], 
       "&"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "num"}], "}"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "!=", "0"}], "&"}]}], "]"}], "]"}]}],
   ";"}]}], "Input",
 CellChangeTimes->{{3.940198781175548*^9, 3.940198838471249*^9}},
 CellLabel->"In[174]:=",
 CellID->1185404825,ExpressionUUID->"92ad12c4-7cdb-43b9-85ad-982c897126e1"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940198841256797*^9, 3.940198842159284*^9}},
 CellID->700460863,ExpressionUUID->"f6c7512f-0fa6-44a0-9605-da8afc2ada18"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ourFromDigits", "[", 
  RowBox[{"10", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.940198843093315*^9, 3.940198845625342*^9}},
 CellLabel->"In[176]:=",
 CellID->345400908,ExpressionUUID->"c615c45d-2630-4b8a-918b-1d73108cf318"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.940198845976729*^9},
 CellLabel->"Out[176]=",
 CellID->789547150,ExpressionUUID->"5ba66ee7-db2f-4846-b6fd-1fa7b1c289f7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ourFromDigits", "[", 
  RowBox[{"120", ",", "10"}], "]"}]], "Input",
 CellChangeTimes->{{3.9401988478951063`*^9, 3.940198850316822*^9}},
 CellLabel->"In[177]:=",
 CellID->1601465955,ExpressionUUID->"44146bcc-c1b4-45a9-8333-c16fb64e947b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.940198850609782*^9},
 CellLabel->"Out[177]=",
 CellID->907187349,ExpressionUUID->"de0b2b80-bb2f-450d-9564-4a5acf6b9a43"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ourFromDigits", "[", 
  RowBox[{"120", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.940198852441794*^9, 3.9401988555098743`*^9}},
 CellLabel->"In[178]:=",
 CellID->684881102,ExpressionUUID->"d4a0f4b3-b664-46df-a759-9c14a489305d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940198855867216*^9},
 CellLabel->"Out[178]=",
 CellID->336110389,ExpressionUUID->"e70ee444-7bd2-49af-ab92-d2f525b0b890"]
}, Open  ]],

Cell["More general uses of NestWhile", "ItemNumbered",
 CellChangeTimes->{3.9401988690840187`*^9},
 CellID->1125316313,ExpressionUUID->"b73a3246-48b0-4da9-921b-be84882ba28d"],

Cell["\<\
There exist more complicated forms of NestWhile(List), which take as \
arguments for the test condition at most the last <m> results. The syntax is\
\>", "Text",
 CellChangeTimes->{{3.9401988762046223`*^9, 3.9401988779958687`*^9}},
 CellID->302793462,ExpressionUUID->"0ac0afef-ff48-4796-b62e-022ef6c964ed"],

Cell[BoxData[
 RowBox[{"NestWhile", "[", 
  RowBox[{"function", ",", "expr", ",", "test", ",", "m"}], "]"}]], "Input",
 CellChangeTimes->{{3.9401988799504547`*^9, 3.940198888588097*^9}},
 CellID->887038629,ExpressionUUID->"3dd3d698-4242-4dbf-8074-0cd9c89ae069"],

Cell["\<\
This is potentially a very powerful capability. Let us now give a few more \
examples, some of which will fully explore this general form.\
\>", "Text",
 CellChangeTimes->{{3.940198897936988*^9, 3.940198899657686*^9}},
 CellID->1290942498,ExpressionUUID->"c811df57-7f86-48ed-8526-247945cb89e3"],

Cell["Example: restricted random sequences", "ItemNumbered",
 CellChangeTimes->{3.9401989076153803`*^9},
 CellID->1732877162,ExpressionUUID->"f02c8a13-a2dd-4edb-b4b7-23d879faa43c"],

Cell["\<\
Suppose we want to generate random integers in the range {1,10} and stop when \
the sum of the last 3 generated numbers exceeds some number, say 20. Here is \
the code:\
\>", "Text",
 CellChangeTimes->{{3.940198915382004*^9, 3.940198917595977*^9}},
 CellID->293241120,ExpressionUUID->"7ca48693-4ec7-4485-8e3f-488edd6f2059"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestWhileList", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], "&"}], ",", "0", ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Plus", "[", "##", "]"}], "<", "20"}], "&"}], ",", "3"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940198927051613*^9, 3.940198955379128*^9}},
 CellLabel->"In[179]:=",
 CellID->2058217910,ExpressionUUID->"3ddd8753-6a16-4247-9844-7465da314849"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "9", ",", "8", ",", "2", ",", "4", ",", "6", ",", "7", ",", "1", 
   ",", "10", ",", "8", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.940198955828269*^9},
 CellLabel->"Out[179]=",
 CellID->1026547419,ExpressionUUID->"6ff85888-ad1a-4a41-aed6-4354dda18f93"]
}, Open  ]],

Cell[TextData[StyleBox["Warning: a tricky bug",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.94019896986483*^9, 3.940198975130391*^9}, 
   3.940740613835458*^9},
 CellID->298851135,ExpressionUUID->"02ea8495-50a4-4541-a5f7-140804452714"],

Cell[TextData[{
 "Note that here we used the SlotSequence (##) (section ",
 ButtonBox["4.11.1.8",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-4-Rules-patterns-functions.nb", 
     CharacterEncoding -> "UTF-8"], "4.11.1.8"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-4-Rules-patterns-functions.\
nb"],
 "). Had we used the usual slot <# > (by mistake), and only the first of the \
three numbers would be used in Plus. Here I construct an example which \
explicitly shows this behavior:"
}], "Text",
 CellChangeTimes->{
  3.94019896986483*^9, {3.940199002432557*^9, 3.940199005910487*^9}, {
   3.940199063210802*^9, 3.94019906321935*^9}, 3.940276417731596*^9},
 CellID->322179179,ExpressionUUID->"02ba771b-14bf-4ea1-8f39-ef8e97b628c0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"n", "=", "1"}], ",", 
     RowBox[{"lst", "=", 
      RowBox[{"Range", "[", 
       RowBox[{"15", ",", "25"}], "]"}]}]}], "}"}], ",", 
   RowBox[{"NestWhileList", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"lst", "[", 
       RowBox[{"[", 
        RowBox[{"n", "++"}], "]"}], "]"}], "&"}], ",", "0", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Plus", "[", "#", "]"}], "<", "20"}], "&"}], ",", "3"}], 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940199068175705*^9, 3.940199092440742*^9}},
 CellLabel->"In[180]:=",
 CellID->527828794,ExpressionUUID->"6c986f40-884b-4877-a211-60f6d28d7dc0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", 
   "21", ",", "22"}], "}"}]], "Output",
 CellChangeTimes->{3.940199093008235*^9},
 CellLabel->"Out[180]=",
 CellID->822810545,ExpressionUUID->"5400d1ed-3891-429a-85d8-e127935100a9"]
}, Open  ]],

Cell[TextData[{
 "What is really important is that no error was generated in this case, due \
to the way pure functions treat excessive variables passed to them (they \
silently ignore them, see section ",
 ButtonBox["4.11.1.6",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-4-Rules-patterns-functions.nb", 
     CharacterEncoding -> "UTF-8"], "4.11.1.6"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-4-Rules-patterns-functions.\
nb"],
 "). This sorts of bugs are hard to catch."
}], "Text",
 CellChangeTimes->{{3.940199100803247*^9, 3.940199104786715*^9}, {
  3.9401991469526*^9, 3.940199146962434*^9}},
 CellID->1329626782,ExpressionUUID->"b00b3718-6041-43d6-bad5-f5e132b729e0"],

Cell["Example: visualizing poker probabilities", "ItemNumbered",
 CellChangeTimes->{3.9401992759143677`*^9},
 CellID->1607322742,ExpressionUUID->"463886cf-560b-4a64-978b-bfe5a51c83e5"],

Cell["\<\
Consider a simplified version of poker where we are interested in ranks of \
the cards, but not suits (this will then exclude certain combinations). These \
are the ranks (or cards):\
\>", "Text",
 CellChangeTimes->{{3.9401992852005587`*^9, 3.940199286828375*^9}},
 CellID->1076529181,ExpressionUUID->"fef567ad-f7ff-46b4-b71f-0e132746ad36"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cards", "=", 
   RowBox[{"{", 
    RowBox[{
    "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9",
      ",", "10", ",", "J", ",", "Q", ",", "K", ",", "A"}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.940199289411379*^9, 3.9401993089802856`*^9}},
 CellLabel->"In[181]:=",
 CellID->1421334047,ExpressionUUID->"e3cd72cf-a34a-4912-8691-5edd4341c95c"],

Cell["\<\
We want to randomly deal the cards, until certain combinations occur - then \
we stop. The probability of each combination can be related to the average \
length of the generated sequence of cards (if we generate many sequences). \
Let us first write a function which will deal a random card:\
\>", "Text",
 CellChangeTimes->{{3.940199317405814*^9, 3.940199321264101*^9}},
 CellID->1155155816,ExpressionUUID->"5875c02c-137d-4f02-92db-cea823f237d4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "randomCard", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"randomCard", "[", "_", "]"}], ":=", 
   RowBox[{"cards", "[", 
    RowBox[{"[", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{"1", ",", "13"}], "]"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940199325711955*^9, 3.94019934757545*^9}},
 CellLabel->"In[182]:=",
 CellID->860152479,ExpressionUUID->"e6fe7ad9-5c78-4aa6-ba80-2544d08ef2a7"],

Cell["\<\
This definition seems fine, but it has two drawbacks. To see them, let us \
look at the resulting global definition of this function:\
\>", "Text",
 CellChangeTimes->{{3.940199359750123*^9, 3.9401993616601343`*^9}},
 CellID->1952553359,ExpressionUUID->"95426a1e-580e-4354-a39f-37d048b069c1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "randomCard"}]], "Input",
 CellChangeTimes->{{3.9401993631361513`*^9, 3.940199364473569*^9}},
 CellLabel->"In[184]:=",
 CellID->1488043037,ExpressionUUID->"d0fca0ed-ddc2-47e0-b7cd-55da2f918c25"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox[
             TagBox[
              TooltipBox[
               StyleBox["\<\" Symbol\"\>", "InformationRowLabel",
                StripOnInput->False],
               "\"Symbol\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "Symbol", "Tooltip"]& ], "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`randomCard\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"randomCard", "[", "_", "]"}], ":=", 
                    RowBox[{"cards", "\[LeftDoubleBracket]", 
                    RowBox[{"RandomInteger", "[", 
                    RowBox[{"1", ",", "13"}], "]"}], 
                    "\[RightDoubleBracket]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`randomCard\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{12.5, {1.42974853515625, 11.07025146484375}}],
               True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               
               ImageSizeCache->{
                12.5, {1.42974853515625, 11.07025146484375}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox[
             TagBox[
              TooltipBox[
               StyleBox["\<\" Symbol\"\>", "InformationRowLabel",
                StripOnInput->False],
               "\"Symbol\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "Symbol", "Tooltip"]& ], "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`randomCard\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> "Global`randomCard", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, $CellContext`randomCard, {$CellContext`randomCard[
         Blank[]] :> Part[$CellContext`cards, 
         RandomInteger[1, 13]]}], "SubValues" -> None, "DefaultValues" -> 
    None, "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "Global`randomCard"|>, 
   False]]], "Output",
 CellChangeTimes->{3.940199364771943*^9},
 CellLabel->"Out[184]=",
 CellID->1886481,ExpressionUUID->"9a334bea-bd8d-4d28-bfd2-402473ae1bb6"]
}, Open  ]],

Cell["\<\
We see that it contains <cards>. Thus, the first flaw is that the list \
<cards> will be recomputed every time the function is called. The second flaw \
is even more important - we made a function implicitly depend on a global \
variable <cards>. This is a pretty bad habit. It would be nicer if we could \
embed the current value of the list <cards> straight into the function \
definition. Here is the code which does it:\
\>", "Text",
 CellChangeTimes->{{3.9401993805774*^9, 3.9401993896060266`*^9}},
 CellID->1641315109,ExpressionUUID->"13ad6457-147c-43b2-9990-ce9100990a52"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "randomCard", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ourcards", "=", "cards"}], "}"}], ",", 
    RowBox[{
     RowBox[{"randomCard", "[", "_", "]"}], ":=", 
     RowBox[{"ourcards", "[", 
      RowBox[{"[", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "13"}], "}"}], "]"}], "]"}], "]"}]}]}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940199395956484*^9, 3.940199422233983*^9}, {
  3.940199491925169*^9, 3.940199494038319*^9}},
 CellLabel->"In[189]:=",
 CellID->837395063,ExpressionUUID->"cd695e50-1463-4b4b-8b6f-e9c552432765"],

Cell["\<\
We will cover this technique in full generality later. For now, just observe \
the result:\
\>", "Text",
 CellChangeTimes->{3.9401994311791153`*^9},
 CellID->1772190351,ExpressionUUID->"c29dedaa-f80f-4037-8ea3-99a5c5543282"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "randomCard"}]], "Input",
 CellChangeTimes->{{3.940199433260459*^9, 3.940199435058526*^9}},
 CellLabel->"In[191]:=",
 CellID->339912356,ExpressionUUID->"8b28380b-bab7-47b4-ad84-2a7d012f26b0"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox[
             TagBox[
              TooltipBox[
               StyleBox["\<\" Symbol\"\>", "InformationRowLabel",
                StripOnInput->False],
               "\"Symbol\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "Symbol", "Tooltip"]& ], "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`randomCard\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"randomCard", "[", "_", "]"}], ":=", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{
                    "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", 
                    ",", "8", ",", "9", ",", "10", ",", "J", ",", "Q", ",", 
                    "K", ",", "A"}], "}"}], "\[LeftDoubleBracket]", 
                    RowBox[{"RandomInteger", "[", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "13"}], "}"}], "]"}], 
                    "\[RightDoubleBracket]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`randomCard\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{12.5, {1.42974853515625, 11.07025146484375}}],
               True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               
               ImageSizeCache->{
                12.5, {1.42974853515625, 11.07025146484375}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox[
             TagBox[
              TooltipBox[
               StyleBox["\<\" Symbol\"\>", "InformationRowLabel",
                StripOnInput->False],
               "\"Symbol\"",
               TooltipStyle->"TextStyling"],
              Annotation[#, "Symbol", "Tooltip"]& ], "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`randomCard\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> "Global`randomCard", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, $CellContext`randomCard, {$CellContext`randomCard[
         Blank[]] :> 
       Part[{2, 3, 4, 5, 6, 7, 8, 9, 10, $CellContext`J, $CellContext`Q, 
          K, $CellContext`A}, 
         RandomInteger[{1, 13}]]}], "SubValues" -> None, "DefaultValues" -> 
    None, "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "Global`randomCard"|>, 
   False]]], "Output",
 CellChangeTimes->{3.940199435288076*^9, 3.94019949718847*^9},
 CellLabel->"Out[191]=",
 CellID->953610448,ExpressionUUID->"ccec3397-5898-4398-bb83-08a716003e45"]
}, Open  ]],

Cell["\<\
Now we are fine - the function definition is now completely independent of \
the global variable <cards> and thus insensitive to possible future changes \
of this variable.\
\>", "Text",
 CellChangeTimes->{{3.940199466848557*^9, 3.940199470853491*^9}},
 CellID->678568833,ExpressionUUID->"6d9dbcd5-f0b1-4cdc-98eb-a2915559492e"],

Cell["Let us now check the function. For instance,", "Text",
 CellChangeTimes->{{3.940199466848557*^9, 3.940199468717354*^9}},
 CellID->1663421566,ExpressionUUID->"0702994e-7a41-48be-aacf-04cd57a23cad"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randomCard", "/@", 
  RowBox[{"Range", "[", "5", "]"}]}]], "Input",
 CellChangeTimes->{{3.9401994731025267`*^9, 3.940199477355524*^9}},
 CellLabel->"In[192]:=",
 CellID->1482215988,ExpressionUUID->"b3e287a9-c411-4607-a601-29a6f04c6b0f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"A", ",", "K", ",", "Q", ",", "8", ",", "Q"}], "}"}]], "Output",
 CellChangeTimes->{{3.940199477755271*^9, 3.940199501088657*^9}},
 CellLabel->"Out[192]=",
 CellID->1738581241,ExpressionUUID->"e4a68d07-d56c-43b6-884c-7d6818bc3092"]
}, Open  ]],

Cell["\<\
Now, let us say we are interested in only pairs, three-of -a-kind and \
two-pair combinations for the time being. The way we will solve the problem \
is first to construct the patterns for these combinations:\
\>", "Text",
 CellChangeTimes->{{3.94019951092*^9, 3.940199513357841*^9}},
 CellID->1672416405,ExpressionUUID->"27c992aa-9d0d-455f-bfa1-d51672a31e61"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{
   "pariPattern", ",", "twoPairPattern", ",", "threePattern", ",", "a", ",", 
    "b", ",", "c", ",", "d"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pairPattern", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a_", ",", "a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"b_", ",", "a_", ",", "a_", ",", "c_", ",", "d_"}], "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"b_", ",", "c_", ",", "a_", ",", "a_", ",", "d_"}], "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"b_", ",", "c_", ",", "d_", ",", "a_", ",", "a_"}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"twoPairPattern", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a_", ",", "a_", ",", "b_", ",", "b_", ",", "c_"}], "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"c_", ",", "a_", ",", "a_", ",", "b_", ",", "b_"}], "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"a_", ",", "a_", ",", "c_", ",", "b_", ",", "b_"}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"threePattern", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a_", ",", "a_", ",", "a_", ",", "b_", ",", "c_"}], "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"b_", ",", "a_", ",", "a_", ",", "a_", ",", "c_"}], "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"b_", ",", "c_", ",", "a_", ",", "a_", ",", "a_"}], "}"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.9401995195879498`*^9, 3.940199638355847*^9}},
 CellLabel->"In[193]:=",
 CellID->1168841373,ExpressionUUID->"636b928a-23f1-4134-b925-b189a834e3fa"],

Cell["\<\
The reason that we need only those alternatives used above is that we are \
going to Sort the hands of cards, and for sorted hands these alternatives \
exhaust all the possibilities. Now, consider, for instance, pairs. Here is \
the code to generate the sequence of cards.\
\>", "Text",
 CellChangeTimes->{{3.9401996496558323`*^9, 3.940199652964362*^9}},
 CellID->631784351,ExpressionUUID->"cf0ab32b-ffb8-4290-a254-c879b1e2015d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestWhileList", "[", 
  RowBox[{"randomCard", ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{
    RowBox[{"Not", "[", 
     RowBox[{"MatchQ", "[", 
      RowBox[{
       RowBox[{"Sort", "[", 
        RowBox[{"{", "##", "}"}], "]"}], ",", "pairPattern"}], "]"}], "]"}], 
    "&"}], ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.9401996550096807`*^9, 3.94019968029739*^9}},
 CellLabel->"In[197]:=",
 CellID->2004291133,ExpressionUUID->"679dbeb5-b1c5-45c8-b787-05d2a180b7db"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", "2", ",", "6", ",", "9", ",", "5", ",", "5"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940199681060937*^9},
 CellLabel->"Out[197]=",
 CellID->685642504,ExpressionUUID->"8b222b27-85c8-4425-a463-d488d6bbece2"]
}, Open  ]],

Cell[TextData[{
 "Notice the way that the condition testing function is written. It takes 5 \
arguments, which is, 5 most recently generated cards. To avoid writing \
explicitly every argument, we use SlotSequence (##) (section ",
 ButtonBox["4.11.1.8",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-4-Rules-patterns-functions.nb", 
     CharacterEncoding -> "UTF-8"], "4.11.1.8"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-4-Rules-patterns-functions.\
nb"],
 "). We combine the cards into a list, and then Sort it. Then, the sorted \
hand of cards is compared to the pattern by MatchQ. If the pattern matches, \
the loop terminates. You can run it several times to get different \
sequences."
}], "Text",
 CellChangeTimes->{{3.940199702561294*^9, 3.940199735210122*^9}},
 CellID->196314926,ExpressionUUID->"44216fa7-d9c1-4ecb-a155-567c98535346"],

Cell["\<\
The next step will be to write a function that takes the card pattern and \
generates the sequence of cards.\
\>", "Text",
 CellChangeTimes->{{3.940199702561294*^9, 3.940199710864526*^9}},
 CellID->990031340,ExpressionUUID->"189b137c-9f35-4498-ab37-32bd83d49bd0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "generateCardSequence", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"generateCardSequence", "[", "cardpattern_", "]"}], ":=", 
   RowBox[{"Rest", "[", 
    RowBox[{"NestWhileList", "[", 
     RowBox[{"randomCard", ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{
       RowBox[{"Not", "[", 
        RowBox[{"MatchQ", "[", 
         RowBox[{
          RowBox[{"Sort", "[", 
           RowBox[{"{", "##", "}"}], "]"}], ",", "cardpattern"}], "]"}], 
        "]"}], "&"}], ",", "5"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940222653383334*^9, 3.940222698434156*^9}},
 CellLabel->"In[198]:=",
 CellID->1408781456,ExpressionUUID->"885643cc-881c-4d97-a000-1abf4064a547"],

Cell["\<\
We dropped the first element which is an empty list. Now we can check:\
\>", "Text",
 CellChangeTimes->{3.940222708117638*^9},
 CellID->1577043976,ExpressionUUID->"937801d4-9119-4ab5-a652-a434518e03a4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"generateCardSequence", "[", "pairPattern", "]"}]], "Input",
 CellChangeTimes->{{3.940222709926588*^9, 3.9402227144136963`*^9}},
 CellLabel->"In[201]:=",
 CellID->875195252,ExpressionUUID->"588f4ac1-67ce-4f0b-aff5-d67aba3884ce"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "A", ",", "K", ",", "4", ",", "10", ",", "J", ",", "3", ",", "Q", 
   ",", "5", ",", "6", ",", "A", ",", "4", ",", "J", ",", "Q", ",", "J"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.94022271483541*^9, 3.940222721947709*^9}},
 CellLabel->"Out[201]=",
 CellID->1952709048,ExpressionUUID->"6d02a1a3-80bc-4a5e-ae6c-6b4a81131e90"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"generateCardSequence", "[", "twoPairPattern", "]"}]], "Input",
 CellChangeTimes->{{3.940222725602137*^9, 3.940222728906008*^9}},
 CellLabel->"In[202]:=",
 CellID->131142189,ExpressionUUID->"f42a97f5-8436-4115-bdff-c86c3e956312"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "6", ",", "4", ",", "3", ",", "8", ",", "A", ",", "2", ",", "Q", 
   ",", "9", ",", "A", ",", "4", ",", "5", ",", "2", ",", "2", ",", "9", ",", 
   "K", ",", "7", ",", "5", ",", "3", ",", "Q", ",", "Q", ",", "K", ",", 
   "K"}], "}"}]], "Output",
 CellChangeTimes->{3.940222729222879*^9},
 CellLabel->"Out[202]=",
 CellID->543144224,ExpressionUUID->"8027082d-185e-49a6-a65d-166b524d5025"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"generateCardSequence", "[", "threePattern", "]"}]], "Input",
 CellChangeTimes->{{3.940222731033354*^9, 3.940222735014804*^9}},
 CellLabel->"In[203]:=",
 CellID->1863363893,ExpressionUUID->"e01bd025-1dba-4a2a-b985-5cd65620b0c4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "5", ",", "J", ",", "8", ",", "6", ",", "5", ",", "5", ",", "9", 
   ",", "8", ",", "2", ",", "5", ",", "Q", ",", "A", ",", "A", ",", "2", ",", 
   "Q", ",", "5", ",", "6", ",", "9", ",", "7", ",", "4", ",", "6", ",", "3", 
   ",", "4", ",", "5", ",", "8", ",", "8", ",", "10", ",", "4", ",", "3", ",",
    "10", ",", "A", ",", "9", ",", "J", ",", "K", ",", "10", ",", "3", ",", 
   "5", ",", "8", ",", "6", ",", "A", ",", "9", ",", "7", ",", "9", ",", "7", 
   ",", "4", ",", "A", ",", "6", ",", "6", ",", "5", ",", "J", ",", "8", ",", 
   "Q", ",", "3", ",", "4", ",", "J", ",", "2", ",", "2", ",", "2"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940222735366939*^9},
 CellLabel->"Out[203]=",
 CellID->807155721,ExpressionUUID->"f0af4ae9-babd-4ba4-be40-12a47b09571d"]
}, Open  ]],

Cell["\<\
It is interesting that a pattern can also serve as an argument of the \
function. This idea may seem somewhat unusual since usually patterns are used \
to define functions (formal parameters), but not as actual arguments passed \
to them. The pattern in the definition of <generateCardSequence> means \
\[OpenCurlyDoubleQuote]any single expression\[CloseCurlyDoubleQuote], in \
particular it may be another pattern.\
\>", "Text",
 CellChangeTimes->{{3.940222748437945*^9, 3.9402227599427147`*^9}},
 CellID->212004748,ExpressionUUID->"ba4d2472-1730-4615-8d6b-7798d28a5c37"],

Cell["\<\
The probability of the occurrence of a combination can be estimated by \
5/<average length of the generated sequence> (one could alternatively average \
5/length_i over <i>). We can define a function which will generate the given \
number of sequences for a given pattern and compute this quantity:\
\>", "Text",
 CellChangeTimes->{{3.940222748437945*^9, 3.940222767443281*^9}},
 CellID->1371377949,ExpressionUUID->"8ac7f53d-8f56-4271-b983-ea84ec80a8e8"],

Cell["First, define an auxiliary function listAverage:", "Text",
 CellChangeTimes->{{3.940222748437945*^9, 3.9402227655741053`*^9}},
 CellID->484814423,ExpressionUUID->"ec4b2ea2-7e68-444d-b623-2714d9008ff9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "listAverage", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"listAverage", "[", "x_List", "]"}], ":=", 
   RowBox[{"N", "[", 
    RowBox[{
     RowBox[{"Total", "[", "x", "]"}], "/", 
     RowBox[{"Length", "[", "x", "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940223626821352*^9, 3.940223647391107*^9}},
 CellLabel->"In[204]:=",
 CellID->1849682175,ExpressionUUID->"c3e6b301-dfd1-4ac2-be8f-73132302a2dd"],

Cell["Now the main function:", "Text",
 CellChangeTimes->{3.94022365622106*^9},
 CellID->1371053324,ExpressionUUID->"031ba9d2-27ca-48c8-be4f-5a54bc793dd3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "probEstimate", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"probEstimate", "[", 
    RowBox[{"pattern_", ",", 
     RowBox[{"numseqs_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"5", "/", 
    RowBox[{"listAverage", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"generateCardSequence", "[", "pattern", "]"}], "]"}], ",", 
       RowBox[{"{", "numseqs", "}"}]}], "]"}], "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940223658601845*^9, 3.940223704257414*^9}},
 CellLabel->"In[206]:=",
 CellID->1428711989,ExpressionUUID->"72add634-6742-4fa4-987a-f7e425e15fe9"],

Cell["Let us see. For a pair:", "Text",
 CellChangeTimes->{3.940223714080161*^9},
 CellID->220855511,ExpressionUUID->"822656da-547d-486e-ba70-abcc9ec80fc4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"probEstimate", "[", 
  RowBox[{"pairPattern", ",", "400"}], "]"}]], "Input",
 CellChangeTimes->{{3.940223715830431*^9, 3.940223719723962*^9}},
 CellLabel->"In[208]:=",
 CellID->893715524,ExpressionUUID->"edb9acc1-5405-441a-bc48-87ffb90241cd"],

Cell[BoxData["0.8565310492505352`"], "Output",
 CellChangeTimes->{3.9402237202471037`*^9},
 CellLabel->"Out[208]=",
 CellID->481491367,ExpressionUUID->"821729c7-e1c9-48e2-949c-e274dcd825f5"]
}, Open  ]],

Cell["For a three-of-a-kind:", "Text",
 CellChangeTimes->{{3.940223724921351*^9, 3.940223728831616*^9}},
 CellID->707023273,ExpressionUUID->"6e33dafc-e3b5-482b-a29e-bc1d2babd0a8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"probEstimate", "[", 
  RowBox[{"threePattern", ",", "400"}], "]"}]], "Input",
 CellChangeTimes->{{3.940223730227417*^9, 3.9402237345884533`*^9}},
 CellLabel->"In[209]:=",
 CellID->174033812,ExpressionUUID->"e044828f-1532-4dad-a575-5a0e8f007fca"],

Cell[BoxData["0.12584948401711554`"], "Output",
 CellChangeTimes->{3.940223734965171*^9},
 CellLabel->"Out[209]=",
 CellID->235528797,ExpressionUUID->"cbe7b170-f932-4f20-a43f-e5da8e79b21a"]
}, Open  ]],

Cell["For two pairs:", "Text",
 CellChangeTimes->{{3.94022373831028*^9, 3.940223740574396*^9}},
 CellID->720129758,ExpressionUUID->"e5ed6245-8f12-4019-a941-ede46643cd79"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"probEstimate", "[", 
  RowBox[{"twoPairPattern", ",", "400"}], "]"}]], "Input",
 CellChangeTimes->{{3.9402237414495277`*^9, 3.940223746555949*^9}},
 CellLabel->"In[210]:=",
 CellID->1699808427,ExpressionUUID->"31a6a3b0-cb97-4039-a3fe-421df26b203a"],

Cell[BoxData["0.20699648105982196`"], "Output",
 CellChangeTimes->{3.9402237468594437`*^9},
 CellLabel->"Out[210]=",
 CellID->1705796956,ExpressionUUID->"010646d6-7e91-4589-8a3d-b606eaf6bcc1"]
}, Open  ]],

Cell["\<\
One has to keep in mind that for smaller probabilities, one has to consider \
larger number of sequences, to get a representative sample. Also, smaller \
probabilities mean that in general each sequence will be longer (it will take \
on the average more trials to produce a less probable combination). These two \
circumstances combined together mean that, as we go to higher-ranked \
combinations, our method will quickly become
inefficient.\
\>", "Text",
 CellChangeTimes->{{3.940223759214004*^9, 3.940223780181679*^9}},
 CellID->422752042,ExpressionUUID->"512116ac-39cb-4818-903c-7d7ff64d57be"],

Cell["\<\
Our implementation is perhaps not the fastest one, and probably also not the \
slowest one. The pattern matching here is purely syntactic and thus should be \
efficient enough. What I wanted to illustrate here is the use of \
NestWhileList and patterns in a rather non-trivial setting, so that one can \
see that these two seemingly disjoint programming styles may nicely coexist \
and complement each other.\
\>", "Text",
 CellChangeTimes->{{3.940223759214004*^9, 3.940223793785797*^9}},
 CellID->824057749,ExpressionUUID->"9590d344-d789-4bbd-8fc4-139a19e64329"],

Cell["\<\
We leave it as an exercise to the reader to create patterns for other \
combinations, and get estimates of their probabilities (taking into account \
efficiency considerations discussed above, many of the combinations will be \
in practice beyond the reach of the present method).\
\>", "Text",
 CellChangeTimes->{{3.940223759214004*^9, 3.940223795925247*^9}},
 CellID->1244335953,ExpressionUUID->"6dca5f42-00c4-47fe-a93e-9144de7952eb"],

Cell["Example: generating distinct random numbers", "ItemNumbered",
 CellChangeTimes->{3.940223809346526*^9},
 CellID->929558852,ExpressionUUID->"56003635-0e5e-4fc9-8855-72c8a7a204ab"],

Cell["\<\
Here is the problem: we need to generate a given number of random integers, \
in the specified range, but such that all generated numbers are different. \
The idea of the present solution would be to generate a number, then check if \
it is already in the list, and if so - disregard it. If not, place it in the \
list, until the total number of integers generated will match the requested \
quantity. Let me immediately comment that such
an algorithm is quite inefficient, but we will improve it along the way.\
\>", "Text",
 CellChangeTimes->{{3.94022381972563*^9, 3.940223832174732*^9}},
 CellID->152093639,ExpressionUUID->"203ba5a9-3223-478f-98e4-7bcdbae309d2"],

Cell[TextData[{
 "To solve this problem, we will reformulate it somewhat: instead of checking \
the presence of the number and then decide whether or not it has to be \
included, we will always add it to the least, but then take a Union operation \
which will eliminate redundant elements. Thus, the loop termination condition \
will be that the length of the resulting list is equal to a requested \
quantity of random integers. Since the standard Union operation sorts the \
numbers, we will need an alternative one which does not. Its form and use is \
illustrated below (we use our implementation of this function developed in \
section",
 ButtonBox[" 5.2.6.2.5",
  BaseStyle->"Hyperlink",
  ButtonData->"5.2.6.2.5"],
 "). A good alternative implementation can be obtained with the help of Reap \
and Sow commands - it is given as an example in Mathematica Help)."
}], "Text",
 CellChangeTimes->{{3.94022381972563*^9, 3.940223847878388*^9}, {
  3.940223892792944*^9, 3.9402238928019953`*^9}},
 CellID->210521732,ExpressionUUID->"fc42c57e-0a76-4a04-a1a9-6cd72259a225"],

Cell["Here is our test list:", "Text",
 CellChangeTimes->{{3.94022381972563*^9, 3.940223846790901*^9}},
 CellID->1139879152,ExpressionUUID->"ab4996d9-8572-4670-beae-126188a6c477"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "testlist", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "15", "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940223898728199*^9, 3.940223912973027*^9}},
 CellLabel->"In[211]:=",
 CellID->1288925050,ExpressionUUID->"82783d3c-7e58-4620-a9d1-866ac57946a5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4", ",", "2", ",", "9", ",", "7", ",", "2", ",", "4", ",", "10", ",", "7", 
   ",", "5", ",", "3", ",", "3", ",", "6", ",", "3", ",", "3", ",", "10"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940223914286454*^9},
 CellLabel->"Out[212]=",
 CellID->600159516,ExpressionUUID->"e6bb9eaa-2023-48c0-8c06-9a06f5c677bd"]
}, Open  ]],

Cell["This is the implementation:", "Text",
 CellChangeTimes->{3.940223924352882*^9},
 CellID->150295453,ExpressionUUID->"b277f587-6ecc-438e-83d1-596790a6f71c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "unsortedUnion", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"unsortedUnion", "[", "x_List", "]"}], ":=", 
   RowBox[{"Extract", "[", 
    RowBox[{"x", ",", 
     RowBox[{"Sort", "[", 
      RowBox[{
       RowBox[{"Union", "[", "x", "]"}], "/.", 
       RowBox[{"Dispatch", "[", 
        RowBox[{"MapIndexed", "[", 
         RowBox[{"Rule", ",", "x"}], "]"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940223929282591*^9, 3.940223955676795*^9}},
 CellLabel->"In[213]:=",
 CellID->978383240,ExpressionUUID->"5c2a7c48-af04-4976-bd21-288fb8c74bbc"],

Cell["Observe:", "Text",
 CellChangeTimes->{{3.9402239579139547`*^9, 3.9402239592921133`*^9}},
 CellID->570673204,ExpressionUUID->"beaf9e52-4d31-476e-af0b-5539271fa197"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"unsortedUnion", "[", "testlist", "]"}]], "Input",
 CellChangeTimes->{{3.940223960121339*^9, 3.94022396381285*^9}},
 CellLabel->"In[215]:=",
 CellID->1028456936,ExpressionUUID->"37bba77f-b6e8-4240-bb56-12fb5ae2e695"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4", ",", "2", ",", "9", ",", "7", ",", "10", ",", "5", ",", "3", ",", 
   "6"}], "}"}]], "Output",
 CellChangeTimes->{3.940223964074135*^9},
 CellLabel->"Out[215]=",
 CellID->1795487269,ExpressionUUID->"3d27d2f4-03c1-4620-9fac-6341d9a46e56"]
}, Open  ]],

Cell["Now, this is the code that solves the problem:", "Text",
 CellChangeTimes->{3.940223974943075*^9},
 CellID->314322439,ExpressionUUID->"756af317-5a60-41af-8169-1f30e55d6b3d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "randomNums", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"randomNums", "[", 
   RowBox[{"numrange_List", ",", "n_Integer"}], "]"}], ":=", 
  RowBox[{"NestWhile", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"unsortedUnion", "[", 
      RowBox[{"Append", "[", 
       RowBox[{"#", ",", 
        RowBox[{"Random", "[", 
         RowBox[{"Integer", ",", "numrange"}], "]"}]}], "]"}], "]"}], "&"}], 
    ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "#", "]"}], "<", "n"}], "&"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.940223976636054*^9, 3.940224046241227*^9}},
 CellLabel->"In[219]:=",
 CellID->837143445,ExpressionUUID->"0e05db89-dd99-4738-ae48-8687f496b209"],

Cell["\<\
The code is self-explanatory. Let us test the function. For instance:\
\>", "Text",
 CellChangeTimes->{3.940224028718388*^9},
 CellID->1993289450,ExpressionUUID->"50ef8d80-6085-4a86-95da-661f58dd5f69"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randomNums", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "15"}], "}"}], ",", "10"}], "]"}]], "Input",
 CellChangeTimes->{{3.940224033504836*^9, 3.940224038538995*^9}},
 CellLabel->"In[221]:=",
 CellID->820571455,ExpressionUUID->"89ec7961-ebf1-423f-bb42-60648fb01777"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "8", ",", "15", ",", "7", ",", "4", ",", "9", ",", "2", ",", "10",
    ",", "11", ",", "6"}], "}"}]], "Output",
 CellChangeTimes->{{3.9402240388170013`*^9, 3.940224048658811*^9}},
 CellLabel->"Out[221]=",
 CellID->841184799,ExpressionUUID->"8f141dd1-21c8-4269-9b93-421c4e29cf31"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randomNums", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1000"}], "}"}], ",", "20"}], "]"}]], "Input",
 CellChangeTimes->{{3.940224053623*^9, 3.9402240586973743`*^9}},
 CellLabel->"In[222]:=",
 CellID->1890030162,ExpressionUUID->"fa25c09f-3c32-4dfd-ae10-5c6096c08a71"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "442", ",", "601", ",", "158", ",", "539", ",", "391", ",", "893", ",", 
   "100", ",", "630", ",", "881", ",", "760", ",", "931", ",", "564", ",", 
   "362", ",", "902", ",", "851", ",", "838", ",", "580", ",", "910", ",", 
   "146", ",", "693"}], "}"}]], "Output",
 CellChangeTimes->{3.940224058970763*^9},
 CellLabel->"Out[222]=",
 CellID->1854675692,ExpressionUUID->"90413576-a6e5-456b-a4c8-5e8cf66a5589"]
}, Open  ]],

Cell["\<\
This algorithm may be made much more efficient if we append more than one \
random number at a time, so that we don\[CloseCurlyQuote] t call Append and \
UnsortedUnion for every single number (since their use is the biggest \
bottleneck). If the list at the end contains more numbers than needed, the \
extra ones can be dropped.\
\>", "Text",
 CellChangeTimes->{{3.9402240701845503`*^9, 3.9402240738796883`*^9}},
 CellID->809219239,ExpressionUUID->"b5ea344c-2e2a-4e57-8130-d4de972f784d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "randomNumsBetter", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"randomNumsBetter", "[", 
   RowBox[{"numrange_List", ",", "n_Integer", ",", 
    RowBox[{"updatenum_Integer", ":", "100"}]}], "]"}], ":=", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"NestWhile", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"unsortedUnion", "[", 
        RowBox[{"Join", "[", 
         RowBox[{"#", ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"RandomInteger", "[", "numrange", "]"}], ",", 
            RowBox[{"{", "updatenum", "}"}]}], "]"}]}], "]"}], "]"}], "&"}], 
      ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "#", "]"}], "<", "n"}], "&"}]}], "]"}], ",", 
    "n"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940224075697748*^9, 3.9402241459570217`*^9}},
 CellLabel->"In[223]:=",
 CellID->2044281420,ExpressionUUID->"81f1b17d-4429-4286-aa42-df336508ace0"],

Cell["\<\
Note the use of optional pattern <updatenum_Integer: 100> to implement the \
default value for the <update number> argument. Let us compare the \
performance:\
\>", "Text",
 CellChangeTimes->{{3.940224155298646*^9, 3.940224163369946*^9}, 
   3.940740613867128*^9},
 CellID->835539315,ExpressionUUID->"a7316d94-b97d-430c-9e73-627819330138"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomNums", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1000"}], "}"}], ",", "300"}], "]"}], "//", "Short"}],
   "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.94022416586786*^9, 3.9402241763135757`*^9}},
 CellLabel->"In[225]:=",
 CellID->1197286504,ExpressionUUID->"ef55aae5-8345-497f-8e52-bb1397e797ca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.05357`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"572", ",", "728", ",", "528", ",", "838", ",", 
      RowBox[{"\[LeftSkeleton]", "292", "\[RightSkeleton]"}], ",", "417", ",",
       "946", ",", "660", ",", "559"}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.9402241767987223`*^9},
 CellLabel->"Out[225]=",
 CellID->1658296394,ExpressionUUID->"bb4d42e3-3386-4d17-80a0-8c21a85ed9d1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomNumsBetter", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1000"}], "}"}], ",", "300"}], "]"}], "//", "Short"}],
   "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940224179997785*^9, 3.940224189899448*^9}},
 CellLabel->"In[226]:=",
 CellID->1616085673,ExpressionUUID->"bbe8e0da-3429-4e82-bbaa-19210f4c7c64"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.001956`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"335", ",", "890", ",", "436", ",", "751", ",", 
      RowBox[{"\[LeftSkeleton]", "292", "\[RightSkeleton]"}], ",", "807", ",",
       "695", ",", "647", ",", "5"}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940224190259112*^9},
 CellLabel->"Out[226]=",
 CellID->626366038,ExpressionUUID->"9365d7f4-b076-44ac-9b3f-5af8318fbdd3"]
}, Open  ]],

Cell["\<\
By tuning the number of random integers generated at once in a single \
iteration, one can further improve the performance:\
\>", "Text",
 CellChangeTimes->{{3.9402242018701687`*^9, 3.940224204053007*^9}, 
   3.940740613887142*^9},
 CellID->369163072,ExpressionUUID->"71098c3e-5b01-40ff-a6b1-f9035020b969"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomNumsBetter", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1000"}], "}"}], ",", "300", ",", "500"}], "]"}], "//",
    "Short"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940224205614656*^9, 3.940224215490581*^9}},
 CellLabel->"In[227]:=",
 CellID->51603430,ExpressionUUID->"23330dff-a35f-4bab-9241-cfb4dff99367"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.001528`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"491", ",", "430", ",", "721", ",", "577", ",", 
      RowBox[{"\[LeftSkeleton]", "292", "\[RightSkeleton]"}], ",", "231", ",",
       "116", ",", "159", ",", "617"}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940224215949894*^9},
 CellLabel->"Out[227]=",
 CellID->1911513575,ExpressionUUID->"7910958f-ff91-4af4-a623-3b365d4aeac2"]
}, Open  ]],

Cell["\<\
This is already more or less acceptable (speed - up 100 times w.r.t. naive \
version for the above parameters on my machine).\
\>", "Text",
 CellChangeTimes->{{3.9402242258828087`*^9, 3.940224228941659*^9}},
 CellID->453295905,ExpressionUUID->"093ddf03-04fe-4483-81c7-f9b7c796b64c"],

Cell["\<\
If all that matters is a set of numbers but not the order in which they \
follow, one can further speed - up our function by replacing UnsortedUnion by \
Union.\
\>", "Text",
 CellChangeTimes->{{3.9402242258828087`*^9, 3.940224231322464*^9}},
 CellID->1349928268,ExpressionUUID->"81cfb6f4-414d-41f6-a9c9-5e4d211ca6af"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "randomNumsOrdered", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"randomNumsOrdered", "[", 
    RowBox[{"numrange_List", ",", "n_Integer", ",", 
     RowBox[{"updatenum_Integer", ":", "100"}]}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"range", "=", "numrange"}], "}"}], ",", 
     RowBox[{"Take", "[", 
      RowBox[{
       RowBox[{"NestWhile", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Union", "[", 
           RowBox[{"Join", "[", 
            RowBox[{"#", ",", 
             RowBox[{"Array", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Random", "[", 
                 RowBox[{"Integer", ",", "range"}], "]"}], "&"}], ",", 
               RowBox[{"{", "updatenum", "}"}]}], "]"}]}], "]"}], "]"}], 
          "&"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "#", "]"}], "<", "n"}], "&"}]}], "]"}], ",",
        "n"}], "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940224233471347*^9, 3.940224302004541*^9}},
 CellLabel->"In[228]:=",
 CellID->612346313,ExpressionUUID->"2b52626e-db39-477f-9ab8-2b48564c3002"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940224304588602*^9, 3.940224305381081*^9}},
 CellID->1680160117,ExpressionUUID->"71ebe335-edaa-42ce-8463-1690e396f7a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomNumsOrdered", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1000"}], "}"}], ",", "300", ",", "500"}], "]"}], "//",
    "Short"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940224308945669*^9, 3.94022432178601*^9}},
 CellLabel->"In[230]:=",
 CellID->827007415,ExpressionUUID->"17794467-5f8c-46ab-a3f5-30b36f0acee7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000667`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"5", ",", "8", ",", "10", ",", "11", ",", "12", ",", 
      RowBox[{"\[LeftSkeleton]", "290", "\[RightSkeleton]"}], ",", "761", ",",
       "763", ",", "765", ",", "773", ",", "775"}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.9402243221667223`*^9},
 CellLabel->"Out[230]=",
 CellID->595946959,ExpressionUUID->"814b59a2-2219-4020-8907-7ab64e0b2e8e"]
}, Open  ]],

Cell["\<\
Here we make a power test by generating 30000 random numbers in the range 1 \
.. 1000000, and parameter <updatenum> tuned to 7000 (roughly a quarter of the \
total number of integers needed).\
\>", "Text",
 CellChangeTimes->{{3.940224341836145*^9, 3.9402243447381277`*^9}},
 CellID->216810305,ExpressionUUID->"88b58b1d-c93a-4d6d-a025-87edb49ff1cc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomNumsOrdered", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1000000"}], "}"}], ",", "30000", ",", "7000"}], 
    "]"}], "//", "Short"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940224347507001*^9, 3.940224363308511*^9}},
 CellLabel->"In[231]:=",
 CellID->2075210636,ExpressionUUID->"29f4671e-14d2-420d-8d1b-93a5945661c5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.036592`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"22", ",", "190", ",", "248", ",", 
      RowBox[{"\[LeftSkeleton]", "29994", "\[RightSkeleton]"}], ",", "872859",
       ",", "872864", ",", "872866"}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940224363679837*^9},
 CellLabel->"Out[231]=",
 CellID->499175786,ExpressionUUID->"f0d56686-0ed1-4444-be73-1716cb99191e"]
}, Open  ]],

Cell["\<\
Of course, a good question to ask would be what is the resulting distribution \
(probability density) for the random numbers obtained in this way, and \
whether it is what we want, but that\[CloseCurlyQuote] s another question.\
\>", "Text",
 CellChangeTimes->{{3.9402243732435093`*^9, 3.940224375011941*^9}},
 CellID->1576310120,ExpressionUUID->"bba558ee-527c-445e-a94f-78097873aeda"],

Cell["Example: the Collatz problem", "ItemNumbered",
 CellChangeTimes->{3.94022438634783*^9},
 CellTags->"5.4.2.6",
 CellID->1315310018,ExpressionUUID->"8b221ed0-27ea-4b69-a2fe-61a7061d01a9"],

Cell["\<\
Since the previous example may have left the reader with an impression that \
NestWhile is only good to produce inefficient solutions, we will now consider \
an example where it is perhaps the most appropriate command to use, both in \
the sense of elegance and efficiency.\
\>", "Text",
 CellChangeTimes->{{3.9402243945349493`*^9, 3.940224399979231*^9}},
 CellID->218810308,ExpressionUUID->"96ed4adb-74e8-44f8-bb1b-ce3bec77f42e"],

Cell["The Collatz iteration is given by:", "Text",
 CellChangeTimes->{{3.9402243945349493`*^9, 3.940224398529952*^9}},
 CellID->1684490699,ExpressionUUID->"33405f66-9880-437b-bc90-633f3704854d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "c", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"c", "[", 
    RowBox[{"n_", "?", "OddQ"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"3", "*", "n"}], "+", "1"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"c", "[", 
    RowBox[{"n_", "?", "EvenQ"}], "]"}], ":=", 
   RowBox[{"n", "/", "2"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940224402961316*^9, 3.940224420117738*^9}},
 CellLabel->"In[232]:=",
 CellID->687566935,ExpressionUUID->"605ae010-ef3c-4d7e-9d7e-cd2e6c756aef"],

Cell["\<\
It has been noticed that, regardless of the starting number <n>, the sequence \
of numbers that result from the repeated application of the function <c> will \
always eventually go to 1 (although this has not been rigorously proven). The \
most interesting question is how the length of the Collatz sequence depends \
on the starting number.\
\>", "Text",
 CellChangeTimes->{{3.940224430833867*^9, 3.940224439722413*^9}},
 CellID->361563977,ExpressionUUID->"ab25f61b-69d7-4f4d-b118-e6fb7c0be1d1"],

Cell["\<\
We will be interested in implementing the Collatz sequence. First, consider \
the implementation from the \[OpenCurlyDoubleQuote]Computer science in \
Mathematica\[CloseCurlyDoubleQuote] by Roman Maeder.\
\>", "Text",
 CellChangeTimes->{{3.940224430833867*^9, 3.94022444189867*^9}},
 CellID->437660102,ExpressionUUID->"8a652927-fd62-4b6c-9173-255cdb50137f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "collatzSequence", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"collatzSequence", "[", "1", "]"}], "=", 
   RowBox[{"{", "1", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"collatzSequence", "[", "n_", "]"}], ":=", 
   RowBox[{"Prepend", "[", 
    RowBox[{
     RowBox[{"collatzSequence", "[", 
      RowBox[{"c", "[", "n", "]"}], "]"}], ",", "n"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940224443388113*^9, 3.940224477789678*^9}},
 CellLabel->"In[235]:=",
 CellID->1140276991,ExpressionUUID->"1e7c2786-f48d-4bca-a54f-5788fc11a59d"],

Cell["\<\
Look carefully at this implementation. The idea behind is beautiful: we \
recursively define the sequence by prepending a starting number to the \
sequence which starts with the transformed starting number. The separate base \
case guarantees a proper termination of the recursion.\
\>", "Text",
 CellChangeTimes->{{3.940224489454637*^9, 3.940224494523324*^9}},
 CellID->1086891285,ExpressionUUID->"8c70fd75-99d0-4f8d-afc2-abcacfe44b94"],

Cell["For example:", "Text",
 CellChangeTimes->{{3.940224489454637*^9, 3.9402244933924303`*^9}},
 CellID->935523134,ExpressionUUID->"963f5a84-839d-4eba-be93-bc7b880b8b6a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"collatzSequence", "[", "99", "]"}]], "Input",
 CellChangeTimes->{{3.9402244964132853`*^9, 3.94022450111789*^9}},
 CellLabel->"In[238]:=",
 CellID->1774978396,ExpressionUUID->"8b8bf77a-ed5e-4888-8ed5-a7eb938408b6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "99", ",", "298", ",", "149", ",", "448", ",", "224", ",", "112", ",", "56",
    ",", "28", ",", "14", ",", "7", ",", "22", ",", "11", ",", "34", ",", 
   "17", ",", "52", ",", "26", ",", "13", ",", "40", ",", "20", ",", "10", 
   ",", "5", ",", "16", ",", "8", ",", "4", ",", "2", ",", "1"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940224501395792*^9},
 CellLabel->"Out[238]=",
 CellID->484926413,ExpressionUUID->"1548b825-98f6-4f76-8e63-a479a03404e2"]
}, Open  ]],

Cell["\<\
Let us test the performance of this solution (I chose the powers of 2 since \
then the length of the Collatz sequence is known in advance and is equal to \
the power of 2)\
\>", "Text",
 CellChangeTimes->{{3.9402245146100073`*^9, 3.94022451713864*^9}},
 CellID->457782926,ExpressionUUID->"de1624bc-be94-444b-ad0d-8312a56de2cf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"$RecursionLimit", "=", "Infinity"}], "}"}], ",", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{
      RowBox[{"Timing", "[", 
       RowBox[{
        RowBox[{"collatzSequence", "[", 
         RowBox[{"2", "^", "99"}], "]"}], ";"}], "]"}], ",", 
      RowBox[{"Timing", "[", 
       RowBox[{
        RowBox[{"collatzSequence", "[", 
         RowBox[{"2", "^", "999"}], "]"}], ";"}], "]"}], ",", 
      RowBox[{"Timing", "[", 
       RowBox[{
        RowBox[{"collatzSequence", "[", 
         RowBox[{"2", "^", "2000"}], "]"}], ";"}], "]"}], ",", 
      RowBox[{"Timing", "[", 
       RowBox[{
        RowBox[{"collatzSequence", "[", 
         RowBox[{"2", "^", "5000"}], "]"}], ";"}], "]"}], ",", 
      RowBox[{"Timing", "[", 
       RowBox[{
        RowBox[{"collatzSequence", "[", 
         RowBox[{"2", "^", "9999"}], "]"}], ";"}], "]"}]}], "]"}], ";"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940224547295415*^9, 3.940224604634122*^9}},
 CellLabel->"In[239]:=",
 CellID->1759818812,ExpressionUUID->"ff45f5af-0596-4463-adec-26690a188c8d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.000968`", ",", "Null"}], "}"}], "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.003948`", ",", "Null"}], "}"}], "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.00922`", ",", "Null"}], "}"}], "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.035613`", ",", "Null"}], "}"}], "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.103365`", ",", "Null"}], "}"}]}],
  SequenceForm[{0.000968, Null}, {0.003948, Null}, {0.00922, Null}, {
   0.035613, Null}, {0.103365, Null}],
  Editable->False]], "Print",
 CellChangeTimes->{3.940224606342148*^9},
 CellLabel->"During evaluation of In[239]:=",
 CellID->706657676,ExpressionUUID->"1f3698fb-2005-472d-94a3-e34e36912c9d"]
}, Open  ]],

Cell["\<\
We had to temporarily disable a limit on number of recursive calls (recursion \
depth) since we will need the depth of recursion equal to the power of 2, in \
each case. The standard limit is 256. <Block> is used to make this \
modification local to its interior. We use <Block> when we want some function \
or expression to temporarily \[OpenCurlyDoubleQuote]forget\
\[CloseCurlyDoubleQuote] the associated external (global) rules.\
\>", "Text",
 CellChangeTimes->{{3.940224626335864*^9, 3.940224633502252*^9}},
 CellID->1210992622,ExpressionUUID->"45bd7e43-56e1-473c-84c2-e93967f89f95"],

Cell["\<\
The inefficiency is (c.f. Wagner\[CloseCurlyQuote]96) due to modifications of \
large lists in place at any iteration stage. This is necessary in this \
method, since the length of the sequence is not known an advance. The \
complexity of the program should be roughly roportional to N^3/2, where N is \
the length of the Collatz sequence.\
\>", "Text",
 CellChangeTimes->{{3.940224626335864*^9, 3.94022464457331*^9}},
 CellID->687838712,ExpressionUUID->"d8367642-7ec4-417a-8d8a-548ca6723ee4"],

Cell["Here is an alternative implementation using NestWhileList:", "Text",
 CellChangeTimes->{{3.940224626335864*^9, 3.940224641789266*^9}},
 CellID->408967390,ExpressionUUID->"6f3226b1-6c63-47ff-a8b7-319517cb4114"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "colSequence", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"colSequence", "[", "q_Integer", "]"}], ":=", 
   RowBox[{"NestWhileList", "[", 
    RowBox[{"c", ",", "q", ",", 
     RowBox[{
      RowBox[{"#1", "!=", "1"}], "&"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9402246466681557`*^9, 3.940224671551689*^9}},
 CellLabel->"In[240]:=",
 CellID->807214911,ExpressionUUID->"23c74f37-f57e-4d96-bf9d-3be832556415"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.94022467384721*^9, 3.940224678271397*^9}},
 CellID->1876848807,ExpressionUUID->"59975fd2-822a-4a29-9bdb-b95c24bf7b8f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"colSequence", "[", "99", "]"}]], "Input",
 CellChangeTimes->{{3.9402246792194*^9, 3.940224683052877*^9}},
 CellLabel->"In[242]:=",
 CellID->1328286800,ExpressionUUID->"207f6cba-610b-45fe-8175-4322dab22a79"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "99", ",", "298", ",", "149", ",", "448", ",", "224", ",", "112", ",", "56",
    ",", "28", ",", "14", ",", "7", ",", "22", ",", "11", ",", "34", ",", 
   "17", ",", "52", ",", "26", ",", "13", ",", "40", ",", "20", ",", "10", 
   ",", "5", ",", "16", ",", "8", ",", "4", ",", "2", ",", "1"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940224683317175*^9},
 CellLabel->"Out[242]=",
 CellID->649307691,ExpressionUUID->"1b40c78f-bccc-4576-9f3d-dc69cf52022d"]
}, Open  ]],

Cell["We now test the performance:", "Text",
 CellChangeTimes->{3.940224702400125*^9, 3.94074061390983*^9},
 CellID->1549952230,ExpressionUUID->"9204a4ec-e811-4d9d-a829-9aa23b162bf7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"$RecursionLimit", "=", "Infinity"}], "}"}], ",", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{
      RowBox[{"Timing", "[", 
       RowBox[{
        RowBox[{"colSequence", "[", 
         RowBox[{"2", "^", "99"}], "]"}], ";"}], "]"}], ",", 
      RowBox[{"Timing", "[", 
       RowBox[{
        RowBox[{"colSequence", "[", 
         RowBox[{"2", "^", "999"}], "]"}], ";"}], "]"}], ",", 
      RowBox[{"Timing", "[", 
       RowBox[{
        RowBox[{"colSequence", "[", 
         RowBox[{"2", "^", "2000"}], "]"}], ";"}], "]"}], ",", 
      RowBox[{"Timing", "[", 
       RowBox[{
        RowBox[{"colSequence", "[", 
         RowBox[{"2", "^", "5000"}], "]"}], ";"}], "]"}], ",", 
      RowBox[{"Timing", "[", 
       RowBox[{
        RowBox[{"colSequence", "[", 
         RowBox[{"2", "^", "9999"}], "]"}], ";"}], "]"}]}], "]"}], ";"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940224724325357*^9, 3.940224733450828*^9}},
 CellLabel->"In[243]:=",
 CellID->1070491500,ExpressionUUID->"b137b8d6-4af0-40ae-b67a-8db5116b5113"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.000316`", ",", "Null"}], "}"}], "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.001818`", ",", "Null"}], "}"}], "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.003413`", ",", "Null"}], "}"}], "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.008008`", ",", "Null"}], "}"}], "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.014711`", ",", "Null"}], "}"}]}],
  SequenceForm[{0.000316, Null}, {0.001818, Null}, {0.003413, Null}, {
   0.008008, Null}, {0.014711, Null}],
  Editable->False]], "Print",
 CellChangeTimes->{3.9402247343633204`*^9},
 CellLabel->"During evaluation of In[243]:=",
 CellID->920505384,ExpressionUUID->"ec62459f-cc64-49a0-90a3-41d21523f7e0"]
}, Open  ]],

Cell["\<\
This version does not communicate the idea and recursive nature of the \
Collatz sequence so clearly (which was probably the main motivation of \
Maeder. Besides, NestWhileList did not exist at the time), but the \
performance of this version is much better. This is because, the sequence \
(list) is created internally inside NestWhileList, and we don\
\[CloseCurlyQuote]t have to modify large lists in place. The complexity of \
this program depends on details of internal implementation of NestWhileList, \
but could be even linear or log-linear, if c[x] is approximately \
constant-time (or log). We see that this problem is tailor-made for \
NestWhileList. It can be also seen by the conciseness of the code. Note that \
should we have only NestWhile at our disposal, this solution would not be \
possible - in this case we needed exactly NestWhileList.\
\>", "Text",
 CellChangeTimes->{{3.940224749529664*^9, 3.940224778410336*^9}},
 CellID->461795900,ExpressionUUID->"8f51dbbd-9fc1-4368-bf9a-9ad6578e7cc1"],

Cell["\<\
Generally, many problems involving building large lists element by element \
and when the next element depends on the previous element(s), can be \
reformulated such that they can be solved by NestWhileList. This is \
advantageous in Mathematica programming, because one can think of \
NestWhileList as an efficient cousin of the standard procedural loops (which \
are usually inefficient in Mathematica). In the next
case study of the Fibonacci numbers we will further dwell on this topic.\
\>", "Text",
 CellChangeTimes->{{3.940224749529664*^9, 3.940224781916009*^9}},
 CellID->1550194735,ExpressionUUID->"a296bb18-8862-4960-8e77-eb2479beca51"],

Cell["\<\
Case study: on automatic and programmatic construction of patterns - patterns \
for poker
combinations revisited (not NestWhile - related)\
\>", "ItemNumbered",
 CellChangeTimes->{3.940224797281705*^9},
 CellID->366177030,ExpressionUUID->"080c1c6b-023b-4c3b-aaa5-1fd5b47c7494"],

Cell[TextData[StyleBox["The problem",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940224806254064*^9, 3.940224810616688*^9}},
 CellID->1796694555,ExpressionUUID->"4b67bc31-c60b-46f6-a8c1-a401c57ee96f"],

Cell["\<\
Many problems admit in Mathematica elegant and efficient solutions based on \
patterns and pattern-matching. But often it may be desirable to also create \
the patterns programmatically, especially when a pattern is combined from a \
large number of alternative patterns. We will illustrate the possibility of \
programmatic pattern construction on the just considered example of poker \
combinations. Here are the patterns we had:\
\>", "Text",
 CellChangeTimes->{{3.940224806254064*^9, 3.940224821064972*^9}, 
   3.9407406139303083`*^9},
 CellID->250905219,ExpressionUUID->"15420104-1382-43e5-9da3-40b1546fcd37"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{
   "pariPattern", ",", "twoPairPattern", ",", "threePattern", ",", "a", ",", 
    "b", ",", "c", ",", "d"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pairPattern", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a_", ",", "a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"b_", ",", "a_", ",", "a_", ",", "c_", ",", "d_"}], "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"b_", ",", "c_", ",", "a_", ",", "a_", ",", "d_"}], "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"b_", ",", "c_", ",", "d_", ",", "a_", ",", "a_"}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"twoPairPattern", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a_", ",", "a_", ",", "b_", ",", "b_", ",", "c_"}], "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"c_", ",", "a_", ",", "a_", ",", "b_", ",", "b_"}], "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"a_", ",", "a_", ",", "c_", ",", "b_", ",", "b_"}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"threePattern", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a_", ",", "a_", ",", "a_", ",", "b_", ",", "c_"}], "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"b_", ",", "a_", ",", "a_", ",", "a_", ",", "c_"}], "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"b_", ",", "c_", ",", "a_", ",", "a_", ",", "a_"}], "}"}]}]}], 
  ";"}]}], "Input",
 CellLabel->"In[244]:=",
 CellID->725119867,ExpressionUUID->"4a2719fb-48a0-4a14-afa0-155044607ebe"],

Cell[TextData[StyleBox["First level of automation",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.9402248688813553`*^9, 3.940224873406477*^9}},
 CellID->1577444081,ExpressionUUID->"2058aa2d-ede3-49a3-8e6a-fe8b9f0beb76"],

Cell["\<\
Essentially the same patterns can be created in a more automatic fashion:\
\>", "Text",
 CellChangeTimes->{3.9402248688813553`*^9, 3.9407406139500237`*^9},
 CellID->147431392,ExpressionUUID->"d0640fa0-79b2-4c22-acfe-818c8979685f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Alternatives", "@@", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"RotateRight", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a_", ",", "a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], 
       ",", "#"}], "]"}], "&"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "3"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9402248759286613`*^9, 3.9402249013784647`*^9}},
 CellLabel->"In[248]:=",
 CellID->1356216945,ExpressionUUID->"a47995d6-2b03-4cd1-afa2-8970c6392564"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"a_", ",", "a_", ",", "b_", ",", "c_", ",", "d_"}], "}"}], "|", 
  RowBox[{"{", 
   RowBox[{"d_", ",", "a_", ",", "a_", ",", "b_", ",", "c_"}], "}"}], "|", 
  RowBox[{"{", 
   RowBox[{"c_", ",", "d_", ",", "a_", ",", "a_", ",", "b_"}], "}"}], "|", 
  RowBox[{"{", 
   RowBox[{"b_", ",", "c_", ",", "d_", ",", "a_", ",", "a_"}], 
   "}"}]}]], "Output",
 CellChangeTimes->{3.940224901937516*^9},
 CellLabel->"Out[248]=",
 CellID->972213032,ExpressionUUID->"fb739c03-56f9-4290-b56d-c8357d3638c3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Alternatives", "@@", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"RotateRight", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a_", ",", "a_", ",", "a_", ",", "c_", ",", "d_"}], "}"}], 
       ",", "#"}], "]"}], "&"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "2"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9402249109239407`*^9, 3.940224928255692*^9}},
 CellLabel->"In[249]:=",
 CellID->1789372071,ExpressionUUID->"3235b424-3c56-4435-83d2-a058859c66a9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"a_", ",", "a_", ",", "a_", ",", "c_", ",", "d_"}], "}"}], "|", 
  RowBox[{"{", 
   RowBox[{"d_", ",", "a_", ",", "a_", ",", "a_", ",", "c_"}], "}"}], "|", 
  RowBox[{"{", 
   RowBox[{"c_", ",", "d_", ",", "a_", ",", "a_", ",", "a_"}], 
   "}"}]}]], "Output",
 CellChangeTimes->{3.9402249287951612`*^9},
 CellLabel->"Out[249]=",
 CellID->1450603947,ExpressionUUID->"83811c03-0be1-469b-8fdc-143939dc91f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Alternatives", "@@", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"RotateRight", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a_", ",", "a_", ",", "b_", ",", "b_", ",", "c_"}], "}"}], 
       ",", "#"}], "]"}], "&"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"1", ",", "5", ",", "2"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940224931458316*^9, 3.940224949242422*^9}},
 CellLabel->"In[250]:=",
 CellID->1417611405,ExpressionUUID->"71b27603-3bb9-4942-80b2-6cf3747a81a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"c_", ",", "a_", ",", "a_", ",", "b_", ",", "b_"}], "}"}], "|", 
  RowBox[{"{", 
   RowBox[{"b_", ",", "b_", ",", "c_", ",", "a_", ",", "a_"}], "}"}], "|", 
  RowBox[{"{", 
   RowBox[{"a_", ",", "a_", ",", "b_", ",", "b_", ",", "c_"}], 
   "}"}]}]], "Output",
 CellChangeTimes->{3.9402249497558737`*^9},
 CellLabel->"Out[250]=",
 CellID->1421233342,ExpressionUUID->"c75ac916-0c4c-4358-8c19-313908443b62"]
}, Open  ]],

Cell[TextData[StyleBox["Second level of automation: constructing patterns \
completely programmatically",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940224967432844*^9, 3.9402249728462*^9}, 
   3.940740613970189*^9},
 CellID->208173413,ExpressionUUID->"25ba5525-869c-43bc-8a30-87b831b023f5"],

Cell["\<\
If desired, one can achieve an even higher level of automation. Consider the \
following function (which we will cover later in detail), which gives all \
distinct partitions for a given integer:\
\>", "Text",
 CellChangeTimes->{{3.940224967432844*^9, 3.940224974741311*^9}},
 CellID->1722936263,ExpressionUUID->"8d7281dc-03f8-49a4-8455-093f6ab4325b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "distinctPartitions", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"disttinctPartitions", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "fn", "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"fn", "[", 
       RowBox[{"x_List", ",", "0"}], "]"}], ":=", "x"}], ";", 
     RowBox[{
      RowBox[{"fn", "[", 
       RowBox[{"x_List", ",", "num_Integer"}], "]"}], ":=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"fn", "[", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{"{", 
             RowBox[{"x", ",", "#"}], "}"}], "]"}], ",", 
           RowBox[{"num", "-", "#"}]}], "]"}], "&"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"num", ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"x", "===", 
             RowBox[{"{", "}"}]}], ",", "1", ",", 
            RowBox[{"x", "[", 
             RowBox[{"[", 
              RowBox[{"-", "1"}], "]"}], "]"}]}], "]"}], ",", 
          RowBox[{"-", "1"}]}], "]"}]}], "]"}]}], ";", 
     RowBox[{"Sort", "[", 
      RowBox[{
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{"fn", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", "n"}], "]"}], ",", 
         RowBox[{"{", "__Integer", "}"}], ",", "Infinity"}], "]"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "#1", "]"}], "<", 
         RowBox[{"Length", "[", "#2", "]"}]}], "&"}]}], "]"}]}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.940225162149403*^9, 3.940225277616137*^9}},
 CellLabel->"In[251]:=",
 CellID->2021778479,ExpressionUUID->"2e5d55fa-44c0-42b1-9dcb-2632c3133c7c"],

Cell["Let us realize that the following partitions of 5:", "Text",
 CellChangeTimes->{3.9402252855240297`*^9, 3.940740613989832*^9},
 CellID->1199152384,ExpressionUUID->"26a9024e-fe40-4a6f-ab62-460e76d0fc9e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Rest", "[", 
  RowBox[{"disttinctPartitions", "[", "5", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.9402252872358103`*^9, 3.940225292465027*^9}},
 CellLabel->"In[253]:=",
 CellID->511025372,ExpressionUUID->"0cd4a9bb-c87a-420f-bf04-41b5a634585c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940225292762238*^9},
 CellLabel->"Out[253]=",
 CellID->746408130,ExpressionUUID->"4d109e10-d865-4d1c-825f-58f626064784"]
}, Open  ]],

Cell["\<\
realize poker combinations four-of-a-kind, full house, three-of-a-kind, two \
pairs, pair and just highest rank card. The maximum number of distinct \
variables for patterns is clearly 5. Thus, we create 5 dummy variables:\
\>", "Text",
 CellChangeTimes->{{3.940225304442318*^9, 3.940225317829454*^9}},
 CellID->1429458783,ExpressionUUID->"2c416eb6-c01f-4428-a77e-0b58c2d04fd2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vars", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Unique", "[", "]"}], ",", 
    RowBox[{"{", "5", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940225319861579*^9, 3.9402253284803877`*^9}},
 CellLabel->"In[254]:=",
 CellID->86600557,ExpressionUUID->"671b80e6-61cc-4fdb-b77b-6a7679b59150"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"$11", ",", "$12", ",", "$13", ",", "$14", ",", "$15"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940225328960829*^9},
 CellLabel->"Out[254]=",
 CellID->90331683,ExpressionUUID->"6938e515-c75d-4869-97a3-2eace80bb16e"]
}, Open  ]],

Cell["\<\
The function below will take a given partition, and a list of variables. It \
will return a combination of variables where the multiplicity of each \
distinct variable corresponds to one of the numbers in the partition.\
\>", "Text",
 CellChangeTimes->{{3.940225337740777*^9, 3.940225341499391*^9}},
 CellID->2081141399,ExpressionUUID->"6cb674ef-5716-4a90-8f90-f02f577ca496"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "patternVars", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"patternVars", "[", 
    RowBox[{"partition_List", ",", "vars_List"}], "]"}], ":=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"vars", "[", 
         RowBox[{"[", "#", "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"partition", "[", 
          RowBox[{"[", "#", "]"}], "]"}], "}"}]}], "]"}], "&"}], "/@", 
     RowBox[{"Range", "[", 
      RowBox[{"Length", "[", "partition", "]"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940225343741858*^9, 3.940225408223905*^9}},
 CellLabel->"In[255]:=",
 CellID->1277907820,ExpressionUUID->"4ed65ff8-1cdd-4228-8293-6bcb52bea3d9"],

Cell["For example:", "Text",
 CellChangeTimes->{{3.940225411881708*^9, 3.9402254136671867`*^9}},
 CellID->1730594561,ExpressionUUID->"a4d8a4ec-7c7d-4e9f-a217-89c4e4392525"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"patternVars", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "3"}], "}"}], ",", "vars"}], "]"}]], "Input",
 CellChangeTimes->{{3.9402254142879457`*^9, 3.9402254201165667`*^9}},
 CellLabel->"In[257]:=",
 CellID->1508769416,ExpressionUUID->"ed7b138c-900a-46b7-be9e-88a3b3c7c0b9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"$11", ",", "$12", ",", "$13", ",", "$13", ",", "$13"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9402254204037027`*^9},
 CellLabel->"Out[257]=",
 CellID->1470770179,ExpressionUUID->"9ec09fad-607b-4f22-9b0a-2956df547ca7"]
}, Open  ]],

Cell["\<\
To create all pattern sequences at once, we will simply use Permutations:\
\>", "Text",
 CellChangeTimes->{3.9402254347353697`*^9, 3.940740614010227*^9},
 CellID->1697621483,ExpressionUUID->"f137df53-c262-457b-b615-4b4c25a108a7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"patternVars", "[", 
    RowBox[{"#", ",", "vars"}], "]"}], "&"}], "/@", 
  RowBox[{"Permutations", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "3"}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940225437042742*^9, 3.940225447163*^9}},
 CellLabel->"In[258]:=",
 CellID->2100543289,ExpressionUUID->"917a7b8f-eafb-418f-bccd-8b3c32e25e74"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"$11", ",", "$12", ",", "$13", ",", "$13", ",", "$13"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"$11", ",", "$12", ",", "$12", ",", "$12", ",", "$13"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"$11", ",", "$11", ",", "$11", ",", "$12", ",", "$13"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940225447602914*^9},
 CellLabel->"Out[258]=",
 CellID->161429192,ExpressionUUID->"ee6fb719-83e4-420d-bf9f-b8276086aa40"]
}, Open  ]],

Cell["\<\
We see that the actual variable names are always different for the 3 \
identical cards, but for us now this is not a problem. If in some case it is, \
one can rewrite functions appropriately to take this into account, so that \
the variable names are also permuted accordingly.\
\>", "Text",
 CellChangeTimes->{{3.940225456874968*^9, 3.940225461749073*^9}},
 CellID->868583783,ExpressionUUID->"0cf1d814-c56f-4e09-8972-bb3728cc71a8"],

Cell["\<\
The final thing is to convert this to real pattern, which we do with the code:\
\>", "Text",
 CellChangeTimes->{{3.940225456874968*^9, 3.940225460723473*^9}, 
   3.9407406140300198`*^9},
 CellID->2061300582,ExpressionUUID->"da4d9fd6-cab8-4a4e-9fb8-a6d8fc67bdf4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "makePattern", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"makePattern", "[", "varcomb_List", "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"varc", "=", "varcomb"}], "}"}], ",", 
     RowBox[{"Thread", "[", 
      RowBox[{"Pattern", "[", 
       RowBox[{"varc", ",", 
        RowBox[{"Blank", "[", "]"}]}], "]"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940225467555225*^9, 3.94022549312331*^9}},
 CellLabel->"In[259]:=",
 CellID->455994698,ExpressionUUID->"c0e99455-b73c-4b9d-98d9-29dc5926f5c7"],

Cell["\<\
The With construct was used to avoid the error message which appears when the \
r.h.s. of an assignment contains the same pattern as used in the l.h.s. This \
situation looks so to Mathematica interpreter. Now check:\
\>", "Text",
 CellChangeTimes->{{3.940225502159368*^9, 3.9402255059927893`*^9}, 
   3.9407406140496492`*^9},
 CellID->852350792,ExpressionUUID->"ed30bbd3-8373-47c6-a989-b89e8a5e617d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"makePattern", "[", 
  RowBox[{"patternVars", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "3"}], "}"}], ",", "vars"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940225507243556*^9, 3.940225514258718*^9}},
 CellLabel->"In[261]:=",
 CellID->179459663,ExpressionUUID->"4fb39ccf-8451-4f13-b47d-2ee5a7d5c9e0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"$11_", ",", "$12_", ",", "$13_", ",", "$13_", ",", "$13_"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940225514570046*^9},
 CellLabel->"Out[261]=",
 CellID->1362438666,ExpressionUUID->"ede588eb-b90c-4324-8ae3-51f78ee98f19"]
}, Open  ]],

Cell["\<\
Now all we have to do is to Map our makePattern on the prepared list of \
variable combinations:\
\>", "Text",
 CellChangeTimes->{3.940225523475662*^9, 3.940740614069325*^9},
 CellID->2036015148,ExpressionUUID->"4b656720-f506-45ca-87f7-c9bcda89eae1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"makePattern", "[", 
     RowBox[{"patternVars", "[", 
      RowBox[{"#", ",", "vars"}], "]"}], "]"}], "&"}], ",", 
   RowBox[{"Permutations", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "3"}], "}"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.94022552573621*^9, 3.9402255385962343`*^9}},
 CellLabel->"In[262]:=",
 CellID->416399789,ExpressionUUID->"ee2039ea-219c-4d86-97ca-4ae113cac9b9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"$11_", ",", "$12_", ",", "$13_", ",", "$13_", ",", "$13_"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"$11_", ",", "$12_", ",", "$12_", ",", "$12_", ",", "$13_"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"$11_", ",", "$11_", ",", "$11_", ",", "$12_", ",", "$13_"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402255397379427`*^9},
 CellLabel->"Out[262]=",
 CellID->1355330291,ExpressionUUID->"42f1b26b-94cc-4203-ade4-21f60f719bf8"]
}, Open  ]],

Cell["And finally Apply <Alternatives >:", "Text",
 CellChangeTimes->{3.940225549124564*^9, 3.940276417755134*^9, 
  3.940740614089302*^9},
 CellID->677157108,ExpressionUUID->"b0513012-08c4-4e61-9cf4-faeaa7eee0c3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Alternatives", "@@", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"makePattern", "[", 
      RowBox[{"patternVars", "[", 
       RowBox[{"#", ",", "vars"}], "]"}], "]"}], "&"}], ",", 
    RowBox[{"Permutations", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "3"}], "}"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9402255516886*^9, 3.940225565941709*^9}},
 CellLabel->"In[263]:=",
 CellID->454714936,ExpressionUUID->"40214d14-eb15-46c3-9762-46c70e7e9a8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"$11_", ",", "$12_", ",", "$13_", ",", "$13_", ",", "$13_"}], 
   "}"}], "|", 
  RowBox[{"{", 
   RowBox[{"$11_", ",", "$12_", ",", "$12_", ",", "$12_", ",", "$13_"}], 
   "}"}], "|", 
  RowBox[{"{", 
   RowBox[{"$11_", ",", "$11_", ",", "$11_", ",", "$12_", ",", "$13_"}], 
   "}"}]}]], "Output",
 CellChangeTimes->{3.940225566365391*^9},
 CellLabel->"Out[263]=",
 CellID->440360315,ExpressionUUID->"d6ef5863-4ecf-4dc4-ad71-89c9b0ff5bc4"]
}, Open  ]],

Cell["So, our second function will be:", "Text",
 CellChangeTimes->{3.940225573654769*^9, 3.9407406141091146`*^9},
 CellID->907166643,ExpressionUUID->"5659c611-4040-455e-98f3-0afb0742e479"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getTotalPattern", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getTotalPattern", "[", "partition_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "vars", "}"}], ",", 
    RowBox[{
     RowBox[{"vars", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Unique", "[", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"Length", "[", "partition", "]"}], "}"}]}], "]"}]}], ";", 
     RowBox[{
      RowBox[{
       RowBox[{"Apply", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "#", "]"}], "==", "1"}], ",", "Identity", 
           ",", "Alternatives"}], "]"}], ",", "#"}], "]"}], "&"}], "@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"makePattern", "[", 
          RowBox[{"patternVars", "[", 
           RowBox[{"#", ",", "vars"}], "]"}], "]"}], "&"}], ",", 
        RowBox[{"Permutations", "[", "partition", "]"}]}], "]"}]}]}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.9402255768131323`*^9, 3.940225638565639*^9}},
 CellLabel->"In[264]:=",
 CellID->1497829736,ExpressionUUID->"1bede733-68c4-410e-8d6f-b3174d30ce91"],

Cell["\<\
We also refined the Apply Alternatives part so that when there is a single \
pattern, Identity head is applied (i.e., the same pattern is returned). For \
example:\
\>", "Text",
 CellChangeTimes->{{3.94022565518239*^9, 3.940225656811631*^9}, 
   3.940740614128854*^9},
 CellID->203886509,ExpressionUUID->"1f91732b-b397-4d82-ab03-e2c538cabf0e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getTotalPattern", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "1", ",", "3"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.9402256585563173`*^9, 3.940225662722966*^9}},
 CellLabel->"In[266]:=",
 CellID->312547726,ExpressionUUID->"31131528-fccc-4cd6-8aef-03685ce3f558"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"$16_", ",", "$17_", ",", "$18_", ",", "$18_", ",", "$18_"}], 
   "}"}], "|", 
  RowBox[{"{", 
   RowBox[{"$16_", ",", "$17_", ",", "$17_", ",", "$17_", ",", "$18_"}], 
   "}"}], "|", 
  RowBox[{"{", 
   RowBox[{"$16_", ",", "$16_", ",", "$16_", ",", "$17_", ",", "$18_"}], 
   "}"}]}]], "Output",
 CellChangeTimes->{3.9402256631350718`*^9},
 CellLabel->"Out[266]=",
 CellID->1624040057,ExpressionUUID->"67161d8e-ea2e-4a6d-ae20-247292d7b67f"]
}, Open  ]],

Cell["\<\
Let us now create all the patterns for our combinations. We will just need to \
Map the <getTotalPattern > function on a list of our combinations (partitions \
of 5):\
\>", "Text",
 CellChangeTimes->{{3.940225675868824*^9, 3.940225677631423*^9}, 
   3.940276417777821*^9, 3.940740614148793*^9},
 CellID->724084629,ExpressionUUID->"d0ac07a6-7bef-4d3e-a0b7-3307a6b6bd50"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"getTotalPattern", ",", 
   RowBox[{"disttinctPartitions", "[", "5", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9402256826146507`*^9, 3.940225692646462*^9}},
 CellLabel->"In[267]:=",
 CellID->955513121,ExpressionUUID->"3a00a454-33c3-4ede-886e-9bcd0f8ac870"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"$19_", ",", "$19_", ",", "$19_", ",", "$19_", ",", "$19_"}], 
    "}"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"$20_", ",", "$21_", ",", "$21_", ",", "$21_", ",", "$21_"}], 
     "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"$20_", ",", "$20_", ",", "$20_", ",", "$20_", ",", "$21_"}], 
     "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"$22_", ",", "$22_", ",", "$23_", ",", "$23_", ",", "$23_"}], 
     "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"$22_", ",", "$22_", ",", "$22_", ",", "$23_", ",", "$23_"}], 
     "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"$24_", ",", "$25_", ",", "$26_", ",", "$26_", ",", "$26_"}], 
     "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"$24_", ",", "$25_", ",", "$25_", ",", "$25_", ",", "$26_"}], 
     "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"$24_", ",", "$24_", ",", "$24_", ",", "$25_", ",", "$26_"}], 
     "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"$27_", ",", "$28_", ",", "$28_", ",", "$29_", ",", "$29_"}], 
     "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"$27_", ",", "$27_", ",", "$28_", ",", "$29_", ",", "$29_"}], 
     "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"$27_", ",", "$27_", ",", "$28_", ",", "$28_", ",", "$29_"}], 
     "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"$30_", ",", "$31_", ",", "$32_", ",", "$33_", ",", "$33_"}], 
     "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"$30_", ",", "$31_", ",", "$32_", ",", "$32_", ",", "$33_"}], 
     "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"$30_", ",", "$31_", ",", "$31_", ",", "$32_", ",", "$33_"}], 
     "}"}], "|", 
    RowBox[{"{", 
     RowBox[{"$30_", ",", "$30_", ",", "$31_", ",", "$32_", ",", "$33_"}], 
     "}"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"$34_", ",", "$35_", ",", "$36_", ",", "$37_", ",", "$38_"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402256931758003`*^9},
 CellLabel->"Out[267]=",
 CellID->1696897606,ExpressionUUID->"50945d62-d1c5-4a04-8412-2f3e35643915"]
}, Open  ]],

Cell["\<\
In this way, we constructed completely programmatically patterns for many \
poker combinations. Let us collect all necessary functions together once \
again:\
\>", "Text",
 CellChangeTimes->{{3.9402257032772093`*^9, 3.940225705292411*^9}},
 CellID->1175231882,ExpressionUUID->"dbdb7b35-379b-4a82-8aa1-2ab2f6148936"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "patternVars", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"patternVars", "[", 
    RowBox[{"partition_List", ",", "vars_List"}], "]"}], ":=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"vars", "[", 
         RowBox[{"[", "#", "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"partition", "[", 
          RowBox[{"[", "#", "]"}], "]"}], "}"}]}], "]"}], "&"}], "/@", 
     RowBox[{"Range", "[", 
      RowBox[{"Length", "[", "partition", "]"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.9402257070664597`*^9, 3.940225741369153*^9}},
 CellLabel->"In[268]:=",
 CellID->197234439,ExpressionUUID->"0ff320aa-eeb1-4d2e-a5f1-bf6f895077e8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "makePattern", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"makePattern", "[", "varcomb_List", "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"varc", "=", "varcomb"}], "}"}], ",", 
     RowBox[{"Thread", "[", 
      RowBox[{"Pattern", "[", 
       RowBox[{"varc", ",", 
        RowBox[{"Blank", "[", "]"}]}], "]"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940225743907864*^9, 3.940225772775429*^9}},
 CellLabel->"In[270]:=",
 CellID->171215863,ExpressionUUID->"4e135e30-13d1-4f2b-92fa-3ba1eef03f12"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "getTotalPattern", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getTotalPattern", "[", "partition_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "vars", "}"}], ",", 
    RowBox[{
     RowBox[{"vars", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Unique", "[", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"Length", "[", "partition", "]"}], "}"}]}], "]"}]}], ";", 
     RowBox[{
      RowBox[{
       RowBox[{"Apply", "[", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "#", "]"}], "==", "1"}], ",", "Identity", 
           ",", "Alternatives"}], "]"}], ",", "#"}], "]"}], "&"}], "@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"makePattern", "[", 
          RowBox[{"patternVars", "[", 
           RowBox[{"#", ",", "vars"}], "]"}], "]"}], "&"}], ",", 
        RowBox[{"Permutations", "[", "partition", "]"}]}], "]"}]}]}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.9402257748710537`*^9, 3.940225838566248*^9}},
 CellLabel->"In[272]:=",
 CellID->1151846425,ExpressionUUID->"e4b2ea9f-8dc8-4b5b-9a27-e952bb882148"],

Cell["Case study: Fibonacci numbers", "ItemNumbered",
 CellChangeTimes->{3.940225850306176*^9},
 CellID->1193032972,ExpressionUUID->"25c10ad1-40ce-43e0-9504-1547d658bf6b"],

Cell[TextData[StyleBox["The problem",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.9402258616555443`*^9, 3.940225865651103*^9}},
 CellID->684506082,ExpressionUUID->"370ee982-bcb9-4ca6-acfd-d54d74e219c2"],

Cell["\<\
Fibonacci numbers are defined as follows: fib(0)=fib(1) =1,fib(n) = \
fib(n-1)+fib(n-2), n\[GreaterEqual] 2. This is a standard example to show \
that the use of recursion (which seems natural in this case) may lead to a \
huge overhead (exponential in this case), due to the massive redundant \
re-computations of the same quantities. We will be considering three somewhat \
different problems: produce a given Fibonacci number fib(n), produce a list \
of first <n> Fibonacci numbers, and produce all Fibonacci numbers less than a \
given
number.\
\>", "Text",
 CellChangeTimes->{{3.9402258616555443`*^9, 3.940225897310339*^9}},
 CellID->1983466551,ExpressionUUID->"9a7538a1-c322-4042-9b19-4eb01886ffa6"],

Cell[TextData[StyleBox["The standard recursive solution in Mathematica",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.9402258616555443`*^9, 3.940225886965579*^9}},
 CellID->115996149,ExpressionUUID->"eb681af5-cfbe-4d02-8a1a-64e401cd5e38"],

Cell["\<\
Let me first briefly show the recursive solution to the first problem. For \
it, we have to transfer the definition to Mathematica code practically \
verbatim:\
\>", "Text",
 CellChangeTimes->{{3.9402258616555443`*^9, 3.9402258887903557`*^9}},
 CellID->1156480248,ExpressionUUID->"afa4a27b-bf6c-47ac-af69-7b4104c9862c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "fib", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fib", "[", "0", "]"}], ":=", "1"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fib", "[", "1", "]"}], ":=", "1"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fib", "[", "n_Integer", "]"}], ":=", 
   RowBox[{
    RowBox[{"fib", "[", 
     RowBox[{"n", "-", "1"}], "]"}], "+", 
    RowBox[{"fib", "[", 
     RowBox[{"n", "-", "2"}], "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9402259035852623`*^9, 3.940225924519359*^9}},
 CellLabel->"In[274]:=",
 CellID->1684504142,ExpressionUUID->"1b6ddb49-c6eb-49c0-bb15-9a5d37d07cd5"],

Cell["Here are the first few numbers:", "Text",
 CellChangeTimes->{3.9402259327172813`*^9},
 CellID->754170359,ExpressionUUID->"dccb861a-6b14-4f67-93fe-64bb81080e3b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fib", "/@", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "20"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940225934425899*^9, 3.940225938245944*^9}},
 CellLabel->"In[278]:=",
 CellID->1945615091,ExpressionUUID->"f9c8daed-af62-40f0-b3a0-3d0855c1c4c2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "13", ",", "21",
    ",", "34", ",", "55", ",", "89", ",", "144", ",", "233", ",", "377", ",", 
   "610", ",", "987", ",", "1597", ",", "2584", ",", "4181", ",", "6765", ",",
    "10946"}], "}"}]], "Output",
 CellChangeTimes->{3.9402259386159487`*^9},
 CellLabel->"Out[278]=",
 CellID->69404590,ExpressionUUID->"6f0fe3ee-011b-4d72-9417-42a4fe4a79fa"]
}, Open  ]],

Cell[TextData[StyleBox["Efficiency analysis",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940225949688953*^9, 3.9402259528629103`*^9}},
 CellID->399323809,ExpressionUUID->"b203544d-f953-4496-bea7-672093afb54e"],

Cell["\<\
Let us produce the first few numbers and measure the performance in each case:\
\>", "Text",
 CellChangeTimes->{3.940225949688953*^9},
 CellID->772219892,ExpressionUUID->"ab770dc3-85c9-40f4-8d71-0f36a650c293"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"fib", "[", "3", "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.9402259662451353`*^9, 3.940225969324226*^9}},
 CellLabel->"In[279]:=",
 CellID->469624191,ExpressionUUID->"817e3867-dadf-4bff-9ff7-c66fdb6d0808"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00004`", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.940225970036961*^9},
 CellLabel->"Out[279]=",
 CellID->1544650935,ExpressionUUID->"7f0bcebf-6857-4191-833d-af38e9862b30"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"fib", "[", "5", "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940225971986411*^9, 3.9402259761727953`*^9}},
 CellLabel->"In[280]:=",
 CellID->951708166,ExpressionUUID->"f33af838-ed08-4dbe-92a6-ae551c485dbc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000028`", ",", "8"}], "}"}]], "Output",
 CellChangeTimes->{3.940225976324523*^9},
 CellLabel->"Out[280]=",
 CellID->1158466948,ExpressionUUID->"98caf053-f014-4d7a-bc48-aa5dce22d12a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"fib", "[", "10", "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940225978884471*^9, 3.9402259821719713`*^9}},
 CellLabel->"In[281]:=",
 CellID->2097843239,ExpressionUUID->"61a80703-fa71-45b2-8b92-b4f13e2a3ba2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000167`", ",", "89"}], "}"}]], "Output",
 CellChangeTimes->{3.94022598243188*^9},
 CellLabel->"Out[281]=",
 CellID->1423656050,ExpressionUUID->"87ef4f4b-cfc9-45db-a3bf-8c1517f94b92"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"fib", "[", "15", "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940225985770265*^9, 3.940225989867159*^9}},
 CellLabel->"In[282]:=",
 CellID->1919070601,ExpressionUUID->"e9830e83-030b-43ac-815b-e35e83f0bb32"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.001473`", ",", "987"}], "}"}]], "Output",
 CellChangeTimes->{3.940225990271286*^9},
 CellLabel->"Out[282]=",
 CellID->1958105930,ExpressionUUID->"60a9a016-7861-4d48-88cd-3a9bbf2a0a5b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"fib", "[", "20", "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940225992265314*^9, 3.940225995332068*^9}},
 CellLabel->"In[283]:=",
 CellID->2109296036,ExpressionUUID->"8940b255-b4a1-46eb-ad38-7c5d9137ceff"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.01426`", ",", "10946"}], "}"}]], "Output",
 CellChangeTimes->{3.9402259961249323`*^9},
 CellLabel->"Out[283]=",
 CellID->596270776,ExpressionUUID->"bfd1ac81-05a6-4d46-8e56-7f3e110a8b3a"]
}, Open  ]],

Cell["\<\
It is not difficult to check that the time needed to compute n-th number \
grows exponentially with n. The reason for this inefficiency is that smaller \
Fibonacci numbers are used in the computation of all higher numbers. \
Essentially, the recursion builds up a binary tree of function calls, of \
depth n, and each given mth number populates the mth level of the tree, if we \
count from the bottom. Thus, smaller Fibonacci numbers have to be computed \
exponentially many times (2^(n-m), very roughly).\
\>", "Text",
 CellChangeTimes->{{3.9402260145028*^9, 3.9402260342387123`*^9}},
 CellID->1364235330,ExpressionUUID->"88dbe58d-f3f2-4827-ae3e-033a42fed7aa"],

Cell["\<\
To display a function call tree, we use two mutually recursive functions fib1 \
and fib2. Basically, fib2 is just a wrapper to keep track of the function \
calls:\
\>", "Text",
 CellChangeTimes->{{3.9402260145028*^9, 3.940226036301943*^9}},
 CellID->1301731931,ExpressionUUID->"a5f31676-c35d-439e-a291-e94df36b6c65"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"fib1", ",", "fib2"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fib1", "[", "0", "]"}], "=", 
   RowBox[{"fib2", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fib1", "[", "1", "]"}], "=", 
   RowBox[{"fib2", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fib1", "[", "n_Integer", "]"}], "/;", 
   RowBox[{"n", ">=", "2"}]}], ":=", 
  RowBox[{"fib2", "[", 
   RowBox[{"n", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"fib1", "[", 
       RowBox[{"n", "-", "1"}], "]"}], ",", 
      RowBox[{"fib1", "[", 
       RowBox[{"n", "-", "2"}], "]"}]}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940226056065064*^9, 3.9402261225984173`*^9}},
 CellLabel->"In[284]:=",
 CellID->232007551,ExpressionUUID->"6e44af6e-6226-46e8-8614-14dedf232008"],

Cell["Now, for example, the 7-th Fibonacci number:", "Text",
 CellChangeTimes->{3.94022613526163*^9},
 CellID->733967506,ExpressionUUID->"49568344-9438-4c1c-a5dd-76ef6f270426"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expr", "=", 
  RowBox[{"fib1", "[", "7", "]"}]}]], "Input",
 CellChangeTimes->{{3.9402261365392113`*^9, 3.940226139775441*^9}},
 CellLabel->"In[288]:=",
 CellID->661846080,ExpressionUUID->"d45e3d63-f5ee-4719-a3f4-d25a9c1bbd6b"],

Cell[BoxData[
 RowBox[{"fib2", "[", 
  RowBox[{"7", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"fib2", "[", 
      RowBox[{"6", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"fib2", "[", 
          RowBox[{"5", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"fib2", "[", 
              RowBox[{"4", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"fib2", "[", 
                  RowBox[{"3", ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"fib2", "[", 
                    RowBox[{"2", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"fib2", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"fib2", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"fib2", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
                 RowBox[{"fib2", "[", 
                  RowBox[{"2", ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"fib2", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"fib2", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}]}], "}"}]}], 
              "]"}], ",", 
             RowBox[{"fib2", "[", 
              RowBox[{"3", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"fib2", "[", 
                  RowBox[{"2", ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"fib2", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"fib2", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
                 RowBox[{"fib2", "[", 
                  RowBox[{"1", ",", 
                   RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}]}], "}"}]}], 
          "]"}], ",", 
         RowBox[{"fib2", "[", 
          RowBox[{"4", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"fib2", "[", 
              RowBox[{"3", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"fib2", "[", 
                  RowBox[{"2", ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"fib2", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"fib2", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
                 RowBox[{"fib2", "[", 
                  RowBox[{"1", ",", 
                   RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
             RowBox[{"fib2", "[", 
              RowBox[{"2", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"fib2", "[", 
                  RowBox[{"1", ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"fib2", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}]}], "}"}]}], 
          "]"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"fib2", "[", 
      RowBox[{"5", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"fib2", "[", 
          RowBox[{"4", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"fib2", "[", 
              RowBox[{"3", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"fib2", "[", 
                  RowBox[{"2", ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"fib2", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", 
                    RowBox[{"fib2", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
                 RowBox[{"fib2", "[", 
                  RowBox[{"1", ",", 
                   RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
             RowBox[{"fib2", "[", 
              RowBox[{"2", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"fib2", "[", 
                  RowBox[{"1", ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"fib2", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}]}], "}"}]}], 
          "]"}], ",", 
         RowBox[{"fib2", "[", 
          RowBox[{"3", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"fib2", "[", 
              RowBox[{"2", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"fib2", "[", 
                  RowBox[{"1", ",", 
                   RowBox[{"{", "}"}]}], "]"}], ",", 
                 RowBox[{"fib2", "[", 
                  RowBox[{"0", ",", 
                   RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
             RowBox[{"fib2", "[", 
              RowBox[{"1", ",", 
               RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "]"}]}], "}"}]}], 
      "]"}]}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.940226140070836*^9},
 CellLabel->"Out[288]=",
 CellID->1255439629,ExpressionUUID->"582d45d8-e4f4-4877-9e63-7aa2dfbe8afc"]
}, Open  ]],

Cell["\<\
Here is a tree form of the above expression with extra wrappers <fib2> \
removed, which shows best the picture of recursive function calls\
\>", "Text",
 CellChangeTimes->{{3.94022614935324*^9, 3.940226151580855*^9}},
 CellID->1147012828,ExpressionUUID->"8c895685-a551-49ee-b821-9215fe63b874"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TreeForm", "[", 
  RowBox[{
   RowBox[{"expr", "/.", 
    RowBox[{"{", 
     RowBox[{"List", "->", "Sequence"}], "}"}]}], "//.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"fib2", "[", 
       RowBox[{"x_", ",", "y__"}], "]"}], ":>", 
      RowBox[{"x", "[", "y", "]"}]}], ",", 
     RowBox[{
      RowBox[{"fib2", "[", "x_", "]"}], ":>", "x"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940226153187537*^9, 3.9402261743355913`*^9}},
 CellLabel->"In[289]:=",
 CellID->1395605855,ExpressionUUID->"c3794583-64a0-4455-a253-75c9015565b7"],

Cell[BoxData[
 InterpretationBox[
  GraphicsBox[
   TagBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGDQBGIQfTs/QzdlnYTDgb7NW1qFeB1SfMo1Jq/ldViwcKqY
lBWHg4XlhwmTtZkcGraUV6xLZIbSn+0h6v/aQ/iP7WHiEPoyXJwBDaCLQ8x5
C1ePau5ne4g7fsDlP+zNWFnxlcEBxjeYseSp/zIuB5g+mLth+gVWt7k/OcuK
oR7VPl64+hP6/+NPTheB+xfifyG4+RD7BeDqA1oPNe+u44ebB1OPGi7CcPUR
anz6/5nF4eZB3CfqgOpfCTj/0Byv5P9OivD44OCynrPAQw7uvgphnbNZd6Th
5kH8JwXX/0JG9p9JgSTcPTD1qP6Xhav3YVhqmh2lADcP4j95uDzE/woOqPGt
DHfPnW+bWRYeU4Lrh4SHEg71n+1Viqzf7P6jDFcPAH5NMsg=
     "], {
      {RGBColor[0.55, 0.45, 0.45], 
       LineBox[{{1, 2}, {1, 27}, {2, 3}, {2, 18}, {3, 4}, {3, 13}, {4, 5}, {4,
         10}, {5, 6}, {5, 9}, {6, 7}, {6, 8}, {10, 11}, {10, 12}, {13, 14}, {
        13, 17}, {14, 15}, {14, 16}, {18, 19}, {18, 24}, {19, 20}, {19, 23}, {
        20, 21}, {20, 22}, {24, 25}, {24, 26}, {27, 28}, {27, 37}, {28, 29}, {
        28, 34}, {29, 30}, {29, 33}, {30, 31}, {30, 32}, {34, 35}, {34, 36}, {
        37, 38}, {37, 41}, {38, 39}, {38, 40}}]}, {
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["7", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 1],
         TagBox[
          RowBox[{"7", "[", 
            RowBox[{
              RowBox[{"6", "[", 
                RowBox[{
                  RowBox[{"5", "[", 
                    RowBox[{
                    RowBox[{"4", "[", 
                    RowBox[{
                    RowBox[{"3", "[", 
                    RowBox[{
                    RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}], ",", 
                    RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}]}], "]"}], ",", 
                    RowBox[{"3", "[", 
                    RowBox[{
                    RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}]}], 
                    "]"}], ",", 
                  RowBox[{"4", "[", 
                    RowBox[{
                    RowBox[{"3", "[", 
                    RowBox[{
                    RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}], ",", 
                    RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}]}], "]"}]}], "]"}], ",", 
              RowBox[{"5", "[", 
                RowBox[{
                  RowBox[{"4", "[", 
                    RowBox[{
                    RowBox[{"3", "[", 
                    RowBox[{
                    RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}], ",", 
                    RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}]}], "]"}], ",", 
                  RowBox[{"3", "[", 
                    RowBox[{
                    RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}]}], 
                "]"}]}], "]"}], HoldForm]],
        Annotation[#, 
         HoldForm[
          7[
           6[
            5[
             4[
              3[
               2[1, 0], 1], 
              2[1, 0]], 
             3[
              2[1, 0], 1]], 
            4[
             3[
              2[1, 0], 1], 
             2[1, 0]]], 
           5[
            4[
             3[
              2[1, 0], 1], 
             2[1, 0]], 
            3[
             2[1, 0], 1]]]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["6", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 2],
         TagBox[
          RowBox[{"6", "[", 
            RowBox[{
              RowBox[{"5", "[", 
                RowBox[{
                  RowBox[{"4", "[", 
                    RowBox[{
                    RowBox[{"3", "[", 
                    RowBox[{
                    RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}], ",", 
                    RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}]}], "]"}], ",", 
                  RowBox[{"3", "[", 
                    RowBox[{
                    RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}]}], 
                "]"}], ",", 
              RowBox[{"4", "[", 
                RowBox[{
                  RowBox[{"3", "[", 
                    RowBox[{
                    RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}], ",", 
                  RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}]}], "]"}]}], "]"}], 
          HoldForm]],
        Annotation[#, 
         HoldForm[
          6[
           5[
            4[
             3[
              2[1, 0], 1], 
             2[1, 0]], 
            3[
             2[1, 0], 1]], 
           4[
            3[
             2[1, 0], 1], 
            2[1, 0]]]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["5", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 3],
         TagBox[
          RowBox[{"5", "[", 
            RowBox[{
              RowBox[{"4", "[", 
                RowBox[{
                  RowBox[{"3", "[", 
                    RowBox[{
                    RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}], ",", 
                  RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}]}], "]"}], ",", 
              RowBox[{"3", "[", 
                RowBox[{
                  RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}]}], 
            "]"}], HoldForm]],
        Annotation[#, 
         HoldForm[
          5[
           4[
            3[
             2[1, 0], 1], 
            2[1, 0]], 
           3[
            2[1, 0], 1]]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["4", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 4],
         TagBox[
          RowBox[{"4", "[", 
            RowBox[{
              RowBox[{"3", "[", 
                RowBox[{
                  RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}], ",", 
              RowBox[{"2", "[", 
                RowBox[{"1", ",", "0"}], "]"}]}], "]"}], HoldForm]],
        Annotation[#, 
         HoldForm[
          4[
           3[
            2[1, 0], 1], 
           2[1, 0]]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["3", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 5],
         TagBox[
          RowBox[{"3", "[", 
            RowBox[{
              RowBox[{"2", "[", 
                RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}], HoldForm]],
        
        Annotation[#, 
         HoldForm[
          3[
           2[1, 0], 1]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["2", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 6],
         TagBox[
          RowBox[{"2", "[", 
            RowBox[{"1", ",", "0"}], "]"}], HoldForm]],
        Annotation[#, 
         HoldForm[
          2[1, 0]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 7],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["0",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 8],
         TagBox["0", HoldForm]],
        Annotation[#, 
         HoldForm[0], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 9],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["2", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 10],
         TagBox[
          RowBox[{"2", "[", 
            RowBox[{"1", ",", "0"}], "]"}], HoldForm]],
        Annotation[#, 
         HoldForm[
          2[1, 0]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 11],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["0",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 12],
         TagBox["0", HoldForm]],
        Annotation[#, 
         HoldForm[0], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["3", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 13],
         TagBox[
          RowBox[{"3", "[", 
            RowBox[{
              RowBox[{"2", "[", 
                RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}], HoldForm]],
        
        Annotation[#, 
         HoldForm[
          3[
           2[1, 0], 1]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["2", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 14],
         TagBox[
          RowBox[{"2", "[", 
            RowBox[{"1", ",", "0"}], "]"}], HoldForm]],
        Annotation[#, 
         HoldForm[
          2[1, 0]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 15],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["0",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 16],
         TagBox["0", HoldForm]],
        Annotation[#, 
         HoldForm[0], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 17],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["4", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 18],
         TagBox[
          RowBox[{"4", "[", 
            RowBox[{
              RowBox[{"3", "[", 
                RowBox[{
                  RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}], ",", 
              RowBox[{"2", "[", 
                RowBox[{"1", ",", "0"}], "]"}]}], "]"}], HoldForm]],
        Annotation[#, 
         HoldForm[
          4[
           3[
            2[1, 0], 1], 
           2[1, 0]]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["3", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 19],
         TagBox[
          RowBox[{"3", "[", 
            RowBox[{
              RowBox[{"2", "[", 
                RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}], HoldForm]],
        
        Annotation[#, 
         HoldForm[
          3[
           2[1, 0], 1]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["2", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 20],
         TagBox[
          RowBox[{"2", "[", 
            RowBox[{"1", ",", "0"}], "]"}], HoldForm]],
        Annotation[#, 
         HoldForm[
          2[1, 0]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 21],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["0",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 22],
         TagBox["0", HoldForm]],
        Annotation[#, 
         HoldForm[0], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 23],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["2", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 24],
         TagBox[
          RowBox[{"2", "[", 
            RowBox[{"1", ",", "0"}], "]"}], HoldForm]],
        Annotation[#, 
         HoldForm[
          2[1, 0]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 25],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["0",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 26],
         TagBox["0", HoldForm]],
        Annotation[#, 
         HoldForm[0], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["5", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 27],
         TagBox[
          RowBox[{"5", "[", 
            RowBox[{
              RowBox[{"4", "[", 
                RowBox[{
                  RowBox[{"3", "[", 
                    RowBox[{
                    RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}], ",", 
                  RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}]}], "]"}], ",", 
              RowBox[{"3", "[", 
                RowBox[{
                  RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}]}], 
            "]"}], HoldForm]],
        Annotation[#, 
         HoldForm[
          5[
           4[
            3[
             2[1, 0], 1], 
            2[1, 0]], 
           3[
            2[1, 0], 1]]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["4", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 28],
         TagBox[
          RowBox[{"4", "[", 
            RowBox[{
              RowBox[{"3", "[", 
                RowBox[{
                  RowBox[{"2", "[", 
                    RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}], ",", 
              RowBox[{"2", "[", 
                RowBox[{"1", ",", "0"}], "]"}]}], "]"}], HoldForm]],
        Annotation[#, 
         HoldForm[
          4[
           3[
            2[1, 0], 1], 
           2[1, 0]]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["3", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 29],
         TagBox[
          RowBox[{"3", "[", 
            RowBox[{
              RowBox[{"2", "[", 
                RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}], HoldForm]],
        
        Annotation[#, 
         HoldForm[
          3[
           2[1, 0], 1]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["2", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 30],
         TagBox[
          RowBox[{"2", "[", 
            RowBox[{"1", ",", "0"}], "]"}], HoldForm]],
        Annotation[#, 
         HoldForm[
          2[1, 0]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 31],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["0",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 32],
         TagBox["0", HoldForm]],
        Annotation[#, 
         HoldForm[0], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 33],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["2", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 34],
         TagBox[
          RowBox[{"2", "[", 
            RowBox[{"1", ",", "0"}], "]"}], HoldForm]],
        Annotation[#, 
         HoldForm[
          2[1, 0]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 35],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["0",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 36],
         TagBox["0", HoldForm]],
        Annotation[#, 
         HoldForm[0], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["3", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 37],
         TagBox[
          RowBox[{"3", "[", 
            RowBox[{
              RowBox[{"2", "[", 
                RowBox[{"1", ",", "0"}], "]"}], ",", "1"}], "]"}], HoldForm]],
        
        Annotation[#, 
         HoldForm[
          3[
           2[1, 0], 1]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["2", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 38],
         TagBox[
          RowBox[{"2", "[", 
            RowBox[{"1", ",", "0"}], "]"}], HoldForm]],
        Annotation[#, 
         HoldForm[
          2[1, 0]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 39],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["0",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 40],
         TagBox["0", HoldForm]],
        Annotation[#, 
         HoldForm[0], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 41],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ]}}],
    Annotation[#, VertexCoordinateRules -> CompressedData["
1:eJxTTMoPSmViYGDQBGIQfTs/QzdlnYTDgb7NW1qFeB1SfMo1Jq/ldViwcKqY
lBWHg4XlhwmTtZkcGraUV6xLZIbSn+0h6v/aQ/iP7WHiEPoyXJwBDaCLQ8x5
C1ePau5ne4g7fsDlP+zNWFnxlcEBxjeYseSp/zIuB5g+mLth+gVWt7k/OcuK
oR7VPl64+hP6/+NPTheB+xfifyG4+RD7BeDqA1oPNe+u44ebB1OPGi7CcPUR
anz6/5nF4eZB3CfqgOpfCTj/0Byv5P9OivD44OCynrPAQw7uvgphnbNZd6Th
5kH8JwXX/0JG9p9JgSTcPTD1qP6Xhav3YVhqmh2lADcP4j95uDzE/woOqPGt
DHfPnW+bWRYeU4Lrh4SHEg71n+1Viqzf7P6jDFcPAH5NMsg=
      "]]& ],
   AspectRatio->1,
   FormatType:>StandardForm,
   FrameTicks->Automatic,
   PlotRange->All,
   PlotRangePadding->Scaled[0.1]],
  TreeForm[
   7[
    6[
     5[
      4[
       3[
        2[1, 0], 1], 
       2[1, 0]], 
      3[
       2[1, 0], 1]], 
     4[
      3[
       2[1, 0], 1], 
      2[1, 0]]], 
    5[
     4[
      3[
       2[1, 0], 1], 
      2[1, 0]], 
     3[
      2[1, 0], 1]]]],
  Editable->False]], "Output",
 CellChangeTimes->{3.940226175212924*^9},
 CellLabel->"Out[289]//TreeForm=",
 CellID->1603548856,ExpressionUUID->"1496dc06-7535-4cb5-94ec-9ee640160900"]
}, Open  ]],

Cell["\<\
We can count how many times each fib2 was called. First create a list of \
patterns:\
\>", "Text",
 CellChangeTimes->{3.940226234764367*^9},
 CellID->2073336589,ExpressionUUID->"2a58acdd-0df7-4e11-b37f-ba953ef53d66"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"patterns", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"fib2", "[", 
     RowBox[{"#", ",", "__"}], "]"}], "&"}], "/@", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "7"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.940226236963807*^9, 3.940226248872167*^9}},
 CellLabel->"In[290]:=",
 CellID->2133217785,ExpressionUUID->"babc70b0-26a5-4713-af76-b795a79d26e7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"fib2", "[", 
    RowBox[{"0", ",", "__"}], "]"}], ",", 
   RowBox[{"fib2", "[", 
    RowBox[{"1", ",", "__"}], "]"}], ",", 
   RowBox[{"fib2", "[", 
    RowBox[{"2", ",", "__"}], "]"}], ",", 
   RowBox[{"fib2", "[", 
    RowBox[{"3", ",", "__"}], "]"}], ",", 
   RowBox[{"fib2", "[", 
    RowBox[{"4", ",", "__"}], "]"}], ",", 
   RowBox[{"fib2", "[", 
    RowBox[{"5", ",", "__"}], "]"}], ",", 
   RowBox[{"fib2", "[", 
    RowBox[{"6", ",", "__"}], "]"}], ",", 
   RowBox[{"fib2", "[", 
    RowBox[{"7", ",", "__"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940226249241287*^9},
 CellLabel->"Out[290]=",
 CellID->415166728,ExpressionUUID->"14d6faf8-d1e9-49a8-991d-ac999d9c146f"]
}, Open  ]],

Cell["Now Map the count function:", "Text",
 CellChangeTimes->{3.940226259197798*^9},
 CellID->532828393,ExpressionUUID->"c4d6d41d-3df5-4378-9e04-218dd36b20a7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"#", "/.", 
      RowBox[{
       RowBox[{"fib2", "[", 
        RowBox[{"a_", ",", "__"}], "]"}], ":>", 
       RowBox[{"fib2", "[", "a", "]"}]}]}], ",", 
     RowBox[{"Count", "[", 
      RowBox[{
       RowBox[{"{", "expr", "}"}], ",", "#", ",", "Infinity"}], "]"}]}], 
    "}"}], "&"}], "/@", "patterns"}]], "Input",
 CellChangeTimes->{{3.940226262946825*^9, 3.940226288859795*^9}},
 CellLabel->"In[291]:=",
 CellID->1218539746,ExpressionUUID->"482e53de-2b35-4ea8-83e2-30f35ed2fd5b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"fib2", "[", "0", "]"}], ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"fib2", "[", "1", "]"}], ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"fib2", "[", "2", "]"}], ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"fib2", "[", "3", "]"}], ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"fib2", "[", "4", "]"}], ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"fib2", "[", "5", "]"}], ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"fib2", "[", "6", "]"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"fib2", "[", "7", "]"}], ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402262896149883`*^9},
 CellLabel->"Out[291]=",
 CellID->1147488098,ExpressionUUID->"ca72fbe0-1ca9-4eac-8307-2dc43a6d7bb9"]
}, Open  ]],

Cell["\<\
The rule #/.fib2[a_,__]:->fib2[a] simply removes the pattern sign from \
fib2[number,__]. The funny thing is that the numbers of function calls form \
the reversed Fibonacci sequence - we could have guessed that.\
\>", "Text",
 CellChangeTimes->{{3.9402263032722816`*^9, 3.940226313657329*^9}},
 CellID->1429313026,ExpressionUUID->"cf835925-e21d-496f-be75-713e2cc67eb8"],

Cell[TextData[StyleBox["The standard iterative solution (procedural)",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.940226324301888*^9, 3.940226329635043*^9}},
 CellID->1778474255,ExpressionUUID->"9813183b-a2af-4f5c-ad12-561cb66f9970"],

Cell["\<\
There exists an elegant way in Mathematica to get an efficient implementation \
for the Fibonacci numbers using dynamic programming, and we will revisit this \
problem once we cover this topic. For now, let us see if we can find a more \
efficient implementation using the functions and techniques we already know.\
\>", "Text",
 CellChangeTimes->{{3.940226324301888*^9, 3.9402263358505898`*^9}},
 CellID->998250651,ExpressionUUID->"e92acf8a-fa83-40f2-adc7-b553a5dd2b2c"],

Cell["\<\
The first thing which comes to mind is a procedural iterative implementation:\
\
\>", "Text",
 CellChangeTimes->{{3.940226324301888*^9, 3.94022633350248*^9}},
 CellID->1104031334,ExpressionUUID->"2df619d0-7138-4a9c-9688-c84f02f88ae4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "fibProc", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fibProc", "[", "n_Integer", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"prev", ",", "prprev", ",", "i", ",", "temp"}], "}"}], ",", 
     RowBox[{
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"prev", "=", 
         RowBox[{"prprev", "=", 
          RowBox[{"i", "=", "1"}]}]}], ",", 
        RowBox[{"i", "<", "n"}], ",", 
        RowBox[{"i", "++"}], ",", 
        RowBox[{
         RowBox[{"temp", "=", "prprev"}], ";", 
         RowBox[{"prprev", "=", "prev"}], ";", 
         RowBox[{"prev", "=", 
          RowBox[{"prev", "+", "temp"}]}], ";"}]}], "]"}], ";", "prev"}]}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940226337946064*^9, 3.940226384116131*^9}},
 CellLabel->"In[292]:=",
 CellID->2118968720,ExpressionUUID->"045acaaa-0923-47fe-9f13-9cef056685bd"],

Cell["For instance:", "Text",
 CellChangeTimes->{{3.940226386454517*^9, 3.940226388179146*^9}},
 CellID->1597880391,ExpressionUUID->"689f5a0e-913a-47ca-86e7-b804d9ac5ed2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fibProc", "[", "7", "]"}]], "Input",
 CellChangeTimes->{{3.940226389142598*^9, 3.940226392216591*^9}},
 CellLabel->"In[294]:=",
 CellID->1703081379,ExpressionUUID->"20be6478-8993-414f-9d86-1088304aa264"],

Cell[BoxData["21"], "Output",
 CellChangeTimes->{3.9402263925181923`*^9},
 CellLabel->"Out[294]=",
 CellID->2106240598,ExpressionUUID->"009c196a-6ac0-408f-bb4c-abde0ed2b3d0"]
}, Open  ]],

Cell[TextData[StyleBox["Producing a sequence of first n Fibonacci numbers",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.94022640350597*^9, 3.9402264076842747`*^9}},
 CellID->465293438,ExpressionUUID->"a4faf674-1a6a-4774-9474-eebdc447216b"],

Cell["\<\
This above solution is decent if all one wants is to compute a given \
Fibonacci number. But what if we need a full sequence up to a given number? \
The better procedural solution then would be to create a list of numbers \
inside the For loop:\
\>", "Text",
 CellChangeTimes->{{3.94022640350597*^9, 3.94022641219606*^9}},
 CellID->290392868,ExpressionUUID->"b00b7531-fffc-4d00-92f2-519caa767a86"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "fibProcList", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fibProcList", "[", "n_Integer", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"prev", ",", "prprev", ",", "i", ",", "temp", ",", 
       RowBox[{"reslist", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{"{", "n", "}"}]}], "]"}]}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"prev", "=", 
         RowBox[{"prprev", "=", 
          RowBox[{
           RowBox[{"reslist", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "=", 
           RowBox[{"i", "=", "1"}]}]}]}], ",", 
        RowBox[{"i", "<", "n"}], ",", 
        RowBox[{"i", "++"}], ",", 
        RowBox[{
         RowBox[{"temp", "=", "prprev"}], ";", 
         RowBox[{"prprev", "=", 
          RowBox[{
           RowBox[{"reslist", "[", 
            RowBox[{"[", 
             RowBox[{"i", "+", "1"}], "]"}], "]"}], "=", "prev"}]}], ";", 
         RowBox[{"prev", "=", 
          RowBox[{"prev", "+", "temp"}]}], ";"}]}], "]"}], ";", "reslist"}]}],
     "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940226414211194*^9, 3.9402264706959963`*^9}},
 CellLabel->"In[295]:=",
 CellID->1613796362,ExpressionUUID->"5be71225-d03b-4957-97e3-d1b9cc056d81"],

Cell["For example:", "Text",
 CellChangeTimes->{{3.940226473457155*^9, 3.9402264754653797`*^9}},
 CellID->844313309,ExpressionUUID->"5d8c35a9-c5f2-4636-a8b7-2d59cdfa9d6f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"fibProcList", "[", "30", "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940226477028842*^9, 3.940226494448505*^9}},
 CellLabel->"In[298]:=",
 CellID->651908064,ExpressionUUID->"6f4df60f-0c1b-4d46-9902-b3c2c7e70d9e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000184`", ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "13", ",", 
     "21", ",", "34", ",", "55", ",", "89", ",", "144", ",", "233", ",", 
     "377", ",", "610", ",", "987", ",", "1597", ",", "2584", ",", "4181", 
     ",", "6765", ",", "10946", ",", "17711", ",", "28657", ",", "46368", ",",
      "75025", ",", "121393", ",", "196418", ",", "317811", ",", "514229", 
     ",", "832040"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.9402264822872953`*^9, 3.940226494726735*^9}},
 CellLabel->"Out[298]=",
 CellID->885501547,ExpressionUUID->"511f5fc8-48c3-42a6-8383-e17c9fdafcd6"]
}, Open  ]],

Cell["\<\
The timing is quite good actually (for Mathematica implementation). For this \
particular formulation, the procedural solution is among the best. Notice \
that the list to store the results is pre-allocated from the beginning. Had \
we started with an empty list and then Append to it repeatedly, the \
performance would be far worse. This leads us to appreciate another rule: \
pre-allocate large lists. But here, this was possible because we knew from \
the beginning how many numbers we want.\
\>", "Text",
 CellChangeTimes->{{3.9402265040648117`*^9, 3.940226514443499*^9}},
 CellID->562826719,ExpressionUUID->"1f2b7611-c3bf-4bbd-9368-e69fdbb43734"],

Cell[TextData[StyleBox["Producing all Fibonacci numbers less than a given \
number",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.9402265040648117`*^9, 3.940226511930846*^9}},
 CellID->1562567876,ExpressionUUID->"a4360257-af33-459a-9361-caa4645b1068"],

Cell["\<\
Consider now a different formulation: we want all Fibonacci numbers smaller \
than a given number. Here, we don\[CloseCurlyQuote]t know a priori how large \
a list we will need. Of course, we can perform an analysis, make estimates \
etc, then preallocate a list guaranteed to be large enough, and then delete \
extra (unused) slots in the list at the end. But there could be similar \
problems for which such analysis is very difficult, and then one may end up \
pre-allocating huge lists where much smaller ones are actually needed, and \
thus waste resources.\
\>", "Text",
 CellChangeTimes->{{3.9402265312150183`*^9, 3.9402265449984903`*^9}},
 CellID->851667807,ExpressionUUID->"545b39bd-1fc6-4781-aa1a-57ac7ddfd05c"],

Cell["\<\
On the other hand, Append-ing to a list repeatedly has efficiency problems \
well - known to us by now (this is not an absolute restriction however. In \
cases when the body of the loop - the function which produces the next result \
from the previous ones - is very computationally-demanding and takes most of \
the time, and at the same time the length of the list of results is not too \
large, the cost of Append-ing the list may be
negligible w.r.t other operations. In such cases, using Append is certainly a \
possibility).
Let us see if we can find another solution. What we would like to do is to \
make the system create a list of results internally, but stop depending on \
some condition applied to the results. This sounds like a good case for \
NestWhileList.\
\>", "Text",
 CellChangeTimes->{{3.9402265312150183`*^9, 3.940226561258563*^9}},
 CellID->961856278,ExpressionUUID->"28d499bf-b472-4dd9-91b2-c15ce342c76b"],

Cell["\<\
What is really important here is that NestWhileList has a formulation where \
it has access to a given number of the most recent results. On the other \
hand, a limitation of Nest or NestList is that a new function output is based \
only on the last result - the nested function does not have access to any \
past results except the last one. But for the Fibonacci numbers problem, we \
need to know the last 2 results. So, the main idea
of the solution is the following: given the use of NestWhileList in the form\
\>", "Text",
 CellChangeTimes->{{3.9402265312150183`*^9, 3.940226568316964*^9}},
 CellID->1576832245,ExpressionUUID->"11c2c963-1d93-4461-a178-298e27854520"],

Cell[BoxData[
 RowBox[{"NestWhileList", "[", 
  RowBox[{"f", ",", " ", "expr", ",", "test", ",", "m"}], "]"}]], "Input",
 CellChangeTimes->{{3.9402265723289137`*^9, 3.9402265840233803`*^9}},
 CellID->527747649,ExpressionUUID->"b6a9fafe-9157-4c28-bb85-bb367ed7c2ca"],

Cell["\<\
(m gives a maximal number of the most recent results to be supplied to the \
test condition) we can use a global variable to communicate the given number \
of most recent results from the <test> function to f:\
\>", "Text",
 CellChangeTimes->{{3.94022659467428*^9, 3.940226598754319*^9}},
 CellID->1807415964,ExpressionUUID->"766a5a2a-deba-4c89-acb8-8278874588c0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "fibList", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fibList", "[", "max_Integer", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", "=", "0"}], "}"}], ",", 
     RowBox[{"Drop", "[", 
      RowBox[{
       RowBox[{"NestWhileList", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"a", "+", "#"}], "&"}], ",", "1", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"a", "=", "#1"}], ")"}], "<", "max"}], "&"}], ",", "2"}], 
        "]"}], ",", 
       RowBox[{"-", "2"}]}], "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9402266013679543`*^9, 3.9402266359233913`*^9}},
 CellLabel->"In[299]:=",
 CellID->1204400409,ExpressionUUID->"b5c27032-2be3-45ea-be37-4d70f9476123"],

Cell["\<\
What happens here is that the test function contains a side effect - an \
assignment to a variable <a>. A global variable <a> (well, we made it local \
with Module, but it is still \[OpenCurlyDoubleQuote]global\
\[CloseCurlyDoubleQuote] for the body of NestWhileList) is used to \
communicate to the function f (which is here a pure function that adds a \
\[OpenCurlyDoubleQuote]constant\[CloseCurlyDoubleQuote] <a> to the previous \
input), the current value of <a>, which is, in terms of the procedural \
solution, a value of <prprev> - the \[OpenCurlyDoubleQuote]previous previous\
\[CloseCurlyDoubleQuote] result. We have to Drop the last 2 results since \
they will be larger than the limiting number. Check:\
\>", "Text",
 CellChangeTimes->{{3.9402266456066647`*^9, 3.940226662310244*^9}},
 CellID->153613329,ExpressionUUID->"c241db52-0a08-4a0e-b8a1-db07a926d24e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"fibList", "[", "1000000", "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940226664100897*^9, 3.940226669906814*^9}},
 CellLabel->"In[301]:=",
 CellID->145466702,ExpressionUUID->"43fb141f-1b2e-44f0-b12e-a664e4c68fc8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000169`", ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "13", ",", 
     "21", ",", "34", ",", "55", ",", "89", ",", "144", ",", "233", ",", 
     "377", ",", "610", ",", "987", ",", "1597", ",", "2584", ",", "4181", 
     ",", "6765", ",", "10946", ",", "17711", ",", "28657", ",", "46368", ",",
      "75025", ",", "121393", ",", "196418", ",", "317811", ",", "514229", 
     ",", "832040"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940226670145173*^9},
 CellLabel->"Out[301]=",
 CellID->997187589,ExpressionUUID->"4b5c16ac-3447-4651-b163-9a74396857d9"]
}, Open  ]],

Cell["\<\
We see that this solution not only does solve our present problem, but also \
beats our best procedural version for a previous fixed-n formulation! Also, \
the code is more concise and transparent, less variables are introduced etc. \
If we look back at the code, what happens is rather non-trivial: at every \
stage, a different value of <a> is embedded into a pure function, which is \
then used to produce a new number. In that
sense, at each stage we change a nesting function definition.\
\>", "Text",
 CellChangeTimes->{{3.9402266863032503`*^9, 3.9402266954064074`*^9}},
 CellID->769427135,ExpressionUUID->"e4c57dc2-9772-49fa-9f70-670328afe935"],

Cell["\<\
This technique should be applicable to other situations where we have to \
produce a list of results with the number of them unknown beforehand, and \
when both every next result and the termination condition depend on the \
results produced already.\
\>", "Text",
 CellChangeTimes->{{3.9402266863032503`*^9, 3.9402267011065397`*^9}},
 CellID->1470434941,ExpressionUUID->"e19dffc2-58df-4f2f-978c-2af3b8624ee9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fold and FoldList", "Subsection",
 CellChangeTimes->{3.940226714534184*^9},
 CellID->1147783539,ExpressionUUID->"ba24dfbd-64ba-4fbf-b829-f3e60ae9c00a"],

Cell[CellGroupData[{

Cell["Fold: syntax and starting examples", "Subsubsection",
 CellChangeTimes->{3.940226721733282*^9},
 CellID->2099822619,ExpressionUUID->"3b2eddc8-8e51-4261-af6b-51e2183ceec2"],

Cell["\<\
Fold is a generalization of Nest, for the case when the nested function is a \
function of two variables, rather than of a single variable. While the first \
supplied variable is again a result of the previous action of the function \
itself, a second argument is supplied externally by Fold, from a list which \
is a parameter to Fold.\
\>", "Text",
 CellChangeTimes->{{3.940226728890683*^9, 3.940226735241198*^9}},
 CellID->2119986382,ExpressionUUID->"23d6555d-6666-44ef-94aa-9cf9dcae7a25"],

Cell["So, the syntax:", "Text",
 CellChangeTimes->{{3.940226728890683*^9, 3.940226732572011*^9}},
 CellID->1535801123,ExpressionUUID->"2e05967e-43e0-453b-bddb-c58914d0113f"],

Cell[BoxData[
 RowBox[{"Fold", "[", 
  RowBox[{"f", ",", "start", ",", "secarglist"}], "]"}]], "Input",
 CellChangeTimes->{{3.9402267368504333`*^9, 3.9402267419312572`*^9}},
 CellID->1443391545,ExpressionUUID->"c8017ed0-6c83-460c-9777-5be731ff74ca"],

Cell["Simple example:", "Text",
 CellChangeTimes->{{3.940226744318697*^9, 3.940226748234178*^9}},
 CellID->638534163,ExpressionUUID->"d8a4d0bf-a32f-4b3f-b9f1-85a8f62f6865"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "f", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Fold", "[", 
  RowBox[{"f", ",", "x", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.940226749434793*^9, 3.9402267543349752`*^9}},
 CellLabel->"In[302]:=",
 CellID->2054278904,ExpressionUUID->"a7a55660-0fcd-4774-9f59-d2648c39b0d2"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"x", ",", "a"}], "]"}], ",", "b"}], "]"}], ",", "c"}], 
  "]"}]], "Output",
 CellChangeTimes->{3.9402267546867037`*^9},
 CellLabel->"Out[303]=",
 CellID->258269151,ExpressionUUID->"441dee7d-6426-42be-8829-284b5c7a9263"]
}, Open  ]],

Cell["\<\
Fold is a remarkably useful function. One may think of it as follows: if <f> \
can be thought of as a function which realizes a transition between the \
states of some finite state machine each application of Fold is like \
\[OpenCurlyDoubleQuote]rotating the crank\[CloseCurlyDoubleQuote] of this \
finite state machine, and we will rotate it until there are elements left in \
the second argument list (this analogy belongs to David Wagner). The number \
of times that the function will
be nested, is equal to the length of the second argument list. The function \
FoldList is related to Fold in the same way as NestList to Nest - it gives \
all intermediate results of \[OpenCurlyDoubleQuote]rotating the crank\
\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.940226765235623*^9, 3.94022677502969*^9}},
 CellID->665170270,ExpressionUUID->"2174022b-ef77-430d-86b6-fc052b49ea06"],

Cell["\<\
One very frequent use of Fold is recursion removal. This we will cover later \
in part II, chapter in recursion and iteration.\
\>", "Text",
 CellChangeTimes->{{3.940226765235623*^9, 3.9402267782334347`*^9}},
 CellID->2007594723,ExpressionUUID->"0a0993de-6dec-4c41-b77d-b391ffd0a1ac"]
}, Open  ]],

Cell[CellGroupData[{

Cell["More examples:", "Subsubsection",
 CellChangeTimes->{3.94022679788838*^9},
 CellID->1412838824,ExpressionUUID->"2b2de5ca-fa03-40bd-a684-e215e573ceb0"],

Cell["Example: partial sums", "ItemNumbered",
 CellChangeTimes->{3.9402268081659718`*^9},
 CellID->855430089,ExpressionUUID->"a9c8bc2b-2d31-4c87-99bd-444f38d7dfea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FoldList", "[", 
  RowBox[{"Plus", ",", "0", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9402268101761208`*^9, 3.940226818359994*^9}},
 CellLabel->"In[304]:=",
 CellID->1757010654,ExpressionUUID->"31de0d8f-b8f1-439a-b434-66637dca79a5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "a", ",", 
   RowBox[{"a", "+", "b"}], ",", 
   RowBox[{"a", "+", "b", "+", "c"}], ",", 
   RowBox[{"a", "+", "b", "+", "c", "+", "d"}], ",", 
   RowBox[{"a", "+", "b", "+", "c", "+", "d", "+", "e"}], ",", 
   RowBox[{"a", "+", "b", "+", "c", "+", "d", "+", "e", "+", "f"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940226819300583*^9},
 CellLabel->"Out[304]=",
 CellID->1923341798,ExpressionUUID->"d99678b0-ad05-4555-a2c9-4425551bd6e8"]
}, Open  ]],

Cell["\<\
Here, as compared to Fold, we get all the intermediate partial sums for free. \
At the same time, FoldList is almost as efficient as Plus@@ for the final sum:\
\>", "Text",
 CellChangeTimes->{{3.9402268266307573`*^9, 3.940226828496973*^9}},
 CellID->1681744342,ExpressionUUID->"bd7f7b2e-a584-4329-8d5e-f90650cd5075"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FoldList", "[", 
   RowBox[{"Plus", ",", "0", ",", 
    RowBox[{"Range", "[", "100", "]"}]}], "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940226833012779*^9, 3.9402268527510633`*^9}},
 CellLabel->"In[306]:=",
 CellID->830183141,ExpressionUUID->"810d2be4-8cfb-4e33-a57b-15a0118c530a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000085`", ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "3", ",", "6", ",", "10", ",", "15", ",", "21", ",", 
     "28", ",", "36", ",", "45", ",", "55", ",", "66", ",", "78", ",", "91", 
     ",", "105", ",", "120", ",", "136", ",", "153", ",", "171", ",", "190", 
     ",", "210", ",", "231", ",", "253", ",", "276", ",", "300", ",", "325", 
     ",", "351", ",", "378", ",", "406", ",", "435", ",", "465", ",", "496", 
     ",", "528", ",", "561", ",", "595", ",", "630", ",", "666", ",", "703", 
     ",", "741", ",", "780", ",", "820", ",", "861", ",", "903", ",", "946", 
     ",", "990", ",", "1035", ",", "1081", ",", "1128", ",", "1176", ",", 
     "1225", ",", "1275", ",", "1326", ",", "1378", ",", "1431", ",", "1485", 
     ",", "1540", ",", "1596", ",", "1653", ",", "1711", ",", "1770", ",", 
     "1830", ",", "1891", ",", "1953", ",", "2016", ",", "2080", ",", "2145", 
     ",", "2211", ",", "2278", ",", "2346", ",", "2415", ",", "2485", ",", 
     "2556", ",", "2628", ",", "2701", ",", "2775", ",", "2850", ",", "2926", 
     ",", "3003", ",", "3081", ",", "3160", ",", "3240", ",", "3321", ",", 
     "3403", ",", "3486", ",", "3570", ",", "3655", ",", "3741", ",", "3828", 
     ",", "3916", ",", "4005", ",", "4095", ",", "4186", ",", "4278", ",", 
     "4371", ",", "4465", ",", "4560", ",", "4656", ",", "4753", ",", "4851", 
     ",", "4950", ",", "5050"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.940226840130505*^9, 3.9402268530503263`*^9}},
 CellLabel->"Out[306]=",
 CellID->378923841,ExpressionUUID->"b9265da4-9b45-46d9-bba8-4ba3cfd70b08"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Plus", "@@", 
   RowBox[{"Range", "[", "100", "]"}]}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940226861706232*^9, 3.940226867568838*^9}},
 CellLabel->"In[307]:=",
 CellID->1425048935,ExpressionUUID->"5c29a8ff-9da3-43d6-9606-17a35441b468"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000083`", ",", "5050"}], "}"}]], "Output",
 CellChangeTimes->{3.940226867819055*^9},
 CellLabel->"Out[307]=",
 CellID->947418280,ExpressionUUID->"20569e4a-1688-4232-8589-724e2143b6e9"]
}, Open  ]],

Cell["\<\
The Total command is much faster on the small lists, however:\
\>", "Text",
 CellChangeTimes->{3.940226887714932*^9},
 CellID->1815273102,ExpressionUUID->"cb0979c9-fcc4-4a12-8792-ef130d26a11d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Total", "[", 
   RowBox[{"Range", "[", "100", "]"}], "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940226889720533*^9, 3.9402268948217916`*^9}},
 CellLabel->"In[308]:=",
 CellID->1523401307,ExpressionUUID->"ddf778e4-df30-4924-a860-e01ca16d9368"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000049`", ",", "5050"}], "}"}]], "Output",
 CellChangeTimes->{3.9402268951504087`*^9},
 CellLabel->"Out[308]=",
 CellID->1671124595,ExpressionUUID->"dab8ad42-a221-4c27-926f-575b1eb20cca"]
}, Open  ]],

Cell["Example: position intervals for list splitting", "ItemNumbered",
 CellChangeTimes->{3.940226908130365*^9},
 CellID->1799932699,ExpressionUUID->"c6b79789-d809-47a2-b32a-7281d406a5c1"],

Cell["\<\
Imagine that we are given a list of elements, and a list of partial lengths, \
which add to the length of the element list. The problem is to generate the \
list of position intervals, corresponding to splitting of the element list \
into sublists with the lengths given by the second list. It is not hard to \
convince oneself that the solution is given by:\
\>", "Text",
 CellChangeTimes->{{3.94022691771131*^9, 3.940226922937974*^9}},
 CellID->2014220451,ExpressionUUID->"416345db-5e4b-4c06-a077-e68f8ebed817"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "splitIntervals", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"splitIntervals", "[", 
    RowBox[{"x_List", ",", 
     RowBox[{"{", 
      RowBox[{"lengths__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "/;", 
   
   RowBox[{
    RowBox[{"Total", "[", 
     RowBox[{"{", "lengths", "}"}], "]"}], "==", 
    RowBox[{"Length", "[", "x", "]"}]}]}], ":=", 
  RowBox[{"Transpose", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Most", "[", "#", "]"}], ",", 
       RowBox[{
        RowBox[{"Rest", "[", "#", "]"}], "-", "1"}]}], "}"}], "&"}], "[", 
    RowBox[{"FoldList", "[", 
     RowBox[{"Plus", ",", "1", ",", 
      RowBox[{"{", "lengths", "}"}]}], "]"}], "]"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940226924549567*^9, 3.940227006848802*^9}},
 CellLabel->"In[309]:=",
 CellID->1033072071,ExpressionUUID->"40c13b9f-a3ac-462a-9936-85db711f011b"],

Cell["\<\
The main idea is to generate the list of start and end points of the \
intervals from the partial sums of lengths, and then transpose them to get \
the intervals. For example:\
\>", "Text",
 CellChangeTimes->{{3.940227016472934*^9, 3.940227018220972*^9}, 
   3.940740614180496*^9},
 CellID->1416638223,ExpressionUUID->"48a85fdb-bea7-4e1a-a0ed-a8e896860f04"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"splitIntervals", "[", 
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940227019725905*^9, 3.940227025015739*^9}},
 CellLabel->"In[311]:=",
 CellID->1983661419,ExpressionUUID->"292ddfb2-2337-4d73-8925-c2e8e2ee3fde"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "10"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940227025399847*^9},
 CellLabel->"Out[311]=",
 CellID->1214273702,ExpressionUUID->"2dc9a2c6-6f27-48b3-a3a4-a1a217668c4f"]
}, Open  ]],

Cell["\<\
Application: splitting the list into sublists of specified lengths \
(generalized Take operation)\
\>", "ItemNumbered",
 CellChangeTimes->{3.940227036708229*^9},
 CellID->761012073,ExpressionUUID->"3362f809-d629-444f-9cb6-790dbc3c4b57"],

Cell["\<\
We can put the just developed function into a direct use to create a quite \
useful one: given a list and the list of partial lengths, split the original \
list into sublists of these lengths. Here is the code:\
\>", "Text",
 CellChangeTimes->{{3.940227045889719*^9, 3.940227047758337*^9}, 
   3.9407406142007627`*^9},
 CellID->2064793026,ExpressionUUID->"3990e340-cfb2-41d0-beba-2d66b78f428e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "splitList", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"splitList", "[", 
     RowBox[{"x_List", ",", 
      RowBox[{"{", 
       RowBox[{"lengths__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Total", "[", 
      RowBox[{"{", "lengths", "}"}], "]"}], "==", 
     RowBox[{"Length", "[", "x", "]"}]}]}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Take", "[", 
       RowBox[{"x", ",", "#"}], "]"}], "&"}], ",", 
     RowBox[{"splitIntervals", "[", 
      RowBox[{"x", ",", 
       RowBox[{"{", "lengths", "}"}]}], "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.94022705172348*^9, 3.94022709556177*^9}},
 CellLabel->"In[312]:=",
 CellID->1453390345,ExpressionUUID->"e837e4f6-972e-4f2c-b9b2-ba39a067f0fc"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940227097694006*^9, 3.940227100258607*^9}},
 CellID->730420748,ExpressionUUID->"1d9c7105-6e20-4013-a0e0-7f41ecead7b4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"splitList", "[", 
  RowBox[{
   RowBox[{"Range", "[", "20", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "5", ",", "6", ",", "2", ",", "4"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940227101386273*^9, 3.940227110110258*^9}},
 CellLabel->"In[314]:=",
 CellID->1785433074,ExpressionUUID->"5b94f571-e431-48b7-a182-8e11762fb71c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6", ",", "7", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17", ",", "18", ",", "19", ",", "20"}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{3.940227110557414*^9},
 CellLabel->"Out[314]=",
 CellID->1965135346,ExpressionUUID->"f94e629f-bbf3-40d7-bc00-868da26c71fb"]
}, Open  ]],

Cell[TextData[{
 "The final comment here is that this is an example of redundant error - \
checking as discussed at the end of section ",
 ButtonBox["5.2.7.3.2",
  BaseStyle->"Hyperlink",
  ButtonData->"5.2.7.3.2"],
 ". To eliminate it in this case, it is best to embed the body of the \
<splitIntervals > function inside the <splitList > function, since it is \
really short (if we would have to write several functions using <\n\
splitIntervals >, we would perhaps be better off putting everything into a \
package and making <splitIntervals > a private (internal) function - then we \
can remove type checks):"
}], "Text",
 CellChangeTimes->{{3.94022712659969*^9, 3.940227133663457*^9}, {
  3.9402271815769672`*^9, 3.940227181586615*^9}, {3.940276417801077*^9, 
  3.94027641784569*^9}},
 CellID->1878753009,ExpressionUUID->"b7494d4e-13cf-4a0b-a9b8-cf701d703d25"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "splitListAlt", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"splitListALt", "[", 
    RowBox[{"x_List", ",", 
     RowBox[{"{", 
      RowBox[{"lengths__Integer", "?", "NonNegative"}], "}"}]}], "]"}], "/;", 
   
   RowBox[{
    RowBox[{"Total", "[", 
     RowBox[{"{", "lengths", "}"}], "]"}], "==", 
    RowBox[{"Length", "[", "x", "]"}]}]}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Take", "[", 
      RowBox[{"x", ",", "#"}], "]"}], "&"}], ",", 
    RowBox[{"Transpose", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Most", "[", "#", "]"}], ",", 
         RowBox[{
          RowBox[{"Rest", "[", "#", "]"}], "-", "1"}]}], "}"}], "&"}], "[", 
      RowBox[{"FoldList", "[", 
       RowBox[{"Plus", ",", "1", ",", 
        RowBox[{"{", "lengths", "}"}]}], "]"}], "]"}], "]"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.940227185869824*^9, 3.940227240894553*^9}},
 CellLabel->"In[315]:=",
 CellID->60503200,ExpressionUUID->"67c05c6e-4550-4777-aa57-95efb343ea68"],

Cell["\<\
To see how much overhead the redundant type - checks induce in this case, we \
can perform a power test:\
\>", "Text",
 CellChangeTimes->{3.9402272574673223`*^9, 3.940740614221116*^9},
 CellID->666797397,ExpressionUUID->"63e893a6-1ce8-44f8-8ea6-5a11e850998a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"splitList", "[", 
     RowBox[{
      RowBox[{"Range", "[", 
       RowBox[{"Total", "[", 
        RowBox[{"Range", "[", "100", "]"}], "]"}], "]"}], ",", 
      RowBox[{"Range", "[", "100", "]"}]}], "]"}], "//", 
    RowBox[{
     RowBox[{"Short", "[", "#", "]"}], "&"}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940227267784679*^9, 3.940227335357375*^9}},
 CellLabel->"In[319]:=",
 CellID->2145324314,ExpressionUUID->"e9bc04fe-8ec6-42d1-8354-4e979a4886c0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000802`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "1", "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "98", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"4951", ",", "4952", ",", 
        RowBox[{"\[LeftSkeleton]", "96", "\[RightSkeleton]"}], ",", "5049", 
        ",", "5050"}], "}"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{
  3.940227290601347*^9, {3.9402273262164927`*^9, 3.9402273357459593`*^9}},
 CellLabel->"Out[319]=",
 CellID->1706229860,ExpressionUUID->"0ab07775-2186-4ef3-82e5-95d033f37191"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"splitListAlt", "[", 
     RowBox[{
      RowBox[{"Range", "[", 
       RowBox[{"Total", "[", 
        RowBox[{"Range", "[", "100", "]"}], "]"}], "]"}], ",", 
      RowBox[{"Range", "[", "100", "]"}]}], "]"}], "//", 
    RowBox[{
     RowBox[{"Short", "[", "#", "]"}], "&"}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9402273429455423`*^9, 3.940227343456251*^9}},
 CellLabel->"In[320]:=",
 CellID->1256118629,ExpressionUUID->"8fb9cfb0-863a-4c2b-bb18-7fab9e00c024"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000058`", ",", 
   TagBox[
    RowBox[{"splitListAlt", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", 
        RowBox[{"\[LeftSkeleton]", "5046", "\[RightSkeleton]"}], ",", "5049", 
        ",", "5050"}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}], "]"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940227343857345*^9},
 CellLabel->"Out[320]=",
 CellID->2013043424,ExpressionUUID->"e8230c7b-6152-48a3-8a67-decf8d12f67b"]
}, Open  ]],

Cell["\<\
We see that both functions are quite fast (this is one of the fastest \
implementations of this function in Mathematica that I know of), and the \
difference is of the order of 10%. The difference would be more considerable \
if the patterns used in error-checking were more semantic (here they are \
mostly syntactic).\
\>", "Text",
 CellChangeTimes->{{3.940227361313848*^9, 3.9402273763789597`*^9}},
 CellID->1763452330,ExpressionUUID->"6cad30ae-81f9-445c-b09c-3089b5bed79d"],

Cell["Example: imitating a factorial function", "ItemNumbered",
 CellChangeTimes->{3.940227384398904*^9},
 CellID->1899692770,ExpressionUUID->"560d0eae-647b-430d-b6b5-a380fbf75259"],

Cell["\<\
This is a (admittedly, rather inefficient) simulation of the factorial \
function with Fold.\
\>", "Text",
 CellChangeTimes->{3.940227391524889*^9},
 CellID->1497005441,ExpressionUUID->"339b615d-cf78-4aed-971a-34b7339ff217"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "ourFactorial", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ourFactorial", "[", 
    RowBox[{"n_Integer", "?", "NonNegative"}], "]"}], ":=", 
   RowBox[{"Fold", "[", 
    RowBox[{"Times", ",", "1", ",", 
     RowBox[{"Range", "[", "n", "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940227393382091*^9, 3.940227413039036*^9}},
 CellLabel->"In[321]:=",
 CellID->1175586561,ExpressionUUID->"ac515588-93b9-4356-9b59-e47c0370af6a"],

Cell["For instance,", "Text",
 CellChangeTimes->{{3.940227414884688*^9, 3.940227417963171*^9}},
 CellID->1823985034,ExpressionUUID->"20a57fce-72e2-46b0-be25-3e0c862d20ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ourFactorial", "/@", 
  RowBox[{"Range", "[", "10", "]"}]}]], "Input",
 CellChangeTimes->{{3.940227419309618*^9, 3.940227423675955*^9}},
 CellLabel->"In[323]:=",
 CellID->940765514,ExpressionUUID->"a85ef920-f195-491f-ab2d-86299d5cfe74"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "6", ",", "24", ",", "120", ",", "720", ",", "5040", 
   ",", "40320", ",", "362880", ",", "3628800"}], "}"}]], "Output",
 CellChangeTimes->{3.940227424026243*^9},
 CellLabel->"Out[323]=",
 CellID->444481849,ExpressionUUID->"0281e3ca-d579-4073-9766-8e5b5d796caa"]
}, Open  ]],

Cell["\<\
If, however, we have to generate a list of all consecutive factorials, then \
all we need to do is to change Fold to FoldList, and in this case this \
solution will be among the most efficient ones in Mathematica.\
\>", "Text",
 CellChangeTimes->{{3.940227434214815*^9, 3.9402274361855516`*^9}},
 CellID->1458311877,ExpressionUUID->"17c2ff76-68d8-4ac0-bf41-5e9785be4883"],

Cell["Example: imitating FromDigits", "ItemNumbered",
 CellChangeTimes->{3.9402274470683947`*^9},
 CellID->1095590,ExpressionUUID->"d3f5992f-cd79-4ded-9d33-6181656a87b7"],

Cell["\<\
Here we will use Fold to imitate the <FromDigits> command. We are given a \
list of digits of a number, and the integer base. We have to reconstruct the \
number. If the base is not given, we should assume that it is 10. For example:\
\>", "Text",
 CellChangeTimes->{{3.940227453747405*^9, 3.940227457665506*^9}},
 CellID->1233711954,ExpressionUUID->"69caaeaf-f6f1-4ef5-93e4-41252ab6c3d4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigits", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "4", ",", "5", ",", "2", ",", "3"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940227459529332*^9, 3.940227464866497*^9}},
 CellLabel->"In[324]:=",
 CellID->750052760,ExpressionUUID->"7957bc94-4783-4e46-a17b-2d36f69ce5a5"],

Cell[BoxData["24523"], "Output",
 CellChangeTimes->{3.940227465409935*^9},
 CellLabel->"Out[324]=",
 CellID->2044260279,ExpressionUUID->"8f2d76bc-67e1-4f78-88de-f778dcc74518"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigits", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}], ",", "2"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940227468353319*^9, 3.940227474121153*^9}},
 CellLabel->"In[325]:=",
 CellID->1049243146,ExpressionUUID->"83a70265-4e66-4d27-9c43-6e5404be4663"],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{3.9402274744544973`*^9},
 CellLabel->"Out[325]=",
 CellID->511643690,ExpressionUUID->"6c514c2f-b82e-4635-945b-f8c97ff6f147"]
}, Open  ]],

Cell["Here is the code using Fold:", "Text",
 CellChangeTimes->{3.940227482307869*^9},
 CellID->670975242,ExpressionUUID->"a0e69212-91fb-44c2-a89c-7755e7170406"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Fold", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"#1", "*", "10"}], "+", "#2"}], "&"}], ",", "0", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "5", ",", "2", ",", "3"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9402274840417833`*^9, 3.940227501806591*^9}},
 CellLabel->"In[326]:=",
 CellID->497154705,ExpressionUUID->"de87c115-be06-4d2f-b782-8c36ad56ffbf"],

Cell[BoxData["24523"], "Output",
 CellChangeTimes->{3.940227502177352*^9},
 CellLabel->"Out[326]=",
 CellID->1492511409,ExpressionUUID->"e8e8dfb5-f792-41f9-8bfc-ae9ee5f1427a"]
}, Open  ]],

Cell["\<\
Here, we feed the digits one by one to a function which multiplies the \
previous result by 10 and adds a new digit at each step. It is clear how the \
code for the function will look like:\
\>", "Text",
 CellChangeTimes->{{3.940227511106267*^9, 3.940227512791103*^9}},
 CellID->2030254103,ExpressionUUID->"c8ce4fd0-d36a-43eb-9cd4-372987f89f0f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", "ourFromDigits", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ourFromDigits", "[", "digits_List", "]"}], ":=", 
   RowBox[{"Fold", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"#1", "*", "10"}], "+", "#2"}], "&"}], ",", "0", ",", 
     "digits"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ourFromDigits", "[", 
    RowBox[{"digits_List", ",", 
     RowBox[{"base_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Fold", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"#1", "*", "base"}], "+", "#2"}], "&"}], ",", "0", ",", 
     "digits"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940227514626945*^9, 3.940227570466654*^9}},
 CellLabel->"In[327]:=",
 CellID->1363873684,ExpressionUUID->"27cc3908-f4fd-4bca-a325-a889c1604462"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940227572718346*^9, 3.940227573511209*^9}},
 CellID->1422369258,ExpressionUUID->"45de3237-fac4-40ff-98d5-b2e15b0dbf0e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ourFromDigits", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "4", ",", "5", ",", "2", ",", "3"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9402275744610567`*^9, 3.940227579167458*^9}},
 CellLabel->"In[330]:=",
 CellID->860517965,ExpressionUUID->"05d44c92-2b83-4720-90cd-5b0f2de856af"],

Cell[BoxData["24523"], "Output",
 CellChangeTimes->{3.940227579594294*^9},
 CellLabel->"Out[330]=",
 CellID->834058032,ExpressionUUID->"6bb82ff1-f9e4-4393-b05f-657f1fc290da"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ourFromDigits", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}], ",", "2"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9402275846348743`*^9, 3.940227589366589*^9}},
 CellLabel->"In[331]:=",
 CellID->1529700212,ExpressionUUID->"17b6e780-6e5a-432a-be87-82601a92d3cd"],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{3.940227589690419*^9},
 CellLabel->"Out[331]=",
 CellID->557010111,ExpressionUUID->"7c47b171-3d8c-4dac-ad09-5aa8ffa1e964"]
}, Open  ]],

Cell["\<\
We can express this as a single function by using the default values \
mechanism (optional patterns):\
\>", "Text",
 CellChangeTimes->{3.940227597505754*^9},
 CellID->787718304,ExpressionUUID->"56a4f85c-cd19-40f7-8cc4-12cd3eb48519"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "ourFromDigitsAlt", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ourFromDigitsAlt", "[", 
    RowBox[{"digits_List", ",", 
     RowBox[{"base_Integer", ":", "10"}]}], "]"}], ":=", 
   RowBox[{"Fold", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"#1", "*", "base"}], "+", "#2"}], "&"}], ",", "0", ",", 
     "digits"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940227601913533*^9, 3.940227634142633*^9}},
 CellLabel->"In[332]:=",
 CellID->833322915,ExpressionUUID->"0a569c7a-9435-45b2-922a-39ecdd38f109"],

Cell["Check now:", "Text",
 CellChangeTimes->{{3.94022763630355*^9, 3.9402276379102488`*^9}},
 CellID->1869751625,ExpressionUUID->"011cac25-fcca-4ff8-b2cb-9bd559459df4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ourFromDigitsAlt", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "4", ",", "5", ",", "2", ",", "3"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9402276385726748`*^9, 3.940227643894452*^9}},
 CellLabel->"In[334]:=",
 CellID->2146749109,ExpressionUUID->"a5b60c69-4191-4276-b538-22cf86627284"],

Cell[BoxData["24523"], "Output",
 CellChangeTimes->{3.9402276443186293`*^9},
 CellLabel->"Out[334]=",
 CellID->1445838299,ExpressionUUID->"aa635ba8-6bdd-421f-bc0d-c22bfb454916"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ourFromDigitsAlt", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}], ",", "2"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940227645807838*^9, 3.94022765049008*^9}},
 CellLabel->"In[335]:=",
 CellID->1853574414,ExpressionUUID->"1c59c050-c859-4905-b4a0-869046649b23"],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{3.940227650836855*^9},
 CellLabel->"Out[335]=",
 CellID->213534516,ExpressionUUID->"04e104d6-8daf-47aa-8ecb-5e6be2fc2693"]
}, Open  ]],

Cell["\<\
An interested reader may perform the efficiency analysis to see how close we \
get to the built-in FromDigits, for large numbers.\
\>", "Text",
 CellChangeTimes->{{3.940227660063504*^9, 3.9402276638172903`*^9}},
 CellID->429436275,ExpressionUUID->"6114d90f-5f7e-410d-b668-e7756477a172"],

Cell["Example: powers of a differential operator", "ItemNumbered",
 CellChangeTimes->{3.9402276730944967`*^9},
 CellID->1990420005,ExpressionUUID->"10aded72-f0a5-4843-b69a-40a76edf2cd5"],

Cell["\<\
Here we consider the following problem: given a differential operator <oper>, \
construct an operator which will apply <oper> raised to some integer power, \
to a function <f>. However, we want to keep everything in an operator form: \
no explicit variables should be involved. The operator <oper> has to take a \
function <f>, and produce a pure function which corresponds to <oper>[f]. The \
new operator <oper-
Power> should take an operator <oper>, a function <f> , and an integer power  \
<n>, and produce a pure function <oper>^n[f]. Once any specific argument \
(say, <x> or <y> etc) is supplied, this has to evaluate to a function of this \
argument.\
\>", "Text",
 CellChangeTimes->{{3.940227681150481*^9, 3.940227709257347*^9}},
 CellID->1636254716,ExpressionUUID->"ac6ff7da-cf74-4832-a5e3-299b0e5dc226"],

Cell["To be specific, consider the following operator <oper>:", "Text",
 CellChangeTimes->{{3.940227681150481*^9, 3.940227707690651*^9}},
 CellID->447709942,ExpressionUUID->"f9261ced-bb42-4d2b-93ae-7e982cb5ddbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"HoldForm", "[", 
   RowBox[{
    RowBox[{"x", "*", "f"}], "+", 
    RowBox[{"D", "[", 
     RowBox[{"f", ",", "x"}], "]"}]}], "]"}], "//", 
  "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.940227712976655*^9, 3.9402277302112913`*^9}},
 CellLabel->"In[337]:=",
 CellID->1312792236,ExpressionUUID->"111c0504-9e3d-4523-8711-f247d1b0b0c5"],

Cell[BoxData[
 FormBox[
  TagBox[
   RowBox[{
    RowBox[{"x", " ", "f"}], "+", 
    FractionBox[
     RowBox[{"\[PartialD]", "f"}], 
     RowBox[{"\[PartialD]", "x"}],
     MultilineFunction->None]}],
   HoldForm], TraditionalForm]], "Output",
 CellChangeTimes->{{3.940227723281561*^9, 3.9402277307897453`*^9}},
 CellLabel->"Out[337]//TraditionalForm=",
 CellID->173789897,ExpressionUUID->"73f44186-bf7a-46a0-bb5b-6eeec6f93de7"]
}, Open  ]],

Cell["This is the code for it:", "Text",
 CellChangeTimes->{3.940227740728463*^9},
 CellID->309038959,ExpressionUUID->"9eebbc07-3a4f-42a0-9067-0f39da90e467"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "oper", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"oper", "[", "expr_", "]"}], ":=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"#", "*", "expr"}], "+", 
      RowBox[{"D", "[", 
       RowBox[{"expr", ",", "#"}], "]"}]}], ")"}], "&"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940227742752275*^9, 3.9402277588624268`*^9}},
 CellLabel->"In[338]:=",
 CellID->251098044,ExpressionUUID->"b306457b-189c-4bfe-bcab-01405b2c1e40"],

Cell["\<\
For instance, this is the result of the single application of an operator:\
\>", "Text",
 CellChangeTimes->{3.94022776835048*^9},
 CellID->393794884,ExpressionUUID->"41d78b98-d221-432c-8364-89584de6f8e1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"oper", "[", 
   RowBox[{"Sin", "[", "x", "]"}], "]"}], "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.940227770027444*^9, 3.94022777444627*^9}},
 CellLabel->"In[340]:=",
 CellID->50368640,ExpressionUUID->"c008d00e-17b5-471d-887e-486940443ad2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Cos", "[", "x", "]"}], "+", 
  RowBox[{"x", " ", 
   RowBox[{"Sin", "[", "x", "]"}]}]}]], "Output",
 CellChangeTimes->{3.940227774848229*^9},
 CellLabel->"Out[340]=",
 CellID->1896741372,ExpressionUUID->"61cd57c8-4ce7-4e76-86ad-bebe9a54a6a9"]
}, Open  ]],

Cell["\<\
What is important is that the action of an operator produces a function:\
\>", "Text",
 CellChangeTimes->{3.940227783745331*^9},
 CellID->1284983136,ExpressionUUID->"afcdb3bc-f144-4251-9381-9fe63c945000"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"oper", "[", 
   RowBox[{"Sin", "[", "y", "]"}], "]"}], "[", "y", "]"}]], "Input",
 CellChangeTimes->{{3.940227785658414*^9, 3.940227790756248*^9}},
 CellLabel->"In[341]:=",
 CellID->1096740031,ExpressionUUID->"09032871-2ddd-431f-8cee-07742d04b95e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Cos", "[", "y", "]"}], "+", 
  RowBox[{"y", " ", 
   RowBox[{"Sin", "[", "y", "]"}]}]}]], "Output",
 CellChangeTimes->{3.940227791087984*^9},
 CellLabel->"Out[341]=",
 CellID->641035925,ExpressionUUID->"53caca6b-3f14-45e0-927c-6935a96c9475"]
}, Open  ]],

Cell["\<\
Note that <oper> defined in this way is vulnerable to misuse:\
\>", "Text",
 CellChangeTimes->{3.940227801985338*^9},
 CellID->2112818123,ExpressionUUID->"f583d56d-d42b-4851-a201-044c5c6b73bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"oper", "[", "Sin", "]"}], "[", "x", "]"}], "//", 
  "FullForm"}]], "Input",
 CellChangeTimes->{{3.940227804726817*^9, 3.940227814221861*^9}},
 CellLabel->"In[342]:=",
 CellID->1392033593,ExpressionUUID->"b4e3971d-6129-4bf6-94c2-4294f74944bd"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Times", "[", 
    RowBox[{"Sin", ",", "x"}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.940227814488558*^9},
 CellLabel->"Out[342]//FullForm=",
 CellID->1873220888,ExpressionUUID->"06444e09-96e1-4b39-8619-a25acb501a0b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"oper", "[", 
   RowBox[{"Sin", "[", "x", "]"}], "]"}], "[", "y", "]"}]], "Input",
 CellChangeTimes->{{3.940227816246437*^9, 3.940227821130847*^9}},
 CellLabel->"In[343]:=",
 CellID->668077308,ExpressionUUID->"6095b59e-f779-48a2-a717-078c65e4d584"],

Cell[BoxData[
 RowBox[{"y", " ", 
  RowBox[{"Sin", "[", "x", "]"}]}]], "Output",
 CellChangeTimes->{3.940227822097766*^9},
 CellLabel->"Out[343]=",
 CellID->1675428285,ExpressionUUID->"3aa7c514-e7a9-467c-b9b4-ba396f0c740c"]
}, Open  ]],

Cell["\<\
In both cases above the output is not what we would like. We should then \
consider it an auxiliary function, an input to <operPower>. Only the \
<operPower> should be used, and in particular it will give back the correct \
form of the operator <oper> if the power <n> =1.\
\>", "Text",
 CellChangeTimes->{{3.940227833588718*^9, 3.940227843456029*^9}},
 CellID->1117606531,ExpressionUUID->"f85e5ca0-011c-474d-8439-653a7bebfc8f"],

Cell["Here is the code for operPower:", "Text",
 CellChangeTimes->{{3.940227833588718*^9, 3.9402278425338097`*^9}},
 CellID->1038737513,ExpressionUUID->"87856e08-824a-4b0f-9602-f2b2fcf856a9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "operPower", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"operPower", "[", 
    RowBox[{"oper_", ",", "f_", ",", 
     RowBox[{"n_Integer", "?", "NonNegative"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "x", "}"}], ",", 
      RowBox[{
       RowBox[{"Fold", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"oper", "[", "#1", "]"}], "[", "#2", "]"}], "&"}], ",", 
         RowBox[{"f", "[", "x", "]"}], ",", 
         RowBox[{"Table", "[", 
          RowBox[{"x", ",", 
           RowBox[{"{", "n", "}"}]}], "]"}]}], "]"}], "/.", 
       RowBox[{"x", "->", "#"}]}]}], "]"}], "&"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940227845899613*^9, 3.940227892276742*^9}},
 CellLabel->"In[344]:=",
 CellID->1406481896,ExpressionUUID->"a865dc0d-5f3a-41b0-b6f7-fb1adb26d6de"],

Cell["\<\
The code is somewhat tricky. The idea is that we use a local variable <x> and \
create a list like {x,x,...} of the length n. At each step, we supply it to \
<oper[#1][#2]&> as a second argument. But let us realize, that the result of \
the operation of <oper> at each step is a function, this is why we need to \
supply <x> to it as an argument to get an expression, and the syntax contains \
two pairs of square brackets one after another.
After Fold has finished, we have an expression depending only on x. We then \
use a substitution rule to convert the resulting expression depending on \
local <x> to a pure function, which is then the final result.\
\>", "Text",
 CellChangeTimes->{{3.940227904526709*^9, 3.940227921982377*^9}},
 CellID->217586268,ExpressionUUID->"3b222fb7-ebe5-4613-bc56-a86ef7f1bd50"],

Cell["Check, for instance:", "Text",
 CellChangeTimes->{{3.940227904526709*^9, 3.940227920806066*^9}},
 CellID->959405075,ExpressionUUID->"d29a2df2-3f16-460b-a811-99c37d5d4ca3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"operPower", "[", 
   RowBox[{"oper", ",", "Sin", ",", "0"}], "]"}], "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.940227924546317*^9, 3.940227933676818*^9}},
 CellLabel->"In[346]:=",
 CellID->465524542,ExpressionUUID->"eb115fc7-4ba2-4bc2-8d4d-e4d3a66a53ba"],

Cell[BoxData[
 RowBox[{"Sin", "[", "x", "]"}]], "Output",
 CellChangeTimes->{3.940227933982257*^9},
 CellLabel->"Out[346]=",
 CellID->198820662,ExpressionUUID->"26c40436-e84b-4b81-a381-1156aeca7f40"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"operPower", "[", 
   RowBox[{"oper", ",", "Sin", ",", "1"}], "]"}], "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.9402279382265472`*^9, 3.940227946005289*^9}},
 CellLabel->"In[347]:=",
 CellID->250482628,ExpressionUUID->"a8122c5e-9e1f-4129-ba7d-3dffe3e0cf16"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Cos", "[", "x", "]"}], "+", 
  RowBox[{"x", " ", 
   RowBox[{"Sin", "[", "x", "]"}]}]}]], "Output",
 CellChangeTimes->{3.940227946390869*^9},
 CellLabel->"Out[347]=",
 CellID->377205604,ExpressionUUID->"ffc23108-d794-429a-a47a-ef3f60b36733"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"operPower", "[", 
   RowBox[{"oper", ",", "Sin", ",", "2"}], "]"}], "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.940227948622748*^9, 3.940227954346957*^9}},
 CellLabel->"In[348]:=",
 CellID->1772462266,ExpressionUUID->"d9fc430a-7b2e-42fe-a296-463fe5d15c65"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", " ", 
   RowBox[{"Cos", "[", "x", "]"}]}], "+", 
  RowBox[{"x", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Cos", "[", "x", "]"}], "+", 
     RowBox[{"x", " ", 
      RowBox[{"Sin", "[", "x", "]"}]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.940227954682761*^9},
 CellLabel->"Out[348]=",
 CellID->302779553,ExpressionUUID->"ebee7d6a-20e5-49c9-8d7a-e222dc21246f"]
}, Open  ]],

Cell["The last case we may check also by hand:", "Text",
 CellChangeTimes->{3.940227982677539*^9},
 CellID->1427187528,ExpressionUUID->"7f4695ae-0745-4c99-9fa8-d38cb96b7f83"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "*", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"x", "*", 
      RowBox[{"Sin", "[", "x", "]"}]}], "+", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"Sin", "[", "x", "]"}], ",", "x"}], "]"}]}], ")"}]}], "+", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "*", 
      RowBox[{"Sin", "[", "x", "]"}]}], "+", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"Sin", "[", "x", "]"}], ",", "x"}], "]"}]}], ",", "x"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.940227986766615*^9, 3.940228007962968*^9}},
 CellLabel->"In[349]:=",
 CellID->1500303242,ExpressionUUID->"231a9797-0450-4ef3-a686-1645a43ddf1e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", " ", 
   RowBox[{"Cos", "[", "x", "]"}]}], "+", 
  RowBox[{"x", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Cos", "[", "x", "]"}], "+", 
     RowBox[{"x", " ", 
      RowBox[{"Sin", "[", "x", "]"}]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.9402280088160467`*^9},
 CellLabel->"Out[349]=",
 CellID->1303422497,ExpressionUUID->"b09c76fe-b4b5-49da-86c5-e187626f9e72"]
}, Open  ]],

Cell["We can also use pure functions with <operPower>:", "Text",
 CellChangeTimes->{3.940228026433303*^9},
 CellID->141224032,ExpressionUUID->"06a0a4f8-b96e-42ac-bb24-8be988b41fea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"operPower", "[", 
   RowBox[{"oper", ",", 
    RowBox[{
     RowBox[{"#", "^", "2"}], "&"}], ",", "3"}], "]"}], "[", "x", 
  "]"}]], "Input",
 CellChangeTimes->{{3.940228029487042*^9, 3.940228038421652*^9}},
 CellLabel->"In[350]:=",
 CellID->1722152456,ExpressionUUID->"e745955f-d513-4ad5-a931-98f7e442b5af"],

Cell[BoxData[
 RowBox[{
  RowBox[{"8", " ", "x"}], "+", 
  SuperscriptBox["x", "3"], "+", 
  RowBox[{"x", " ", 
   RowBox[{"(", 
    RowBox[{"2", "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["x", "2"]}]}], ")"}]}], "+", 
  RowBox[{"x", " ", 
   RowBox[{"(", 
    RowBox[{"2", "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["x", "2"]}], "+", 
     RowBox[{"x", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", " ", "x"}], "+", 
        SuperscriptBox["x", "3"]}], ")"}]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.940228038747795*^9},
 CellLabel->"Out[350]=",
 CellID->744914472,ExpressionUUID->"a5fbe60f-8cf7-40c9-859e-358df8c21bf0"]
}, Open  ]],

Cell["\<\
The advantage of this seemingly perverse solution is that we may separate \
functions from the arguments, and effectively carry operations on functions \
(internally, the arguments are used, but the user of this command does not \
need to know it).\
\>", "Text",
 CellChangeTimes->{{3.9402280496005497`*^9, 3.940228061509119*^9}},
 CellID->2095352541,ExpressionUUID->"c5b89c91-33e7-46d7-a6a7-91b9fb688b5e"],

Cell["\<\
Another comment: had we used FoldList instead of Fold, and we would get all \
the intermediate powers of our differential operator for free.\
\>", "Text",
 CellChangeTimes->{{3.9402280496005497`*^9, 3.940228060742839*^9}},
 CellID->680397058,ExpressionUUID->"582c1c32-4699-4a70-97e6-164cb84c9113"],

Cell["Example: autocorrelated random walks", "ItemNumbered",
 CellChangeTimes->{3.940228070561385*^9},
 CellID->2005808720,ExpressionUUID->"f47264d0-7e11-40fe-b401-9555ae046cdb"],

Cell["\<\
Consider a following problem: we have a random walker, who can make unit \
steps to the left and to the right. Let the probability of step in each \
direction depend on the direction of the previous step. We may introduce a \
parameter <p > which tells how (anti) correlated or uncorrelated is our \
random walk. If <p > is close or equal to 0.5, the walk is almost or totally \
uncorrelated since the probability of a step to the right or to the left is \
the same and equal to 0.5. If <p > is close or equal to 1, the walk is  \
almost or totally correlated since the next step will almost certainly be in \
a direction of the previous step. If <p > is close to or equal to 0, then the \
walk is almost or totally anti - correlated since the next step will almost \
certainly be in the direction opposite to the previous step.\
\>", "Text",
 CellChangeTimes->{{3.940228078361689*^9, 3.940228112222992*^9}, {
  3.94027641786821*^9, 3.940276417934659*^9}},
 CellID->428866434,ExpressionUUID->"fe9bc8c7-7fb8-4085-8ef9-8d14b08018dc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "randomStep", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"randomStep", "[", 
    RowBox[{"p_Real", ",", 
     RowBox[{"previous", ":", 
      RowBox[{"1", "|", 
       RowBox[{"-", "1"}]}]}]}], "]"}], "/;", 
   RowBox[{"0", "<=", "p", "<=", "1"}]}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"previous", "==", "1"}], ",", "#", ",", 
      RowBox[{"-", "#"}]}], "]"}], "&"}], "@", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"p", "-", 
      RowBox[{"Random", "[", "]"}]}], ",", 
     RowBox[{"_", "?", "Negative"}], ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"_", "?", "NonNegative"}], ",", "1"}], "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.9402281475875673`*^9, 3.940228192399177*^9}},
 CellLabel->"In[351]:=",
 CellID->1935484368,ExpressionUUID->"74f2c853-5a64-41f9-a2f7-cf50e15fec29"],

Cell["Correlated situation", "Text",
 CellChangeTimes->{3.940228200296092*^9},
 CellID->1263773503,ExpressionUUID->"32b2de5e-e02d-464f-85f4-f3a0d297d5da"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"steps", "=", 
  RowBox[{"NestList", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"randomStep", "[", 
      RowBox[{"0.7", ",", "#"}], "]"}], "&"}], ",", "1", ",", "40"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.940228202215342*^9, 3.940228217044427*^9}},
 CellLabel->"In[353]:=",
 CellID->641155010,ExpressionUUID->"16a95321-cded-40de-b404-1546e05cbf46"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
   ",", 
   RowBox[{"-", "1"}], ",", "1", ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", "1", ",", "1", ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
   "1", ",", "1", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", "1", ",", "1", ",", "1", ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940228217321925*^9},
 CellLabel->"Out[353]=",
 CellID->18910504,ExpressionUUID->"1623c9ea-5414-4b2b-860d-3bcd1ea4587c"]
}, Open  ]],

Cell["We need FoldList to build a trajectory from the steps:", "Text",
 CellChangeTimes->{3.940228228111902*^9, 3.940740614247077*^9},
 CellID->1260972,ExpressionUUID->"a5e24dee-9e31-4253-b870-9c3e83c7c76b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trajectory", "=", 
  RowBox[{"FoldList", "[", 
   RowBox[{"Plus", ",", "0", ",", "steps"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9402282302356033`*^9, 3.940228237921308*^9}},
 CellLabel->"In[354]:=",
 CellID->1004572373,ExpressionUUID->"bd486e0c-6758-4aed-b70a-e4831bd744d3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", 
   ",", "8", ",", "7", ",", "8", ",", "9", ",", "8", ",", "9", ",", "10", ",",
    "11", ",", "12", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", 
   ",", "16", ",", "17", ",", "18", ",", "17", ",", "16", ",", "15", ",", 
   "14", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "16", 
   ",", "17", ",", "16", ",", "15", ",", "14", ",", "15", ",", "14", ",", 
   "13"}], "}"}]], "Output",
 CellChangeTimes->{3.9402282384383802`*^9},
 CellLabel->"Out[354]=",
 CellID->846348298,ExpressionUUID->"5863ab09-e7ba-4a57-a1c8-c4b72d2bb330"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"trajectory", ",", 
   RowBox[{"Joined", "->", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940228240723772*^9, 3.940228252087327*^9}},
 CellLabel->"In[355]:=",
 CellID->252658601,ExpressionUUID->"d8d78597-bb2d-48cc-aa6e-0fe117c05a4b"],

Cell[BoxData[
 GraphicsBox[{{}, 
   InterpretationBox[{
     TagBox[{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         0.012833333333333334`], AbsoluteThickness[2], LineBox[CompressedData["
1:eJxdjksKwjAURUNHDh046MCBliISpNivn1abtukGuoSC426hS3YJKiXCO4EQ
3j28e7Ifp+HlKaX09/7e5bxrJY+R+crIfG1kvkHuI98i3yEPkIfgB/Aj9jT4
CTxC7xm9MXoT8BQ8gzeHt4D3Au8V3hu8d/AS+xX6H/A/8b8a3Mj92c2uv5H+
uQFvwVvwDv1udn4LbsH7//8/5Xko5Q==
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ]},
      {"WolframDynamicHighlight", <|
       "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>}], 
     StyleBox[
      DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
        Slot["HighlightElements"], 
        Slot["LayoutOptions"], 
        Slot["Meta"], 
        Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
           Annotation[{
             Hue[0.67, 0.6, 0.6], 
             Directive[
              PointSize[0.012833333333333334`], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Line[CompressedData["
1:eJxdjksKwjAURUNHDh046MCBliISpNivn1abtukGuoSC426hS3YJKiXCO4EQ
3j28e7Ifp+HlKaX09/7e5bxrJY+R+crIfG1kvkHuI98i3yEPkIfgB/Aj9jT4
CTxC7xm9MXoT8BQ8gzeHt4D3Au8V3hu8d/AS+xX6H/A/8b8a3Mj92c2uv5H+
uQFvwVvwDv1udn4LbsH7//8/5Xko5Q==
              "]]}, "Charting`Private`Tag#1"]}}, <|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, "PlotRange" -> {{0., 42.}, {0, 18.}}, 
            "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0., 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[0.012833333333333334`], 
               RGBColor[0.368417, 0.506779, 0.709798], 
               AbsoluteThickness[2]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                Identity[
                 Part[#, 1]], 
                Identity[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListPlot, "GroupHighlight" -> False|>|>]]& )[<|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, "PlotRange" -> {{0., 42.}, {0, 18.}}, 
           "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0., 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              PointSize[0.012833333333333334`], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           ListPlot, "GroupHighlight" -> False|>|>],
       ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
        4.503599627370496*^15, -4.503599627370496*^15}}],
      Selectable->False]},
    Annotation[{{{}, {}, 
       Annotation[{
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1:eJxdjksKwjAURUNHDh046MCBliISpNivn1abtukGuoSC426hS3YJKiXCO4EQ
3j28e7Ifp+HlKaX09/7e5bxrJY+R+crIfG1kvkHuI98i3yEPkIfgB/Aj9jT4
CTxC7xm9MXoT8BQ8gzeHt4D3Au8V3hu8d/AS+xX6H/A/8b8a3Mj92c2uv5H+
uQFvwVvwDv1udn4LbsH7//8/5Xko5Q==
          "]]}, "Charting`Private`Tag#1"]}}, <|
     "HighlightElements" -> <|
       "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
      "LayoutOptions" -> <|
       "PanelPlotLayout" -> <||>, "PlotRange" -> {{0., 42.}, {0, 18.}}, 
        "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0., 0}, 
        "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
        "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
          Directive[
           PointSize[0.012833333333333334`], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2]]}, 
        "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), 
          "ScalingFunctions" -> {{Identity, Identity}, {
            Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
      "Meta" -> <|
       "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
        ListPlot, "GroupHighlight" -> False|>|>, 
     "DynamicHighlight"]], {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05], 
    "OptimizePlotMarkers" -> True, "IncludeHighlighting" -> "CurrentSet", 
    "HighlightStyle" -> Automatic, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 42.}, {0, 18.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.940228252624954*^9},
 CellLabel->"Out[355]=",
 CellID->348356644,ExpressionUUID->"7207cf68-4138-440f-ba64-5a951d74bffd"]
}, Open  ]],

Cell["Anti - correlated situation", "Text",
 CellChangeTimes->{3.940228264230074*^9},
 CellID->789693986,ExpressionUUID->"475b8037-c782-4da1-8b03-c12f188ee047"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"steps", "=", 
  RowBox[{"NestList", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"randomStep", "[", 
      RowBox[{"0.1", ",", "#"}], "]"}], "&"}], ",", "1", ",", "40"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.940228265830947*^9, 3.940228280628235*^9}},
 CellLabel->"In[356]:=",
 CellID->490486314,ExpressionUUID->"7a6eb986-6a91-4bd9-a4bd-5e580dbdf8ab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", "1", ",", "1", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", "1", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.940228280883287*^9},
 CellLabel->"Out[356]=",
 CellID->1356469782,ExpressionUUID->"0baa4126-6ea9-4d48-bf31-ee75a72b53b5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trajectory", "=", 
  RowBox[{"FoldList", "[", 
   RowBox[{"Plus", ",", "0", ",", "steps"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940228282859598*^9, 3.940228290133952*^9}},
 CellLabel->"In[357]:=",
 CellID->1733712720,ExpressionUUID->"0b7fc36f-7319-490f-853b-b8d814f418e4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "2", ",", "1", 
   ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", 
   "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", 
   ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", 
   "2", ",", "1", ",", "2", ",", "1", ",", "2", ",", "3", ",", "2", ",", "1", 
   ",", "2", ",", "1", ",", "0", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.940228290408218*^9},
 CellLabel->"Out[357]=",
 CellID->351282583,ExpressionUUID->"c29c7e76-ce5a-4617-a001-6007d9f0b39a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"trajectory", ",", 
   RowBox[{"Joined", "->", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940228296131052*^9, 3.9402283012159033`*^9}},
 CellLabel->"In[358]:=",
 CellID->2106763516,ExpressionUUID->"bde75616-581a-4b91-8c95-6e8f4c2c09ff"],

Cell[BoxData[
 GraphicsBox[{{}, 
   InterpretationBox[{
     TagBox[{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         0.012833333333333334`], AbsoluteThickness[2], LineBox[CompressedData["
1:eJxd0jsKg0AUheHBKqWFhUWKKCIiInkZjUmcUZMNZAmB1G7BJbsEDc4E5j8w
HO583O4Gn+H9dYQQ6fJ+vWaSwo6y/zfKZhfuwX341rjuHTyER/AYnsBTeAbP
4Xv4AX6En+BneAG/wEt4Bb/Ca/gNfoc/4A1cwpXto4K38Bbe6dZ3MXbwHvs9
/Ak3s8nr7zNUKzPk
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ]},
      {"WolframDynamicHighlight", <|
       "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>}], 
     StyleBox[
      DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
        Slot["HighlightElements"], 
        Slot["LayoutOptions"], 
        Slot["Meta"], 
        Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
           Annotation[{
             Hue[0.67, 0.6, 0.6], 
             Directive[
              PointSize[0.012833333333333334`], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Line[CompressedData["
1:eJxd0jsKg0AUheHBKqWFhUWKKCIiInkZjUmcUZMNZAmB1G7BJbsEDc4E5j8w
HO583O4Gn+H9dYQQ6fJ+vWaSwo6y/zfKZhfuwX341rjuHTyER/AYnsBTeAbP
4Xv4AX6En+BneAG/wEt4Bb/Ca/gNfoc/4A1cwpXto4K38Bbe6dZ3MXbwHvs9
/Ak3s8nr7zNUKzPk
              "]]}, "Charting`Private`Tag#1"]}}, <|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, "PlotRange" -> {{0., 42.}, {0, 3.}}, 
            "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0., 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[0.012833333333333334`], 
               RGBColor[0.368417, 0.506779, 0.709798], 
               AbsoluteThickness[2]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                Identity[
                 Part[#, 1]], 
                Identity[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListPlot, "GroupHighlight" -> False|>|>]]& )[<|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, "PlotRange" -> {{0., 42.}, {0, 3.}}, 
           "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0., 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              PointSize[0.012833333333333334`], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           ListPlot, "GroupHighlight" -> False|>|>],
       ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
        4.503599627370496*^15, -4.503599627370496*^15}}],
      Selectable->False]},
    Annotation[{{{}, {}, 
       Annotation[{
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1:eJxd0jsKg0AUheHBKqWFhUWKKCIiInkZjUmcUZMNZAmB1G7BJbsEDc4E5j8w
HO583O4Gn+H9dYQQ6fJ+vWaSwo6y/zfKZhfuwX341rjuHTyER/AYnsBTeAbP
4Xv4AX6En+BneAG/wEt4Bb/Ca/gNfoc/4A1cwpXto4K38Bbe6dZ3MXbwHvs9
/Ak3s8nr7zNUKzPk
          "]]}, "Charting`Private`Tag#1"]}}, <|
     "HighlightElements" -> <|
       "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
      "LayoutOptions" -> <|
       "PanelPlotLayout" -> <||>, "PlotRange" -> {{0., 42.}, {0, 3.}}, 
        "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0., 0}, 
        "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
        "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
          Directive[
           PointSize[0.012833333333333334`], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2]]}, 
        "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), 
          "ScalingFunctions" -> {{Identity, Identity}, {
            Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
      "Meta" -> <|
       "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
        ListPlot, "GroupHighlight" -> False|>|>, 
     "DynamicHighlight"]], {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05], 
    "OptimizePlotMarkers" -> True, "IncludeHighlighting" -> "CurrentSet", 
    "HighlightStyle" -> Automatic, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 42.}, {0, 3.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.9402283016499443`*^9},
 CellLabel->"Out[358]=",
 CellID->922162655,ExpressionUUID->"c68aacca-37ee-490c-a0b3-b72a0482c795"]
}, Open  ]],

Cell["Example: linked lists and the fast accumulation of results", \
"ItemNumbered",
 CellChangeTimes->{3.9402283188146048`*^9},
 CellID->398262186,ExpressionUUID->"4493ffb5-22dc-4656-af4c-b2f2150eda63"],

Cell["\<\
For many applications, one needs to be able to build up a list of some \
intermediate results obtained in some computation. The easiest way to set up \
such a list is to use Append or Prepend (or perhaps, AppendTo or PrependTo). \
However, for large lists this method is quite inefficient. The reason is that \
lists in Mathematica are implemented as arrays, and thus every time we add an \
element, the entire list is copied.\
\>", "Text",
 CellChangeTimes->{{3.9402283267478333`*^9, 3.940228334247794*^9}},
 CellID->2033516050,ExpressionUUID->"49de25c2-80d3-46ec-a633-e1b5b8eab03c"],

Cell["\<\
We can use FoldList to illustrate the creation of a list in such manner:\
\>", "Text",
 CellChangeTimes->{{3.9402283267478333`*^9, 3.940228332172073*^9}, 
   3.9407406142735577`*^9},
 CellID->1374318273,ExpressionUUID->"2a60730b-76e2-4b74-961b-0491682c7051"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "15"}], "}"}], "]"}], ",", 
    RowBox[{"{", "10", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.94022833694978*^9, 3.940228346262727*^9}},
 CellLabel->"In[359]:=",
 CellID->1743555586,ExpressionUUID->"3d0642a8-4f9c-4776-af0f-a0c699c77603"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "3", ",", "15", ",", "5", ",", "3", ",", "8", ",", "6", ",", "1",
    ",", "2", ",", "11"}], "}"}]], "Output",
 CellChangeTimes->{3.9402283464918633`*^9},
 CellLabel->"Out[359]=",
 CellID->712769118,ExpressionUUID->"a4a2ff6c-5880-433a-87f6-66a95817439b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FoldList", "[", 
  RowBox[{"Append", ",", 
   RowBox[{"{", "}"}], ",", "testlist"}], "]"}]], "Input",
 CellChangeTimes->{{3.9402283486633177`*^9, 3.940228358833354*^9}},
 CellLabel->"In[360]:=",
 CellID->512122151,ExpressionUUID->"c9272f9b-f226-41e3-9c27-7770bb119c44"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "10", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "3", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "3", ",", "15", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "3", ",", "15", ",", "5", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "3", ",", "15", ",", "5", ",", "3", ",", "8"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "10", ",", "3", ",", "15", ",", "5", ",", "3", ",", "8", ",", "6"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "10", ",", "3", ",", "15", ",", "5", ",", "3", ",", "8", ",", "6", ",", 
     "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "10", ",", "3", ",", "15", ",", "5", ",", "3", ",", "8", ",", "6", ",", 
     "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "10", ",", "3", ",", "15", ",", "5", ",", "3", ",", "8", ",", "6", ",", 
     "1", ",", "2", ",", "11"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940228359236206*^9},
 CellLabel->"Out[360]=",
 CellID->1227727873,ExpressionUUID->"a56faeaf-b6b9-42a5-8d13-76fecfa2c4b6"]
}, Open  ]],

Cell["Now, let us do some performance tests:", "Text",
 CellChangeTimes->{3.940228370190152*^9, 3.940740614293672*^9},
 CellID->1399481135,ExpressionUUID->"d91df5ea-4800-4449-b36a-fa2eeb254095"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Fold", "[", 
    RowBox[{"Append", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"Range", "[", "100", "]"}]}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9402283720656233`*^9, 3.940228382868176*^9}},
 CellLabel->"In[361]:=",
 CellID->98758124,ExpressionUUID->"3b1a34aa-c9f9-4deb-b5de-6e859ea77c97"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000197`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940228383421117*^9},
 CellLabel->"Out[361]=",
 CellID->416213596,ExpressionUUID->"9c373f39-c439-4971-82f1-7e1be3160c1e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Fold", "[", 
    RowBox[{"Append", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"Range", "[", "500", "]"}]}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940228393569454*^9, 3.940228393987185*^9}},
 CellLabel->"In[362]:=",
 CellID->947669693,ExpressionUUID->"4b4bc4ce-ade4-4759-ada6-dbce91d1dc4f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000662`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940228394424399*^9},
 CellLabel->"Out[362]=",
 CellID->1904970848,ExpressionUUID->"194834e9-229f-4aa7-8a43-20fba5d139d7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Fold", "[", 
    RowBox[{"Append", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"Range", "[", "2000", "]"}]}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.94022839863984*^9, 3.940228400500216*^9}},
 CellLabel->"In[363]:=",
 CellID->11349213,ExpressionUUID->"3bf828b2-a4b5-4cdc-83dc-8757da25f4ca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.006504`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940228400883007*^9},
 CellLabel->"Out[363]=",
 CellID->1644154901,ExpressionUUID->"c8690596-dacf-4b52-8c3f-4f45de3e9764"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Fold", "[", 
    RowBox[{"Append", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"Range", "[", "5000", "]"}]}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940228406775269*^9, 3.940228407413604*^9}},
 CellLabel->"In[364]:=",
 CellID->1639335158,ExpressionUUID->"7ab8e203-9673-4613-abd8-fda3c82a264d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.03565`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940228407773731*^9},
 CellLabel->"Out[364]=",
 CellID->762408181,ExpressionUUID->"549d2912-95c1-4927-8618-1084f6f80e3c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Fold", "[", 
    RowBox[{"Append", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"Range", "[", "20000", "]"}]}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940228414179137*^9, 3.940228415396242*^9}},
 CellLabel->"In[365]:=",
 CellID->1906860065,ExpressionUUID->"e1da865e-3d0f-4433-8530-efb18bd38a41"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.394937`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940228416087963*^9},
 CellLabel->"Out[365]=",
 CellID->287181424,ExpressionUUID->"227fe15f-567e-4a08-a87c-3ff1f5bdbe75"]
}, Open  ]],

Cell["\<\
We see that the time used by this operation is quadratic in the size of the \
list. We of course would like a linear time. One way to achieve this which is \
available starting with the Mathematica version 5.0 is to use the Reap-Sow \
technique (to be described in Part II). Another (perhaps, slightly less \
efficient) way to get a linear time is to use linked lists. We will follow \
the discussion in the book of David Wagner [7].\
\>", "Text",
 CellChangeTimes->{{3.94022842738792*^9, 3.940228442334206*^9}},
 CellID->1262438359,ExpressionUUID->"1dee4cf7-cf29-4c12-8cc6-cb8d92e9e59d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.940228447174808*^9, 3.94022845037291*^9}},
 CellLabel->"In[366]:=",
 CellID->1991967858,ExpressionUUID->"fed721e5-7cc1-4581-b623-43e9d9102d77"],

Cell["A linked list in Mathematica is a structure of the type", "Text",
 CellChangeTimes->{3.9402284577189302`*^9},
 CellID->613665600,ExpressionUUID->"4d3ecf14-5f2e-4495-94bc-106ef8ead2a2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", 
       RowBox[{"{", 
        RowBox[{"d", ",", 
         RowBox[{"{", "}"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.940228459451227*^9, 3.940228464687529*^9}},
 CellLabel->"In[367]:=",
 CellID->876191329,ExpressionUUID->"337969ce-2007-4c43-9718-791827589ceb"],

Cell["\<\
The advantage of this representation is that on every level, we have a list \
containing just 2 elements, which is easy to copy. It will not work in this \
way for elements that are lists themselves, but then one can replace a list \
by an arbitrary head <h>.\
\>", "Text",
 CellChangeTimes->{{3.940228474368524*^9, 3.940228481243923*^9}},
 CellID->1859016617,ExpressionUUID->"f619429b-9544-42c7-b608-708d6aacd421"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "h", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"h", "[", 
  RowBox[{"a", ",", 
   RowBox[{"h", "[", 
    RowBox[{"b", ",", 
     RowBox[{"h", "[", 
      RowBox[{"c", ",", 
       RowBox[{"h", "[", 
        RowBox[{"d", ",", 
         RowBox[{"h", "[", "]"}]}], "]"}]}], "]"}]}], "]"}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.940228483154277*^9, 3.940228493201249*^9}},
 CellLabel->"In[368]:=",
 CellID->742708078,ExpressionUUID->"9204513c-f338-4418-a504-cdeeea0c3c6d"],

Cell["\<\
To avoid a possible conflict with some <h > already defined, we can use \
Module[{h}, ...] to make it local.\
\>", "Text",
 CellChangeTimes->{{3.940228509946504*^9, 3.940228513781583*^9}, 
   3.940276417957719*^9},
 CellID->539003000,ExpressionUUID->"cb23847b-55f1-48f2-b06b-699311cb6d52"],

Cell["\<\
Using Fold is the most natural way to create such structures:\
\>", "Text",
 CellChangeTimes->{3.940228509946504*^9, 3.9407406143145447`*^9},
 CellID->1028836855,ExpressionUUID->"b8a2011d-f032-4e88-b4e2-7ab3e334497a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ll1", "=", 
  RowBox[{"Fold", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"#2", ",", "#1"}], "}"}], "&"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"Reverse", "[", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.940228516577828*^9, 3.940228531195395*^9}},
 CellLabel->"In[370]:=",
 CellID->573102067,ExpressionUUID->"98478488-f865-4f3f-bf54-abbd4c73084e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", 
       RowBox[{"{", 
        RowBox[{"d", ",", 
         RowBox[{"{", "}"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940228531657015*^9},
 CellLabel->"Out[370]=",
 CellID->1775221511,ExpressionUUID->"a4776dd2-3cda-4be3-91b7-f9cbd6e42502"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ll2", "=", 
  RowBox[{"Fold", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"h", "[", 
      RowBox[{"#2", ",", "#1"}], "]"}], "&"}], ",", 
    RowBox[{"h", "[", "]"}], ",", 
    RowBox[{"Reverse", "[", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.940228533721497*^9, 3.94022854745163*^9}},
 CellLabel->"In[371]:=",
 CellID->45332222,ExpressionUUID->"11c2741d-d6c2-4ac0-83d7-84317529ab0b"],

Cell[BoxData[
 RowBox[{"h", "[", 
  RowBox[{"a", ",", 
   RowBox[{"h", "[", 
    RowBox[{"b", ",", 
     RowBox[{"h", "[", 
      RowBox[{"c", ",", 
       RowBox[{"h", "[", 
        RowBox[{"d", ",", 
         RowBox[{"h", "[", "]"}]}], "]"}]}], "]"}]}], "]"}]}], 
  "]"}]], "Output",
 CellChangeTimes->{3.940228547819165*^9},
 CellLabel->"Out[371]=",
 CellID->132565674,ExpressionUUID->"6011769d-f11a-4f16-b7da-b991669cbb3b"]
}, Open  ]],

Cell["\<\
Converting them back to a normal list is just as easy with Flatten:\
\>", "Text",
 CellChangeTimes->{3.940228558322526*^9, 3.940740614334548*^9},
 CellID->1090740979,ExpressionUUID->"2a89fa0c-1d4a-455d-a743-106919055a43"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", "ll1", "]"}]], "Input",
 CellChangeTimes->{{3.940228560483184*^9, 3.94022856296017*^9}},
 CellLabel->"In[372]:=",
 CellID->1749708986,ExpressionUUID->"c8235e3a-1876-4945-9d51-487be93aca7c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]], "Output",
 CellChangeTimes->{3.940228563461652*^9},
 CellLabel->"Out[372]=",
 CellID->1466343719,ExpressionUUID->"94daeea5-1d4d-4f89-9661-078a0a7f2833"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{"ll2", ",", "Infinity", ",", "h"}], "]"}]], "Input",
 CellChangeTimes->{{3.940228564319274*^9, 3.9402285706449213`*^9}},
 CellLabel->"In[373]:=",
 CellID->976857008,ExpressionUUID->"91964e5f-104c-4650-895f-b1df52e9f5f3"],

Cell[BoxData[
 RowBox[{"h", "[", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "]"}]], "Output",
 CellChangeTimes->{3.9402285709447403`*^9},
 CellLabel->"Out[373]=",
 CellID->1913016371,ExpressionUUID->"038053af-e84e-4063-b4b3-bc199eb45321"]
}, Open  ]],

Cell["\<\
Notice that in the second case we used the fact that Flatten takes as an \
optional third argument the head which has to be Flatten-ed, and then Flatten \
- s only subexpressions with this head. In any case, this is another \
linear-time operation.\
\>", "Text",
 CellChangeTimes->{{3.940228579428516*^9, 3.940228591518387*^9}},
 CellID->2088468160,ExpressionUUID->"ea359b12-cdb2-449f-b9ef-8d87d3f19453"],

Cell["We can now write a function:", "Text",
 CellChangeTimes->{{3.940228579428516*^9, 3.9402285884225807`*^9}},
 CellID->136094639,ExpressionUUID->"8ff9e3b7-f564-4dd7-b394-9399efcc6aa8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "toLinkedList", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toLinkedList", "[", "x_List", "]"}], ":=", 
   RowBox[{"Fold", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"#2", ",", "#1"}], "}"}], "&"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"Reverse", "[", "x", "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940228592912451*^9, 3.940228614848752*^9}},
 CellLabel->"In[374]:=",
 CellID->282231334,ExpressionUUID->"4a8a776f-919c-4c1c-b1cd-521316cda498"],

Cell["Let us do some performance tests:", "Text",
 CellChangeTimes->{3.940228623738346*^9},
 CellID->461340645,ExpressionUUID->"2b67a669-aef2-46ce-8288-1da2867d0dd5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"toLinkedList", "[", 
    RowBox[{"Range", "[", "2000", "]"}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9402286255241413`*^9, 3.940228632726343*^9}},
 CellLabel->"In[376]:=",
 CellID->51199589,ExpressionUUID->"c368a8a7-15e9-4c9b-945a-6aa52c6ca95a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.001052`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940228633625642*^9},
 CellLabel->"Out[376]=",
 CellID->791351292,ExpressionUUID->"4456f9a3-c589-45db-bfcf-1dccaeb97cff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"toLinkedList", "[", 
    RowBox[{"Range", "[", "5000", "]"}], "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.94022864116687*^9, 3.9402286433376513`*^9}},
 CellLabel->"In[377]:=",
 CellID->874938773,ExpressionUUID->"04a4c7ec-df88-44a2-a460-300a6925b1b7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.001844`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.9402286437668257`*^9},
 CellLabel->"Out[377]=",
 CellID->1087237472,ExpressionUUID->"e65f5041-e2d5-4c02-94f2-5fea279f3651"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"ll3", "=", 
     RowBox[{"toLinkedList", "[", 
      RowBox[{"Range", "[", "20000", "]"}], "]"}]}], ")"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9402286510669107`*^9, 3.940228667336177*^9}},
 CellLabel->"In[378]:=",
 CellID->715269716,ExpressionUUID->"d31d9f6f-c04a-451a-ae30-c6854d5f7b7f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.015404`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940228667644236*^9},
 CellLabel->"Out[378]=",
 CellID->1106368956,ExpressionUUID->"e5df9875-5b1d-4062-b33c-017aa4e12f7f"]
}, Open  ]],

Cell["\<\
We see that the time is roughly linear in the list size, and for example, for \
a list of 20000 we get already a speed-up of the order of 100 times! \
Flattening is even faster:\
\>", "Text",
 CellChangeTimes->{{3.9402286785804787`*^9, 3.9402286826848907`*^9}},
 CellID->1829627766,ExpressionUUID->"b7cf4b81-a91e-4643-b9e3-c9dd1fea444e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Flatten", "[", "ll3", "]"}], ";"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940228684215108*^9, 3.940228689041163*^9}},
 CellLabel->"In[379]:=",
 CellID->1343055299,ExpressionUUID->"f2b84133-7bc5-4504-9421-bcfb7b302f2d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00234`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940228689462716*^9},
 CellLabel->"Out[379]=",
 CellID->378160944,ExpressionUUID->"29378e18-1163-4c97-a8fb-9e870213bf31"]
}, Open  ]],

Cell["\<\
Here we assumed that the list of results is accumulated immediately, just to \
separate this topic from the other problem - specific part of a program. If \
the list is accumulated not immediately but some other operations are \
performed in between (which is what usually happens), one just has to use the \
idiom list = {newelement, list}, to achieve the same result.\
\>", "Text",
 CellChangeTimes->{{3.940228698352043*^9, 3.94022870521273*^9}},
 CellID->1346874335,ExpressionUUID->"5c086a4a-ee2b-47e3-ab1d-57ba8e389c11"],

Cell["Example: joining linked lists", "ItemNumbered",
 CellChangeTimes->{3.940228714593691*^9},
 CellID->1540044015,ExpressionUUID->"e7934735-3505-4e2f-9fa6-5e7096c0667e"],

Cell["\<\
Continuing with linked lists, consider another problem: how to efficiently \
join many linked lists into a single one. For example:\
\>", "Text",
 CellChangeTimes->{{3.940228720506167*^9, 3.940228722327903*^9}, {
  3.940740614355836*^9, 3.940740614374749*^9}},
 CellID->2046846461,ExpressionUUID->"55979c40-6e5b-447c-9fa9-06da028d7f2a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ll1", "=", 
  RowBox[{"toLinkedList", "[", 
   RowBox[{"Range", "[", "5", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940228739781271*^9, 3.940228743747884*^9}},
 CellLabel->"In[380]:=",
 CellID->1390857540,ExpressionUUID->"4241ccb8-250b-486d-b3f4-2e5c1eef8b91"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", 
         RowBox[{"{", 
          RowBox[{"5", ",", 
           RowBox[{"{", "}"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940228744151041*^9},
 CellLabel->"Out[380]=",
 CellID->1052610581,ExpressionUUID->"59e391f0-c022-4d5c-ad3d-2e2f6b6a4c0c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ll2", "=", 
  RowBox[{"toLinkedList", "[", 
   RowBox[{"Range", "[", 
    RowBox[{"6", ",", "10"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.94022874582384*^9, 3.9402287508269253`*^9}},
 CellLabel->"In[381]:=",
 CellID->1290279320,ExpressionUUID->"2c538c79-2e32-4ade-921e-829cda7cf0bd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6", ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", 
       RowBox[{"{", 
        RowBox[{"9", ",", 
         RowBox[{"{", 
          RowBox[{"10", ",", 
           RowBox[{"{", "}"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940228751265456*^9},
 CellLabel->"Out[381]=",
 CellID->559123325,ExpressionUUID->"0520cc53-dac5-4952-86ab-cfa6a0a78b1c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ll3", "=", 
  RowBox[{"toLinkedList", "[", 
   RowBox[{"Range", "[", 
    RowBox[{"11", ",", "15"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9402287548378983`*^9, 3.940228761238278*^9}},
 CellLabel->"In[382]:=",
 CellID->1008786210,ExpressionUUID->"5b64dc4c-7b18-4600-b24d-a00bae65e72d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"11", ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", 
       RowBox[{"{", 
        RowBox[{"14", ",", 
         RowBox[{"{", 
          RowBox[{"15", ",", 
           RowBox[{"{", "}"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9402287614654016`*^9},
 CellLabel->"Out[382]=",
 CellID->1935844459,ExpressionUUID->"d53866f0-8c6f-4ac7-8afe-fb68d207f277"]
}, Open  ]],

Cell["\<\
We will now give a solution which works on lists of atoms. The key \
observation is that the empty list inside a linked list is always at level \
{-2}, and in the case of atomic lists, nothing else is on that level:\
\>", "Text",
 CellChangeTimes->{{3.940228770111401*^9, 3.9402287719778433`*^9}, 
   3.940740614394785*^9},
 CellID->1360570363,ExpressionUUID->"e21ba3be-65ed-4a46-95be-631b7db986a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Level", "[", 
  RowBox[{"ll2", ",", 
   RowBox[{"{", 
    RowBox[{"-", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940228774186611*^9, 3.940228776539825*^9}},
 CellLabel->"In[383]:=",
 CellID->1202889502,ExpressionUUID->"1f1ae7e7-3019-4817-8ca4-32b06846ae23"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", "}"}], "}"}]], "Output",
 CellChangeTimes->{3.94022877688872*^9},
 CellLabel->"Out[383]=",
 CellID->419965013,ExpressionUUID->"526cfc64-d4cc-4cb2-93aa-645e04c00a69"]
}, Open  ]],

Cell["\<\
This means that if we want to join linked lists <x > and <y >, we just have \
to Map the entire list <y > on a level {-2} of the list <x >:\
\>", "Text",
 CellChangeTimes->{{3.940228785785027*^9, 3.940228789439342*^9}, {
   3.940276417980277*^9, 3.940276418048918*^9}, 3.940740614414448*^9},
 CellID->1720709449,ExpressionUUID->"e1a0214b-f239-4602-bec9-b881ac44f85c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{"ll2", "&"}], ",", "ll1", ",", 
   RowBox[{"{", 
    RowBox[{"-", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940228791030073*^9, 3.9402287958397512`*^9}},
 CellLabel->"In[384]:=",
 CellID->1384793851,ExpressionUUID->"34b45438-4f45-4b1b-a700-765a883e2902"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", 
         RowBox[{"{", 
          RowBox[{"5", ",", 
           RowBox[{"{", 
            RowBox[{"6", ",", 
             RowBox[{"{", 
              RowBox[{"7", ",", 
               RowBox[{"{", 
                RowBox[{"8", ",", 
                 RowBox[{"{", 
                  RowBox[{"9", ",", 
                   RowBox[{"{", 
                    RowBox[{"10", ",", 
                    RowBox[{"{", "}"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]}], 
            "}"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940228796168998*^9},
 CellLabel->"Out[384]=",
 CellID->1385303415,ExpressionUUID->"9d0da2fd-33a3-4197-94bf-9d5580e175d8"]
}, Open  ]],

Cell["\<\
If we want to join many lists, we can do it pairwise, and use Fold, to join \
the previously joined list with a next list at every step. So, here is a \
final function:\
\>", "Text",
 CellChangeTimes->{{3.94022880756662*^9, 3.940228809280348*^9}, 
   3.940740614434183*^9},
 CellID->1924278778,ExpressionUUID->"986ad331-e1a1-4ff0-a79a-2fa08a08ed2f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "lljoin", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"lljoin", "[", 
    RowBox[{"x_List", ",", "y_List"}], "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"y", "&"}], ",", "x", ",", 
     RowBox[{"{", 
      RowBox[{"-", "2"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"lljoin", "[", "x__List", "]"}], ":=", 
   RowBox[{"Fold", "[", 
    RowBox[{"lljoin", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "x", "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9402288112406683`*^9, 3.940228872253963*^9}},
 CellLabel->"In[389]:=",
 CellID->93962752,ExpressionUUID->"22a2613d-bc4d-4c3d-b4e6-4b47082273d1"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940228846411872*^9, 3.9402288476534863`*^9}},
 CellID->693897267,ExpressionUUID->"3baf5102-58aa-4b1c-beca-ea782ab53333"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lljoin", "[", 
  RowBox[{"ll1", ",", "ll2", ",", "ll3"}], "]"}]], "Input",
 CellChangeTimes->{{3.940228851843357*^9, 3.940228855853121*^9}},
 CellLabel->"In[392]:=",
 CellID->985771659,ExpressionUUID->"070862ef-609c-450e-ab36-24653b0c6cd3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", 
       RowBox[{"{", 
        RowBox[{"4", ",", 
         RowBox[{"{", 
          RowBox[{"5", ",", 
           RowBox[{"{", 
            RowBox[{"6", ",", 
             RowBox[{"{", 
              RowBox[{"7", ",", 
               RowBox[{"{", 
                RowBox[{"8", ",", 
                 RowBox[{"{", 
                  RowBox[{"9", ",", 
                   RowBox[{"{", 
                    RowBox[{"10", ",", 
                    RowBox[{"{", 
                    RowBox[{"11", ",", 
                    RowBox[{"{", 
                    RowBox[{"12", ",", 
                    RowBox[{"{", 
                    RowBox[{"13", ",", 
                    RowBox[{"{", 
                    RowBox[{"14", ",", 
                    RowBox[{"{", 
                    RowBox[{"15", ",", 
                    RowBox[{"{", "}"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]}], 
                    "}"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]}], 
          "}"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.9402288562926273`*^9, 3.9402288754222527`*^9}},
 CellLabel->"Out[392]=",
 CellID->1132917770,ExpressionUUID->"ec298ae0-4721-4f8d-8451-eefea28a48a2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Restriction of Fold-ed function to two arguments is spurious", \
"Subsubsection",
 CellChangeTimes->{3.940228886261601*^9},
 CellID->1358946088,ExpressionUUID->"2e641324-41c0-4316-b9da-5a89657042fe"],

Cell["\<\
Since the function to be Fold-ed can accept as a second (supplied externally \
by Fold) argument any expression, in particular a list, this means that we \
can actually supply as many arguments as we want. To illustrate this, \
consider the following example:\
\>", "Text",
 CellChangeTimes->{{3.940228893232678*^9, 3.940228897817911*^9}},
 CellID->1318315171,ExpressionUUID->"615b2a7e-7e0c-498a-acaa-c259b5227571"],

Cell["Example: random changes in the list", "ItemNumbered",
 CellChangeTimes->{3.940228909675913*^9},
 CellID->578595767,ExpressionUUID->"8ab3e6cc-e165-4576-8859-0663b2deda22"],

Cell["\<\
Here we take a list of 10 random integers in the range {1,100}. We then \
change the element at random position in this list by one of the symbols \
{a,b,c,d,e} (randomly chosen).\
\>", "Text",
 CellChangeTimes->{{3.940228918131227*^9, 3.940228919866231*^9}},
 CellID->653102353,ExpressionUUID->"297f8043-49a9-4687-b813-c515d8d1eca1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.9402289231393023`*^9, 3.940228927422159*^9}},
 CellLabel->"In[393]:=",
 CellID->1171802029,ExpressionUUID->"081b3913-00bf-4c6b-8dbe-f85e02f3b33d"],

Cell["Here is our list:", "Text",
 CellChangeTimes->{{3.94022892922581*^9, 3.940228932181108*^9}},
 CellID->811125869,ExpressionUUID->"3850398d-c91d-458b-9e2b-1660be4e292f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "100"}], "}"}], "]"}], ",", 
    RowBox[{"{", "10", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940228933041691*^9, 3.940228943247664*^9}},
 CellLabel->"In[394]:=",
 CellID->255323750,ExpressionUUID->"6dee912b-1a72-48b0-a0a6-70c9fd9596b6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "93", ",", "66", ",", "50", ",", "64", ",", "24", ",", "25", ",", "96", ",",
    "27", ",", "39", ",", "38"}], "}"}]], "Output",
 CellChangeTimes->{3.940228943581501*^9},
 CellLabel->"Out[394]=",
 CellID->1545336823,ExpressionUUID->"0427db8e-7a12-4477-8ef6-4912a6b2caa4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"changeList", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}], "[", 
       RowBox[{"[", 
        RowBox[{"RandomInteger", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "5"}], "}"}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "10"}], "}"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", "10", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9402289484783497`*^9, 3.940228996906393*^9}},
 CellLabel->"In[395]:=",
 CellID->1360661938,ExpressionUUID->"a57778cb-ef63-457b-8944-526741cca9cc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "10"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940228997179728*^9},
 CellLabel->"Out[395]=",
 CellID->1978588754,ExpressionUUID->"59cdab2a-0309-454c-9511-4f71c88a42d4"]
}, Open  ]],

Cell["We will use a combination of ReplacePart and Fold:", "Text",
 CellChangeTimes->{3.940229007448669*^9},
 CellID->356914683,ExpressionUUID->"b3051953-c5a7-4c5b-8f2d-32d08c1b9d38"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FoldList", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"ReplacePart", "[", 
     RowBox[{"#1", ",", 
      RowBox[{"Sequence", "@@", "#2"}]}], "]"}], "&"}], ",", "testlist", ",", 
   "changeList"}], "]"}]], "Input",
 CellChangeTimes->{{3.940229009677986*^9, 3.9402290280279093`*^9}},
 CellLabel->"In[396]:=",
 CellID->2056514818,ExpressionUUID->"61983817-828e-4ed9-b020-eb3f5693c20a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "93", ",", "66", ",", "50", ",", "64", ",", "24", ",", "25", ",", "96", 
     ",", "27", ",", "39", ",", "38"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "93", ",", "66", ",", "a", ",", "64", ",", "24", ",", "25", ",", "96", 
     ",", "27", ",", "39", ",", "38"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "d", ",", "66", ",", "a", ",", "64", ",", "24", ",", "25", ",", "96", ",",
      "27", ",", "39", ",", "38"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "d", ",", "66", ",", "a", ",", "64", ",", "24", ",", "25", ",", "96", ",",
      "27", ",", "39", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "d", ",", "c", ",", "a", ",", "64", ",", "24", ",", "25", ",", "96", ",", 
     "27", ",", "39", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "d", ",", "c", ",", "a", ",", "c", ",", "24", ",", "25", ",", "96", ",", 
     "27", ",", "39", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "d", ",", "c", ",", "a", ",", "c", ",", "d", ",", "25", ",", "96", ",", 
     "27", ",", "39", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "d", ",", "c", ",", "a", ",", "c", ",", "d", ",", "25", ",", "96", ",", 
     "27", ",", "39", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "d", ",", "c", ",", "a", ",", "c", ",", "d", ",", "25", ",", "96", ",", 
     "27", ",", "39", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "d", ",", "c", ",", "a", ",", "c", ",", "d", ",", "25", ",", "96", ",", 
     "a", ",", "39", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "d", ",", "c", ",", "a", ",", "c", ",", "d", ",", "25", ",", "96", ",", 
     "a", ",", "39", ",", "d"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402290283877983`*^9},
 CellLabel->"Out[396]=",
 CellID->131944365,ExpressionUUID->"7bcd5390-f17c-409d-9796-a969554344dc"]
}, Open  ]],

Cell["\<\
We see that ReplacePart accepts 3 variables, not 2. What we did was to \
package the two variables {symbolToInsert, positionToReplace} into a list \
(single unit), and these lists were supplied to ReplacePart at every step. \
Plus, we used Apply[Sequence,...] idiom, which means - when package arrived, \
we can strip the wrapper to get the goodies.\
\>", "Text",
 CellChangeTimes->{{3.940229038031898*^9, 3.9402290595949993`*^9}},
 CellID->1385818851,ExpressionUUID->"b0439995-3be6-4870-a9f9-968650c22a4b"],

Cell["\<\
Example: running standard deviation for an increasing or running list of data\
\
\>", "ItemNumbered",
 CellChangeTimes->{3.940229073210733*^9},
 CellID->1047567488,ExpressionUUID->"94c4304d-70fc-4f49-9983-f1dfdb07e304"],

Cell["\<\
Consider the following problem: given a data sample of N points, for which \
the mean <mean> and the standard deviation <sigma> have been computed, we add \
one more data point. We would like to compute the mean and the standard \
deviation of the modified sample using only the old values of <mean> and \
<sigma>, the number of points <N> and the value of the new added data point. \
Obviously, if we do this, we save a lot since we will not need to use all our \
points and recompute these quantities from scratch. It is not difficult to \
show that this can be done according to the following formulas:\
\>", "Text",
 CellChangeTimes->{{3.940229082393733*^9, 3.940229091304408*^9}, {
  3.9402764180715513`*^9, 3.940276428031649*^9}},
 CellID->1395832710,ExpressionUUID->"eb000fdf-b9ce-4439-84d9-a531b6e5e62a"],

Cell[BoxData[{
 RowBox[{
  SubscriptBox["x", "NEW"], "=", 
  RowBox[{
   RowBox[{
    FractionBox["N", 
     RowBox[{"N", "+", "1"}]], 
    SubscriptBox["x", "OLD"]}], "+", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"N", "+", "1"}]], "Nest"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["\[Sigma]", "NEW"], "=", 
  SqrtBox[
   RowBox[{
    FractionBox["1", 
     RowBox[{"N", "+", "1"}]], 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox[
       SubscriptBox["N\[Sigma]", "OLD"], "2"], "+", 
      RowBox[{
       FractionBox["N", 
        RowBox[{"N", "+", "1"}]], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          SubscriptBox["x", "OLD"], "-", "new"}], ")"}], "2"]}]}], 
     ")"}]}]]}]}], "DisplayFormula",
 CellChangeTimes->{{3.940229106876478*^9, 3.940229174965665*^9}},
 CellID->245739517,ExpressionUUID->"a2235180-3c47-47c6-8796-a203f267d08a"],

Cell["Here are the implementations of the formula for the mean:", "Text",
 CellChangeTimes->{3.940229185591545*^9},
 CellID->818362533,ExpressionUUID->"73087a00-f610-45e0-9a6a-8158e1c6e9cf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "averIter", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"averIter", "[", 
    RowBox[{"prevaver_", ",", "n_", ",", "newel_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"n", "/", 
      RowBox[{"(", 
       RowBox[{"n", "+", "1"}], ")"}]}], "*", "prevaver"}], "+", 
    RowBox[{
     RowBox[{"1", "/", 
      RowBox[{"(", 
       RowBox[{"n", "+", "1"}], ")"}]}], "newel"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.94022918717997*^9, 3.940229215676334*^9}},
 CellLabel->"In[397]:=",
 CellID->1052393458,ExpressionUUID->"a386950b-4736-4137-9e24-b67b2ef902a0"],

Cell["\<\
To check it, the code below computes the average of increasing list of \
natural numbers from {1} to {1, 2, 3, 4, 5}:\
\>", "Text",
 CellChangeTimes->{{3.940229225055935*^9, 3.940229226787661*^9}, 
   3.9402764360986023`*^9},
 CellID->1975608927,ExpressionUUID->"4fa9814a-db52-4ceb-b895-e375d09258a2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "0"}], "}"}], ",", 
   RowBox[{"FoldList", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"averIter", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"n", "++"}], ",", "#2"}], "]"}], "&"}], ",", "0", ",", 
     RowBox[{"Range", "[", "5", "]"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940229228547206*^9, 3.940229245301888*^9}},
 CellLabel->"In[399]:=",
 CellID->1754964178,ExpressionUUID->"7f3c0817-d7e9-4aa2-ae52-702aaa8864ba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1", ",", 
   FractionBox["3", "2"], ",", "2", ",", 
   FractionBox["5", "2"], ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.940229245717989*^9},
 CellLabel->"Out[399]=",
 CellID->340135779,ExpressionUUID->"73ac56d9-fb4e-4d16-b55d-7cb65ccbe36a"]
}, Open  ]],

Cell["\<\
Below is the function for a standard deviation. Notice that there are many \
ways of implementing it, but we deliberately made it such that it accepts \
three arguments: the previous mean and previous sigma combined together in a \
list, the previous number of elements and the new element, and returns a list \
of new mean and new sigma.\
\>", "Text",
 CellChangeTimes->{{3.9402292575161543`*^9, 3.940229263256391*^9}},
 CellID->60569339,ExpressionUUID->"c60cb4fb-2f69-413c-b1cd-7247f0c3a429"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "sigmaIter", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"sigmaIter", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"prevaver_", ",", "prevsigma_"}], "}"}], ",", "nold_Integer", 
     ",", "newel_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"newaver", ",", "newsigma"}], "}"}], ",", 
     RowBox[{
      RowBox[{"newaver", "=", 
       RowBox[{"averIter", "[", 
        RowBox[{"prevaver", ",", "nold", ",", "newel"}], "]"}]}], ";", 
      RowBox[{"newsigma", "=", 
       RowBox[{"Sqrt", "[", 
        RowBox[{
         RowBox[{"1", "/", 
          RowBox[{"(", 
           RowBox[{"nold", "+", "1"}], ")"}]}], "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"nold", "*", 
             RowBox[{"prevsigma", "^", "2"}]}], ")"}], "+", 
           RowBox[{
            RowBox[{"nold", "/", 
             RowBox[{"(", 
              RowBox[{"nold", "+", "1"}], ")"}]}], 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"prevaver", "-", "newel"}], ")"}], "^", "2"}]}]}], 
          ")"}]}], "]"}]}], ";", 
      RowBox[{"{", 
       RowBox[{"newaver", ",", "newsigma"}], "}"}]}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940229264879031*^9, 3.940229348199532*^9}},
 CellLabel->"In[400]:=",
 CellID->691348153,ExpressionUUID->"f63bb5b5-aee6-4781-9cfc-000de677fbbc"],

Cell["\<\
This is how we would use FoldList to generate pairs of {mean, sigma} for an \
increasing list of values (we use the same natural numbers as a test example):\
\>", "Text",
 CellChangeTimes->{{3.940229357867222*^9, 3.940229359286127*^9}, 
   3.9402764361269073`*^9},
 CellID->1649600653,ExpressionUUID->"3a6558d0-acd7-42af-8ecb-9b06d91ca5a8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "0"}], "}"}], ",", 
   RowBox[{"Rest", "[", 
    RowBox[{"FoldList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"sigmaIter", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"n", "++"}], ",", "#2"}], "]"}], "&"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], ",", 
      RowBox[{"Range", "[", "5", "]"}]}], "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.94022936102954*^9, 3.940229385355932*^9}},
 CellLabel->"In[402]:=",
 CellID->1939611965,ExpressionUUID->"133ba5a4-c9ac-4a70-9f7f-3e761d9488bb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["3", "2"], ",", 
     FractionBox["1", "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     SqrtBox[
      FractionBox["2", "3"]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["5", "2"], ",", 
     FractionBox[
      SqrtBox["5"], "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", 
     SqrtBox["2"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402293857393837`*^9},
 CellLabel->"Out[402]=",
 CellID->1581701959,ExpressionUUID->"df422290-aa10-4c81-96b5-89a4f16ec5e7"]
}, Open  ]],

Cell[TextData[{
 "Notice the use of n++ construct. This is a type of procedural code \
embedding which we already met discussing the Map function (see section ",
 ButtonBox["5.2.2.9",
  BaseStyle->"Hyperlink",
  ButtonData->"5.2.2.9"],
 "). It is easy to check that this gives the same result as if we would use \
standard formulas:"
}], "Text",
 CellChangeTimes->{{3.940229396959424*^9, 3.9402294014177027`*^9}, {
  3.940229464024365*^9, 3.940229464034194*^9}},
 CellID->2112242347,ExpressionUUID->"f81d3897-2771-4312-a6a0-c488195d96a0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"CLear", "[", 
   RowBox[{"meanSt", ",", "sigmaSt"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"meanSt", "[", "x_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"Total", "[", "x", "]"}], "/", 
    RowBox[{"Length", "[", "x", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sigmaSt", "[", "x_List", "]"}], ":=", 
  RowBox[{"Sqrt", "[", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x", "-", 
        RowBox[{"meanSt", "[", "x", "]"}]}], ")"}], "^", "2"}], "/", 
     RowBox[{"Length", "[", "x", "]"}]}], "]"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940229467413306*^9, 3.9402295166104517`*^9}},
 CellLabel->"In[403]:=",
 CellID->651454170,ExpressionUUID->"822b56c6-007a-4964-9cfc-3ef9175096a2"],

Cell["\<\
Note that in the part for <sigma> I used the vectorized nature (Listability) \
of Subtract and Power functions. Check:\
\>", "Text",
 CellChangeTimes->{{3.940229526274885*^9, 3.940229557365366*^9}},
 CellID->192201034,ExpressionUUID->"b1b004d6-ef29-4745-a5df-915c273a3db6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"meanSt", "[", "#", "]"}], ",", 
      RowBox[{"sigmaSt", "[", "#", "]"}]}], "}"}], "&"}], ",", 
   RowBox[{"Range", "/@", 
    RowBox[{"Range", "[", "5", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940229559212056*^9, 3.940229587873351*^9}},
 CellLabel->"In[407]:=",
 CellID->980224353,ExpressionUUID->"7ec6cae2-c259-45d2-9883-d572fdb56683"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["3", "2"], ",", 
     FractionBox["1", "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     SqrtBox[
      FractionBox["2", "3"]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["5", "2"], ",", 
     FractionBox[
      SqrtBox["5"], "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", 
     SqrtBox["2"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.940229575432585*^9, 3.940229588201632*^9}},
 CellLabel->"Out[407]=",
 CellID->1532068578,ExpressionUUID->"cd6343df-b56c-45bc-9b77-81c539d92b2f"]
}, Open  ]],

Cell["We can now package this into a function:", "Text",
 CellChangeTimes->{3.9402295986543903`*^9},
 CellID->1147662916,ExpressionUUID->"2ec39046-4a7d-4e19-a0f9-8756f6a33985"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "meanAndSigmaAccumulative", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"meanAndSigmaAccumulative", "[", "x_List", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", "=", "0"}], "}"}], ",", 
     RowBox[{"Rest", "[", 
      RowBox[{"FoldList", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"sigmaIter", "[", 
          RowBox[{"#1", ",", 
           RowBox[{"n", "++"}], ",", "#2"}], "]"}], "&"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", "x"}], "]"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940229600568057*^9, 3.940229647242538*^9}},
 CellLabel->"In[408]:=",
 CellID->1083569557,ExpressionUUID->"3a1e7bb1-2cfe-4ef2-962d-8fdb82246618"],

Cell["We can see how much we win on large lists:", "Text",
 CellChangeTimes->{3.940229656809782*^9},
 CellID->1957571141,ExpressionUUID->"fa8561f0-8832-4e9a-a130-05c58daba59d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"ms1", "=", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"meanSt", "[", "#", "]"}], ",", 
          RowBox[{"sigmaSt", "[", "#", "]"}]}], "}"}], "&"}], ",", 
       RowBox[{"Range", "/@", 
        RowBox[{"Range", "[", "500", "]"}]}]}], "]"}], "//", 
     RowBox[{
      RowBox[{"Short", "[", "#", "]"}], "&"}]}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9402296622375*^9, 3.940229706685041*^9}},
 CellLabel->"In[410]:=",
 CellID->1535459009,ExpressionUUID->"b36fe0bb-aa48-4c38-9f97-1940f345dd7c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.082798`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["3", "2"], ",", 
        FractionBox["1", "2"]}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "497", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["501", "2"], ",", 
        FractionBox[
         SqrtBox["83333"], "2"]}], "}"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940229707182961*^9},
 CellLabel->"Out[410]=",
 CellID->1354761176,ExpressionUUID->"eda7afa0-c100-43a1-b3ea-043f2b1f051b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"ms2", "=", 
    RowBox[{
     RowBox[{"meanAndSigmaAccumulative", "[", 
      RowBox[{"Range", "[", "500", "]"}], "]"}], "//", 
     RowBox[{
      RowBox[{"Short", "[", "#", "]"}], "&"}]}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940229717654111*^9, 3.940229733769332*^9}},
 CellLabel->"In[411]:=",
 CellID->1849459538,ExpressionUUID->"e830d8c4-a748-473f-ba51-f86d408b90c0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.010362`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["3", "2"], ",", 
        FractionBox["1", "2"]}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "497", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["501", "2"], ",", 
        FractionBox[
         SqrtBox["83333"], "2"]}], "}"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940229739705056*^9},
 CellLabel->"Out[411]=",
 CellID->1210759403,ExpressionUUID->"fe90a8a5-ae87-479f-a79a-236cd3dc826e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ms1", "==", "ms2"}]], "Input",
 CellChangeTimes->{{3.940229743750333*^9, 3.9402297455091248`*^9}},
 CellLabel->"In[412]:=",
 CellID->1812820736,ExpressionUUID->"3e54a0da-c55c-464d-bca2-fcdc7f07a8c0"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.940229745900576*^9},
 CellLabel->"Out[412]=",
 CellID->1938488897,ExpressionUUID->"b0f52eb9-b9c1-42e8-a86c-f0f5fd74cff1"]
}, Open  ]],

Cell["\<\
The complexities are different so the difference will be larger for larger \
lists. Also, it is not as dramatic as in other languages because the second \
(general) implementation is helped by the fact that operations such as list \
subtraction or totalizing are Listable and highly optimized in Mathematica, \
whereas the one with FoldList necessarily breaks the process into pieces and \
thus looses this advantage.\
\>", "Text",
 CellChangeTimes->{
  3.940229759618825*^9, {3.940230083570168*^9, 3.940230088487812*^9}},
 CellID->708483242,ExpressionUUID->"8b8c6aa0-a587-4ea9-9e95-add58ad0be4d"],

Cell["\<\
Another situation where this may be useful is when, while one point is added \
to the sample, some other point is removed from it. This case can be treated \
in the same way (it is easy to derive the corresponding formulas), and will \
correspond to what we can really call the \[OpenCurlyDoubleQuote]running\
\[CloseCurlyDoubleQuote] standard deviation. The implementation of it is left \
as an exercise to the reader.\
\>", "Text",
 CellChangeTimes->{
  3.940229759618825*^9, {3.940230083570168*^9, 3.9402300971760197`*^9}},
 CellID->2038559444,ExpressionUUID->"21addbb7-1e67-4eab-80cc-ca3b8b14784d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Case study: Gram-Schmidt orthogonalization", "Subsubsection",
 CellChangeTimes->{
  3.9402301096793337`*^9, {3.940408586431162*^9, 3.940408587272488*^9}},
 CellID->1425896330,ExpressionUUID->"35bd02bc-adc7-493e-9283-af0894ea3ca5"],

Cell["A crash course on linear algebra and Gram-Schmidt procedure", \
"ItemNumbered",
 CellChangeTimes->{3.9402301180070753`*^9},
 CellID->1269601437,ExpressionUUID->"a2eb0e3d-dafe-4929-b6ef-1746b350d114"],

Cell["\<\
We are given a number of vectors of dimension <n> (there can be at most <n> \
linearly independent). Vectors will be represented as lists of length <n>. \
The dot product on these vectors is defined as a sum of products of \
individual components (we assume flat Euclidean metric). For example:\
\>", "Text",
 CellChangeTimes->{{3.940230126841855*^9, 3.940230131766337*^9}},
 CellID->793835067,ExpressionUUID->"6b4ab975-359e-4b58-a89f-2deed1855e52"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"vec1", "=", 
  RowBox[{"{", 
   RowBox[{"a1", ",", "b1", ",", "c1"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"vec2", "=", 
  RowBox[{"{", 
   RowBox[{"a2", ",", "b2", ",", "c2"}], "}"}]}]}], "Input",
 CellChangeTimes->{{3.940230133249153*^9, 3.9402301486968*^9}},
 CellLabel->"In[413]:=",
 CellID->1446568444,ExpressionUUID->"2f931a8e-9080-476d-876b-c3d7ecfd3f86"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a1", ",", "b1", ",", "c1"}], "}"}]], "Output",
 CellChangeTimes->{3.940230149097292*^9},
 CellLabel->"Out[413]=",
 CellID->35542212,ExpressionUUID->"31622cf2-cf65-4d55-802a-6d772dd0023c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a2", ",", "b2", ",", "c2"}], "}"}]], "Output",
 CellChangeTimes->{3.940230149117155*^9},
 CellLabel->"Out[414]=",
 CellID->357503218,ExpressionUUID->"ff7d8eef-16b5-437f-9959-0e108c4c8d82"]
}, Open  ]],

Cell["Then, the dot product:", "Text",
 CellChangeTimes->{{3.940230152013101*^9, 3.940230155917109*^9}},
 CellID->2044824267,ExpressionUUID->"d2a73219-597d-4122-8e0b-606954182fa7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dot", "[", 
  RowBox[{"vec1", ",", "vec2"}], "]"}]], "Input",
 CellChangeTimes->{{3.940230156743288*^9, 3.9402301604573517`*^9}},
 CellLabel->"In[415]:=",
 CellID->1632423012,ExpressionUUID->"46656b75-23bf-4cf9-b1ca-322c2eb0a7c1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1", " ", "a2"}], "+", 
  RowBox[{"b1", " ", "b2"}], "+", 
  RowBox[{"c1", " ", "c2"}]}]], "Output",
 CellChangeTimes->{3.9402301608029337`*^9},
 CellLabel->"Out[415]=",
 CellID->123086671,ExpressionUUID->"0c4c01e6-6cc3-40e5-8831-9fc5aacc8ebc"]
}, Open  ]],

Cell["\<\
where we used a built-in function Dot. Equivalently, we may write (dot is a \
shorthand notation for Dot)\
\>", "Text",
 CellChangeTimes->{3.940230172425755*^9},
 CellID->690927436,ExpressionUUID->"c84bf162-25f4-4287-88f6-c686b36c2066"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vec1", ".", "vec2"}]], "Input",
 CellChangeTimes->{{3.940230174559495*^9, 3.940230176777341*^9}},
 CellLabel->"In[416]:=",
 CellID->1500809862,ExpressionUUID->"eeca1130-6b7c-4bee-9a73-4fd2c1087c4e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1", " ", "a2"}], "+", 
  RowBox[{"b1", " ", "b2"}], "+", 
  RowBox[{"c1", " ", "c2"}]}]], "Output",
 CellChangeTimes->{3.9402301771290894`*^9},
 CellLabel->"Out[416]=",
 CellID->1468551419,ExpressionUUID->"4e3e626f-2401-4975-b99a-786c01ba97d5"]
}, Open  ]],

Cell["\<\
A norm of the vector is defined as a square root of the dot product of vector \
with itself. For instance, the norm of <vec1> will be\
\>", "Text",
 CellChangeTimes->{{3.940230187204515*^9, 3.940230189447341*^9}},
 CellID->914144162,ExpressionUUID->"627e0340-dbf8-41d9-aeff-55ddaaff1368"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sqrt", "[", 
  RowBox[{"vec1", ".", "vec1"}], "]"}]], "Input",
 CellChangeTimes->{{3.940230191695602*^9, 3.940230195153908*^9}, {
  3.940230231503552*^9, 3.940230231575021*^9}},
 CellLabel->"In[419]:=",
 CellID->1686209487,ExpressionUUID->"cffb5fb7-98d5-42f6-b7be-c6c95ced10ad"],

Cell[BoxData[
 SqrtBox[
  RowBox[{
   SuperscriptBox["a1", "2"], "+", 
   SuperscriptBox["b1", "2"], "+", 
   SuperscriptBox["c1", "2"]}]]], "Output",
 CellChangeTimes->{3.940230195520933*^9, 3.940230232011841*^9},
 CellLabel->"Out[419]=",
 CellID->1469997240,ExpressionUUID->"aa0349ff-5fce-4502-ae04-babb9957aa8b"]
}, Open  ]],

Cell["\<\
Geometrically the norm of the vector is its length. The above result may be \
considered as a generalization of a Pythagorean theorem to n-dimensional \
space (n=3 in this case). The vector is normalized when its norm is 1. Any \
vector can be normalized by dividing the vector by its norm. For instance,\
\>", "Text",
 CellChangeTimes->{{3.940230203664775*^9, 3.9402302084416857`*^9}},
 CellID->1647511851,ExpressionUUID->"e877943f-5f99-45fa-b77b-bc5d91c383c0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vec1", "/", 
  RowBox[{"Sqrt", "[", 
   RowBox[{"vec1", ".", "vec1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940230211497582*^9, 3.9402302351621237`*^9}},
 CellLabel->"In[420]:=",
 CellID->1176099041,ExpressionUUID->"820cb757-17d8-4311-88f1-42b2baa2d08a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["a1", 
    SqrtBox[
     RowBox[{
      SuperscriptBox["a1", "2"], "+", 
      SuperscriptBox["b1", "2"], "+", 
      SuperscriptBox["c1", "2"]}]]], ",", 
   FractionBox["b1", 
    SqrtBox[
     RowBox[{
      SuperscriptBox["a1", "2"], "+", 
      SuperscriptBox["b1", "2"], "+", 
      SuperscriptBox["c1", "2"]}]]], ",", 
   FractionBox["c1", 
    SqrtBox[
     RowBox[{
      SuperscriptBox["a1", "2"], "+", 
      SuperscriptBox["b1", "2"], "+", 
      SuperscriptBox["c1", "2"]}]]]}], "}"}]], "Output",
 CellChangeTimes->{{3.940230219053265*^9, 3.940230235467189*^9}},
 CellLabel->"Out[420]=",
 CellID->1234671127,ExpressionUUID->"7849f6e4-7dbf-4911-b8ce-92d7bc4683f9"]
}, Open  ]],

Cell["is normalized.", "Text",
 CellChangeTimes->{{3.9402302444074507`*^9, 3.94023024630789*^9}},
 CellID->2130634175,ExpressionUUID->"2379b875-09cc-40b5-a724-bdb933ca27f9"],

Cell["\<\
A linear combination of some number of vectors is a sum of these vectors \
multiplied by some coefficients - it is another vector. For instance, vector \
<vec3>\
\>", "Text",
 CellChangeTimes->{{3.9402302444074507`*^9, 3.940230250869877*^9}},
 CellID->602635041,ExpressionUUID->"e65b56ed-38ce-4c37-a473-de7d96aae6bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vec3", "=", 
  RowBox[{
   RowBox[{"\[Alpha]", "*", "vec1"}], "+", 
   RowBox[{"\[Beta]", "*", "vec2"}]}]}]], "Input",
 CellChangeTimes->{{3.940230253836568*^9, 3.940230265356146*^9}},
 CellLabel->"In[421]:=",
 CellID->475122406,ExpressionUUID->"03efbc2e-495e-4bfa-86a5-e4c11c716732"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"a1", " ", "\[Alpha]"}], "+", 
    RowBox[{"a2", " ", "\[Beta]"}]}], ",", 
   RowBox[{
    RowBox[{"b1", " ", "\[Alpha]"}], "+", 
    RowBox[{"b2", " ", "\[Beta]"}]}], ",", 
   RowBox[{
    RowBox[{"c1", " ", "\[Alpha]"}], "+", 
    RowBox[{"c2", " ", "\[Beta]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.940230265786997*^9},
 CellLabel->"Out[421]=",
 CellID->537861553,ExpressionUUID->"c92b3135-0ee2-4073-9790-5bf9ea98a1e2"]
}, Open  ]],

Cell["\<\
is a linear combination of <vec1> and <vec2> (a and b are some parameters). \
One may consider linear combinations of any number of vectors.\
\>", "Text",
 CellChangeTimes->{{3.94023028711864*^9, 3.940230320505856*^9}},
 CellID->1080451048,ExpressionUUID->"c42cd898-ad11-4d1f-ac25-a03cdf05507b"],

Cell["\<\
A set of vectors is said to be linearly independent if none of them can be \
represented as a linear combination of the others with some coefficients \
non-zero.\
\>", "Text",
 CellChangeTimes->{{3.94023028711864*^9, 3.9402303301328*^9}},
 CellID->1507595879,ExpressionUUID->"4260c5fb-ff56-4ba4-88f8-2eae4bc2ebcd"],

Cell["\<\
Any linearly-independent set of vectors defines a basis in a linear space, \
which is said to be spanned on these vectors. This means that any vector in \
this space can be written as a linear combination of the basis vectors, and \
vice versa, any vector which is a linear combination of these, belongs to \
this space. The dimension of this space is equal to a number of the vectors \
in the basis. To form a basis in the linear space
of dimension <n>, we then need <n> vectors.\
\>", "Text",
 CellChangeTimes->{{3.94023028711864*^9, 3.940230339094905*^9}},
 CellID->1264440393,ExpressionUUID->"a33440d5-23be-4807-9b5d-223ecdac147a"],

Cell["\<\
Two vectors are orthogonal when their dot product vanishes. The problem of \
orthogonalization of a set vectors consists of finding linear combinations of \
these vectors which are mutually orthogonal. Most of the time, one is \
interested in finding an orthonormal basis in a given linear space. In other \
words, given a number of (not necessarily orthogonal) linearly-independent \
vectors, we would like to find linear combinations of these vectors which \
will be mutually orthogonal.\
\>", "Text",
 CellChangeTimes->{{3.94023028711864*^9, 3.9402303533917017`*^9}},
 CellID->1359118639,ExpressionUUID->"9db8c30c-6f7f-43c6-9760-e5b92e0c5472"],

Cell["\<\
The Gram-Schmidt orthogonalization procedure consists of the following steps:\
\
\>", "Text",
 CellChangeTimes->{{3.94023028711864*^9, 3.9402303574831667`*^9}},
 CellID->786114875,ExpressionUUID->"e07248fe-e90e-4ca5-a2e0-ee595418c237"],

Cell["\<\
1. Pick any vector from the initial set, call it v1.\[LineSeparator]2. Pick \
some other vector, call it v2.
3. Construct a new vector as v2New = v2 - (v2.v1)/(v1.v1) *v1; this new \
vector will be orthogonal to v1, as is easy to verify.
4. Pick another vector v3, and construct a new one as v3New = v3 - \
(v3.v1)/(v1.v1) *v1 - (v3.v2New)/(v2New.v2New)*v2New; this one will be \
orthogonal to both v1 and v2New (which is also easy to verify, remembering \
that v2New is orthogonal to v1).
5. The procedure goes on, until all the resulting vectors are mutually \
orthogonal.\
\>", "Text",
 CellChangeTimes->{{3.94023028711864*^9, 3.940230407312977*^9}},
 CellID->1181808683,ExpressionUUID->"364715ad-7702-4ae0-90cb-55bef8fe70cd"],

Cell["\<\
This description may suggest that depending on the sequence in which we \
orthogonalize the vectors, we may get different sets of final orthogonal \
basis vectors. Although this is not obvious, all these sets will be \
equivalent (after the vectors are normalized) up to relabeling which vector \
is the first, second etc.\
\>", "Text",
 CellChangeTimes->{{3.94023028711864*^9, 3.940230413827553*^9}},
 CellID->2045621401,ExpressionUUID->"7cea058d-7ccf-4fe4-8d3d-11aff345fb4e"],

Cell["\<\
We will now implement a one step of this procedure. Assume that we have some \
number <m> of orthogonal vectors of length <n> already stored in the m x n \
matrix <vecmat>, and a new vector <vec> which we want to make orthogonal to \
those in the <vecmat>.\
\>", "Text",
 CellChangeTimes->{{3.94023028711864*^9, 3.940230419411159*^9}},
 CellID->88512561,ExpressionUUID->"263fa045-9fde-42a2-a100-beda6c21882d"],

Cell["Implementing a single step of the Gram-Schmidt procedure", \
"ItemNumbered",
 CellChangeTimes->{3.940230439501643*^9},
 CellID->680888734,ExpressionUUID->"2c3ee0b1-5b71-4181-a83e-a30551e6e91d"],

Cell["\<\
Here is the code for a single step of the Gram-Schmidt procedure:\
\>", "Text",
 CellChangeTimes->{3.940230446491934*^9},
 CellID->1904081122,ExpressionUUID->"05ad3b38-4390-4d4b-9672-57f8bd5fdd5b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "oneStepOrtogonalize", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"oneStepOrtogonalize", "[", 
    RowBox[{"vec_List", ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", "vec"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"oneStepOrtogonalize", "[", 
    RowBox[{"vec_List", ",", 
     RowBox[{"vecmat_", "?", "MatrixQ"}]}], "]"}], ":=", 
   RowBox[{"Fold", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"#1", "-", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"vec", ".", "#2"}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{"#2", ".", "#2"}], ")"}]}], "*", "#2"}]}], ")"}], "&"}], 
     ",", "vec", ",", "vecmat"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940230448599804*^9, 3.940230512558508*^9}},
 CellLabel->"In[422]:=",
 CellID->500445885,ExpressionUUID->"f35c44e1-c668-4ac4-a662-b769663b61e6"],

Cell["\<\
The first rule is added to include the case of the first vector - then it has \
to be simply returned back.\
\>", "Text",
 CellChangeTimes->{{3.9402305212368*^9, 3.9402305236253853`*^9}},
 CellID->1638904331,ExpressionUUID->"bdac3004-b3e7-4970-9492-9128fe160dc0"],

Cell["\<\
As a simple example, consider the matrix of vectors being vecmat = \
{1,0,0},{0,0,1}}, and the vector to be made orthogonal to these, vec = \
{1,1,2}.\
\>", "Text",
 CellChangeTimes->{{3.9402305212368*^9, 3.940230527288867*^9}},
 CellID->154812918,ExpressionUUID->"8c716554-fc16-4e5a-a56e-5ccc882d2626"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"oneStepOrtogonalize", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940230531657281*^9, 3.940230540337788*^9}},
 CellLabel->"In[425]:=",
 CellID->670776634,ExpressionUUID->"9a28b5eb-50b0-43b4-98ba-5881bb2ffe11"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.94023054074336*^9},
 CellLabel->"Out[425]=",
 CellID->1678500451,ExpressionUUID->"9495018a-853b-4901-8ca8-575a66a89de1"]
}, Open  ]],

Cell["\<\
The result is as we would expect - the missing basis vector. The way the code \
works is that the vector matrix is considered a list of second arguments to \
the function being Fold-ed. So, these second arguments will be vectors in \
this matrix. At each step, the initial vector gets transformed to be \
orthogonal to the vector supplied by Fold from the vector matrix at that \
step. When Fold is finished, the resulting vector is orthogonal to all of the \
vectors in the matrix.\
\>", "Text",
 CellChangeTimes->{{3.940230550821909*^9, 3.940230557604807*^9}, 
   3.940740633020321*^9},
 CellID->1211892965,ExpressionUUID->"e7ded122-e7e9-49b7-ab4f-1d32eda9e4e6"],

Cell["Orthogonalization - the complete solution", "ItemNumbered",
 CellChangeTimes->{3.940230568590445*^9},
 CellID->241303901,ExpressionUUID->"c0e29417-97be-47a4-a5f6-847d2ec58b13"],

Cell["\<\
Now that we worked out a single step, we have to get a complete solution, \
which will orthogonalize a given number of vectors.\
\>", "Text",
 CellChangeTimes->{{3.9402305766568527`*^9, 3.94023058066844*^9}},
 CellID->1145538571,ExpressionUUID->"fe4d5065-10d3-47d9-a94e-2a84a73445c7"],

Cell["Say, our initial vectors are", "Text",
 CellChangeTimes->{{3.9402305766568527`*^9, 3.940230579490391*^9}},
 CellID->1530188566,ExpressionUUID->"6ce3a3b4-21fa-4e53-8b88-5a0d02067dac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"startVectors", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "2", ",", "7"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "5", ",", "1"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.940230582521483*^9, 3.940230593009351*^9}},
 CellLabel->"In[426]:=",
 CellID->729945531,ExpressionUUID->"58375201-13c0-470c-9e44-757252f5e592"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940230594090712*^9},
 CellLabel->"Out[426]=",
 CellID->536713853,ExpressionUUID->"9d520310-befc-44a2-a764-365e5749231b"]
}, Open  ]],

Cell["The solution is immediate with another Fold:", "Text",
 CellChangeTimes->{3.940230603084712*^9},
 CellID->1118409971,ExpressionUUID->"5197dece-2f52-4bd3-90cc-e3ac1cf19f85"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"Fold", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Append", "[", 
      RowBox[{"#1", ",", 
       RowBox[{"oneStepOrtogonalize", "[", 
        RowBox[{"#2", ",", "#1"}], "]"}]}], "]"}], "&"}], ",", 
    RowBox[{"{", "}"}], ",", "startVectors"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940230605049572*^9, 3.940230627801158*^9}},
 CellLabel->"In[427]:=",
 CellID->1766525848,ExpressionUUID->"7754e375-9587-4b5e-be36-14f70b55911a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["20", "7"], ",", 
     RowBox[{"-", 
      FractionBox["16", "7"]}], ",", 
     FractionBox["4", "7"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["7", "3"], ",", 
     FractionBox["7", "3"], ",", 
     RowBox[{"-", 
      FractionBox["7", "3"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402306282299337`*^9},
 CellLabel->"Out[427]=",
 CellID->470922666,ExpressionUUID->"016dd323-ffc6-4567-b9a7-d203b3d8b043"]
}, Open  ]],

Cell["\<\
What happens here is that a newly orthogonalized vector is appended to the \
current (initially empty) vector matrix. The new vector matrix is then used \
for orthogonalization of the next vector, etc. We can check that all the \
resulting vectors are mutually orthogonal:\
\>", "Text",
 CellChangeTimes->{{3.940230639572392*^9, 3.940230649658264*^9}},
 CellID->1320008267,ExpressionUUID->"677cb47d-98f3-466c-b526-3a647a3e5def"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Outer", "[", 
  RowBox[{"Dot", ",", "result", ",", "result", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.940230663714826*^9, 3.9402306705703173`*^9}},
 CellLabel->"In[428]:=",
 CellID->1655312731,ExpressionUUID->"8070dcde-7833-4f55-b9eb-938e4902905b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"14", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     FractionBox["96", "7"], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     FractionBox["49", "3"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940230670935091*^9},
 CellLabel->"Out[428]=",
 CellID->1741626566,ExpressionUUID->"a1d1d831-c30d-49d7-a2b1-06f67b492e0d"]
}, Open  ]],

Cell[TextData[{
 "Notice the use of Outer here - we generated at once all the dot products. \
Since we wanted the vectors inside the matrix <result> to be treated as \
single units (to be plugged into Dot), we used the more general form of Outer \
(See section ",
 ButtonBox["5.3.4.8",
  BaseStyle->"Hyperlink",
  ButtonData->"5.3.4.8"],
 "). The numbers on the diagonal are the norms squared of the three vectors. \
All off-diagonal elements are zero as they should be for orthogonal vectors."
}], "Text",
 CellChangeTimes->{{3.940230678925824*^9, 3.940230685852886*^9}, {
  3.940230728520705*^9, 3.940230728530984*^9}},
 CellID->1315586152,ExpressionUUID->"03846898-4a7a-4a14-8814-5faf0d1e3af4"],

Cell["Now, we can package the code into a function:", "Text",
 CellChangeTimes->{{3.940230678925824*^9, 3.940230684808251*^9}},
 CellID->461023138,ExpressionUUID->"eea468f8-6416-43d2-8078-bbe75fe9705f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "GSOrthogonalize", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GSOrthogonalize", "[", 
    RowBox[{"startvecs_", "?", "MatrixQ"}], "]"}], ":=", 
   RowBox[{"Fold", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Append", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"oneStepOrtogonalize", "[", 
         RowBox[{"#2", ",", "#1"}], "]"}]}], "]"}], "&"}], ",", 
     RowBox[{"{", "}"}], ",", "startvecs"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9402307325250807`*^9, 3.940230775973968*^9}},
 CellLabel->"In[429]:=",
 CellID->1007886478,ExpressionUUID->"13477901-65ee-43eb-9ac4-788af7e650c9"],

Cell["\<\
And for completeness, we present once again the code for oneStepOrtogonalize:\
\
\>", "Text",
 CellChangeTimes->{3.940230787211693*^9},
 CellID->1729417779,ExpressionUUID->"945cc907-0f6d-4520-be0f-d27c809864b9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "oneStepOrtogonalize", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"oneStepOrtogonalize", "[", 
    RowBox[{"vec_List", ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", "vec"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"oneStepOrtogonalize", "[", 
    RowBox[{"vec_List", ",", 
     RowBox[{"vecmat_", "?", "MatrixQ"}]}], "]"}], ":=", 
   RowBox[{"Fold", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"#1", "-", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"vec", ".", "#2"}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{"#2", ".", "#2"}], ")"}]}], "*", "#2"}]}], ")"}], "&"}], 
     ",", "vec", ",", "vecmat"}], "]"}]}], ";"}]}], "Input",
 CellLabel->"In[431]:=",
 CellID->133449508,ExpressionUUID->"75dda2e1-ffa5-480e-8b95-371e81384d30"],

Cell["\<\
This is then our final implementation which solves the problem of \
Gram-Schmidt orthogonalization. It is concise, transparent and efficient \
(well, the purists will insist on eliminating Append. However, for large \
number of vectors, the cost of Append will be negligible w.r.t. the cost of \
<oneStepOrtogonalize>).\
\>", "Text",
 CellChangeTimes->{{3.9402308447943897`*^9, 3.940230850525786*^9}},
 CellID->1050352858,ExpressionUUID->"f0da2810-9a27-46c2-b309-5e21d4ec63aa"],

Cell["\<\
Note that the number of vectors to be orthogonalized may be smaller than the \
size of the vectors. But what happens if we try to orthogonalize more vectors \
than the size of the vector (or, dimension of the linear space)? For instance:\
\>", "Text",
 CellChangeTimes->{{3.9402308447943897`*^9, 3.9402308565416603`*^9}},
 CellID->643415047,ExpressionUUID->"b924e5fe-ddc7-4dc6-97cb-85c9231e935c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GSOrthogonalize", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "7"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.940230858029127*^9, 3.940230867357355*^9}},
 CellLabel->"In[434]:=",
 CellID->257517222,ExpressionUUID->"ccf264d7-3de0-45bf-a930-8328d1c1d1bb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["14", "5"], ",", 
     RowBox[{"-", 
      FractionBox["7", "5"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940230868496272*^9},
 CellLabel->"Out[434]=",
 CellID->168217524,ExpressionUUID->"d0abecbe-270a-42b6-b4d5-c1dfe43fcb5c"]
}, Open  ]],

Cell["\<\
We see that the last vector is zero. This is as it should be - there can not \
be more linearly independent vectors than the length of the vector. Notice \
that this case was an automatic consequence of our procedure and did not \
require any special treatment.\
\>", "Text",
 CellChangeTimes->{{3.940230878602027*^9, 3.940230882281376*^9}},
 CellID->1143446416,ExpressionUUID->"2a1dc905-c1c2-4bf6-a841-2a6475d7dc70"],

Cell["Adding normalization", "ItemNumbered",
 CellChangeTimes->{3.9402308923038883`*^9},
 CellID->1407795088,ExpressionUUID->"14784918-bc2f-44b0-a31f-f3105202cd45"],

Cell["\<\
Now we would like to make the resulting vectors not only orthogonal, but \
orthonormal (orthonormalize - make them all be also normalized).\
\>", "Text",
 CellChangeTimes->{{3.9402308994267273`*^9, 3.94023090551283*^9}},
 CellID->1984705017,ExpressionUUID->"53d899a2-a5a3-4881-b49d-34382c90620f"],

Cell["To do this, first define a function to normalize a vector:", "Text",
 CellChangeTimes->{{3.9402308994267273`*^9, 3.940230902559375*^9}},
 CellID->1881585787,ExpressionUUID->"084d4025-eb98-4bd9-b6bc-595c8753157c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "normalize", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"normalize", "[", "vec_List", "]"}], ":=", 
   RowBox[{"vec", "/", 
    RowBox[{"Sqrt", "[", 
     RowBox[{"Dot", "[", 
      RowBox[{"vec", ",", "vec"}], "]"}], "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940230908096764*^9, 3.94023092453689*^9}},
 CellLabel->"In[435]:=",
 CellID->1339168059,ExpressionUUID->"9495965d-cf10-45d0-8bd5-e216f8c33234"],

Cell["And now define GSOrthoNormalize", "Text",
 CellChangeTimes->{3.9402309334515743`*^9},
 CellID->1602617461,ExpressionUUID->"8fa6e543-9091-412c-8261-72e10bbda554"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "GSOrthoNormalize", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GSOrthoNormalize", "[", 
    RowBox[{"startvecs_", "?", "MatrixQ"}], "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{"normalize", ",", 
     RowBox[{"GSOrthogonalize", "[", "startvecs", "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940230937656493*^9, 3.940230996550555*^9}},
 CellLabel->"In[437]:=",
 CellID->127897657,ExpressionUUID->"ad22e3a0-b3a3-4405-8144-5532ae6b1233"],

Cell["Now check:", "Text",
 CellChangeTimes->{{3.940230999447571*^9, 3.9402310010848913`*^9}},
 CellID->381423583,ExpressionUUID->"44ede6cf-bef3-496f-a045-75d63e5915ba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"newresult", "=", 
  RowBox[{"GSOrthoNormalize", "[", "startVectors", "]"}]}]], "Input",
 CellChangeTimes->{{3.940231002409981*^9, 3.940231009848112*^9}},
 CellLabel->"In[439]:=",
 CellID->841214805,ExpressionUUID->"82cf9f35-7806-4a53-bc68-de0c8648991d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", 
      SqrtBox["14"]], ",", 
     SqrtBox[
      FractionBox["2", "7"]], ",", 
     FractionBox["3", 
      SqrtBox["14"]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["5", 
      SqrtBox["42"]], ",", 
     RowBox[{
      RowBox[{"-", "2"}], " ", 
      SqrtBox[
       FractionBox["2", "21"]]}], ",", 
     FractionBox["1", 
      SqrtBox["42"]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", 
      SqrtBox["3"]], ",", 
     FractionBox["1", 
      SqrtBox["3"]], ",", 
     RowBox[{"-", 
      FractionBox["1", 
       SqrtBox["3"]]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940231010206463*^9},
 CellLabel->"Out[439]=",
 CellID->1654340208,ExpressionUUID->"924a2f5a-a64c-4bbd-892d-432029cdb729"]
}, Open  ]],

Cell["\<\
What we did is just to Map <normalize> on the resulting vectors once they are \
obtained. It is easy to check that now all the vectors are orthonormal:\
\>", "Text",
 CellChangeTimes->{{3.9402318989992437`*^9, 3.940231906321673*^9}},
 CellID->1025098147,ExpressionUUID->"1c0bc7a1-6300-49b6-8a1c-c40a3988516e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Outer", "[", 
   RowBox[{"Dot", ",", "newresult", ",", "newresult", ",", "1"}], "]"}], "//",
   "Simplify"}]], "Input",
 CellChangeTimes->{{3.940231910283771*^9, 3.9402319192591543`*^9}},
 CellLabel->"In[440]:=",
 CellID->1904541239,ExpressionUUID->"c980ebaf-9886-4661-83ab-55a0d0d2fd02"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940231919620137*^9},
 CellLabel->"Out[440]=",
 CellID->228731903,ExpressionUUID->"af6c2a3b-d83a-4e2b-8287-db46ec326539"]
}, Open  ]],

Cell["Application: generating random orthogonal matrices", "ItemNumbered",
 CellChangeTimes->{3.940231932152017*^9},
 CellID->301365591,ExpressionUUID->"811c0ae3-ca99-402f-b72c-c2dc2bd1aef0"],

Cell["\<\
As an application of the Gram-Schmidt method, we may consider a generation of \
random orthogonal matrices. The square matrix is called orthogonal if all the \
columns (rows) in it are normalized and mutually orthogonal. These matrices \
have important applications in various branches of science.\
\>", "Text",
 CellChangeTimes->{{3.940231942321903*^9, 3.940231948752034*^9}},
 CellID->563925098,ExpressionUUID->"e133efd8-e787-47e6-884f-6671cfb42237"],

Cell["\<\
Basically, the procedure to generate a random orthogonal matrix is very \
simple: generate a plain random matrix, check that it has a non-zero \
determinant (if this is not so, it means that one of the columns - or rows - \
can be represented as a linear combination of the others. We will not \
consider such cases), and then simply apply our GSOrthoNormalize function to \
it. The result will be a random orthogonal matrix (this is of course an \
oversimplification. To unambiguously specify what we mean by a random matrix, \
we have to specify the probability distributions for all its elements. So, \
what we will generate here will be <some> random orthogonal matrix.\
\>", "Text",
 CellChangeTimes->{{3.940231942321903*^9, 3.940231966001857*^9}},
 CellID->2025796528,ExpressionUUID->"489db1e9-9241-458a-a3f7-92f0801e1b17"],

Cell["\<\
More specifically, the rows of this matrix are eigenvectors of the underlying \
one we start with, and for the latter one we will use the uniform [0,1] \
distribution for all matrix elements).\
\>", "Text",
 CellChangeTimes->{{3.940231942321903*^9, 3.940231970244121*^9}},
 CellID->370356166,ExpressionUUID->"d1a964f5-008c-43e5-ac83-19d4f2625eca"],

Cell["So, let us start with the example:", "Text",
 CellChangeTimes->{{3.940231942321903*^9, 3.940231975034162*^9}},
 CellID->1657913497,ExpressionUUID->"db54a52c-ae4c-4de0-bed3-f33636d0ddd9"],

Cell["First generate a 3x3 random matrix", "Text",
 CellChangeTimes->{{3.940231942321903*^9, 3.940231967974532*^9}},
 CellID->393379480,ExpressionUUID->"086483ce-e6dd-4910-8278-59f146638fce"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"matrix", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Random", "[", "]"}], ",", 
    RowBox[{"{", "3", "}"}], ",", 
    RowBox[{"{", "3", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940231976853228*^9, 3.940231986404695*^9}},
 CellLabel->"In[441]:=",
 CellID->854650990,ExpressionUUID->"f3a4cbb7-3f04-4447-90f0-45acd8d716ea"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0.578771261379861`", ",", "0.26564876314247016`", ",", 
     "0.7920300622934682`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.7880917727042762`", ",", "0.35917900726017393`", ",", 
     "0.6024965935881372`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.3736131733381548`", ",", "0.30805472250888494`", ",", 
     "0.8474539602099745`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402319867403593`*^9},
 CellLabel->"Out[441]=",
 CellID->1446727156,ExpressionUUID->"4d3cb2d0-35d7-45b5-ad1b-7bf30cd250fa"]
}, Open  ]],

Cell["Check the determinant", "Text",
 CellChangeTimes->{{3.940231993863493*^9, 3.940231998270008*^9}},
 CellID->1333459558,ExpressionUUID->"ba9eae9d-ae7b-41b3-9121-9e9c7ff8d4ee"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Det", "[", "matrix", "]"}]], "Input",
 CellChangeTimes->{{3.940231999366577*^9, 3.940232001825091*^9}},
 CellLabel->"In[442]:=",
 CellID->1743318911,ExpressionUUID->"f5bae047-91d8-4253-8bea-f89add78f13e"],

Cell[BoxData["0.03712797588050216`"], "Output",
 CellChangeTimes->{3.940232002161748*^9},
 CellLabel->"Out[442]=",
 CellID->234241867,ExpressionUUID->"a1c9c102-2cba-4f13-9c79-6bf5aebd884e"]
}, Open  ]],

Cell["\<\
Apply our function (if the determinant is zero with your run, please rerun \
the above until it is nonzero):\
\>", "Text",
 CellChangeTimes->{3.940232021133542*^9},
 CellID->565533718,ExpressionUUID->"b824d24b-61d2-4f8d-a92e-0a3f9e636f64"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GSOrthoNormalize", "[", "matrix", "]"}]], "Input",
 CellChangeTimes->{{3.940232023848236*^9, 3.9402320273339853`*^9}},
 CellLabel->"In[443]:=",
 CellID->829145844,ExpressionUUID->"19d14a4f-6e70-483a-9090-07b8234cb28b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0.5694909769798494`", ",", "0.26138922878584736`", ",", 
     "0.7793302882688935`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7115089454213117`", ",", "0.31801645801811457`", ",", 
     RowBox[{"-", "0.6265944087007682`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.4116248871533287`"}], ",", "0.9113403335221983`", ",", 
     RowBox[{"-", "0.004873271145498275`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.94023202760474*^9},
 CellLabel->"Out[443]=",
 CellID->509145687,ExpressionUUID->"e157fb0a-b271-480f-84b6-a3978c34d816"]
}, Open  ]],

Cell["Now we will package this into another function:", "Text",
 CellChangeTimes->{3.9402320389945793`*^9},
 CellID->1636711761,ExpressionUUID->"709bdfff-2ad5-44e0-87d4-f4d8c0cded7a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "randomOrthogonal", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"randomOrthogonal", "[", 
    RowBox[{"n_Integer", "?", "Positive"}], "]"}], ":=", 
   RowBox[{"GSOrthoNormalize", "[", 
    RowBox[{"NestWhile", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Array", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Random", "[", "]"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "n"}], "}"}]}], "]"}], "&"}], ",", 
      RowBox[{"{", 
       RowBox[{"{", "0", "}"}], "}"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"Det", "[", "#", "]"}], "===", "0"}], "&"}]}], "]"}], "]"}]}],
   ";"}]}], "Input",
 CellChangeTimes->{{3.940232041100806*^9, 3.940232091268566*^9}},
 CellLabel->"In[444]:=",
 CellID->1867981221,ExpressionUUID->"7c6f8097-1c6b-4f00-9b4b-f94b922d71c1"],

Cell["\<\
Here I used Array instead of Table, since it is slightly faster. But one \
could use Table as well. The use of NestWhile guarantees that the result of \
it will have a non-zero determinant. Check:\
\>", "Text",
 CellChangeTimes->{{3.940232101009939*^9, 3.940232103104548*^9}},
 CellID->359508540,ExpressionUUID->"e4e5c7a3-ff31-4859-9d34-aa35347e6edc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randomOrthogonal", "[", "3", "]"}]], "Input",
 CellChangeTimes->{{3.940232104862315*^9, 3.940232111233428*^9}},
 CellLabel->"In[446]:=",
 CellID->623049933,ExpressionUUID->"b57f4dd5-ace0-4eb7-94c5-2f4776a1c739"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0.5231735002422875`", ",", "0.8251940107555892`", ",", 
     "0.2129420889757068`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.4288510629780599`"}], ",", "0.03899226565552158`", ",", 
     "0.9025333063115386`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7364619843731386`", ",", 
     RowBox[{"-", "0.563501950158253`"}], ",", "0.37428504878103847`"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940232111676984*^9},
 CellLabel->"Out[446]=",
 CellID->317405489,ExpressionUUID->"f96c9473-8e52-484a-b373-d496a4bb3387"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randomOrthogonal", "[", "5", "]"}]], "Input",
 CellChangeTimes->{{3.940232117222105*^9, 3.940232122439489*^9}},
 CellLabel->"In[447]:=",
 CellID->2077819456,ExpressionUUID->"10a41a47-3fc0-4563-b631-a68b2c230454"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0.533456807983659`", ",", "0.6812809078394948`", ",", 
     "0.11951363178640691`", ",", "0.12932138707606555`", ",", 
     "0.46933210980203`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.03500087621833543`", ",", 
     RowBox[{"-", "0.4701715041653572`"}], ",", "0.700089057301288`", ",", 
     "0.4034746044295709`", ",", "0.35326654350819775`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.2440591826768786`"}], ",", "0.17525642368179736`", ",", 
     RowBox[{"-", "0.3109495979437732`"}], ",", "0.8902516505225517`", ",", 
     RowBox[{"-", "0.14311760055925496`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.5344856414152225`", ",", "0.03524275525792549`", ",", 
     "0.31500720054710196`", ",", "0.125282406826018`", ",", 
     RowBox[{"-", "0.7734066391402045`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.6074199429981565`"}], ",", "0.5318253617912325`", ",", 
     "0.5474236154992801`", ",", 
     RowBox[{"-", "0.11063697260354313`"}], ",", 
     RowBox[{"-", "0.19049840653023878`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940232122848934*^9},
 CellLabel->"Out[447]=",
 CellID->1908988011,ExpressionUUID->"7db78a9e-2b4b-4e1a-846e-41c1bdb7120a"]
}, Open  ]],

Cell["Performance analysis", "ItemNumbered",
 CellChangeTimes->{3.9402321327427063`*^9},
 CellID->955814697,ExpressionUUID->"a484a3da-33f6-4835-b55d-a3dd666378cf"],

Cell["\<\
This is how much time it takes to generate 50x50 random orthogonal matrix \
with this method:\
\>", "Text",
 CellChangeTimes->{3.940232140935815*^9},
 CellID->1199932919,ExpressionUUID->"f09a2b2b-cd06-4bbe-a51c-6d9b0862c709"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomOrthogonal", "[", "50", "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940232142858824*^9, 3.94023214850832*^9}},
 CellLabel->"In[448]:=",
 CellID->183466097,ExpressionUUID->"f1a5d33a-7fdc-410a-9e67-9cb15fd36d25"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.005985`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.9402321489655867`*^9},
 CellLabel->"Out[448]=",
 CellID->473983299,ExpressionUUID->"3f61825e-b9b1-40d5-b9cb-a0f5f8414418"]
}, Open  ]],

Cell["\<\
Assuming that the dot product is optimized and is roughly constant time for \
small vector sizes,we expect the complexity to be roughly quadratic with the \
matrix size for small matrices. This is because we have to ensure the mutual \
orthogonality of all vectors, and the number of vector pairs grows \
quadratically with the number of vectors. We can check our expectations:\
\>", "Text",
 CellChangeTimes->{{3.940232165188888*^9, 3.940232171102675*^9}},
 CellID->1220459570,ExpressionUUID->"81e5a3aa-cfa8-402d-857f-b650e2b825d0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomOrthogonal", "[", "12", "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940232177660378*^9, 3.940232186274447*^9}},
 CellLabel->"In[449]:=",
 CellID->2574417,ExpressionUUID->"725f3fac-a3e6-4db1-a691-0c26de061ade"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000875`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940232186646391*^9},
 CellLabel->"Out[449]=",
 CellID->865021563,ExpressionUUID->"818648f5-8102-49d3-92b7-ffc9dc6134eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomOrthogonal", "[", "25", "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940232197319377*^9, 3.9402321980834713`*^9}},
 CellLabel->"In[450]:=",
 CellID->2100602798,ExpressionUUID->"e848f450-baee-413c-bac2-83bb211500e0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.002122`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.94023219856367*^9},
 CellLabel->"Out[450]=",
 CellID->1657279844,ExpressionUUID->"e2c34915-63c5-428d-b3fb-0a1a839a1442"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomOrthogonal", "[", "50", "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.94023220267371*^9, 3.940232203339466*^9}},
 CellLabel->"In[451]:=",
 CellID->1039436518,ExpressionUUID->"181d58e3-6109-4b54-9285-5f86d192cf04"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.004304`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940232203782383*^9},
 CellLabel->"Out[451]=",
 CellID->1659410084,ExpressionUUID->"43ddc43d-49d4-4fc3-8b15-5a014a43f3da"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomOrthogonal", "[", "100", "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940232208590082*^9, 3.940232209364572*^9}},
 CellLabel->"In[452]:=",
 CellID->335158199,ExpressionUUID->"2ed741f6-4954-4376-bca7-61f3c36d8829"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.027016`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940232209720296*^9},
 CellLabel->"Out[452]=",
 CellID->1810529220,ExpressionUUID->"d4e95330-c301-41a9-88d8-65945bbfc80e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomOrthogonal", "[", "400", "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9402322146864367`*^9, 3.940232215465868*^9}},
 CellLabel->"In[453]:=",
 CellID->1868806197,ExpressionUUID->"7f4df649-b096-4e4c-b372-f371c40b7a63"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.323739`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940232215961794*^9},
 CellLabel->"Out[453]=",
 CellID->485534901,ExpressionUUID->"df1679c2-0fe8-479e-96fa-52dcc6eb3f20"]
}, Open  ]],

Cell["\<\
We see that we actually get even a slightly better situation, due most likely \
to an optimized nature of Fold. One final comment: one can somewhat improve \
the performance by caching the norms of the vectors computed during the \
Gram-Schmidt procedure - we recompute them every time afresh. This can give a \
factor of 1.5~2 speed-up.\
\>", "Text",
 CellChangeTimes->{{3.940232353169132*^9, 3.940232367702572*^9}},
 CellID->2094706154,ExpressionUUID->"8759b43b-1e6e-4d44-9745-6e8dcde77c63"],

Cell["\<\
Appendix: the complete code for Gram-Schmidt orthogonalization\
\>", "ItemNumbered",
 CellChangeTimes->{3.940232378720188*^9},
 CellID->1944449629,ExpressionUUID->"25d49d6c-7baf-4abe-af69-baafde1553c0"],

Cell["\<\
Here we just put the complete code (functions) into a single place:\
\>", "Text",
 CellChangeTimes->{3.940232386019826*^9},
 CellID->2106258204,ExpressionUUID->"44c1cbc3-cbbb-4f8d-ac18-2f6588c2d9f6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{
   "oneStepOrthogonalize", ",", "GSOrthogonalize", ",", "normalize", ",", 
    "GSOrthoNormalize", ",", "randomOrthogonal"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.940232390097416*^9, 3.940232411386121*^9}},
 CellLabel->"In[454]:=",
 CellID->885961181,ExpressionUUID->"95404cd4-444c-4380-b6ec-12972415a406"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"oneStepOrtogonalize", "[", 
    RowBox[{"vec_List", ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", "vec"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"oneStepOrtogonalize", "[", 
     RowBox[{"vec_List", ",", 
      RowBox[{"vecmat_", "?", "MatrixQ"}]}], "]"}], ":=", 
    RowBox[{"Fold", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"#1", "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"vec", ".", "#2"}], ")"}], "/", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"#2", ".", "#2"}], ")"}], ".", "#2"}]}]}], ")"}], "&"}], 
      ",", "vec", ",", "vecmat"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GSOrthogonalize", "[", 
     RowBox[{"startvecs_", "?", "MatrixQ"}], "]"}], ":=", 
    RowBox[{"Fold", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Append", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"oneStepOrtogonalize", "[", 
          RowBox[{"#2", ",", "#1"}], "]"}]}], "]"}], "&"}], ",", 
      RowBox[{"{", "}"}], ",", "startvecs"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"normalize", "[", "vec_List", "]"}], ":=", 
   RowBox[{"vec", "/", 
    RowBox[{"Sqrt", "[", 
     RowBox[{"Dot", "[", 
      RowBox[{"vec", ",", "vec"}], "]"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GSOrthoNormalize", "[", 
    RowBox[{"startvecs_", "?", "MatrixQ"}], "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{"normalize", ",", 
     RowBox[{"GSOrthogonalize", "[", "startvecs", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"randomOrthogonal", "[", 
    RowBox[{"n_Integer", "?", "Positive"}], "]"}], ":=", 
   RowBox[{"GSOrthoNormalize", "[", 
    RowBox[{"NestWhile", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Array", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Random", "[", "]"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "n"}], "}"}]}], "]"}], "&"}], ",", 
      RowBox[{"{", 
       RowBox[{"{", "0", "}"}], "}"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"Det", "[", "#", "]"}], "===", "0"}], "&"}]}], "]"}], "]"}]}],
   ";"}]}], "Input",
 CellChangeTimes->{{3.940232422261195*^9, 3.940232585789524*^9}},
 CellLabel->"In[455]:=",
 CellID->1691616311,ExpressionUUID->"d80fdaee-e5cd-4c16-9ea9-a30bf88a4285"],

Cell["\<\
We see that the code is concise and transparent. This is an example of how \
the typical solution to a given problem looks in Mathematica.\
\>", "Text",
 CellChangeTimes->{{3.940232593923361*^9, 3.9402325958709717`*^9}},
 CellID->1548695461,ExpressionUUID->"c39a5b0d-afc0-4ca7-9892-8dc3f0e94c54"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Small case study: local maxima for a list", "Subsubsection",
 CellChangeTimes->{3.940232605256976*^9},
 CellID->1067078419,ExpressionUUID->"958f0aa8-bc55-481a-8a66-33ee55121628"],

Cell["The problem", "ItemNumbered",
 CellChangeTimes->{3.940232612498063*^9},
 CellID->751052036,ExpressionUUID->"26a424ff-af42-403c-8f0d-e88b9854c33a"],

Cell["\<\
Sometimes, Fold (FoldList) allows for extremely concise and beautiful \
solutions. For example, here is the problem: for a given list of numbers, \
produce list of all its elements that are larger than any element before it, \
in this list (this is one of the favorite problems in many texts on \
Mathematica programming, so I decided to continue the tradition).\
\>", "Text",
 CellChangeTimes->{{3.9402326208918343`*^9, 3.9402326281637897`*^9}},
 CellID->22691986,ExpressionUUID->"144b8994-a75e-4a4b-9835-6c9cc23dcf20"],

Cell["Here is our test list:", "Text",
 CellChangeTimes->{{3.9402326208918343`*^9, 3.940232627025631*^9}},
 CellID->92635607,ExpressionUUID->"7c171b78-91a4-415f-92f3-46af2d126195"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lst", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "40"}], "}"}], "]"}], ",", 
    RowBox[{"{", "25", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940232630508793*^9, 3.940232641409707*^9}},
 CellLabel->"In[461]:=",
 CellID->287180305,ExpressionUUID->"c1bcb4b1-fc9b-4638-a976-eb8863a31bee"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "33", ",", "17", ",", "31", ",", "6", ",", "21", ",", "17", ",", "10", ",", 
   "27", ",", "2", ",", "19", ",", "25", ",", "8", ",", "17", ",", "11", ",", 
   "27", ",", "14", ",", "38", ",", "7", ",", "1", ",", "37", ",", "32", ",", 
   "19", ",", "8", ",", "25", ",", "11"}], "}"}]], "Output",
 CellChangeTimes->{3.940232641868711*^9},
 CellLabel->"Out[461]=",
 CellID->368227030,ExpressionUUID->"e7417618-4ff4-411e-840f-5844ada467a3"]
}, Open  ]],

Cell["Procedural solution", "ItemNumbered",
 CellChangeTimes->{3.940232655318548*^9},
 CellID->1891306203,ExpressionUUID->"6c6d8da4-30c2-4013-9fe4-6fcdf8dd3ee1"],

Cell["It is fairly obvious how to write a procedural solution:", "Text",
 CellChangeTimes->{3.940232664122222*^9},
 CellID->130410927,ExpressionUUID->"6c6354bd-a786-467d-ba01-57fd0686f193"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "localMaxListProc", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"localMaxListProc", "[", "x_List", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"i", ",", "temp", ",", 
       RowBox[{"len", "=", 
        RowBox[{"Length", "[", "x", "]"}]}], ",", "reslist", ",", "solctr"}], 
      "}"}], ",", 
     RowBox[{
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"reslist", "=", 
          RowBox[{"Table", "[", 
           RowBox[{"Null", ",", 
            RowBox[{"{", "len", "}"}]}], "]"}]}], ";", 
         RowBox[{"temp", "=", "0"}], ";", 
         RowBox[{"i", "=", 
          RowBox[{"solctr", "=", "1"}]}]}], ",", 
        RowBox[{"i", "<=", "len"}], ",", 
        RowBox[{"i", "++"}], ",", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"temp", "<", 
            RowBox[{"x", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ",", 
           RowBox[{
            RowBox[{"reslist", "[", 
             RowBox[{"[", 
              RowBox[{"solctr", "++"}], "]"}], "]"}], "=", 
            RowBox[{"temp", "=", 
             RowBox[{"x", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}]}]}], "]"}], ";"}]}], "]"}], 
      ";", 
      RowBox[{"Drop", "[", 
       RowBox[{"reslist", ",", 
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{"len", "-", "solctr", "+", "1"}], ")"}]}]}], "]"}]}]}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.94023266819042*^9, 3.940232750295669*^9}},
 CellLabel->"In[462]:=",
 CellID->1905419115,ExpressionUUID->"38027a7b-6efb-480b-a40b-537e1bb7f40d"],

Cell["\<\
Here, we preallocate the list of results, since we know that its length can \
be at most equal to the length of the initial list. As in cases before, this \
is done to avoid using Append and make a code more efficient. Check:\
\>", "Text",
 CellChangeTimes->{{3.9402327589458838`*^9, 3.940232762747265*^9}},
 CellID->1218484881,ExpressionUUID->"8d0561b6-3ef7-45e3-aea0-e9db1df95c9c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"localMaxListProc", "[", "lst", "]"}]], "Input",
 CellChangeTimes->{{3.940232767337092*^9, 3.94023276938836*^9}},
 CellLabel->"In[464]:=",
 CellID->1607160247,ExpressionUUID->"ad39673e-709d-49f4-bdee-084f112cafbc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"33", ",", "38"}], "}"}]], "Output",
 CellChangeTimes->{3.9402327697881947`*^9},
 CellLabel->"Out[464]=",
 CellID->1253305109,ExpressionUUID->"bcad359a-7b5e-4ad5-9e8e-03b79ca2b0ff"]
}, Open  ]],

Cell["Functional solution with FoldList", "ItemNumbered",
 CellChangeTimes->{3.940232799014447*^9},
 CellID->1779357187,ExpressionUUID->"d3803468-8f47-4003-a2cc-3224294e17e2"],

Cell["\<\
This is essentially the same solution but expressed with FoldList:\
\>", "Text",
 CellChangeTimes->{3.940232807295096*^9},
 CellID->1946457434,ExpressionUUID->"1c647334-6475-468c-8744-2b9a8ac7c734"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "localMaxList", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"localMaxList", "[", "x_List", "]"}], ":=", 
   RowBox[{"Union", "[", 
    RowBox[{"Rest", "[", 
     RowBox[{"FoldList", "[", 
      RowBox[{"Max", ",", 
       RowBox[{"-", "Infinity"}], ",", "x"}], "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.94023280956219*^9, 3.940232831310178*^9}},
 CellLabel->"In[465]:=",
 CellID->1252375931,ExpressionUUID->"f9521e72-8a87-4b0c-ab2a-18b80fc128ba"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.940232837819891*^9, 3.9402328386207323`*^9}},
 CellID->882392794,ExpressionUUID->"56917ee9-61dc-4904-a11a-06bb3557236f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"localMaxList", "[", "lst", "]"}]], "Input",
 CellChangeTimes->{{3.940232840074141*^9, 3.940232842035829*^9}},
 CellLabel->"In[467]:=",
 CellID->1419661917,ExpressionUUID->"18b69200-8ea3-4114-bd86-a381db7ab877"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"33", ",", "38"}], "}"}]], "Output",
 CellChangeTimes->{3.940232842462698*^9},
 CellLabel->"Out[467]=",
 CellID->1079618262,ExpressionUUID->"1f4e0c1b-3424-4272-93bf-c4760cc65955"]
}, Open  ]],

Cell["\<\
To see, what happens, we can dissect the function into pieces:\
\>", "Text",
 CellChangeTimes->{3.940232851159437*^9},
 CellID->1054795931,ExpressionUUID->"d5cfb25b-712c-46bf-8f8b-a16806a6ed3e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FoldList", "[", 
  RowBox[{"Max", ",", 
   RowBox[{"-", "Infinity"}], ",", "lst"}], "]"}]], "Input",
 CellChangeTimes->{{3.940232852866453*^9, 3.940232858968916*^9}},
 CellLabel->"In[468]:=",
 CellID->1516449438,ExpressionUUID->"91302a62-fed0-44a8-9ad5-bb08acf624d2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "\[Infinity]"}], ",", "33", ",", "33", ",", "33", ",", "33", 
   ",", "33", ",", "33", ",", "33", ",", "33", ",", "33", ",", "33", ",", 
   "33", ",", "33", ",", "33", ",", "33", ",", "33", ",", "33", ",", "38", 
   ",", "38", ",", "38", ",", "38", ",", "38", ",", "38", ",", "38", ",", 
   "38", ",", "38"}], "}"}]], "Output",
 CellChangeTimes->{3.9402328593641853`*^9},
 CellLabel->"Out[468]=",
 CellID->1943541878,ExpressionUUID->"0f982bb8-bdcf-4272-89d3-2c329ab51292"]
}, Open  ]],

Cell["\<\
Here, at every iteration the result of the previous application of Max is \
compared with the next number from the list (we could have put Max[#1,#2]& ), \
and the maximum of the two becomes the current result. Thus,the next result \
will only be different from the previous if we get a number larger than all \
encountered before. The value -\[Infinity] is used as a starting number, to \
guarantee that the starting number will be less than any in the list (which \
may also contain negative numbers).\
\>", "Text",
 CellChangeTimes->{{3.9402738783749447`*^9, 3.9402739007015543`*^9}},
 CellID->1708828869,ExpressionUUID->"52da26f2-182a-4632-aa2b-2d5c25cf4f26"],

Cell["\<\
At the next stage, we delete this number with the help of Rest:\
\>", "Text",
 CellChangeTimes->{{3.9402738783749447`*^9, 3.940273898788885*^9}},
 CellID->1638112382,ExpressionUUID->"59dc9669-66cd-4e82-85af-ace867348120"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Rest", "[", 
  RowBox[{"FoldList", "[", 
   RowBox[{"Max", ",", 
    RowBox[{"-", "Infinity"}], ",", "lst"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.940273903025516*^9, 3.940273910503936*^9}},
 CellLabel->"In[469]:=",
 CellID->235655736,ExpressionUUID->"affadd89-5d8a-4c11-89b9-823566e2474b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "33", ",", "33", ",", "33", ",", "33", ",", "33", ",", "33", ",", "33", ",",
    "33", ",", "33", ",", "33", ",", "33", ",", "33", ",", "33", ",", "33", 
   ",", "33", ",", "33", ",", "38", ",", "38", ",", "38", ",", "38", ",", 
   "38", ",", "38", ",", "38", ",", "38", ",", "38"}], "}"}]], "Output",
 CellChangeTimes->{3.940273911067255*^9},
 CellLabel->"Out[469]=",
 CellID->831792041,ExpressionUUID->"077dbdb3-03ac-4d99-a743-868066a85d00"]
}, Open  ]],

Cell["\<\
Finally, we take the Union to eliminate duplicate elements. Union also sorts \
the results in an ascending order, but in our case this is just fine.\
\>", "Text",
 CellChangeTimes->{{3.94027392008361*^9, 3.9402739213758717`*^9}},
 CellID->1957774764,ExpressionUUID->"e19e1110-13ed-490d-b832-1aa38cf81b13"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{"Rest", "[", 
   RowBox[{"FoldList", "[", 
    RowBox[{"Max", ",", 
     RowBox[{"-", "Infinity"}], ",", "lst"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.940273923977107*^9, 3.940273930910158*^9}},
 CellLabel->"In[470]:=",
 CellID->724829715,ExpressionUUID->"a02c0d04-90d7-4422-89a1-be82aede59f8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"33", ",", "38"}], "}"}]], "Output",
 CellChangeTimes->{3.940273931803596*^9},
 CellLabel->"Out[470]=",
 CellID->522001605,ExpressionUUID->"c40b5d6b-57b2-4b1f-956e-b7fe6ca68b43"]
}, Open  ]],

Cell["Performance analysis", "ItemNumbered",
 CellChangeTimes->{3.9402739399112053`*^9},
 CellID->366297965,ExpressionUUID->"b980a724-ca35-4aab-ba46-067151908a5b"],

Cell["We can now compare the performance:", "Text",
 CellChangeTimes->{3.940273946474658*^9},
 CellID->1681765453,ExpressionUUID->"cd9af3f8-59bc-4e76-bb69-69e88fd1f665"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testlst", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "20000"}], "}"}], "]"}], ",", 
     RowBox[{"{", "5000", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.940273948937068*^9, 3.9402739619692917`*^9}},
 CellLabel->"In[471]:=",
 CellID->1853729368,ExpressionUUID->"f002f562-6582-43a2-a0dd-c9f18fa401f6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"localMaxListProc", "[", "testlst", "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.9402739635796137`*^9, 3.940273972453698*^9}},
 CellLabel->"In[472]:=",
 CellID->685418346,ExpressionUUID->"c96759f6-0e23-4db6-80db-2aa03e940f00"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.009046`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.9402739728389893`*^9},
 CellLabel->"Out[472]=",
 CellID->1029066326,ExpressionUUID->"aa8eb17c-8d99-4faa-8885-b5c1d115848a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"localMaxList", "[", "testlst", "]"}], ";"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940273974332386*^9, 3.940273981384612*^9}},
 CellLabel->"In[473]:=",
 CellID->804564298,ExpressionUUID->"d8c29f78-26b0-4679-a65c-bce70d1c94c7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.003199`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.940273981842416*^9},
 CellLabel->"Out[473]=",
 CellID->324510875,ExpressionUUID->"ebb2aeaf-39a8-4c97-b2a4-190e90f9b492"]
}, Open  ]],

Cell["\<\
We see that by using Fold, we gain a factor of 3-4 in this case (for this \
size of the test list), even though we took care to make the procedural \
realization efficient, and indeed naively it looks more efficient since it \
does not produce an entire list and then delete similar elements. However, \
what it does is to break an object (list) into pieces by using array \
indexing. And according to one of our rules of thumb, this practice
should be avoided in Mathematica.\
\>", "Text",
 CellChangeTimes->{{3.9402739932689667`*^9, 3.9402739996684523`*^9}},
 CellID->1593296392,ExpressionUUID->"fe6b8e95-2069-44af-bb4b-e565390ca83c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["FixedPoint and FixedPointList", "Subsection",
 CellChangeTimes->{3.940274012438014*^9},
 CellID->307718060,ExpressionUUID->"abbb4445-9c3e-4c6f-9d03-7f2d19202268"],

Cell[CellGroupData[{

Cell["The syntax and functionality", "Subsubsection",
 CellChangeTimes->{3.9402740185433617`*^9},
 CellID->676812444,ExpressionUUID->"33b8c6bd-6c07-4f66-92ee-c83f0e5b7da1"],

Cell["\<\
These functions are very similar to Nest and NestList. Instead of asking, how \
many times the function should be nested, they nest the function until the \
result no longer changes. The format is\
\>", "Text",
 CellChangeTimes->{{3.940274024781826*^9, 3.940274026426032*^9}},
 CellID->2113351796,ExpressionUUID->"10253919-56d7-491f-881b-78672e282567"],

Cell[BoxData[
 RowBox[{"FixedPoint", "[", 
  RowBox[{"f", ",", "expr"}], "]"}]], "Input",
 CellChangeTimes->{{3.9402740284455833`*^9, 3.940274031975836*^9}},
 CellID->362956896,ExpressionUUID->"b2fcd19e-74f4-4953-9f7b-00a19c05a3ba"],

Cell["\<\
In some cases, it is desirable to have a \[OpenCurlyDoubleQuote]safety net\
\[CloseCurlyDoubleQuote] - to stop nesting after certain maximal allowed \
number of iterations regardless of whether or not the result has stabilized. \
To account for these cases, there is an optional third argument <n> which \
gives a maximal number of iterations.\
\>", "Text",
 CellChangeTimes->{{3.940274041232873*^9, 3.940274046721901*^9}},
 CellID->2009757947,ExpressionUUID->"6dfce463-b90e-4469-b256-50fa57afe343"],

Cell["\<\
Since these functions are very similar to Nest/NestList except their \
termination condition, we will illustrate them by revisiting certain examples \
considered before.\
\>", "Text",
 CellChangeTimes->{{3.940274041232873*^9, 3.940274048541087*^9}},
 CellID->2144624278,ExpressionUUID->"fb5e1da3-752e-4723-a4fb-756cc77e3c7d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example: the Collatz problem revisited", "Subsubsection",
 CellChangeTimes->{3.9402740681923428`*^9},
 CellID->1912008274,ExpressionUUID->"9bda43da-39a7-4269-bfe3-14a8a96e2acc"],

Cell[TextData[{
 "Here is the already discussed (section ",
 ButtonBox["5.4.2.6",
  BaseStyle->"Hyperlink",
  ButtonData->"5.4.2.6"],
 ") Collatz iteration definition:"
}], "Text",
 CellChangeTimes->{
  3.9402740747484083`*^9, {3.940274108286377*^9, 3.9402741082951736`*^9}},
 CellID->177767410,ExpressionUUID->"fe666f25-60cf-4c2e-9f33-6496434e5851"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "c", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"c", "[", 
    RowBox[{"n_", "?", "OddQ"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"3", "*", "n"}], "+", "1"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"c", "[", 
    RowBox[{"n_", "?", "EvenQ"}], "]"}], ":=", 
   RowBox[{"n", "/", "2"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940274111886977*^9, 3.940274126823111*^9}},
 CellLabel->"In[474]:=",
 CellID->1797966975,ExpressionUUID->"94d19bf4-e820-4682-9ce2-748e40870827"],

Cell["\<\
Previously we solved the problem of generation of the Collatz sequence by \
using NestWhileList. The solution was:\
\>", "Text",
 CellChangeTimes->{{3.9402741340470877`*^9, 3.940274135371078*^9}},
 CellID->314903676,ExpressionUUID->"feef6959-e626-4b6b-9db3-652afe2730ab"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "colSequence", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"colSequence", "[", "q_Integer", "]"}], ":=", 
   RowBox[{"NestWhileList", "[", 
    RowBox[{"c", ",", "q", ",", 
     RowBox[{
      RowBox[{"#1", "!=", "1"}], "&"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940274137731204*^9, 3.940274156717863*^9}, {
  3.940274229076763*^9, 3.94027422970753*^9}},
 CellLabel->"In[482]:=",
 CellID->1211997577,ExpressionUUID->"1d6dd443-d6d6-4228-bf51-948c4f6be702"],

Cell["\<\
Imagine for a moment that it is unavailable (like it was in earlier versions \
of Mathematica). Can we find a substitute? Here is the solution that uses \
FixedPointList:\
\>", "Text",
 CellChangeTimes->{{3.9402741629791107`*^9, 3.940274164572769*^9}},
 CellID->995183441,ExpressionUUID->"da3d6062-cd45-469b-b5e5-8919b2b82c19"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "colSequenceFP", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"colSequenceFP", "[", "q_Integer", "]"}], ":=", 
   RowBox[{"Drop", "[", 
    RowBox[{
     RowBox[{"FixedPointList", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"#", "!=", "1"}], ",", 
          RowBox[{"c", "[", "#", "]"}], ",", "1"}], "]"}], "&"}], ",", "q"}], 
      "]"}], ",", 
     RowBox[{"-", "1"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9402741669397507`*^9, 3.9402741936047287`*^9}},
 CellLabel->"In[479]:=",
 CellID->1245469305,ExpressionUUID->"654c99c6-617c-4f5f-ba5e-8661fcac42fd"],

Cell["\<\
(here, FP stands for \[OpenCurlyDoubleQuote]FiexedPoint\
\[CloseCurlyDoubleQuote]). The idea is that after the result becomes one for \
the first time, it will remain one due to the way the nested function is \
written. Then, after the next iteration, the last two results will be both \
equal to 1 and to each other, and thus the process will stop. For instance\
\>", "Text",
 CellChangeTimes->{{3.9402742007580757`*^9, 3.940274203805691*^9}},
 CellID->1594572392,ExpressionUUID->"d94e46a2-e01f-4760-9f2e-6454f5e0f093"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"colSequence", "[", "233", "]"}]], "Input",
 CellChangeTimes->{{3.940274209686337*^9, 3.940274212054306*^9}},
 CellLabel->"In[484]:=",
 CellID->2045027397,ExpressionUUID->"4d9131c9-f79b-4837-93a7-6eb81722a2a1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "233", ",", "700", ",", "350", ",", "175", ",", "526", ",", "263", ",", 
   "790", ",", "395", ",", "1186", ",", "593", ",", "1780", ",", "890", ",", 
   "445", ",", "1336", ",", "668", ",", "334", ",", "167", ",", "502", ",", 
   "251", ",", "754", ",", "377", ",", "1132", ",", "566", ",", "283", ",", 
   "850", ",", "425", ",", "1276", ",", "638", ",", "319", ",", "958", ",", 
   "479", ",", "1438", ",", "719", ",", "2158", ",", "1079", ",", "3238", ",",
    "1619", ",", "4858", ",", "2429", ",", "7288", ",", "3644", ",", "1822", 
   ",", "911", ",", "2734", ",", "1367", ",", "4102", ",", "2051", ",", 
   "6154", ",", "3077", ",", "9232", ",", "4616", ",", "2308", ",", "1154", 
   ",", "577", ",", "1732", ",", "866", ",", "433", ",", "1300", ",", "650", 
   ",", "325", ",", "976", ",", "488", ",", "244", ",", "122", ",", "61", ",",
    "184", ",", "92", ",", "46", ",", "23", ",", "70", ",", "35", ",", "106", 
   ",", "53", ",", "160", ",", "80", ",", "40", ",", "20", ",", "10", ",", 
   "5", ",", "16", ",", "8", ",", "4", ",", "2", ",", "1"}], "}"}]], "Output",\

 CellChangeTimes->{{3.940274212423386*^9, 3.940274233089284*^9}},
 CellLabel->"Out[484]=",
 CellID->1904909395,ExpressionUUID->"4803a011-8682-4784-9113-fe370d8e8192"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"colSequenceFP", "[", "233", "]"}]], "Input",
 CellChangeTimes->{{3.9402742383496428`*^9, 3.940274240502777*^9}},
 CellLabel->"In[485]:=",
 CellID->926503859,ExpressionUUID->"b8188c44-f1e2-4a25-85d4-880d3edf8c39"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "233", ",", "700", ",", "350", ",", "175", ",", "526", ",", "263", ",", 
   "790", ",", "395", ",", "1186", ",", "593", ",", "1780", ",", "890", ",", 
   "445", ",", "1336", ",", "668", ",", "334", ",", "167", ",", "502", ",", 
   "251", ",", "754", ",", "377", ",", "1132", ",", "566", ",", "283", ",", 
   "850", ",", "425", ",", "1276", ",", "638", ",", "319", ",", "958", ",", 
   "479", ",", "1438", ",", "719", ",", "2158", ",", "1079", ",", "3238", ",",
    "1619", ",", "4858", ",", "2429", ",", "7288", ",", "3644", ",", "1822", 
   ",", "911", ",", "2734", ",", "1367", ",", "4102", ",", "2051", ",", 
   "6154", ",", "3077", ",", "9232", ",", "4616", ",", "2308", ",", "1154", 
   ",", "577", ",", "1732", ",", "866", ",", "433", ",", "1300", ",", "650", 
   ",", "325", ",", "976", ",", "488", ",", "244", ",", "122", ",", "61", ",",
    "184", ",", "92", ",", "46", ",", "23", ",", "70", ",", "35", ",", "106", 
   ",", "53", ",", "160", ",", "80", ",", "40", ",", "20", ",", "10", ",", 
   "5", ",", "16", ",", "8", ",", "4", ",", "2", ",", "1"}], "}"}]], "Output",\

 CellChangeTimes->{3.940274240903652*^9},
 CellLabel->"Out[485]=",
 CellID->1864826075,ExpressionUUID->"7b061bcf-da74-4e6b-acf1-c4cc957263a0"]
}, Open  ]],

Cell["\<\
The new solution is almost as efficient as the old one. The source of \
inefficiency here is that the condition that the result is one, is checked as \
every iteration. Note by the way that both the implementation with \
NestWhileList and FixedPointList (as well as these constructs themselves) are \
a kind of compromise, appreciating that procedural style is sometimes more \
appropriate than functional (this is, when at every time only very small and \
very \[OpenCurlyDoubleQuote]local\[CloseCurlyDoubleQuote] part of a given \
large structure (like list) is changed).\
\>", "Text",
 CellChangeTimes->{{3.940274248105455*^9, 3.9402742548898277`*^9}},
 CellID->1755498207,ExpressionUUID->"77ff3c66-73c4-4f2c-a6c5-2b15500664d4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["How to reformulate a problem for FixedPoint", "Subsubsection",
 CellChangeTimes->{3.940274261820137*^9},
 CellID->996330121,ExpressionUUID->"1834e055-d8ce-4c77-85b0-0a7108ad40e2"],

Cell["\<\
Basically, every problem where one has to generate some list by repeated \
nesting of a function <f>, and stop when certain condition <cond>is \
satisfied, can be  reformulated as a problem for FixedPoint, in the following \
way:\
\>", "Text",
 CellChangeTimes->{{3.9402742679420223`*^9, 3.940274274470811*^9}},
 CellID->1390347988,ExpressionUUID->"a3aceaa1-9232-4476-814d-fc1ccc7c5455"],

Cell[BoxData[
 RowBox[{"FixedPoint", "[", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"cond", "[", "#", "]"}], ",", "#", ",", 
    RowBox[{
     RowBox[{"f", "[", "#", "]"}], "&"}], ",", "expr"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940274276860384*^9, 3.940274287373932*^9}},
 CellID->476863593,ExpressionUUID->"c20f3314-ac10-4a81-ab0b-0c7ad4d13ebb"],

Cell["\<\
The logic here is the same as for the Collatz problem just considered.\
\>", "Text",
 CellChangeTimes->{3.9402742954023*^9},
 CellID->994752869,ExpressionUUID->"42648b3c-23ba-4345-9038-14e61660f099"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example: deleting numbers from the list revisited", "Subsubsection",
 CellChangeTimes->{3.940274303068624*^9},
 CellID->651277388,ExpressionUUID->"e931c69f-9d9e-4959-a24f-b21d12fb7fa3"],

Cell["\<\
Here is a list containing in general zeros, positive and negative integers.\
\>", "Text",
 CellChangeTimes->{3.940274308407136*^9},
 CellID->294911357,ExpressionUUID->"033d9085-3d15-4442-8538-a55e9eabe26c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "testlist", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "5"}], ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"{", "15", "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.940274310428606*^9, 3.940274326302356*^9}},
 CellLabel->"In[489]:=",
 CellID->1284366304,ExpressionUUID->"91308b63-3371-436d-85ac-16d4505369da"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "10", ",", "4", ",", 
   RowBox[{"-", "2"}], ",", "10", ",", "5", ",", "8", ",", 
   RowBox[{"-", "3"}], ",", "3", ",", "7", ",", "5", ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "5"}], ",", "7"}], "}"}]], "Output",
 CellChangeTimes->{3.940274326837592*^9, 3.9402743745538063`*^9},
 CellLabel->"Out[490]=",
 CellID->1021980020,ExpressionUUID->"a26591bf-4c99-4d62-92d5-41aad4e2a5fb"]
}, Open  ]],

Cell["\<\
This will drop the first element in the list until it meets a first negative \
number - this is the solution we had before:\
\>", "Text",
 CellChangeTimes->{{3.940274334380198*^9, 3.9402743358107967`*^9}},
 CellID->1130742205,ExpressionUUID->"74b057ea-3004-4269-b065-8994dfc7462b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestWhile", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Drop", "[", 
     RowBox[{"#", ",", "1"}], "]"}], "&"}], ",", "testlist", ",", 
   RowBox[{
    RowBox[{"NonNegative", "[", 
     RowBox[{"First", "[", "#", "]"}], "]"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940274337018695*^9, 3.9402743525824757`*^9}},
 CellLabel->"In[491]:=",
 CellID->276053249,ExpressionUUID->"80999c9a-da9a-4101-8493-8f001a15018a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "2"}], ",", "10", ",", "5", ",", "8", ",", 
   RowBox[{"-", "3"}], ",", "3", ",", "7", ",", "5", ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "5"}], ",", "7"}], "}"}]], "Output",
 CellChangeTimes->{{3.94027435286681*^9, 3.940274376567214*^9}},
 CellLabel->"Out[491]=",
 CellID->620593786,ExpressionUUID->"f4a0728d-44e5-4e24-9072-04c8867621fa"]
}, Open  ]],

Cell["The solution with FixedPoint:", "Text",
 CellChangeTimes->{3.94027438389937*^9},
 CellID->1980793688,ExpressionUUID->"95eeb2fb-f1b6-458c-a839-6e2e271139c0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FixedPoint", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"Negative", "[", 
       RowBox[{"First", "[", "#", "]"}], "]"}], ",", "#", ",", 
      RowBox[{"Drop", "[", 
       RowBox[{"#", ",", "1"}], "]"}]}], "]"}], "&"}], ",", "testlist"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.940274385904499*^9, 3.940274404103318*^9}},
 CellLabel->"In[492]:=",
 CellID->1046822972,ExpressionUUID->"f8325d48-57cb-4795-8f0e-b19cc7d1dfce"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "2"}], ",", "10", ",", "5", ",", "8", ",", 
   RowBox[{"-", "3"}], ",", "3", ",", "7", ",", "5", ",", 
   RowBox[{"-", "3"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "5"}], ",", "7"}], "}"}]], "Output",
 CellChangeTimes->{3.940274405089362*^9},
 CellLabel->"Out[492]=",
 CellID->1359890211,ExpressionUUID->"03f3edd6-0dfc-48e6-812d-5d13e54b689d"]
}, Open  ]],

Cell[TextData[{
 "Note: the same performance pitfall which we discussed for the NestWhile - \
based solution of this problem (section ",
 ButtonBox["5.4.2.1",
  BaseStyle->"Hyperlink",
  ButtonData->"5.4.2.1"],
 "), is also present here."
}], "Text",
 CellChangeTimes->{{3.94027441413832*^9, 3.9402744174010983`*^9}, {
  3.940274451517851*^9, 3.940274451527376*^9}},
 CellID->6321256,ExpressionUUID->"a3306494-6d75-4e0d-bf8c-304dc63e67cd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example: approximating the square root of a number revisited", \
"Subsubsection",
 CellChangeTimes->{3.9402744606371613`*^9},
 CellID->1326050893,ExpressionUUID->"217c23ed-fc8d-4ae5-bff4-ae7715c10eab"],

Cell["\<\
Here is the sequence that we implemented previously with Nest to get an \
approximation to a square root of a number:\
\>", "Text",
 CellChangeTimes->{{3.940274465936067*^9, 3.940274467397843*^9}},
 CellID->352070085,ExpressionUUID->"eff6c067-c0df-4204-8d0b-d2dc1433abb6"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["t", 
    RowBox[{"n", "+", "1"}]], "=", 
   RowBox[{
    RowBox[{"1", "/", "2"}], 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["t", "n"], "+", 
      RowBox[{"A", "/", 
       SubscriptBox["t", "n"]}]}], ")"}]}]}], TraditionalForm]],
 FormatType->
  TraditionalForm,ExpressionUUID->"17c6ff90-50bc-4077-ad0d-1b362b0f6076"]], \
"Text",
 CellChangeTimes->{{3.940274479258534*^9, 3.9402744907856293`*^9}},
 CellID->525596676,ExpressionUUID->"0e162dbd-f24d-46c4-af5b-47f3d24f95fc"],

Cell["\<\
This was our solution (we take a specific number 3, and a starting number 5., \
as before)\
\>", "Text",
 CellChangeTimes->{3.940274498860331*^9},
 CellID->1913142244,ExpressionUUID->"c69aa474-cc76-4ded-8a8b-990c9215cbff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NestList", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"#", "+", 
       RowBox[{"3", "/", "#"}]}], ")"}], "/", "2"}], "&"}], ",", "5.", ",", 
   "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.940274500589087*^9, 3.940274513658977*^9}},
 CellLabel->"In[493]:=",
 CellID->384428903,ExpressionUUID->"c4579b72-1fbd-4082-8d2c-5386bc0d7eb1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "5.`", ",", "2.8`", ",", "1.9357142857142855`", ",", "1.7427648919346337`", 
   ",", "1.7320837413295722`", ",", "1.7320508078819778`"}], "}"}]], "Output",\

 CellChangeTimes->{3.940274514058025*^9},
 CellLabel->"Out[493]=",
 CellID->1026995818,ExpressionUUID->"f215a602-cfa0-4446-860a-9eb523d2dc0d"]
}, Open  ]],

Cell["\<\
Here our starting number was 5, and we used 5 iterations altogether. The list \
of intermediate results shows that this method converges quite fast. If we \
are interested in final result only, then we use Nest:\
\>", "Text",
 CellChangeTimes->{{3.9402745255783*^9, 3.940274526868761*^9}},
 CellID->1392642187,ExpressionUUID->"abbd6b58-2ff1-43aa-8219-69ca17c8983f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"Nest", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"#", "+", 
        RowBox[{"3", "/", "#"}]}], ")"}], "/", "2"}], "&"}], ",", "5.", ",", 
    "5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.94027452902066*^9, 3.9402745411410933`*^9}},
 CellLabel->"In[494]:=",
 CellID->881607995,ExpressionUUID->"f37c0ba1-b4ba-42d4-8201-eceef1410e24"],

Cell[BoxData["1.7320508078819778`"], "Output",
 CellChangeTimes->{3.940274541732802*^9},
 CellLabel->"Out[494]=",
 CellID->1752152651,ExpressionUUID->"fba29917-4b25-4a89-b363-938aa319a9a3"]
}, Open  ]],

Cell["Now, here is the solution with FixedPoint:", "Text",
 CellChangeTimes->{3.940274548610224*^9},
 CellID->1686991126,ExpressionUUID->"d3c39f26-6a2c-45f1-b35d-40d9c99e73db"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"newresult", "=", 
  RowBox[{"FixedPointList", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"#", "+", 
        RowBox[{"3", "/", "#"}]}], ")"}], "/", "2"}], "&"}], ",", "5."}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.940274552528*^9, 3.9402745752955637`*^9}},
 CellLabel->"In[495]:=",
 CellID->711223967,ExpressionUUID->"ad1491a4-0de8-48bf-b9ed-cb6c653bcbd7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "5.`", ",", "2.8`", ",", "1.9357142857142855`", ",", "1.7427648919346337`", 
   ",", "1.7320837413295722`", ",", "1.7320508078819778`", ",", 
   "1.7320508075688772`", ",", "1.7320508075688774`"}], "}"}]], "Output",
 CellChangeTimes->{3.940274575589576*^9},
 CellLabel->"Out[495]=",
 CellID->637982954,ExpressionUUID->"7eeb1a5e-059b-46fd-a09d-b81dda73d704"]
}, Open  ]],

Cell["\<\
It is even simpler in this case - once the number stops changing , that\
\[CloseCurlyQuote]s it! This is a type of problem where FixedPoint works most \
directly without modifications.\
\>", "Text",
 CellChangeTimes->{{3.9402745913890343`*^9, 3.940274595952862*^9}},
 CellID->875908633,ExpressionUUID->"66684439-f69c-44af-a004-7db875e6b780"],

Cell["\<\
The rest of the discussion of that example can be trivially transferred to \
the version with FixedPoint.\
\>", "Text",
 CellChangeTimes->{{3.9402745913890343`*^9, 3.94027459317247*^9}},
 CellID->168229844,ExpressionUUID->"51d0182a-d535-4c48-9bae-4ea2e6a2def6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["FixedPoint dangers", "Subsubsection",
 CellChangeTimes->{3.940274610041198*^9},
 CellID->1350508656,ExpressionUUID->"c5e752fb-b874-4ac1-aa39-83b1c73bd73b"],

Cell["\<\
When used without the \[OpenCurlyDoubleQuote]safety net\
\[CloseCurlyDoubleQuote], FixedPoint has an obvious danger of getting in a \
situation where it will never stop, because the results may happen to always \
be different. But even in the seemingly clear cases, this danger is not as \
far away as we may think. Let me use the same setting as in the previous \
example: we want to estimate the square root of 3, starting with a number 5. \
I will alter it very slightly -
forget to put the dot after 5: use <5> instead of <5.>. And, let us use a \
safety net of 7 iterations maximum - just in case...\
\>", "Text",
 CellChangeTimes->{{3.940274616480126*^9, 3.940274624690564*^9}},
 CellID->1244316249,ExpressionUUID->"13507f5e-f105-4fdf-bd1b-d48f0b0447e2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FixedPointList", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"#", "+", 
       RowBox[{"3", "/", "#"}]}], ")"}], "/", "2"}], "&"}], ",", "5", ",", 
   "7"}], "]"}]], "Input",
 CellChangeTimes->{{3.940274630947133*^9, 3.9402746416391973`*^9}},
 CellLabel->"In[496]:=",
 CellID->408791755,ExpressionUUID->"102fb4ca-310d-41c5-86ab-63c5e5b62f1d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", 
   FractionBox["14", "5"], ",", 
   FractionBox["271", "140"], ",", 
   FractionBox["132241", "75880"], ",", 
   FractionBox["34761005281", "20068894160"], ",", 
   FractionBox["2416609026561556205761", "1395229871759180117920"], ",", 
   FractionBox["11679998372406206859888818654055765884968321", 
    "6743450204443114328549416278518687526674240"], ",", 
   RowBox[{
   "27284472395882328261265862826301387323702140035640816087943766184830080930\
4604412291841", "/", 
    "1575269748245957565128610098092634589227447128003399125082164624678984331\
96289773502080"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940274642007976*^9},
 CellLabel->"Out[496]=",
 CellID->909150915,ExpressionUUID->"31edd2a2-b45c-4520-8d2f-8bfa0554b09c"]
}, Open  ]],

Cell[TextData[{
 "This is an unpleasant surprise. The point is that the operations are now \
done with arbitrary precision integer arithmetic, and the two consecutive \
results will ",
 StyleBox["never",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " be the same. This tells us once again that we have to ensure in every \
case, that \[OpenCurlyDoubleQuote]sameness\[CloseCurlyDoubleQuote] is defined \
the same (pun unintended) for us and for Mathematica. If in doubt - put a \
maximum on the total number of iterations (although for final version of any \
program, you will be better off using the final iteration number only if \
there are more compelling reasons to do so, related to the structure of the \
problem. This comment does not apply for programs which implement certain \
functionality for further use, such as packages - in such cases it is always \
a good idea to constrain the number of iterations by some maximum value)."
}], "Text",
 CellChangeTimes->{{3.940274655616838*^9, 3.94027467554101*^9}},
 CellID->753280000,ExpressionUUID->"ca0bc18a-d623-4e2b-93cf-f5afda9b2874"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Small case study: merging overlapping intervals - Functional vs. Rule-based\
\>", "Subsubsection",
 CellChangeTimes->{3.940274696294359*^9},
 CellID->1976718475,ExpressionUUID->"f3eece90-2f26-476c-a686-41b810f58ee1"],

Cell["The problem and a rule-based solution", "ItemNumbered",
 CellChangeTimes->{3.940274707730497*^9},
 CellID->410705675,ExpressionUUID->"2a7cb2aa-eec5-4fff-b3dc-4186397ee459"],

Cell["\<\
Consider the following problem: given a list of intervals, some of which may \
overlap (such that some intervals may be entirely contained in others), write \
a function which will merge together those intervals which overlap, and \
return a modified list of intervals. The input list of intervals must be \
ordered in the sense that non-overlapping intervals closer to the origin \
should be on the left of those further from it.\
\>", "Text",
 CellChangeTimes->{{3.9402747146395903`*^9, 3.940274722765285*^9}},
 CellID->717838267,ExpressionUUID->"2026117f-0c45-489c-b7de-7275e9962596"],

Cell["\<\
Here is an elegant and concise rule-based solution shown in \
\[OpenCurlyDoubleQuote]Mastering Mathematica\[CloseCurlyDoubleQuote] by John \
Gray.\
\>", "Text",
 CellChangeTimes->{{3.9402747146395903`*^9, 3.940274728639905*^9}},
 CellID->808930699,ExpressionUUID->"703ad7b0-cb6f-46ec-80ff-9381ae395860"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mergeIntervals", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mergeIntervals", "[", "ints_List", "]"}], ":=", 
   RowBox[{"ints", "//.", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"e___", ",", 
        RowBox[{"{", 
         RowBox[{"a_", ",", "b_"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"c_", ",", "d_"}], "}"}], ",", "f___"}], "}"}], "/;", 
      RowBox[{"c", "<=", "b"}]}], ":>", 
     RowBox[{"{", 
      RowBox[{"e", ",", 
       RowBox[{"{", 
        RowBox[{"a", ",", 
         RowBox[{"Max", "[", 
          RowBox[{"b", ",", "d"}], "]"}]}], "}"}], ",", "f"}], "}"}]}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940274733011611*^9, 3.940274772184594*^9}},
 CellLabel->"In[497]:=",
 CellID->1640945939,ExpressionUUID->"9f231dec-9f34-4881-a40a-89481ec2069c"],

Cell[TextData[{
 "The code is almost self-explanatory. We saw already examples of this type \
of programming earlier - see the section ",
 ButtonBox["4.2.5",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "MPAAI"}, "MPAAI-4-Rules-patterns-functions.nb", 
     CharacterEncoding -> "UTF-8"], "4.2.5"},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/MPAAI/MPAAI-4-Rules-patterns-functions.\
nb"],
 ". The use of //. (ReplaceRepeated) ensures that the rule will be applied \
until all overlapping intervals are merged. For instance:"
}], "Text",
 CellChangeTimes->{{3.9402747797968693`*^9, 3.9402747843876057`*^9}, {
  3.940274824870655*^9, 3.9402748248803253`*^9}},
 CellID->1944296921,ExpressionUUID->"deaee275-e9ff-4a62-b178-afd336b6d501"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mergeIntervals", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "7"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6", ",", "8"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7", ",", "9"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.9402748274794416`*^9, 3.9402748392072906`*^9}},
 CellLabel->"In[499]:=",
 CellID->531393958,ExpressionUUID->"5f0fe625-d145-425d-b33c-aaef81174d79"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402748395411367`*^9},
 CellLabel->"Out[499]=",
 CellID->1706542933,ExpressionUUID->"20b19bd2-7b3d-4015-a92e-1618b70eca59"]
}, Open  ]],

Cell["A functional solution", "ItemNumbered",
 CellChangeTimes->{3.940274847872517*^9},
 CellID->75485599,ExpressionUUID->"ca8658fe-a34f-4da9-8140-95f3e6d4925f"],

Cell["\<\
The above solution is definitely beautiful and clear. However, it is not the \
most efficient one, as we will see in a minute.\
\>", "Text",
 CellChangeTimes->{{3.940274855958743*^9, 3.9402748673394527`*^9}},
 CellID->1671110663,ExpressionUUID->"94ba8710-57b0-4153-916a-a93ab22c709f"],

Cell["\<\
Let us see what we can do within the functional style. The first thing that \
comes to mind is to somehow group together overlapping intervals, keeping in \
mind that there can be chains of more than two intervals overlapping, like \
the last 3 intervals in the above example. The way to do it is to use a \
built-in <Split> command. Split does the following: it groups together the \
\[OpenCurlyDoubleQuote]same\[CloseCurlyDoubleQuote] elements, and we can \
define what we mean by \[OpenCurlyDoubleQuote]same\[CloseCurlyDoubleQuote], \
by providing to Split a comparison function. The limitation of Split is \
however that it can only compare adjacent elements.\
\>", "Text",
 CellChangeTimes->{{3.940274855958743*^9, 3.940274876500688*^9}},
 CellID->722689473,ExpressionUUID->"a92e57ee-c31c-46e4-a75c-d93b30a3b715"],

Cell["\<\
So, let us define two intervals to be \[OpenCurlyDoubleQuote]the same\
\[CloseCurlyDoubleQuote] (for Split), when the right end of the first \
interval is larger than the left end of the second one:\
\>", "Text",
 CellChangeTimes->{{3.940274855958743*^9, 3.940274878178129*^9}},
 CellID->1254145582,ExpressionUUID->"603b2188-b635-431c-befc-9dad2af79bcb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step1", "=", 
  RowBox[{"Split", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"5", ",", "7"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"6", ",", "8"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"7", ",", "9"}], "}"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"#1", "[", 
       RowBox[{"[", "2", "]"}], "]"}], ">=", 
      RowBox[{"#2", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9402748799491997`*^9, 3.9402749009795923`*^9}},
 CellLabel->"In[500]:=",
 CellID->1250443949,ExpressionUUID->"1c7de7fb-fa83-4a64-b9d0-30852134e551"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7", ",", "9"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940274901288537*^9},
 CellLabel->"Out[500]=",
 CellID->643141349,ExpressionUUID->"4f0b4953-7b82-42eb-83f2-4cf5f19617a5"]
}, Open  ]],

Cell["\<\
We see that the intervals have been correctly grouped. Now we need to extract \
the new borders corresponding to the merged intervals. To do this, I suggest \
that we Flatten each group first (which means we have to Map Flatten on our \
list):\
\>", "Text",
 CellChangeTimes->{{3.94027490939159*^9, 3.940274914731086*^9}},
 CellID->1097089571,ExpressionUUID->"9a36ea28-b15b-4fc5-b75b-dda5adad38a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step2", "=", 
  RowBox[{"Flatten", "/@", "step1"}]}]], "Input",
 CellChangeTimes->{{3.940274916280837*^9, 3.940274922659707*^9}},
 CellLabel->"In[501]:=",
 CellID->1658428137,ExpressionUUID->"ce45bf95-092f-4b0c-a3d1-8b9cd1ef0ee2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "7", ",", "6", ",", "8", ",", "7", ",", "9"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940274922985818*^9},
 CellLabel->"Out[501]=",
 CellID->846673004,ExpressionUUID->"61e4b78a-1eb4-4051-a612-48e30c9dc581"]
}, Open  ]],

Cell["Now we can Sort each Flattened sublist:", "Text",
 CellChangeTimes->{3.940274928992736*^9},
 CellID->806533206,ExpressionUUID->"28e80080-b4d9-4d72-b5a3-eb9c30150837"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step3", "=", 
  RowBox[{"Sort", "/@", "step2"}]}]], "Input",
 CellChangeTimes->{{3.940274930877388*^9, 3.9402749354750853`*^9}},
 CellLabel->"In[502]:=",
 CellID->2107232623,ExpressionUUID->"b2959e48-6509-4a1a-b449-96eea1f01c69"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "7", ",", "8", ",", "9"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9402749358523817`*^9},
 CellLabel->"Out[502]=",
 CellID->155118279,ExpressionUUID->"45f66f92-aae1-4fca-9cc7-d030020372bf"]
}, Open  ]],

Cell["\<\
It now remains to take the first and last element of each sublist -since they \
are sorted, these will be the new borders:\
\>", "Text",
 CellChangeTimes->{{3.940274943809032*^9, 3.940274945347386*^9}},
 CellID->27767695,ExpressionUUID->"f76efe51-8e51-4095-8c80-ebc64c0859e6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step4", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "[", 
     RowBox[{"[", 
      RowBox[{"{", 
       RowBox[{"1", ",", 
        RowBox[{"-", "1"}]}], "}"}], "]"}], "]"}], "&"}], "/@", 
   "step3"}]}]], "Input",
 CellChangeTimes->{{3.940274946640802*^9, 3.940274957570405*^9}},
 CellLabel->"In[503]:=",
 CellID->272920289,ExpressionUUID->"4d7aa816-ad69-4a6e-9721-1bf07c43325d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402749579544163`*^9},
 CellLabel->"Out[503]=",
 CellID->1714418047,ExpressionUUID->"c368b0db-fa26-4bb2-88fb-37eb18db794e"]
}, Open  ]],

Cell["\<\
This is the result in this case. We can now put all the operations together:\
\>", "Text",
 CellChangeTimes->{3.940274964392866*^9},
 CellID->1436024130,ExpressionUUID->"01664084-a4f2-4fde-92ae-152250f8df5e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Sort", "[", 
     RowBox[{"Flatten", "[", "#", "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"-", "1"}]}], "}"}], "]"}], "]"}], "&"}], "/@", 
  RowBox[{"Split", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"5", ",", "7"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"6", ",", "8"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"7", ",", "9"}], "}"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"#1", "[", 
       RowBox[{"[", "2", "]"}], "]"}], ">=", 
      RowBox[{"#2", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940274965976542*^9, 3.940274988956759*^9}},
 CellLabel->"In[504]:=",
 CellID->1675927631,ExpressionUUID->"25c73ebc-6e6d-43f1-a080-a3131d4a046c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940274989893421*^9},
 CellLabel->"Out[504]=",
 CellID->1654655110,ExpressionUUID->"e22acaeb-36d6-499c-9e91-f2d5984ba206"]
}, Open  ]],

Cell["\<\
This seems to solve the problem, but there is one subtle point. Consider the \
intervals:
{{5,9},{6,7},{8,10}}. Let us see what we get:\
\>", "Text",
 CellChangeTimes->{3.940274997737068*^9},
 CellID->1157959328,ExpressionUUID->"0a677f68-e0e6-43bc-bfd9-9eff74071dcb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Sort", "[", 
     RowBox[{"Flatten", "[", "#", "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"-", "1"}]}], "}"}], "]"}], "]"}], "&"}], "/@", 
  RowBox[{"Split", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"5", ",", "9"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"6", ",", "7"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"8", ",", "10"}], "}"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"#1", "[", 
       RowBox[{"[", "2", "]"}], "]"}], ">=", 
      RowBox[{"#2", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940275016475844*^9, 3.9402750298626947`*^9}},
 CellLabel->"In[505]:=",
 CellID->1642539696,ExpressionUUID->"e2207f2a-2044-45f0-88ee-33552f180720"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "10"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402750310102997`*^9},
 CellLabel->"Out[505]=",
 CellID->2095690264,ExpressionUUID->"6a123083-3d4d-482b-b59a-d1e19317545c"]
}, Open  ]],

Cell["\<\
The problem is, that the resulting two intervals overlap and should have been \
combined into a single one, but this did not happen. The reason is that at \
the time when Split was grouping elements, the intervals {6,7} and {8,10} did \
not overlap - the overlap is induced by a previous interval {5,9} which \
entirely contains {6,7}. But since Split is limited to compare only adjacent \
elements, there seems to be no way
out. Our solution then will be the following: use the code above as a \
\[OpenCurlyDoubleQuote]single step\[CloseCurlyDoubleQuote] transformation, \
and apply it repeatedly to the list until the list stops changing. Here is \
the code for a single step merging:\
\>", "Text",
 CellChangeTimes->{{3.940275039679335*^9, 3.940275046373259*^9}},
 CellID->1386972601,ExpressionUUID->"fbf95c97-10f8-4014-8c57-faa4f31de5a0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mergeIntsOneStep", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mergeIntsOneStep", "[", "ints_List", "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Part", "[", 
       RowBox[{
        RowBox[{"Sort", "[", 
         RowBox[{"Flatten", "[", "#", "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], "]"}], "&"}], ",", 
     RowBox[{"Split", "[", 
      RowBox[{"ints", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"#1", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ">=", 
         RowBox[{"#2", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "&"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.940275050609561*^9, 3.940275097057261*^9}},
 CellLabel->"In[506]:=",
 CellID->59654068,ExpressionUUID->"598828fc-9afd-42b6-bc47-7b6f5aded87a"],

Cell["And this is all we need to add to solve the problem:", "Text",
 CellChangeTimes->{3.94027510365145*^9},
 CellID->588210710,ExpressionUUID->"7f387805-a518-4386-846f-9033c9eef5cc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "mergeInts", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mergeInts", "[", "ints_List", "]"}], ":=", 
   RowBox[{"FixedPoint", "[", 
    RowBox[{"mergeIntsOneStep", ",", "ints"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940275106695909*^9, 3.9402751244787903`*^9}},
 CellLabel->"In[508]:=",
 CellID->1622469845,ExpressionUUID->"4a465241-1d9f-4e04-86e6-f1962ea9e45c"],

Cell["Check now:", "Text",
 CellChangeTimes->{{3.940275126614752*^9, 3.940275128489599*^9}},
 CellID->770288948,ExpressionUUID->"fc270f58-1e27-4ffd-a2b1-fbbef80759e4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mergeInts", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "7"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6", ",", "8"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7", ",", "9"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.940275139695952*^9, 3.9402751415907383`*^9}},
 CellLabel->"In[510]:=",
 CellID->1324583494,ExpressionUUID->"3b995b1d-0207-4dab-9de5-55c86fa23b3c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402751422221537`*^9},
 CellLabel->"Out[510]=",
 CellID->1627313273,ExpressionUUID->"7884f88e-e55a-4b31-bc25-8fa9d69d96dd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mergeInts", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5", ",", "9"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6", ",", "7"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"8", ",", "10"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.94027514462984*^9, 3.940275153807768*^9}},
 CellLabel->"In[511]:=",
 CellID->1173463341,ExpressionUUID->"b4f32976-5213-4759-b20a-d0ad734179ec"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"5", ",", "10"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.940275154662299*^9},
 CellLabel->"Out[511]=",
 CellID->697881034,ExpressionUUID->"1b3a109a-0fec-43e5-8a24-c25e70988e69"]
}, Open  ]],

Cell["Comparing performance", "ItemNumbered",
 CellChangeTimes->{3.9402751627378597`*^9},
 CellID->1130710570,ExpressionUUID->"486bbb00-3ed0-4718-bc19-4f36ba8e309b"],

Cell["\<\
Let us now compare the efficiency of the rule-based and procedural solutions, \
on interval lists of different lengths. We will generate these lists \
randomly. The code to generate the lists is as follows:\
\>", "Text",
 CellChangeTimes->{{3.940275170073838*^9, 3.940275171435753*^9}},
 CellID->769757687,ExpressionUUID->"88a6f77c-157b-491c-85b6-e60434001ba4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "randomIntervals", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"randomIntervals", "[", 
    RowBox[{"min_Integer", ",", "max_Integer", ",", 
     RowBox[{"maxrange_Integer", "?", "Positive"}], ",", 
     RowBox[{"intnum_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "x", "}"}], ",", 
     RowBox[{"Sort", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "=", 
            RowBox[{"RandomInteger", "[", 
             RowBox[{"{", 
              RowBox[{"min", ",", "max"}], "}"}], "]"}]}], ",", 
           RowBox[{"x", "+", 
            RowBox[{"RandomInteger", "[", 
             RowBox[{"{", 
              RowBox[{"1", ",", "maxrange"}], "}"}], "]"}]}]}], "}"}], ",", 
         RowBox[{"{", "intnum", "}"}]}], "]"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"#1", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "<", 
         RowBox[{"#2", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "&"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.9402751742358837`*^9, 3.940275222088253*^9}, {
  3.940275260098827*^9, 3.940275287790559*^9}},
 CellLabel->"In[512]:=",
 CellID->209891916,ExpressionUUID->"6333e3dc-7c39-42a2-a0bc-d40717061eed"],

Cell["\<\
For instance, this will be a list of 10 intervals with borders from 1 to 100 \
and maximal length of an interval 8:\
\>", "Text",
 CellChangeTimes->{{3.940275294399164*^9, 3.940275297107424*^9}},
 CellID->1359700354,ExpressionUUID->"45faecd7-981e-4874-91ab-2fc3d2ac19bd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testints", "=", 
  RowBox[{"randomIntervals", "[", 
   RowBox[{"1", ",", "100", ",", "8", ",", "10"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940275298682959*^9, 3.940275308487852*^9}},
 CellLabel->"In[514]:=",
 CellID->220418027,ExpressionUUID->"cd68d3f4-37e6-4e32-9388-ab0a0971447e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"21", ",", "24"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"34", ",", "37"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"41", ",", "45"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"42", ",", "44"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"56", ",", "63"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"68", ",", "72"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"72", ",", "79"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"84", ",", "85"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"94", ",", "98"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"96", ",", "104"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402753087872677`*^9},
 CellLabel->"Out[514]=",
 CellID->1624190628,ExpressionUUID->"128538ef-4083-447c-965b-477353c0f99a"]
}, Open  ]],

Cell["We now test the performance:", "Text",
 CellChangeTimes->{3.940275322972685*^9},
 CellID->1720198709,ExpressionUUID->"e023a18f-09d5-40cf-a1b2-f290b897f51d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"mergeIntervals", "[", "testints", "]"}], "//", "Timing"}]], "Input",\

 CellChangeTimes->{{3.940275324482692*^9, 3.94027533214999*^9}},
 CellLabel->"In[515]:=",
 CellID->748591490,ExpressionUUID->"37c73b98-d39f-4cca-a01c-4e43c1e053ed"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00015`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"21", ",", "24"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"34", ",", "37"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"41", ",", "45"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"56", ",", "63"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"68", ",", "79"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"84", ",", "85"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"94", ",", "104"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402753324243317`*^9},
 CellLabel->"Out[515]=",
 CellID->761238949,ExpressionUUID->"1d9a4d85-9777-4227-bc18-e801200e9ad1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"mergeInts", "[", "testints", "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.940275334443733*^9, 3.940275341737132*^9}},
 CellLabel->"In[516]:=",
 CellID->1288250812,ExpressionUUID->"3a2e2ecf-ac98-48bf-8e57-45e19c92e8bf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000097`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"21", ",", "24"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"34", ",", "37"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"41", ",", "45"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"56", ",", "63"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"68", ",", "79"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"84", ",", "85"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"94", ",", "104"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940275342026248*^9},
 CellLabel->"Out[516]=",
 CellID->1137334491,ExpressionUUID->"5937b8cb-c3f9-4bb3-b618-7a1ee099a646"]
}, Open  ]],

Cell["\<\
For this very small list, the performance is roughly the same. Let us \
increase the number of intervals:\
\>", "Text",
 CellChangeTimes->{3.940275352042141*^9},
 CellID->428848290,ExpressionUUID->"c5f0cd6c-001b-402c-9b1c-2aceba307cf5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"testints", "=", 
    RowBox[{"randomIntervals", "[", 
     RowBox[{"1", ",", "1000", ",", "15", ",", "100"}], "]"}]}], ")"}], "//", 
  "Short"}]], "Input",
 CellChangeTimes->{{3.940275357997821*^9, 3.940275369311054*^9}},
 CellLabel->"In[517]:=",
 CellID->726362820,ExpressionUUID->"82eb6a78-7599-4d67-8b96-c478a9056ef2"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "15"}], "}"}], ",", 
    RowBox[{"\[LeftSkeleton]", "98", "\[RightSkeleton]"}], ",", 
    RowBox[{"{", 
     RowBox[{"1000", ",", "1014"}], "}"}]}], "}"}],
  Short]], "Output",
 CellChangeTimes->{3.94027536969442*^9},
 CellLabel->"Out[517]//Short=",
 CellID->107302135,ExpressionUUID->"c69dd8a0-1854-4a83-9afb-27e2f2b05d73"]
}, Open  ]],

Cell["Now:", "Text",
 CellChangeTimes->{{3.940275373032935*^9, 3.940275373676136*^9}},
 CellID->801908544,ExpressionUUID->"be116ba1-6cbe-4b3d-8df8-da0a2b8d77d9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"mergeIntervals", "[", "testints", "]"}], "//", "Timing"}]], "Input",\

 CellChangeTimes->{{3.940275374714858*^9, 3.940275383266733*^9}},
 CellLabel->"In[518]:=",
 CellID->1608187735,ExpressionUUID->"4aff6fa1-9c37-4f3c-985a-9f2f37c4ed76"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.002403`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "15"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"20", ",", "47"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"59", ",", "86"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"103", ",", "120"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"134", ",", "156"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"160", ",", "177"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"181", ",", "195"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"201", ",", "230"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"236", ",", "247"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"263", ",", "274"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"303", ",", "317"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"328", ",", "333"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"341", ",", "347"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"355", ",", "358"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"362", ",", "367"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"368", ",", "371"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"380", ",", "393"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"394", ",", "411"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"425", ",", "449"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"451", ",", "460"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"469", ",", "479"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"483", ",", "484"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"486", ",", "504"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"524", ",", "534"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"541", ",", "553"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"554", ",", "565"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"582", ",", "587"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"608", ",", "610"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"616", ",", "627"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"629", ",", "630"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"646", ",", "649"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"663", ",", "665"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"666", ",", "673"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"674", ",", "702"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"711", ",", "714"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"718", ",", "720"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"726", ",", "740"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"757", ",", "763"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"764", ",", "791"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"793", ",", "800"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"803", ",", "810"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"852", ",", "876"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"886", ",", "899"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"901", ",", "916"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"925", ",", "933"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"946", ",", "962"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"974", ",", "977"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"981", ",", "999"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1000", ",", "1014"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940275383669078*^9},
 CellLabel->"Out[518]=",
 CellID->1831686592,ExpressionUUID->"5e2999f2-0474-451b-bd83-2e4b46490cd6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"mergeInts", "[", "testints", "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.9402753878647223`*^9, 3.94027539419034*^9}},
 CellLabel->"In[519]:=",
 CellID->1896602114,ExpressionUUID->"6a37b17a-5b2d-47c9-b3a1-328936c4f5b7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000569`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "15"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"20", ",", "47"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"59", ",", "86"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"103", ",", "120"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"134", ",", "156"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"160", ",", "177"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"181", ",", "195"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"201", ",", "230"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"236", ",", "247"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"263", ",", "274"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"303", ",", "317"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"328", ",", "333"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"341", ",", "347"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"355", ",", "358"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"362", ",", "367"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"368", ",", "371"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"380", ",", "393"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"394", ",", "411"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"425", ",", "449"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"451", ",", "460"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"469", ",", "479"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"483", ",", "484"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"486", ",", "504"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"524", ",", "534"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"541", ",", "553"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"554", ",", "565"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"582", ",", "587"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"608", ",", "610"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"616", ",", "627"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"629", ",", "630"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"646", ",", "649"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"663", ",", "665"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"666", ",", "673"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"674", ",", "702"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"711", ",", "714"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"718", ",", "720"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"726", ",", "740"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"757", ",", "763"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"764", ",", "791"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"793", ",", "800"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"803", ",", "810"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"852", ",", "876"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"886", ",", "899"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"901", ",", "916"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"925", ",", "933"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"946", ",", "962"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"974", ",", "977"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"981", ",", "999"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1000", ",", "1014"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940275394439308*^9},
 CellLabel->"Out[519]=",
 CellID->602786050,ExpressionUUID->"c7889295-1403-4f33-b46b-1b93a51725d6"]
}, Open  ]],

Cell["\<\
Here we see that our functional version is already 5 times faster. Let us \
increase even more:\
\>", "Text",
 CellChangeTimes->{3.940275403141683*^9},
 CellID->1308018774,ExpressionUUID->"21919dc1-4d2a-41a0-91f2-f482b42c7ba9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"testints", "=", 
    RowBox[{"randomIntervals", "[", 
     RowBox[{"1", ",", "4000", ",", "25", ",", "500"}], "]"}]}], ")"}], "//", 
  "Short"}]], "Input",
 CellChangeTimes->{{3.940275416371997*^9, 3.940275421998704*^9}},
 CellLabel->"In[520]:=",
 CellID->81440279,ExpressionUUID->"8e4458d1-b5fa-45f8-bc77-8ea81ebd03c0"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "23"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "9"}], "}"}], ",", 
    RowBox[{"\[LeftSkeleton]", "497", "\[RightSkeleton]"}], ",", 
    RowBox[{"{", 
     RowBox[{"3997", ",", "4018"}], "}"}]}], "}"}],
  Short]], "Output",
 CellChangeTimes->{3.940275422478266*^9},
 CellLabel->"Out[520]//Short=",
 CellID->554871177,ExpressionUUID->"760a27c0-3aba-4c98-8655-569576501036"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"mergeIntervals", "[", "testints", "]"}], "//", 
    RowBox[{
     RowBox[{"Short", "[", "#", "]"}], "&"}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940275430263441*^9, 3.940275440212182*^9}},
 CellLabel->"In[521]:=",
 CellID->1017525663,ExpressionUUID->"26a5b63f-fee9-4af0-bdfc-1272103f8777"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.031011`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "65"}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "101", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"3997", ",", "4018"}], "}"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940275441045035*^9},
 CellLabel->"Out[521]=",
 CellID->380798974,ExpressionUUID->"b66b4ba1-90c9-476e-a324-dd90ce03265e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"mergeInts", "[", "testints", "]"}], "//", 
    RowBox[{
     RowBox[{"Short", "[", "#", "]"}], "&"}]}], ")"}], "//", 
  "Timing"}]], "Input",
 CellChangeTimes->{{3.940275451337538*^9, 3.9402754519258966`*^9}},
 CellLabel->"In[522]:=",
 CellID->587087958,ExpressionUUID->"5f377107-2b48-42fc-bde8-af68b2d44f26"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.002773`", ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "65"}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "101", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"3997", ",", "4018"}], "}"}]}], "}"}],
    Short]}], "}"}]], "Output",
 CellChangeTimes->{3.940275452569013*^9},
 CellLabel->"Out[522]=",
 CellID->1259928829,ExpressionUUID->"6e78aff6-5952-4858-94c9-c3e0c6f9ff34"]
}, Open  ]],

Cell["\<\
Here the difference is more than an order of magnitude. What happens is that \
these solutions have different computational complexities. The reason is that \
the functional solution is able to group more than two overlapping intervals \
together in a single run through the list, while the rule-based solution can \
only group two adjacent intervals at a time. Thus, it needs more runs through \
the list, and as the length of the list increases, we pay for it more and \
more. In other words, the inefficiency is because it repeatedly checks \
non-overlapping intervals for matching the overlap pattern. In terms of our \
rules of thumb, this is a case for this one: \[OpenCurlyDoubleQuote]avoid \
inefficient patterns\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.9402754622960777`*^9, 3.9402754745602207`*^9}},
 CellID->1207485723,ExpressionUUID->"c297c70f-3dfe-44f3-ae3c-f27a92a288c9"],

Cell["Concluding remarks", "ItemNumbered",
 CellChangeTimes->{3.940275481161237*^9},
 CellID->1981157929,ExpressionUUID->"67556497-a5ed-4bea-962f-47015156c48f"],

Cell["\<\
So, what should be our conclusion? Is the rule-based solution necessarily \
bad, should we avoid it always and at all costs? I don\[CloseCurlyQuote]t \
think so. It is certainly easier to write and it communicates the idea more \
clearly. What is important is to develop the skill to recognize inefficiency \
in the code, so that, if a given part of the code turns out to be \
time-critical, you will be able to quickly spot the \
\[OpenCurlyDoubleQuote]bottleneck\[CloseCurlyDoubleQuote] and rewrite the \
code
more efficiently.\
\>", "Text",
 CellChangeTimes->{{3.940275487799502*^9, 3.940275492544526*^9}},
 CellID->587365968,ExpressionUUID->"2c1419f1-ef59-4df0-b948-f38a04551ee3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example: local (relative) maxima in a list revisited", "Subsubsection",
 CellChangeTimes->{3.940275499368127*^9},
 CellID->355978449,ExpressionUUID->"c1ba58ef-5e35-4eec-bdf4-d5d2a9451be3"],

Cell["\<\
Let us revisit a problem of finding a list of local maxima for a given list - \
that is, a list of all elements which are larger than any element before it \
in the input list. We have given a solution using Fold (the best we have) and \
a procedural solution, in the chapter on Fold. Now we will consider a \
solution based on FixedPoint. It will not be as efficient, but it represents \
an interesting way of thinking in my view.\
\>", "Text",
 CellChangeTimes->{{3.940275505610029*^9, 3.9402755122916203`*^9}},
 CellID->40351801,ExpressionUUID->"11277d2b-f905-422e-bdf4-cb4f2104be45"],

Cell["So, here is our test list:", "Text",
 CellChangeTimes->{{3.940275505610029*^9, 3.9402755106634483`*^9}, 
   3.940276436154874*^9},
 CellID->175724423,ExpressionUUID->"fc4a8508-e011-4c97-a38d-1c1438e1482d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tlist", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "40"}], "}"}], "]"}], ",", 
    RowBox[{"{", "20", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940275517135318*^9, 3.940275528750504*^9}},
 CellLabel->"In[523]:=",
 CellID->1698921571,ExpressionUUID->"7e987c89-c1d8-4d21-85d4-bc216ba6b81f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "27", ",", "7", ",", "10", ",", "23", ",", "33", ",", "13", ",", "21", ",", 
   "30", ",", "20", ",", "13", ",", "9", ",", "15", ",", "5", ",", "27", ",", 
   "25", ",", "26", ",", "31", ",", "30", ",", "38", ",", "30"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.940275528979023*^9},
 CellLabel->"Out[523]=",
 CellID->1598584533,ExpressionUUID->"e14fd089-1703-4a2f-b9e2-fa6553f0b435"]
}, Open  ]],

Cell["\<\
Consider a following transformation of this list: we will Split it into \
sublists of decreasing (non-increasing) elements, and then only keep a \
maximum (the left - most element) of each sublist:\
\>", "Text",
 CellChangeTimes->{{3.940275535337771*^9, 3.940275539613769*^9}, {
  3.940276436181458*^9, 3.940276436207953*^9}},
 CellID->242338514,ExpressionUUID->"02978c61-9c46-492b-8c3e-4dc80282128e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step1", "=", 
  RowBox[{"Split", "[", 
   RowBox[{"tlist", ",", "GreaterEqual"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940275541195723*^9, 3.940275550470025*^9}},
 CellLabel->"In[524]:=",
 CellID->243657202,ExpressionUUID->"dc25f569-eb5e-499b-bebe-125934a037bf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"27", ",", "7"}], "}"}], ",", 
   RowBox[{"{", "10", "}"}], ",", 
   RowBox[{"{", "23", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"33", ",", "13"}], "}"}], ",", 
   RowBox[{"{", "21", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"30", ",", "20", ",", "13", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"27", ",", "25"}], "}"}], ",", 
   RowBox[{"{", "26", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"31", ",", "30"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"38", ",", "30"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.94027555086349*^9},
 CellLabel->"Out[524]=",
 CellID->1029560372,ExpressionUUID->"943e1ed3-12a6-48f6-85be-afbe8a879b04"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step1", "=", 
  RowBox[{"Map", "[", 
   RowBox[{"First", ",", "step1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940275553720106*^9, 3.9402755593392687`*^9}},
 CellLabel->"In[525]:=",
 CellID->1297720644,ExpressionUUID->"dda1ac8a-ba4f-4f7c-a523-bdba60148ca3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "27", ",", "10", ",", "23", ",", "33", ",", "21", ",", "30", ",", "15", ",",
    "27", ",", "26", ",", "31", ",", "38"}], "}"}]], "Output",
 CellChangeTimes->{3.940275559851575*^9},
 CellLabel->"Out[525]=",
 CellID->1269715108,ExpressionUUID->"469e2a19-d225-4479-9eb0-d41abd56511d"]
}, Open  ]],

Cell["Or, we can combine this as:", "Text",
 CellChangeTimes->{3.940275567239758*^9, 3.94027643623503*^9},
 CellID->556819917,ExpressionUUID->"bb7a761c-ae3e-410b-b724-c73df3f809ed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step1", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"First", ",", 
      RowBox[{"Split", "[", 
       RowBox[{"#", ",", "GreaterEqual"}], "]"}]}], "]"}], "&"}], "[", 
   "tlist", "]"}]}]], "Input",
 CellChangeTimes->{{3.9402755686132097`*^9, 3.940275579816843*^9}},
 CellLabel->"In[526]:=",
 CellID->593223913,ExpressionUUID->"d32b1815-b9d5-4942-b7a4-01bd3b3b837d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "27", ",", "10", ",", "23", ",", "33", ",", "21", ",", "30", ",", "15", ",",
    "27", ",", "26", ",", "31", ",", "38"}], "}"}]], "Output",
 CellChangeTimes->{3.9402755801583023`*^9},
 CellLabel->"Out[526]=",
 CellID->1016860,ExpressionUUID->"a367ccaf-d74b-4498-aae4-ce27b8d10ee1"]
}, Open  ]],

Cell["Now, we can iterate a few times:", "Text",
 CellChangeTimes->{3.9402755875791397`*^9, 3.940276436262699*^9},
 CellID->2057980491,ExpressionUUID->"8c1d6545-7b78-4852-8159-dc49fe95eda6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step2", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"First", ",", 
      RowBox[{"Split", "[", 
       RowBox[{"#", ",", "GreaterEqual"}], "]"}]}], "]"}], "&"}], "[", 
   "step1", "]"}]}]], "Input",
 CellChangeTimes->{{3.940275589230196*^9, 3.9402756096741447`*^9}},
 CellLabel->"In[528]:=",
 CellID->1777960212,ExpressionUUID->"5869808c-8cea-48b5-a618-e3f4f2c044f8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "27", ",", "23", ",", "33", ",", "30", ",", "27", ",", "31", ",", "38"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.940275603804364*^9, 3.9402756100353127`*^9}},
 CellLabel->"Out[528]=",
 CellID->899399935,ExpressionUUID->"327ffeb9-9439-40bd-b786-7b1f81fb295e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"step3", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"First", ",", 
      RowBox[{"Split", "[", 
       RowBox[{"#", ",", "GreaterEqual"}], "]"}]}], "]"}], "&"}], "[", 
   "step2", "]"}]}]], "Input",
 CellChangeTimes->{{3.940275618169045*^9, 3.9402756206389*^9}},
 CellLabel->"In[529]:=",
 CellID->1643702812,ExpressionUUID->"a12f07d3-b52d-4e8f-a2f8-596b79c213c2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"27", ",", "33", ",", "31", ",", "38"}], "}"}]], "Output",
 CellChangeTimes->{3.9402756210407343`*^9},
 CellLabel->"Out[529]=",
 CellID->977389912,ExpressionUUID->"1501ddb2-80f7-4951-9edb-28bf08835992"]
}, Open  ]],

Cell["It is clear that this is a task for FixedPoint:", "Text",
 CellChangeTimes->{3.940275628979282*^9, 3.940276436290996*^9},
 CellID->1889423061,ExpressionUUID->"3aadc9a8-20ae-41f1-b2f8-7c6465a0fb20"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FixedPoint", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"First", ",", 
      RowBox[{"Split", "[", 
       RowBox[{"#", ",", "GreaterEqual"}], "]"}]}], "]"}], "&"}], ",", 
   "tlist"}], "]"}]], "Input",
 CellChangeTimes->{{3.9402756387529707`*^9, 3.9402756442743692`*^9}},
 CellLabel->"In[530]:=",
 CellID->667074279,ExpressionUUID->"8e09ee9d-14f4-4a74-9f96-432e988fbcb8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"27", ",", "33", ",", "38"}], "}"}]], "Output",
 CellChangeTimes->{3.940275644670651*^9},
 CellLabel->"Out[530]=",
 CellID->857792909,ExpressionUUID->"a27bc809-811a-4755-8600-bcd0e84b8537"]
}, Open  ]],

Cell["So, our function will look like:", "Text",
 CellChangeTimes->{3.9402756520186377`*^9, 3.940276436317801*^9},
 CellID->2007365234,ExpressionUUID->"cc3ca929-8ea6-4dff-b800-89c2f04eef5b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "localMaxList", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"localMaxList", "[", "x_List", "]"}], ":=", 
   RowBox[{"FixedPoint", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{"First", ",", 
        RowBox[{"Split", "[", 
         RowBox[{"#", ",", "GreaterEqual"}], "]"}]}], "]"}], "&"}], ",", 
     "x"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940275653696508*^9, 3.9402756729667*^9}},
 CellLabel->"In[531]:=",
 CellID->1880872112,ExpressionUUID->"545c0263-afdf-4468-afe9-60698091674a"],

Cell["\<\
Let me note once again that this solution is less efficient than those we \
considered before, since it needs many iterations. However, it represents an \
interesting way of thinking which may be efficient in some other situations.\
\>", "Text",
 CellChangeTimes->{{3.940275678944566*^9, 3.940275681712307*^9}},
 CellID->1430856298,ExpressionUUID->"a8ebf1ce-fbb6-4e95-98ba-7f9c1b82249f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Operators on functions", "Subsection",
 CellChangeTimes->{3.940275689072446*^9},
 CellID->139763556,ExpressionUUID->"c5a4ccbc-0a19-4c43-85f4-c94a3d7fd188"],

Cell[CellGroupData[{

Cell["Through", "Subsubsection",
 CellChangeTimes->{3.940275697478608*^9},
 CellID->853604117,ExpressionUUID->"be6055e3-630d-4d33-848c-9cdeee1e53ba"],

Cell["Syntax and functionality", "ItemNumbered",
 CellChangeTimes->{3.9402757056628857`*^9},
 CellID->1333632459,ExpressionUUID->"88221874-32df-404c-bf3b-509b8f2e4756"],

Cell["\<\
This function is quite useful at times, although generally used less than \
those we discussed already. Actually, my feeling is that it is used less than \
it deserves to be. The format is\
\>", "Text",
 CellChangeTimes->{{3.94027571155933*^9, 3.94027571351219*^9}},
 CellID->1073914674,ExpressionUUID->"245f0da3-c965-47b1-b4be-bb047e2a64cc"],

Cell[BoxData[
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"p", "[", 
    RowBox[{"f1", ",", "f2", ",", "...", ",", "fn"}], "]"}], "[", "x", "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9402757164886007`*^9, 3.940275723803151*^9}},
 CellID->1873570906,ExpressionUUID->"64c77dfe-ef4c-4025-b0d6-71d41cddcce3"],

Cell["The result is", "Text",
 CellChangeTimes->{{3.940275726113091*^9, 3.940275728258518*^9}},
 CellID->1734325516,ExpressionUUID->"c35d0eb3-6d43-44c5-8300-053fc1e497e0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"p", ",", "f", ",", "g", ",", "h", ",", "x"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"p", "[", 
    RowBox[{"f", ",", "g", ",", "h"}], "]"}], "[", "x", "]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.9402757292197742`*^9, 3.9402757433480787`*^9}},
 CellLabel->"In[533]:=",
 CellID->1831471585,ExpressionUUID->"51acd30e-c03f-4675-b677-13cffa226dd6"],

Cell[BoxData[
 RowBox[{"p", "[", 
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"g", "[", "x", "]"}], ",", 
   RowBox[{"h", "[", "x", "]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.940275743696241*^9},
 CellLabel->"Out[534]=",
 CellID->182620933,ExpressionUUID->"02cf5ee1-b9af-49a9-9702-4eb41c22f8f6"]
}, Open  ]],

Cell["Initial examples", "ItemNumbered",
 CellChangeTimes->{3.940275760025599*^9},
 CellID->555889368,ExpressionUUID->"ed78f25b-e259-4918-82e4-ce4d11e74bdf"],

Cell["As I said, this can be quite useful. For instance:", "Text",
 CellChangeTimes->{3.9402757660736427`*^9},
 CellID->1278743526,ExpressionUUID->"22c65f81-d440-4ca7-abd2-daa5da27dabf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"Sin", "*", "Cos"}], ")"}], "[", "x", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.940275767857437*^9, 3.940275774591073*^9}},
 CellLabel->"In[535]:=",
 CellID->26700509,ExpressionUUID->"98abac14-cad5-40b7-98b0-5ac08ae5ef94"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Cos", "[", "x", "]"}], " ", 
  RowBox[{"Sin", "[", "x", "]"}]}]], "Output",
 CellChangeTimes->{3.940275774882725*^9},
 CellLabel->"Out[535]=",
 CellID->3025097,ExpressionUUID->"6e9037e4-f131-47a7-bf46-d35319da902f"]
}, Open  ]],

Cell["Or, when we have a list of functions:", "Text",
 CellChangeTimes->{3.940275781141004*^9},
 CellID->1450681398,ExpressionUUID->"f484c42e-58f7-4595-8abc-128f349a8923"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"f1", ",", "f2", ",", "f3"}], "}"}], "[", "x", "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9402757830709467`*^9, 3.940275788975164*^9}},
 CellLabel->"In[536]:=",
 CellID->844726068,ExpressionUUID->"1ab56249-1652-4f97-8574-5f63b6c35154"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f1", "[", "x", "]"}], ",", 
   RowBox[{"f2", "[", "x", "]"}], ",", 
   RowBox[{"f3", "[", "x", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9402757893219633`*^9},
 CellLabel->"Out[536]=",
 CellID->872762766,ExpressionUUID->"ae3a1a98-cb75-4e6b-85b8-5fa18e73554b"]
}, Open  ]],

Cell["When it goes wrong", "ItemNumbered",
 CellChangeTimes->{3.940275799928514*^9},
 CellID->1210499152,ExpressionUUID->"1c8547cf-6b4b-42c4-8e82-09b9c2e5160a"],

Cell["But be careful - this for example may be a surprise:", "Text",
 CellChangeTimes->{3.940275806459176*^9},
 CellID->1746659633,ExpressionUUID->"c9dc2e31-f9da-4b1c-b97a-31b161d9a03b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"Sin", "/", "Cos"}], ")"}], "[", "x", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.9402758085106993`*^9, 3.9402758147457952`*^9}},
 CellLabel->"In[537]:=",
 CellID->1640193249,ExpressionUUID->"dea8e040-8fe4-4c69-abfd-07e645a941fd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   FractionBox["1", "Cos"], "[", "x", "]"}], " ", 
  RowBox[{"Sin", "[", "x", "]"}]}]], "Output",
 CellChangeTimes->{3.940275815082459*^9},
 CellLabel->"Out[537]=",
 CellID->1504652436,ExpressionUUID->"e7dd2c74-9f86-47fc-b3d2-9346fd9ff141"]
}, Open  ]],

Cell["\<\
The last output is such because division has been internally rewritten as a \
multiplication by the inverse, as can be seen from the FullForm:\
\>", "Text",
 CellChangeTimes->{{3.940275822042919*^9, 3.9402758238103933`*^9}},
 CellID->2073548427,ExpressionUUID->"a59d221c-74ab-4271-b340-4685c2e4e4b3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"Sin", "/", "Cos"}], "]"}]], "Input",
 CellChangeTimes->{{3.940275825507432*^9, 3.940275829622264*^9}},
 CellLabel->"In[538]:=",
 CellID->580549302,ExpressionUUID->"f28015c8-a954-442d-bf16-b51c1d6fe647"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Times", "[", 
    RowBox[{
     RowBox[{"Power", "[", 
      RowBox[{"Cos", ",", 
       RowBox[{"-", "1"}]}], "]"}], ",", "Sin"}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.9402758299515944`*^9},
 CellLabel->"Out[538]//FullForm=",
 CellID->720521366,ExpressionUUID->"62992511-21a6-487a-8a21-3cae7f4adfbb"]
}, Open  ]],

Cell["\<\
There is an alternative (for this particular case) which will do what we \
failed to accomplish with Through:\
\>", "Text",
 CellChangeTimes->{3.940275844352593*^9},
 CellID->142312929,ExpressionUUID->"80f6d7ce-c3b7-4466-8690-467711b9eec7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Head", "[", "#", "]"}], "===", "Symbol"}], ",", 
      RowBox[{"#", "[", "x", "]"}], ",", "#"}], "]"}], "&"}], ",", 
   RowBox[{"Sin", "/", "Cos"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940275846866458*^9, 3.940275866781698*^9}},
 CellLabel->"In[539]:=",
 CellID->1943119352,ExpressionUUID->"003e5707-8362-4bf2-9fb4-307fb9daa721"],

Cell[BoxData[
 RowBox[{"Tan", "[", "x", "]"}]], "Output",
 CellChangeTimes->{3.94027586714727*^9},
 CellLabel->"Out[539]=",
 CellID->1573914106,ExpressionUUID->"1eb251de-d395-4505-acb2-a4773c57142d"]
}, Open  ]],

Cell["The result has been simplified to Tan[x] immediately.", "Text",
 CellChangeTimes->{3.940275875174315*^9},
 CellID->70815796,ExpressionUUID->"b2d981b4-443d-446b-84bf-1e6e1cb1c60f"],

Cell["\<\
Let me now illustrate the use of Through in a less trivial setting, where it \
is really useful.\
\>", "Text",
 CellChangeTimes->{{3.940275880835635*^9, 3.940275886870337*^9}, 
   3.94074063304635*^9},
 CellID->495142934,ExpressionUUID->"dbf4d3d8-5bcf-4277-85dc-6934ca822189"],

Cell["\<\
Better example: picking list elements randomly with prescribed probabilities\
\>", "ItemNumbered",
 CellChangeTimes->{3.9402758961802053`*^9},
 CellID->368159613,ExpressionUUID->"b61a5346-a03b-480c-a69b-237399cc1320"],

Cell["\<\
Here is a problem: given a list of elements, like for instance:\
\>", "Text",
 CellChangeTimes->{3.940275901471362*^9},
 CellID->758228684,ExpressionUUID->"0039ecc8-8493-4826-ac59-3c98d5d75465"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{
   "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f", ",", "p1", ",", 
    "r1", ",", "action"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r1", "=", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f"}], "}"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.9402759038952503`*^9, 3.940275916670741*^9}},
 CellLabel->"In[540]:=",
 CellID->136888,ExpressionUUID->"9ee4dd55-54a1-43cb-ac4f-312cdc651477"],

Cell["\<\
And a list of probabilities of picking these objects (which have to add to \
1), like for instance\
\>", "Text",
 CellChangeTimes->{3.940275923040369*^9},
 CellID->1186803625,ExpressionUUID->"7aac8b64-a37a-4c93-96bc-c8cdc651ad60"],

Cell[BoxData[
 RowBox[{
  RowBox[{"p1", "=", 
   RowBox[{"{", 
    RowBox[{
    "0.1", ",", "0.2", ",", "0.1", ",", "0.15", ",", "0.25", ",", "0.2"}], 
    "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.940275925063491*^9, 3.940275935152824*^9}},
 CellLabel->"In[542]:=",
 CellID->1702507244,ExpressionUUID->"80dccd97-537d-4159-b8d3-b2bd33e111d2"],

Cell["\<\
Write a function which will randomly pick an object from the list according \
to these probabilities.\
\>", "Text",
 CellChangeTimes->{{3.940275942811799*^9, 3.940275945389621*^9}},
 CellID->1041967495,ExpressionUUID->"4ba17003-071e-4fb6-a806-10e8179e4994"],

Cell["\<\
The idea of the solution will be the following: we will split the interval \
[0,1] of the real line according to these probabilities. Then, we will \
generate a random number in the range [0,1], assuming the uniform \
distribution of the numbers for the built-in pseudo-random generator. We will \
then analyze, in which interval the generated number ends up being, and will \
pick the corresponding element of the list.\
\>", "Text",
 CellChangeTimes->{{3.940275942811799*^9, 3.940275952454302*^9}},
 CellID->1666934087,ExpressionUUID->"bfafbf27-8db7-4e8b-a138-c9c579d98828"],

Cell[TextData[{
 "Let us first define an auxiliary function called <ineq>, which will take as \
two arguments two ends of the interval and return a pure function that checks \
whether a number belongs to this interval (pay attention - it returns a ",
 StyleBox["function",
  FontSlant->"Italic"],
 ")"
}], "Text",
 CellChangeTimes->{{3.940275942811799*^9, 3.9402759559711657`*^9}},
 CellID->1068925091,ExpressionUUID->"3a015b5e-7039-4630-84c7-02a73649956f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "ineq", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ineq", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"x", "<", "#", "<=", "y"}], "&"}], ")"}]}]}], "Input",
 CellChangeTimes->{{3.940275962896285*^9, 3.9402759745287867`*^9}},
 CellLabel->"In[543]:=",
 CellID->1765600124,ExpressionUUID->"050689de-bc36-4d48-a26f-16be8df0e2f2"],

Cell["Check:", "Text",
 CellChangeTimes->{{3.9402759767092237`*^9, 3.940275977535548*^9}},
 CellID->289653159,ExpressionUUID->"64b210d8-6d70-4ab2-b5c3-01e59fd439d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fn15", "=", 
  RowBox[{"ineq", "[", 
   RowBox[{"1", ",", "5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940275981087573*^9, 3.940275985657366*^9}},
 CellLabel->"In[545]:=",
 CellID->489627524,ExpressionUUID->"06e4ea55-079b-4744-8f83-3e86e97c87cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"1", "<", "#1", "\[LessEqual]", "5"}], "&"}]], "Output",
 CellChangeTimes->{3.940275986225175*^9},
 CellLabel->"Out[545]=",
 CellID->1833639775,ExpressionUUID->"8bf7e9df-4e57-40f8-a274-2266d26990d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fn15", "/@", 
  RowBox[{"{", 
   RowBox[{"1", ",", "3", ",", "5"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.940275997822144*^9, 3.940276001261731*^9}},
 CellLabel->"In[546]:=",
 CellID->547249735,ExpressionUUID->"404c1fd5-2ba2-47fc-87e4-981dc6b73b3d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", "True", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.940276001681497*^9},
 CellLabel->"Out[546]=",
 CellID->580827289,ExpressionUUID->"8951451c-0147-482d-9615-15a18829146f"]
}, Open  ]],

Cell["\<\
Now, let us partition an interval [0,1] into several intervals, according to \
the probabilities. We will first create a list of partial sums with FoldList:\
\
\>", "Text",
 CellChangeTimes->{{3.940276008122818*^9, 3.9402760097645397`*^9}},
 CellID->1651070608,ExpressionUUID->"ba5830ff-883d-423c-afd3-a837e81d69e8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"margins", "=", 
  RowBox[{"FoldList", "[", 
   RowBox[{"Plus", ",", "0", ",", "p1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940276011403308*^9, 3.940276017172472*^9}},
 CellLabel->"In[547]:=",
 CellID->1928237204,ExpressionUUID->"3fd634bf-180a-4bc1-81f5-471aee0bb289"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0.1`", ",", "0.30000000000000004`", ",", "0.4`", ",", "0.55`", 
   ",", "0.8`", ",", "1.`"}], "}"}]], "Output",
 CellChangeTimes->{3.940276017530957*^9},
 CellLabel->"Out[547]=",
 CellID->1989292464,ExpressionUUID->"37e0b978-13c2-4531-bbe0-71e1a0a90ebb"]
}, Open  ]],

Cell["\<\
These are the margins of our intervals. Now, let us use Partition to create \
the intervals:\
\>", "Text",
 CellChangeTimes->{3.94027602508844*^9},
 CellID->2013025952,ExpressionUUID->"65238582-b76b-42e0-b642-54a6b633fdbc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"intervals", "=", 
  RowBox[{"Partition", "[", 
   RowBox[{"margins", ",", "2", ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940276026941779*^9, 3.940276033643458*^9}},
 CellLabel->"In[548]:=",
 CellID->431368341,ExpressionUUID->"3f4afa6f-fcba-4ee3-b01c-58b4c9c72345"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0.1`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.30000000000000004`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.30000000000000004`", ",", "0.4`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.4`", ",", "0.55`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.55`", ",", "0.8`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.8`", ",", "1.`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.940276034069036*^9},
 CellLabel->"Out[548]=",
 CellID->1035657736,ExpressionUUID->"b893be3e-0803-4346-ac25-5632234e7f21"]
}, Open  ]],

Cell["\<\
We now Map-Apply the <ineq> function to this list (we need Apply since it \
takes a sequence of 2 arguments rather than a list)\
\>", "Text",
 CellChangeTimes->{{3.9402760401041594`*^9, 3.940276042132595*^9}},
 CellID->631486169,ExpressionUUID->"ed382676-dba0-45c9-946f-22e37518f794"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"funs", "=", 
  RowBox[{"ineq", "@@@", "intervals"}]}]], "Input",
 CellChangeTimes->{{3.9402760435934467`*^9, 3.9402760482241173`*^9}},
 CellLabel->"In[549]:=",
 CellID->1961214510,ExpressionUUID->"2d392032-3163-4b41-8283-b9dd2e986ca4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"0", "<", "#1", "\[LessEqual]", "0.1`"}], "&"}], ",", 
   RowBox[{
    RowBox[{"0.1`", "<", "#1", "\[LessEqual]", "0.30000000000000004`"}], 
    "&"}], ",", 
   RowBox[{
    RowBox[{"0.30000000000000004`", "<", "#1", "\[LessEqual]", "0.4`"}], 
    "&"}], ",", 
   RowBox[{
    RowBox[{"0.4`", "<", "#1", "\[LessEqual]", "0.55`"}], "&"}], ",", 
   RowBox[{
    RowBox[{"0.55`", "<", "#1", "\[LessEqual]", "0.8`"}], "&"}], ",", 
   RowBox[{
    RowBox[{"0.8`", "<", "#1", "\[LessEqual]", "1.`"}], "&"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9402760487319307`*^9},
 CellLabel->"Out[549]=",
 CellID->352810424,ExpressionUUID->"e4d28fe4-3366-4774-b8b2-3a42702bc791"]
}, Open  ]],

Cell["\<\
What we have here is a list of pure functions which check whether the \
argument belongs to a particular interval. This is the time to generate a \
random number:\
\>", "Text",
 CellChangeTimes->{{3.9402760572800293`*^9, 3.940276059261182*^9}},
 CellID->1098584083,ExpressionUUID->"8b7c736d-66f4-4fe7-997b-cd9220f1eba9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rnd", "=", 
  RowBox[{"Random", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.940276060710628*^9, 3.94027606352277*^9}},
 CellLabel->"In[550]:=",
 CellID->2072088108,ExpressionUUID->"9c5eef24-7965-4b05-9070-e994f499ede3"],

Cell[BoxData["0.4105028047720188`"], "Output",
 CellChangeTimes->{3.940276064321639*^9},
 CellLabel->"Out[550]=",
 CellID->940551237,ExpressionUUID->"0b79bf57-533c-4eb8-8285-641491a1786d"]
}, Open  ]],

Cell["Now, we use Through:", "Text",
 CellChangeTimes->{3.940276070495284*^9},
 CellID->217514692,ExpressionUUID->"cc5fffb0-75f5-4814-93cd-a15ea20a7563"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"results", "=", 
  RowBox[{"Through", "[", 
   RowBox[{"funs", "[", "rnd", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940276071928938*^9, 3.940276076406418*^9}},
 CellLabel->"In[551]:=",
 CellID->1018598861,ExpressionUUID->"31d2943c-cc56-49d8-9e9c-5234fb5bb52a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "False", ",", "False", ",", "False", ",", "True", ",", "False", ",", 
   "False"}], "}"}]], "Output",
 CellChangeTimes->{3.94027607671131*^9},
 CellLabel->"Out[551]=",
 CellID->139891839,ExpressionUUID->"bb9810c9-fd03-4234-b71c-ff0ca5f00025"]
}, Open  ]],

Cell["We will now use Position to find the position of <True>", "Text",
 CellChangeTimes->{3.940276085079935*^9},
 CellID->1815028255,ExpressionUUID->"23bce26c-ddae-4c51-86df-8f1222a49c3a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pos", "=", 
  RowBox[{"Position", "[", 
   RowBox[{"results", ",", "True"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.940276086581979*^9, 3.940276091601203*^9}},
 CellLabel->"In[552]:=",
 CellID->171907601,ExpressionUUID->"aba20a3c-fcbf-4f79-b412-dcb71bcd81c6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", "4", "}"}], "}"}]], "Output",
 CellChangeTimes->{3.940276091942305*^9},
 CellLabel->"Out[552]=",
 CellID->2007330511,ExpressionUUID->"2edba0e6-c2e9-4f57-a017-682afdf52f5f"]
}, Open  ]],

Cell["\<\
Finally, we will use Extract to extract the corresponding element:\
\>", "Text",
 CellChangeTimes->{3.940276098893873*^9},
 CellID->235804007,ExpressionUUID->"4c16796b-9d94-46ca-bd5e-0bc84dbba4d2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "[", 
  RowBox[{"Extract", "[", 
   RowBox[{"r1", ",", "pos"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.94027610057722*^9, 3.9402761049511137`*^9}},
 CellLabel->"In[553]:=",
 CellID->1108264104,ExpressionUUID->"4a7a8874-419c-4ace-b1f0-0a119023b71d"],

Cell[BoxData["d"], "Output",
 CellChangeTimes->{3.940276105297351*^9},
 CellLabel->"Out[553]=",
 CellID->1537286608,ExpressionUUID->"5c32d815-b666-42bf-a1ca-a99edf630949"]
}, Open  ]],

Cell["\<\
We will now package everything into a function which we will call <pickObject>\
\>", "Text",
 CellChangeTimes->{3.940276127717062*^9},
 CellID->340227232,ExpressionUUID->"32be52e8-2550-448e-8cb5-c947db443c35"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "pickObject", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pickObject", "[", 
     RowBox[{"objs_List", ",", "probs_List"}], "]"}], "/;", 
    RowBox[{"And", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "objs", "]"}], "==", 
       RowBox[{"Length", "[", "probs", "]"}]}], ",", 
      RowBox[{
       RowBox[{"Plus", "@@", "probs"}], "==", "1"}]}], "]"}]}], ":=", 
   RowBox[{"First", "[", 
    RowBox[{"Extract", "[", 
     RowBox[{"objs", ",", 
      RowBox[{"Position", "[", 
       RowBox[{
        RowBox[{"Through", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"ineq", "@@@", 
            RowBox[{"Partition", "[", 
             RowBox[{
              RowBox[{"FoldList", "[", 
               RowBox[{"Plus", ",", "0", ",", "probs"}], "]"}], ",", "2", ",",
               "1"}], "]"}]}], ")"}], "[", 
          RowBox[{"Random", "[", "]"}], "]"}], "]"}], ",", "True"}], "]"}]}], 
     "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.940276129588233*^9, 3.940276196681457*^9}},
 CellLabel->"In[554]:=",
 CellID->1209788929,ExpressionUUID->"6487b054-6aff-4f2e-8c0a-c93933cc5700"],

Cell["Let us check:", "Text",
 CellChangeTimes->{{3.940276198930756*^9, 3.940276201304964*^9}},
 CellID->1802219902,ExpressionUUID->"6b3df7e9-76b2-4562-81d0-17683e781b50"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pickObject", "[", 
  RowBox[{"r1", ",", "p1"}], "]"}]], "Input",
 CellChangeTimes->{{3.9402762025087233`*^9, 3.940276205064499*^9}},
 CellLabel->"In[556]:=",
 CellID->856914430,ExpressionUUID->"6623bf7d-66da-4564-a397-f2661ffe1a2b"],

Cell[BoxData["d"], "Output",
 CellChangeTimes->{3.9402762054239407`*^9},
 CellLabel->"Out[556]=",
 CellID->521174157,ExpressionUUID->"8ba1f62e-b213-43a8-8fab-10e50fea3834"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"pickObject", "[", 
    RowBox[{"r1", ",", "p1"}], "]"}], ",", 
   RowBox[{"{", "10", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.940276208629724*^9, 3.940276214678162*^9}},
 CellLabel->"In[557]:=",
 CellID->1823555628,ExpressionUUID->"18c7b989-a19d-45ca-9637-04e53f90e5a1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "c", ",", "f", ",", "f", ",", "a", ",", "b", ",", "e", ",", "e", ",", "d", 
   ",", "d", ",", "d"}], "}"}]], "Output",
 CellChangeTimes->{3.940276215003986*^9},
 CellLabel->"Out[557]=",
 CellID->1718258442,ExpressionUUID->"b0bf6c45-2fd1-42b7-a51e-d9b259b89205"]
}, Open  ]],

Cell["Let us gather some statistics:", "Text",
 CellChangeTimes->{3.940276224724564*^9},
 CellID->1557033485,ExpressionUUID->"bad731ad-b403-4c67-b738-3fe19a346a28"],

Cell[BoxData[
 RowBox[{
  RowBox[{"stat", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"pickObject", "[", 
      RowBox[{"r1", ",", "p1"}], "]"}], ",", 
     RowBox[{"{", "1000", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.940276225649992*^9, 3.940276235516992*^9}},
 CellLabel->"In[558]:=",
 CellID->1464037985,ExpressionUUID->"4e6810a1-a281-40a3-902a-bfc466cca12f"],

Cell["These are the probabilities (to remind)", "Text",
 CellChangeTimes->{3.940276241703328*^9},
 CellID->2097950043,ExpressionUUID->"8df3735c-e3a0-4f3f-8007-dae1e51a0616"],

Cell[CellGroupData[{

Cell[BoxData["p1"], "Input",
 CellChangeTimes->{{3.940276243365612*^9, 3.940276244005851*^9}},
 CellLabel->"In[559]:=",
 CellID->408234093,ExpressionUUID->"836c1d4a-4b33-42f3-9d1f-cc88df514bf3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.1`", ",", "0.2`", ",", "0.1`", ",", "0.15`", ",", "0.25`", ",", "0.2`"}],
   "}"}]], "Output",
 CellChangeTimes->{3.940276244369055*^9},
 CellLabel->"Out[559]=",
 CellID->495754840,ExpressionUUID->"a8708877-4c58-43b8-b326-95dcaf3ca429"]
}, Open  ]],

Cell["We now count how many times each of the elements was picked:", "Text",
 CellChangeTimes->{3.9402762524145184`*^9},
 CellID->2062529167,ExpressionUUID->"09f9b96e-e65e-4063-8a12-bfabf08ef3c6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Count", "[", 
    RowBox[{"stat", ",", "#"}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f"}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.9402762541339207`*^9, 3.9402762691300297`*^9}},
 CellLabel->"In[561]:=",
 CellID->1305556555,ExpressionUUID->"2d39d1da-3ee9-47e8-9257-44d4e4928fc4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"100", ",", "204", ",", "96", ",", "138", ",", "253", ",", "209"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.940276262273041*^9, 3.9402762696553383`*^9}},
 CellLabel->"Out[561]=",
 CellID->1075514350,ExpressionUUID->"fb3aa72c-24b6-4c72-9f43-6bab1451fb1f"]
}, Open  ]],

Cell["\<\
We see that we are not too far from the prescribed probabilities.\
\>", "Text",
 CellChangeTimes->{3.9402762756710243`*^9},
 CellID->1780097527,ExpressionUUID->"ef3c5454-d101-4d52-a706-5b5f46cdcdce"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Operate", "Subsubsection",
 CellChangeTimes->{3.9402762831402407`*^9},
 CellID->1504449932,ExpressionUUID->"8c407f87-e059-41b5-9201-fc76c03fac1d"],

Cell["\<\
This is perhaps an even more exotic operation. Basically, Operate applies \
some function to the head of an expression, using it as data:\
\>", "Text",
 CellChangeTimes->{{3.940276288308943*^9, 3.94027628972526*^9}},
 CellID->817547346,ExpressionUUID->"235d3a88-81c6-463c-aaa8-dacf241f2404"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"f", ",", "g", ",", "x", ",", "y"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Operate", "[", 
  RowBox[{"f", ",", 
   RowBox[{"g", "[", 
    RowBox[{"x", ",", "y"}], "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.940276291755979*^9, 3.9402763004980383`*^9}},
 CellLabel->"In[562]:=",
 CellID->1683679383,ExpressionUUID->"0bfdf922-5c17-4791-81a6-4c066d7aae5d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "g", "]"}], "[", 
  RowBox[{"x", ",", "y"}], "]"}]], "Output",
 CellChangeTimes->{3.940276300835249*^9},
 CellLabel->"Out[563]=",
 CellID->1416199003,ExpressionUUID->"f8193f84-a73a-4f7f-9895-464996929919"]
}, Open  ]],

Cell["\<\
So, <f> plays a role of a meta-function defined on <g>. For example:\
\>", "Text",
 CellChangeTimes->{3.940276312442651*^9},
 CellID->1495383720,ExpressionUUID->"62a3e1f1-89ab-4c9e-92bb-edb1f63439ee"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "Sin", "]"}], "=", "Cos"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Operate", "[", 
  RowBox[{"f", ",", 
   RowBox[{"Sin", "[", "x", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.940276322400992*^9, 3.940276331092554*^9}},
 CellLabel->"In[564]:=",
 CellID->2048913778,ExpressionUUID->"9b494b2e-9742-4278-99ab-523fb5d62310"],

Cell[BoxData[
 RowBox[{"Cos", "[", "x", "]"}]], "Output",
 CellChangeTimes->{3.940276331606982*^9},
 CellLabel->"Out[565]=",
 CellID->513199596,ExpressionUUID->"cf4e9738-6031-4aef-a24d-0d31839eebfc"]
}, Open  ]],

Cell["\<\
This function may be useful for instance in the following situation: you have \
created several \[OpenCurlyDoubleQuote]containers\[CloseCurlyDoubleQuote] for \
elements and given them some names (heads). Then you write a function which \
will perform different operations on the objects depending on in which \
container they are. Then the function <f> in Operate may serve as a \
dispatcher which will tell which operation to perform depending on the \
container name. But this is a somewhat different style of programming, which \
will take more accent to data from functions.\
\>", "Text",
 CellChangeTimes->{{3.940276340845006*^9, 3.940276347716226*^9}},
 CellID->1051283620,ExpressionUUID->"7973b7c5-6eea-47b2-ba7f-443feba95566"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Summary", "Subsection",
 CellChangeTimes->{3.940276356914933*^9},
 CellID->114876702,ExpressionUUID->"1959fe3a-b2eb-44e2-b48e-b47d89550ca8"],

Cell["\<\
This chapter has been very important in many aspects. For one thing, we \
considered a large number of examples which illustrated many subtle points of \
Mathematica programming. \
\>", "Text",
 CellChangeTimes->{{3.9402763636085052`*^9, 3.940276372822872*^9}},
 CellID->144931861,ExpressionUUID->"1d5d7d43-ac45-4465-b970-49a7811873fa"],

Cell["\<\
Another good thing is that we covered in details most of important built-in \
higher-order functions, which serve as building blocks of most Mathematica \
programs. We have now a toolbox ready to be used for larger or more \
complicated problems.\
\>", "Text",
 CellChangeTimes->{{3.9402763636085052`*^9, 3.940276379031023*^9}},
 CellID->1872999789,ExpressionUUID->"af26b73d-4e1c-4b8f-a262-df5b6b02c09f"],

Cell["\<\
Yet another important thing is that starting with this chapter, we \
systematically emphasized efficiency. I tried to convey the style of \
programing where efficiency considerations are used from the very beginning \
and all the way through solving the problem, but on the other hand not to \
hide the essence of the problem by efficiency analysis.\
\>", "Text",
 CellChangeTimes->{{3.9402763636085052`*^9, 3.940276385237195*^9}},
 CellID->681702962,ExpressionUUID->"8d5edca1-ba95-4538-9099-dd17305f3fd3"],

Cell["\<\
Also, we went many times through typical stages of development process for \
Mathematica programs. It is amazingly easy to develop a program in \
Mathematica: we start with a very simple test case, each step is usually just \
one line, each step is easily tested, the final code is trivially combined \
from the steps of the sample solution.\
\>", "Text",
 CellChangeTimes->{{3.9402763636085052`*^9, 3.940276397928503*^9}},
 CellID->320322634,ExpressionUUID->"e78311a7-fabd-44b7-aedc-8bc4892d7068"],

Cell["\<\
But most importantly, all the considerations of this chapter taken together \
hopefully illustrated the functional style of programming as not just a \
number of clever tricks but as an entirely different way to think about \
programming. This is the style that will be used most frequently and heavily \
in the chapters that follow, so it is very important that this material is \
well-understood.\
\>", "Text",
 CellChangeTimes->{{3.9402763636085052`*^9, 3.940276402006991*^9}},
 CellID->1254987601,ExpressionUUID->"4d19b5e3-d7b1-4cd5-90d6-8a4d4f0a0008"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1024, 1099},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (July 16, 2024)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "BookToolsStyles.nb", 
  CharacterEncoding -> "UTF-8"],
ExpressionUUID->"03f3f166-f95e-41cb-a261-8b814c7e1ce8"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "5.2.2.7"->{
  Cell[36872, 1019, 244, 5, 38, "ItemNumbered",ExpressionUUID->"eb6a6e55-b718-447d-b6f5-023744f4a145",
   CellTags->"5.2.2.7",
   CellID->222711341]},
 "5.2.2.9"->{
  Cell[49427, 1331, 201, 3, 38, "ItemNumbered",ExpressionUUID->"3c7f9680-492b-4de9-a57b-5f40f3b24a70",
   CellTags->"5.2.2.9",
   CellID->866313141]},
 "5.2.2.9.2"->{
  Cell[52679, 1421, 198, 3, 31, "SubitemNumbered",ExpressionUUID->"99bea3dc-ada1-47a5-a467-0f3aec4871fe",
   CellTags->"5.2.2.9.2",
   CellID->467378720]},
 "5.2.3.3"->{
  Cell[126412, 3611, 197, 3, 38, "ItemNumbered",ExpressionUUID->"62836ce6-a27c-4132-be1b-671db00b8e4d",
   CellTags->"5.2.3.3",
   CellID->700287318]},
 "5.2.6.2.5"->{
  Cell[249659, 7152, 214, 3, 31, "SubitemNumbered",ExpressionUUID->"af0bc87d-8a0a-4954-8d0e-0276397592c0",
   CellTags->"5.2.6.2.5",
   CellID->625939973]},
 "5.2.7.3.2"->{
  Cell[296085, 8443, 225, 4, 31, "SubitemNumbered",ExpressionUUID->"df15a7ce-0b3c-4d37-8f6a-b8cdff8642dd",
   CellTags->"5.2.7.3.2",
   CellID->1176507669]},
 "5.2.7.5"->{
  Cell[380320, 10669, 199, 3, 38, "ItemNumbered",ExpressionUUID->"8b1d5b7d-17cd-4004-b5b1-e60c80253f83",
   CellTags->"5.2.7.5",
   CellID->1800072686]},
 "5.3.1.5"->{
  Cell[426258, 11977, 237, 5, 38, "ItemNumbered",ExpressionUUID->"b2decd3e-bbcf-48eb-8684-64c83b8ddaa7",
   CellTags->"5.3.1.5",
   CellID->2123699886]},
 "5.3.2.3"->{
  Cell[489217, 13550, 205, 3, 38, "ItemNumbered",ExpressionUUID->"29094f2d-49e0-47d9-bb55-c5d8ac528f8c",
   CellTags->"5.3.2.3",
   CellID->1796829426]},
 "5.3.2.4.5"->{
  Cell[561617, 15502, 231, 4, 31, "SubitemNumbered",ExpressionUUID->"e52f217b-25d7-4815-8e5c-ebb16bf810cf",
   CellTags->"5.3.2.4.5",
   CellID->105311872]},
 "5.3.4.8"->{
  Cell[1310727, 29564, 213, 3, 38, "ItemNumbered",ExpressionUUID->"3f8e0a34-ac9d-4019-8eff-20952d1b5641",
   CellTags->"5.3.4.8",
   CellID->579170669]},
 "5.4.2.1"->{
  Cell[1379324, 31550, 179, 3, 38, "ItemNumbered",ExpressionUUID->"445fd047-3365-42dd-bf75-efcfa351ba9a",
   CellTags->"5.4.2.1",
   CellID->1445623944]},
 "5.4.2.6"->{
  Cell[1460074, 33694, 191, 3, 38, "ItemNumbered",ExpressionUUID->"8b221ed0-27ea-4b69-a2fe-61a7061d01a9",
   CellTags->"5.4.2.6",
   CellID->1315310018]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"5.2.2.7", 1840614, 44335},
 {"5.2.2.9", 1840779, 44339},
 {"5.2.2.9.2", 1840946, 44343},
 {"5.2.3.3", 1841116, 44347},
 {"5.2.6.2.5", 1841284, 44351},
 {"5.2.7.3.2", 1841457, 44355},
 {"5.2.7.5", 1841629, 44359},
 {"5.3.1.5", 1841797, 44363},
 {"5.3.2.3", 1841965, 44367},
 {"5.3.2.4.5", 1842135, 44371},
 {"5.3.4.8", 1842307, 44375},
 {"5.4.2.1", 1842475, 44379},
 {"5.4.2.6", 1842644, 44383}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[554, 20, 3422, 91, 130, "Text",ExpressionUUID->"372eb174-3302-4254-a386-9ba18a4c12c6",
 CellID->912160115],
Cell[CellGroupData[{
Cell[4001, 115, 369, 10, 135, "Section",ExpressionUUID->"ff742e1f-471b-43b2-80fd-8d1b6fadf197",
 CounterAssignments->{{"Section", 4}},
 CellID->1087864686],
Cell[CellGroupData[{
Cell[4395, 129, 154, 2, 68, "Subsection",ExpressionUUID->"a36bbe05-2f4d-4de7-b468-84b52fef0bbe",
 CellID->1433556233],
Cell[4552, 133, 558, 9, 163, "Text",ExpressionUUID->"7003e001-ae04-48c1-8c2d-5e27fe604898",
 CellID->1160572338],
Cell[5113, 144, 675, 10, 193, "Text",ExpressionUUID->"6a405197-62a0-4ed0-9c49-535769103d13",
 CellID->1725222758],
Cell[5791, 156, 528, 8, 163, "Text",ExpressionUUID->"454b2177-34ad-42e7-a447-108e7b3109f2",
 CellID->2013729038],
Cell[6322, 166, 881, 13, 281, "Text",ExpressionUUID->"a9975c41-5950-4f11-b926-e8a92df8187e",
 CellID->2011721068],
Cell[7206, 181, 745, 11, 222, "Text",ExpressionUUID->"8ea111f7-187d-4d54-9160-ece5bc46d0b4",
 CellID->1877103882]
}, Open  ]],
Cell[CellGroupData[{
Cell[7988, 197, 166, 2, 68, "Subsection",ExpressionUUID->"9241180b-c276-4b79-be23-570654d4c454",
 CellID->969737998],
Cell[CellGroupData[{
Cell[8179, 203, 155, 2, 66, "Subsubsection",ExpressionUUID->"cbf5205e-ee40-453d-a792-c0c66893efaf",
 CellID->1133135303],
Cell[8337, 207, 622, 10, 193, "Text",ExpressionUUID->"7f91ca81-c806-4cba-b74b-f62667f009fb",
 CellID->909580630],
Cell[8962, 219, 190, 2, 45, "Text",ExpressionUUID->"c0294870-273f-403b-b932-648bbf65747d",
 CellID->1833644328],
Cell[9155, 223, 518, 8, 163, "Text",ExpressionUUID->"76463127-df99-40b5-871d-fedeba210fa0",
 CellID->535872733],
Cell[9676, 233, 499, 8, 134, "Text",ExpressionUUID->"50ad5476-043e-423a-a728-647721f80048",
 CellID->760056389],
Cell[10178, 243, 584, 9, 163, "Text",ExpressionUUID->"f914b3c7-f2fa-471b-af37-cc1c00e92b46",
 CellID->261720649],
Cell[10765, 254, 650, 11, 193, "Text",ExpressionUUID->"a1b4fb6e-9fbe-4d9c-9cbf-8905c6db2c10",
 CellID->671600172],
Cell[11418, 267, 421, 7, 104, "Text",ExpressionUUID->"37ce355d-ecd1-4787-9974-e0b2a02355c3",
 CellID->303761581]
}, Open  ]],
Cell[CellGroupData[{
Cell[11876, 279, 167, 2, 66, "Subsubsection",ExpressionUUID->"b4804188-7b09-4273-aed9-dc7b0e89474f",
 CellID->605542464],
Cell[12046, 283, 365, 6, 104, "Text",ExpressionUUID->"6384a2ee-c498-462e-b321-a074a59d5126",
 CellID->427189315],
Cell[12414, 291, 1076, 20, 193, "Text",ExpressionUUID->"fdcdc18f-e588-4259-a71e-88600a9282e3",
 CellID->1462517825],
Cell[13493, 313, 164, 2, 38, "ItemNumbered",ExpressionUUID->"ced3dd6c-5b54-415f-8f5b-d3c9f33ee099",
 CellID->1474830739],
Cell[13660, 317, 155, 2, 45, "Text",ExpressionUUID->"7f2ac1a3-bf18-46f3-8e8f-e74923478824",
 CellID->1223976699],
Cell[CellGroupData[{
Cell[13840, 323, 326, 7, 54, "Input",ExpressionUUID->"34736e38-c2b9-4f8d-ade2-cce282f3a94a",
 CellID->1557428062],
Cell[14169, 332, 169, 3, 45, "Output",ExpressionUUID->"c83be91d-d255-4e64-ab4c-d6d8c4efff5d",
 CellID->961595061]
}, Open  ]],
Cell[CellGroupData[{
Cell[14375, 340, 303, 7, 31, "Input",ExpressionUUID->"4c92cedb-661c-48f4-9316-7339c54e85f4",
 CellID->887625900],
Cell[14681, 349, 313, 8, 45, "Output",ExpressionUUID->"7850a199-56e8-4329-8251-e55a868c81a4",
 CellID->161918686]
}, Open  ]],
Cell[15009, 360, 225, 5, 45, "Text",ExpressionUUID->"f30e50a5-f95a-41e1-8901-49a5b35a871d",
 CellID->505574853],
Cell[15237, 367, 285, 7, 31, "Input",ExpressionUUID->"3644dfde-faa6-4752-9f50-3ede2e5b579f",
 CellID->1942240938],
Cell[15525, 376, 161, 2, 45, "Text",ExpressionUUID->"43dd1033-82fa-468f-b3e3-f641c3a2a2a4",
 CellID->875395198],
Cell[CellGroupData[{
Cell[15711, 382, 308, 7, 31, "Input",ExpressionUUID->"81939054-2557-46ae-ab6f-523e4adba8d8",
 CellID->1477532037],
Cell[16022, 391, 302, 8, 49, "Output",ExpressionUUID->"80212711-a864-4973-bbcb-9767478dda8e",
 CellID->1025553251]
}, Open  ]],
Cell[CellGroupData[{
Cell[16361, 404, 246, 5, 31, "Input",ExpressionUUID->"8548e76a-e3d8-4665-9808-cb4dfa25ae41",
 CellID->557429617],
Cell[16610, 411, 171, 3, 45, "Output",ExpressionUUID->"d06c9d1c-276b-4cf5-98d7-7bb4702de3cc",
 CellID->373397328]
}, Open  ]],
Cell[16796, 417, 172, 2, 38, "ItemNumbered",ExpressionUUID->"924dd4d5-0d6d-4554-acc8-897eeb60a756",
 CellID->741675162],
Cell[16971, 421, 240, 5, 75, "Text",ExpressionUUID->"b881378c-e72f-4315-b705-bfd04454c39e",
 CellID->1339360546],
Cell[CellGroupData[{
Cell[17236, 430, 1071, 30, 125, "Input",ExpressionUUID->"a5daa008-4fca-4371-b348-ac1ee67acc0d",
 CellID->1604306573],
Cell[18310, 462, 298, 8, 49, "Output",ExpressionUUID->"d98b0200-97df-41c9-b500-2221f4c0d64f",
 CellID->631092115]
}, Open  ]],
Cell[18623, 473, 303, 5, 75, "Text",ExpressionUUID->"e5ce91a9-ae52-42af-b2cd-8285064f2b55",
 CellID->343444272],
Cell[18929, 480, 218, 2, 45, "Text",ExpressionUUID->"cf75cc9f-f1a8-45c4-b178-176f1dc85c2f",
 CellID->1419815256],
Cell[19150, 484, 425, 8, 134, "Text",ExpressionUUID->"068d5196-ae2f-46d1-b1e6-3ea706250459",
 CellID->757609488],
Cell[19578, 494, 328, 6, 75, "Text",ExpressionUUID->"97638251-7b69-4cb7-996b-46932a38f911",
 CellID->597546257],
Cell[19909, 502, 172, 2, 38, "ItemNumbered",ExpressionUUID->"ae907bce-63a9-4da5-8626-e2800cb2cbb0",
 CellID->2052542270],
Cell[20084, 506, 232, 5, 75, "Text",ExpressionUUID->"cfe8ae59-3e43-48f4-a883-b8b67d8d1be0",
 CellID->2048110129],
Cell[CellGroupData[{
Cell[20341, 515, 347, 9, 31, "Input",ExpressionUUID->"cc86fffa-64fc-4c70-a4ae-a7d90589fea5",
 CellID->520281349],
Cell[20691, 526, 298, 8, 49, "Output",ExpressionUUID->"93d17b6b-a1fd-4717-8cb0-885e751144bf",
 CellID->586124843]
}, Open  ]],
Cell[21004, 537, 450, 7, 134, "Text",ExpressionUUID->"b01b0eb8-f183-4cd6-851e-4fe7d0ba80cb",
 CellID->492747512],
Cell[21457, 546, 175, 2, 38, "ItemNumbered",ExpressionUUID->"67d3f104-7cef-40a2-b6bb-cea885640f2d",
 CellID->1214533002],
Cell[21635, 550, 313, 5, 75, "Text",ExpressionUUID->"0824cce0-5374-43d3-841e-be68169ba78b",
 CellID->824099879],
Cell[CellGroupData[{
Cell[21973, 559, 296, 7, 31, "Input",ExpressionUUID->"e3228801-7ff6-4c28-a8ba-5be74c0d932d",
 CellID->475557236],
Cell[22272, 568, 298, 8, 49, "Output",ExpressionUUID->"97a1095c-f034-4438-8f02-79d906c5bc49",
 CellID->74895110]
}, Open  ]],
Cell[CellGroupData[{
Cell[22607, 581, 342, 9, 31, "Input",ExpressionUUID->"e75165a5-bce3-46a3-bd9b-07513da37100",
 CellID->1551304509],
Cell[22952, 592, 300, 8, 49, "Output",ExpressionUUID->"98e76eea-36fd-46e1-b56e-1cd764a5b1b4",
 CellID->1630974594]
}, Open  ]],
Cell[23267, 603, 349, 6, 104, "Text",ExpressionUUID->"14aa58c8-ac02-4de4-aae7-f346123befaa",
 CellID->1308731050],
Cell[CellGroupData[{
Cell[23641, 613, 273, 6, 31, "Input",ExpressionUUID->"2d190437-1292-4efd-8e33-0e0e6d50a9e4",
 CellID->1507306188],
Cell[23917, 621, 299, 8, 49, "Output",ExpressionUUID->"b72be70f-6a55-481a-9bf0-bac8aa61a686",
 CellID->427106351]
}, Open  ]],
Cell[CellGroupData[{
Cell[24253, 634, 317, 8, 31, "Input",ExpressionUUID->"d26ca3d2-b42d-4146-a25b-4822493e9f11",
 CellID->2059221966],
Cell[24573, 644, 302, 8, 49, "Output",ExpressionUUID->"d11a8ad4-b403-4d92-a6cf-d19a036cc996",
 CellID->1957591913]
}, Open  ]],
Cell[24890, 655, 485, 8, 134, "Text",ExpressionUUID->"ff394740-eb17-42f8-87e4-4cf89ee2983a",
 CellID->1797809751],
Cell[CellGroupData[{
Cell[25400, 667, 341, 9, 31, "Input",ExpressionUUID->"d3298735-b863-429b-8c46-d19f97da1754",
 CellID->540450152],
Cell[25744, 678, 413, 11, 49, "Output",ExpressionUUID->"5668b6c3-28a3-4b4a-a6d4-bfc3fb40811f",
 CellID->404986015]
}, Open  ]],
Cell[26172, 692, 223, 5, 45, "Text",ExpressionUUID->"cb84fee1-7e91-4d8a-abfb-fc03a5ebde83",
 CellID->1378717027],
Cell[CellGroupData[{
Cell[26420, 701, 367, 10, 31, "Input",ExpressionUUID->"92155df0-ea9c-46a8-a912-93b39c00fc84",
 CellID->863531790],
Cell[26790, 713, 323, 8, 49, "Output",ExpressionUUID->"5599e3d2-0322-4219-8d50-9f591d6b26e4",
 CellID->618304858]
}, Open  ]],
Cell[27128, 724, 205, 4, 45, "Text",ExpressionUUID->"b96dc621-5216-482d-b2d8-3a2f69b0f32f",
 CellID->1310792760],
Cell[CellGroupData[{
Cell[27358, 732, 374, 10, 31, "Input",ExpressionUUID->"ffe6f2d2-6e73-41f3-8998-0f88110e7931",
 CellID->1612152185],
Cell[27735, 744, 302, 8, 49, "Output",ExpressionUUID->"d5a54ae2-5cf8-4ba4-b4b2-b19b870984f5",
 CellID->1241429162]
}, Open  ]],
Cell[28052, 755, 351, 6, 104, "Text",ExpressionUUID->"49d6eb15-bc54-42f4-9232-98e615776ffe",
 CellID->1896295129],
Cell[28406, 763, 155, 2, 38, "ItemNumbered",ExpressionUUID->"0ff03ccf-e716-48bd-ba8c-126531329578",
 CellID->2008584619],
Cell[28564, 767, 248, 5, 75, "Text",ExpressionUUID->"c0fa9977-2243-4583-a545-00be52a9cc94",
 CellID->1149279212],
Cell[CellGroupData[{
Cell[28837, 776, 299, 7, 31, "Input",ExpressionUUID->"317fa4a5-13e5-44bf-aa92-f2e654247a4b",
 CellID->1085340473],
Cell[29139, 785, 402, 11, 45, "Output",ExpressionUUID->"afef88bb-aa42-4c6e-91c4-4be33eb656a2",
 CellID->2123650991]
}, Open  ]],
Cell[CellGroupData[{
Cell[29578, 801, 301, 7, 31, "Input",ExpressionUUID->"d64968dc-4cdd-4608-9b3e-98de732fe8c4",
 CellID->1509005493],
Cell[29882, 810, 300, 8, 49, "Output",ExpressionUUID->"a270bb2c-686a-4d05-897f-1abdfd1f6bdc",
 CellID->1658214285]
}, Open  ]],
Cell[30197, 821, 155, 2, 38, "ItemNumbered",ExpressionUUID->"4b3eda5b-791c-453f-aab0-8fd808624264",
 CellID->1712200876],
Cell[30355, 825, 217, 2, 45, "Text",ExpressionUUID->"09daaaf2-6074-47bb-8862-a9adb6bb93bc",
 CellID->679253132],
Cell[30575, 829, 241, 5, 75, "Text",ExpressionUUID->"97847b5c-39ca-4d13-a456-e8767fc943ac",
 CellID->1410564829],
Cell[CellGroupData[{
Cell[30841, 838, 281, 6, 31, "Input",ExpressionUUID->"503c839c-d49b-4a41-a0e8-1a53b7bc2532",
 CellID->374387477],
Cell[31125, 846, 435, 12, 45, "Output",ExpressionUUID->"11861a9f-bb18-45e4-97b6-64a101dffcfd",
 CellID->114015972]
}, Open  ]],
Cell[31575, 861, 151, 2, 45, "Text",ExpressionUUID->"85e99344-5197-4db0-bc99-4458851eabd3",
 CellID->2120785723],
Cell[CellGroupData[{
Cell[31751, 867, 251, 5, 31, "Input",ExpressionUUID->"2bcb26b0-78e5-4fc0-9885-e2928ab3c470",
 CellID->277080466],
Cell[32005, 874, 435, 12, 45, "Output",ExpressionUUID->"99c3708d-d18a-4838-b5f1-3e09cf926bb3",
 CellID->392687851]
}, Open  ]],
Cell[32455, 889, 214, 4, 45, "Text",ExpressionUUID->"7863d9ea-8bd8-4ecd-99a8-5121051cd903",
 CellID->379954713],
Cell[CellGroupData[{
Cell[32694, 897, 532, 15, 31, "Input",ExpressionUUID->"9e140a4a-b9a5-40f9-a179-566bae435654",
 CellID->1165206443],
Cell[33229, 914, 237, 5, 45, "Output",ExpressionUUID->"dfb90b99-ea7f-4383-918d-62bee631c403",
 CellID->1567689556]
}, Open  ]],
Cell[33481, 922, 160, 2, 45, "Text",ExpressionUUID->"4aee903e-7b91-439a-9d1c-1f2df6333583",
 CellID->1484732292],
Cell[CellGroupData[{
Cell[33666, 928, 491, 14, 31, "Input",ExpressionUUID->"10fc2360-6436-4904-9bf7-b970f123a112",
 CellID->1226987646],
Cell[34160, 944, 234, 5, 45, "Output",ExpressionUUID->"8aff1ff6-3a22-4513-9999-299d5c19574b",
 CellID->634350023]
}, Open  ]],
Cell[34409, 952, 235, 5, 45, "Text",ExpressionUUID->"f800410d-e7a3-4130-8861-8456b63febed",
 CellID->1452214623],
Cell[CellGroupData[{
Cell[34669, 961, 415, 11, 31, "Input",ExpressionUUID->"a6f51532-4b71-42c9-b58d-c32ba0030948",
 CellID->898898074],
Cell[35087, 974, 839, 26, 45, "Output",ExpressionUUID->"a969133a-6b23-4f6a-9ade-dbc0b99131c4",
 CellID->455763716]
}, Open  ]],
Cell[35941, 1003, 928, 14, 281, "Text",ExpressionUUID->"fe05df19-c948-4d0c-a67e-4effbf8c66f8",
 CellID->2094089610],
Cell[36872, 1019, 244, 5, 38, "ItemNumbered",ExpressionUUID->"eb6a6e55-b718-447d-b6f5-023744f4a145",
 CellTags->"5.2.2.7",
 CellID->222711341],
Cell[37119, 1026, 320, 5, 75, "Text",ExpressionUUID->"d65a2b3e-e89d-4d8e-b449-d51366816948",
 CellID->969220861],
Cell[37442, 1033, 449, 12, 54, "Input",ExpressionUUID->"90bd5596-19a7-42f9-b117-c3fc7c242da3",
 CellID->2048812173],
Cell[37894, 1047, 229, 5, 45, "Text",ExpressionUUID->"507ec1d1-4019-46de-a575-0a585050fa71",
 CellID->116058367],
Cell[38126, 1054, 420, 7, 104, "Text",ExpressionUUID->"98d68f1f-7741-4ebf-a0d7-7769e7f42a37",
 CellID->222030357],
Cell[38549, 1063, 219, 2, 45, "Text",ExpressionUUID->"a489923f-1caf-417f-99a6-1855c2dff65f",
 CellID->1976818157],
Cell[38771, 1067, 479, 12, 78, "Input",ExpressionUUID->"96adecd9-05e5-4180-a138-c9866b6be385",
 CellID->2003667404],
Cell[39253, 1081, 153, 2, 45, "Text",ExpressionUUID->"fb6c829f-eb2d-4a5a-97a6-592a1075a365",
 CellID->2022562511],
Cell[CellGroupData[{
Cell[39431, 1087, 282, 6, 31, "Input",ExpressionUUID->"02a130b8-1074-4b0d-8266-b0542a25c4db",
 CellID->167994086],
Cell[39716, 1095, 528, 15, 45, "Output",ExpressionUUID->"9814e9dc-dd2a-4d3c-9983-0fa183690da9",
 CellID->1624355591]
}, Open  ]],
Cell[40259, 1113, 584, 9, 163, "Text",ExpressionUUID->"f8c326b6-d189-40a5-98f0-995ba25cb549",
 CellID->60026375],
Cell[CellGroupData[{
Cell[40868, 1126, 356, 9, 31, "Input",ExpressionUUID->"6d584626-7dbe-431f-8d6d-ca73d72c5711",
 CellID->2105858755],
Cell[41227, 1137, 525, 15, 45, "Output",ExpressionUUID->"3e3cbd34-abc6-49ac-9367-841d8842eec8",
 CellID->761121455]
}, Open  ]],
Cell[41767, 1155, 1041, 20, 193, "Text",ExpressionUUID->"6251a9d9-0fae-428b-80f2-21ba9d95e53c",
 CellID->1689280969],
Cell[42811, 1177, 191, 2, 38, "ItemNumbered",ExpressionUUID->"500777b8-cd97-4e7d-8161-1b1d7e3f2e88",
 CellID->974872119],
Cell[43005, 1181, 384, 6, 104, "Text",ExpressionUUID->"bd3034ea-58e1-4c6f-a887-7960fc808ac1",
 CellID->1495846588],
Cell[43392, 1189, 988, 15, 281, "Text",ExpressionUUID->"01640bd5-a5a3-4da7-85a2-3ab779294a4b",
 CellID->603827902],
Cell[44383, 1206, 432, 7, 104, "Text",ExpressionUUID->"c330df68-a2aa-4b39-abb2-57263715d1eb",
 CellID->1108001526],
Cell[44818, 1215, 221, 3, 45, "Text",ExpressionUUID->"44573416-ef8c-43ce-b159-e62c7f028ef7",
 CellID->178100551],
Cell[CellGroupData[{
Cell[45064, 1222, 426, 11, 31, "Input",ExpressionUUID->"7a5e908c-c2e2-4129-adbe-7978d54d52e5",
 CellID->1171708255],
Cell[45493, 1235, 375, 9, 45, "Output",ExpressionUUID->"824f36f8-f360-47f7-b820-fbd040927c60",
 CellID->772971963]
}, Open  ]],
Cell[45883, 1247, 156, 2, 45, "Text",ExpressionUUID->"a0ba3fa5-6813-4afe-9c2e-3cc5015ba59f",
 CellID->651506498],
Cell[CellGroupData[{
Cell[46064, 1253, 708, 20, 54, "Input",ExpressionUUID->"1de6df1e-cd69-4fd6-a187-502b7a0bcaca",
 CellID->1520032221],
Cell[46775, 1275, 311, 7, 45, "Output",ExpressionUUID->"7c1a1c7d-8734-4bdb-8e25-ee211dfd1930",
 CellID->1913439180]
}, Open  ]],
Cell[47101, 1285, 310, 5, 75, "Text",ExpressionUUID->"1a7b287f-561f-4bb1-8d17-0347734c1a34",
 CellID->124122568],
Cell[47414, 1292, 355, 6, 104, "Text",ExpressionUUID->"09650aa3-0d41-49f9-8af2-00c0cdaa5898",
 CellID->403463440],
Cell[47772, 1300, 994, 17, 399, "Text",ExpressionUUID->"d02e63b3-640b-4204-a9ec-81857d339b05",
 CellID->1061357424],
Cell[48769, 1319, 655, 10, 193, "Text",ExpressionUUID->"5907da2d-839a-4ce0-9fd4-869fa773d7c9",
 CellID->1457015312],
Cell[49427, 1331, 201, 3, 38, "ItemNumbered",ExpressionUUID->"3c7f9680-492b-4de9-a57b-5f40f3b24a70",
 CellTags->"5.2.2.9",
 CellID->866313141],
Cell[49631, 1336, 523, 8, 163, "Text",ExpressionUUID->"75a8cb85-b85d-44b0-bb73-777b664ca273",
 CellID->185834127],
Cell[50157, 1346, 165, 2, 31, "SubitemNumbered",ExpressionUUID->"56420f89-b553-4d15-b463-266e40fee6e9",
 CellID->873312286],
Cell[50325, 1350, 196, 2, 45, "Text",ExpressionUUID->"5445f0b0-1a81-4a24-911e-a29e161549b0",
 CellID->1856347204],
Cell[CellGroupData[{
Cell[50546, 1356, 410, 11, 31, "Input",ExpressionUUID->"0e84f071-69d8-4837-b31e-a3df8ad826b2",
 CellID->515204961],
Cell[50959, 1369, 310, 7, 45, "Output",ExpressionUUID->"1690bb55-3e7a-4cb3-b4c3-a73704fb4b3c",
 CellID->1249863935]
}, Open  ]],
Cell[51284, 1379, 162, 2, 45, "Text",ExpressionUUID->"e5411c8e-12d1-4654-99d2-33f0b0a70ece",
 CellID->1495245145],
Cell[51449, 1383, 556, 16, 54, "Input",ExpressionUUID->"19d9a41f-ab69-44e8-bbea-a5ec919ae111",
 CellID->225717472],
Cell[CellGroupData[{
Cell[52030, 1403, 261, 5, 31, "Input",ExpressionUUID->"3f98a02e-23fc-45b4-a24c-07033d2a2b8b",
 CellID->897372689],
Cell[52294, 1410, 370, 8, 45, "Output",ExpressionUUID->"2b3e5aa9-e239-4eb8-8f6f-3a1b7616faa7",
 CellID->1122285509]
}, Open  ]],
Cell[52679, 1421, 198, 3, 31, "SubitemNumbered",ExpressionUUID->"99bea3dc-ada1-47a5-a467-0f3aec4871fe",
 CellTags->"5.2.2.9.2",
 CellID->467378720],
Cell[52880, 1426, 411, 7, 104, "Text",ExpressionUUID->"2cf22631-d550-445f-93f6-64f74dc5f8be",
 CellID->1886449961],
Cell[CellGroupData[{
Cell[53316, 1437, 599, 17, 54, "Input",ExpressionUUID->"b198e4d4-e6d3-45a2-b0f7-2f50ddeebb11",
 CellID->1030009957],
Cell[53918, 1456, 1222, 38, 68, "Output",ExpressionUUID->"07373ff0-94ad-4f17-96d0-06713304f8d5",
 CellID->164128919]
}, Open  ]],
Cell[55155, 1497, 195, 2, 45, "Text",ExpressionUUID->"426822df-4da6-467d-a93c-87a0e4f377fc",
 CellID->755491452],
Cell[55353, 1501, 685, 20, 54, "Input",ExpressionUUID->"34b487e1-7004-4578-a35a-e18122d6f5b9",
 CellID->1196468470],
Cell[56041, 1523, 180, 2, 31, "SubitemNumbered",ExpressionUUID->"de3e8f91-730d-45d4-8959-e95ee6efcbb9",
 CellID->1276692125],
Cell[56224, 1527, 514, 9, 134, "Text",ExpressionUUID->"77ea8edd-041d-4c8c-af51-8442f0b57e41",
 CellID->1855427698],
Cell[CellGroupData[{
Cell[56763, 1540, 973, 27, 101, "Input",ExpressionUUID->"e1a327e9-3eb2-4ac6-8d56-28f7523b8ee5",
 CellID->1195888133],
Cell[57739, 1569, 373, 8, 45, "Output",ExpressionUUID->"69c36f85-5a49-44dd-8cec-402beaa9b449",
 CellID->2025697632]
}, Open  ]],
Cell[58127, 1580, 262, 5, 75, "Text",ExpressionUUID->"05a64155-0676-4512-9b72-044a6b8cdb58",
 CellID->1841845133],
Cell[58392, 1587, 1603, 44, 148, "Input",ExpressionUUID->"0bf6374c-bc1b-4207-9c78-71a6c1061e3a",
 CellID->1926455719],
Cell[59998, 1633, 165, 2, 45, "Text",ExpressionUUID->"3278bdfb-9bc4-413f-8bde-4c639a08a42a",
 CellID->761130849],
Cell[CellGroupData[{
Cell[60188, 1639, 253, 5, 31, "Input",ExpressionUUID->"961ef306-bb86-4130-ad9d-0ea3cdccf4d4",
 CellID->1789112693],
Cell[60444, 1646, 311, 7, 45, "Output",ExpressionUUID->"135539d4-902c-4271-a99a-8b6f59b3f2b4",
 CellID->1650298659]
}, Open  ]],
Cell[CellGroupData[{
Cell[60792, 1658, 315, 8, 31, "Input",ExpressionUUID->"8a595a7b-be39-4d45-983a-1ec3029acdbd",
 CellID->817103246],
Cell[61110, 1668, 464, 13, 67, "Output",ExpressionUUID->"d7b228c4-2e3e-499e-99de-8edaeca98352",
 CellID->83677662]
}, Open  ]],
Cell[61589, 1684, 259, 5, 75, "Text",ExpressionUUID->"649e816b-89e1-40cb-8d17-d5054195a40d",
 CellID->1916160096],
Cell[61851, 1691, 1144, 35, 101, "Input",ExpressionUUID->"10063f6b-8e34-4865-8c2b-f0941e9ebda2",
 CellID->1623577284],
Cell[62998, 1728, 1167, 22, 222, "Text",ExpressionUUID->"b6b7ecd7-a3af-4f02-95e3-9a16b85335bb",
 CellID->427971199],
Cell[64168, 1752, 189, 2, 45, "Text",ExpressionUUID->"07570d1a-9883-413c-a974-9da7cfdf21bf",
 CellID->1570148687],
Cell[CellGroupData[{
Cell[64382, 1758, 347, 9, 31, "Input",ExpressionUUID->"d359f88f-81ca-4878-b368-e33e029311e0",
 CellID->977788489],
Cell[64732, 1769, 227, 5, 45, "Output",ExpressionUUID->"a32e277a-edb5-4b89-a5d7-e109a58f4eb2",
 CellID->1597397422]
}, Open  ]],
Cell[CellGroupData[{
Cell[64996, 1779, 349, 9, 31, "Input",ExpressionUUID->"c7c23220-b27a-4b66-a74c-3a37bcadf8e1",
 CellID->1765400407],
Cell[65348, 1790, 227, 5, 45, "Output",ExpressionUUID->"d4530efb-d7ad-41ce-ad64-6ab8624bd309",
 CellID->1417338212]
}, Open  ]],
Cell[65590, 1798, 373, 6, 104, "Text",ExpressionUUID->"b48ff0e6-56e8-467c-931f-8e32c1bed64f",
 CellID->2138956895],
Cell[65966, 1806, 671, 14, 75, "Text",ExpressionUUID->"d911bfec-a020-47dd-a1cc-ba430db4f8c5",
 CellID->151014196],
Cell[66640, 1822, 742, 21, 78, "Input",ExpressionUUID->"ef307556-910e-46e8-bec2-a8e67fd81f5c",
 CellID->499434358],
Cell[CellGroupData[{
Cell[67407, 1847, 349, 9, 31, "Input",ExpressionUUID->"e8f414aa-6cf6-4a24-8c42-e4a655590f27",
 CellID->1934511919],
Cell[67759, 1858, 224, 5, 45, "Output",ExpressionUUID->"f0c9ec4e-f0a1-49de-817f-cce36d8e7f0c",
 CellID->52810010]
}, Open  ]],
Cell[67998, 1866, 422, 7, 104, "Text",ExpressionUUID->"50d693f3-48da-4b7e-9d35-fca4e433fad5",
 CellID->667091859],
Cell[68423, 1875, 221, 4, 38, "ItemNumbered",ExpressionUUID->"9503d160-0df8-48b3-9c02-2e2920f40379",
 CellID->114629834],
Cell[68647, 1881, 1046, 19, 193, "Text",ExpressionUUID->"71c19482-3596-492f-b2b2-5454b32ced2e",
 CellID->290788679],
Cell[CellGroupData[{
Cell[69718, 1904, 162, 2, 31, "SubitemNumbered",ExpressionUUID->"7563e1a2-b6b8-4d6c-85b3-e3a29b9490db",
 CellID->624472263],
Cell[69883, 1908, 274, 6, 31, "Input",ExpressionUUID->"18ca50bd-ed91-46d1-8360-1612475b7f96",
 CellID->29234572]
}, Open  ]],
Cell[70172, 1917, 160, 2, 45, "Text",ExpressionUUID->"4e8e9961-7ecd-4087-a708-c987c3c50b53",
 CellID->1495825740],
Cell[CellGroupData[{
Cell[70357, 1923, 360, 8, 31, "Input",ExpressionUUID->"6204741e-f324-417e-a63f-eba57c6a2c56",
 CellID->1973566738],
Cell[70720, 1933, 652, 21, 45, "Output",ExpressionUUID->"41e4d3e5-3118-43be-996a-31ee7ab44f0e",
 CellID->1804770771]
}, Open  ]],
Cell[71387, 1957, 162, 2, 45, "Text",ExpressionUUID->"639dc318-1c7a-48d6-a111-c62417159278",
 CellID->1777903191],
Cell[CellGroupData[{
Cell[71574, 1963, 254, 5, 31, "Input",ExpressionUUID->"d897e657-a089-4065-b3ca-a2efff2e5493",
 CellID->594460468],
Cell[71831, 1970, 726, 23, 45, "Output",ExpressionUUID->"40fd6afc-9b0c-42e5-8cbc-8a57c1e49957",
 CellID->2054001964]
}, Open  ]],
Cell[72572, 1996, 346, 6, 75, "Text",ExpressionUUID->"e2f1ec16-c14e-4010-853f-0adf6bcc0486",
 CellID->811383423],
Cell[72921, 2004, 187, 2, 45, "Text",ExpressionUUID->"725eddf6-c54d-473d-b421-b954a81765b1",
 CellID->2146302223],
Cell[CellGroupData[{
Cell[73133, 2010, 264, 5, 31, "Input",ExpressionUUID->"3c992059-bdc3-4d74-b98d-c9744215038e",
 CellID->215136518],
Cell[73400, 2017, 935, 30, 45, "Output",ExpressionUUID->"81c1194b-b407-4cc5-b4e8-e9fe1f6db0d0",
 CellID->1177298959]
}, Open  ]],
Cell[74350, 2050, 160, 2, 45, "Text",ExpressionUUID->"a0409778-d989-42a8-a9f1-2d1dcd278144",
 CellID->445878856],
Cell[CellGroupData[{
Cell[74535, 2056, 314, 7, 31, "Input",ExpressionUUID->"fc99cfb4-e180-4da5-969d-1c5dcc09c296",
 CellID->1069544198],
Cell[74852, 2065, 932, 30, 45, "Output",ExpressionUUID->"d3491c4a-5808-47c4-bcce-e56bebb8f1b0",
 CellID->1774939182]
}, Open  ]],
Cell[75799, 2098, 164, 2, 45, "Text",ExpressionUUID->"1c821f0f-ce49-44bd-af6f-ebc263b5af53",
 CellID->707491397],
Cell[CellGroupData[{
Cell[75988, 2104, 312, 7, 31, "Input",ExpressionUUID->"cc72936d-9f2f-4e67-9fa6-339fd64c5d65",
 CellID->1055914962],
Cell[76303, 2113, 1263, 40, 68, "Output",ExpressionUUID->"6bc83a72-a2fd-4314-b290-770ddd37d607",
 CellID->1019561024]
}, Open  ]],
Cell[77581, 2156, 153, 2, 45, "Text",ExpressionUUID->"9491080d-5019-4f8a-9c54-39a024d68d4d",
 CellID->990110955],
Cell[CellGroupData[{
Cell[77759, 2162, 284, 6, 31, "Input",ExpressionUUID->"52af0d3b-79a1-4815-a79c-394d4b8a9376",
 CellID->79495560],
Cell[78046, 2170, 1050, 33, 68, "Output",ExpressionUUID->"42f28a67-c625-4a15-b2cd-3d61ff1b9fab",
 CellID->1867290273]
}, Open  ]],
Cell[79111, 2206, 222, 5, 45, "Text",ExpressionUUID->"2ff883f9-b924-4e29-9c64-02cacd3d57cf",
 CellID->221601053],
Cell[CellGroupData[{
Cell[79358, 2215, 308, 7, 31, "Input",ExpressionUUID->"381d85bb-d7e2-403d-86d6-1f0d1369b26e",
 CellID->776995133],
Cell[79669, 2224, 1047, 33, 68, "Output",ExpressionUUID->"a674aa3b-3b32-4151-b9c3-ba1b7d943ac4",
 CellID->535750509]
}, Open  ]],
Cell[80731, 2260, 697, 11, 193, "Text",ExpressionUUID->"b5e16ff2-9f58-4035-a622-116406e2f37b",
 CellID->177426377],
Cell[81431, 2273, 312, 5, 75, "Text",ExpressionUUID->"7a1e612c-03e3-46a6-a9bd-7e7415fc58ab",
 CellID->1542623490],
Cell[CellGroupData[{
Cell[81768, 2282, 284, 6, 31, "Input",ExpressionUUID->"4b0ae063-09f2-476d-b2af-bd00e7a6f7a1",
 CellID->1744383203],
Cell[82055, 2290, 1353, 42, 68, "Output",ExpressionUUID->"e05e7a80-ac2b-41d1-9282-5f4894aaee20",
 CellID->2027552980]
}, Open  ]],
Cell[CellGroupData[{
Cell[83445, 2337, 283, 6, 31, "Input",ExpressionUUID->"eb519b2f-78f6-4888-97c1-27330fd851d1",
 CellID->713577422],
Cell[83731, 2345, 935, 30, 45, "Output",ExpressionUUID->"5c5340cf-3651-4a63-a717-746e9a084ebf",
 CellID->1331719583]
}, Open  ]],
Cell[CellGroupData[{
Cell[84703, 2380, 283, 6, 31, "Input",ExpressionUUID->"5a4b6167-6011-4e31-b9c7-a9fd71fdc220",
 CellID->520970929],
Cell[84989, 2388, 726, 23, 45, "Output",ExpressionUUID->"63eb993c-618e-48ee-960b-ead8dbda56e6",
 CellID->1646942031]
}, Open  ]],
Cell[85730, 2414, 392, 6, 104, "Text",ExpressionUUID->"196bba62-e99e-40ca-8eb5-c7f6b277aeb4",
 CellID->1237988834],
Cell[86125, 2422, 219, 4, 31, "SubitemNumbered",ExpressionUUID->"beefb183-4a8e-4115-831e-4b39c46273ef",
 CellID->1693126585],
Cell[86347, 2428, 185, 2, 45, "Text",ExpressionUUID->"9857c7fc-076c-4765-8666-0522288c59cf",
 CellID->72707698],
Cell[CellGroupData[{
Cell[86557, 2434, 558, 14, 54, "Input",ExpressionUUID->"2a3b172b-b46e-42a4-b649-2a334d23a0b7",
 CellID->1666235379],
Cell[87118, 2450, 753, 23, 45, "Output",ExpressionUUID->"7e1f5355-a8c2-4d06-b603-7f34c2e0a692",
 CellID->1225197839]
}, Open  ]],
Cell[87886, 2476, 280, 5, 75, "Text",ExpressionUUID->"adda28ab-3fed-4ff5-8fae-79a67584621b",
 CellID->236475384],
Cell[CellGroupData[{
Cell[88191, 2485, 290, 6, 31, "Input",ExpressionUUID->"4a99559e-8593-4660-a26f-ea2aaad4c3cc",
 CellID->1542997506],
Cell[88484, 2493, 753, 23, 45, "Output",ExpressionUUID->"45977a5f-221c-4009-a7a9-e6c897d79987",
 CellID->43680077]
}, Open  ]],
Cell[89252, 2519, 178, 2, 45, "Text",ExpressionUUID->"e4d95a16-d6f3-413a-8bef-d29afe943e9f",
 CellID->1839130512],
Cell[CellGroupData[{
Cell[89455, 2525, 422, 12, 31, "Input",ExpressionUUID->"a5bf7819-538c-4b27-b4c3-21f7eaeaac74",
 CellID->1406792615],
Cell[89880, 2539, 753, 23, 45, "Output",ExpressionUUID->"15795bca-56db-4989-9b51-6158f1fe54f1",
 CellID->2070196537]
}, Open  ]],
Cell[90648, 2565, 703, 10, 193, "Text",ExpressionUUID->"33572a71-4cfc-4085-bd61-7464acfee76b",
 CellID->263148665],
Cell[91354, 2577, 599, 16, 78, "Input",ExpressionUUID->"f861edc6-1d1d-4977-92df-c0ad5781f84e",
 CellID->1227766281],
Cell[91956, 2595, 170, 2, 45, "Text",ExpressionUUID->"284f5afd-90a3-4277-b1c8-5966b3212188",
 CellID->1868024684],
Cell[CellGroupData[{
Cell[92151, 2601, 292, 6, 31, "Input",ExpressionUUID->"253dd758-4db1-47b6-9707-ff483f304e57",
 CellID->279596071],
Cell[92446, 2609, 752, 23, 45, "Output",ExpressionUUID->"8d814af6-f05c-4dd8-9147-bcd4b73ce37c",
 CellID->544472254]
}, Open  ]],
Cell[93213, 2635, 339, 6, 75, "Text",ExpressionUUID->"69ebb388-9a98-41b2-acb5-e298bd4de328",
 CellID->491486440],
Cell[CellGroupData[{
Cell[93577, 2645, 413, 11, 31, "Input",ExpressionUUID->"fbe89a21-a84d-4a37-bb7e-87431d1e89db",
 CellID->472358327],
Cell[93993, 2658, 754, 23, 45, "Output",ExpressionUUID->"77eda30e-463e-49b3-b19a-8c532d88e586",
 CellID->981544772]
}, Open  ]],
Cell[94762, 2684, 400, 7, 104, "Text",ExpressionUUID->"88325d73-6528-4e52-bf35-e767679fb512",
 CellID->453785707],
Cell[95165, 2693, 547, 9, 163, "Text",ExpressionUUID->"991c5341-c29e-4310-b1cd-912cd6694e01",
 CellID->1064116931],
Cell[CellGroupData[{
Cell[95737, 2706, 556, 16, 31, "Input",ExpressionUUID->"4900c521-a2bb-4b9c-ba56-e0e8fc0cb1b6",
 CellID->1315088691],
Cell[96296, 2724, 753, 23, 45, "Output",ExpressionUUID->"043e7893-47a6-45ed-a2d7-f8ee2fb7f080",
 CellID->1287958753]
}, Open  ]],
Cell[97064, 2750, 282, 5, 75, "Text",ExpressionUUID->"7b8fd1fe-8767-40f9-9541-5b0c95ae5a3f",
 CellID->87599911],
Cell[97349, 2757, 282, 5, 45, "Text",ExpressionUUID->"0a2173b8-2c2a-4a96-bbe8-89bc4f08c171",
 CellID->1581906068],
Cell[97634, 2764, 190, 2, 45, "Text",ExpressionUUID->"902371cb-7312-4784-9f4a-1c245a8fb5ba",
 CellID->415362296],
Cell[CellGroupData[{
Cell[97849, 2770, 280, 6, 31, "Input",ExpressionUUID->"3a7cb365-97ab-445d-aecc-c9eb057006a9",
 CellID->1490154165],
Cell[98132, 2778, 334, 9, 45, "Output",ExpressionUUID->"636b58a6-e4cb-4f5b-a7c9-c3319f1db06f",
 CellID->1572688486]
}, Open  ]],
Cell[98481, 2790, 325, 6, 75, "Text",ExpressionUUID->"5b5e2f87-32a0-49b4-a043-175cb96586b0",
 CellID->946656926],
Cell[CellGroupData[{
Cell[98831, 2800, 294, 6, 31, "Input",ExpressionUUID->"d0927ec5-9ffd-431a-8e83-6e00edaa1f67",
 CellID->1242082481],
Cell[99128, 2808, 170, 3, 45, "Output",ExpressionUUID->"c4b7b357-47d2-4b68-b431-5f2abb618906",
 CellID->540889585]
}, Open  ]],
Cell[99313, 2814, 409, 7, 104, "Text",ExpressionUUID->"0ed5ba20-f01a-489f-a4d9-6294b8322154",
 CellID->432977344],
Cell[CellGroupData[{
Cell[99747, 2825, 439, 12, 31, "Input",ExpressionUUID->"413640b2-96b1-4f17-9ee6-11b552879b2e",
 CellID->1107613552],
Cell[100189, 2839, 753, 23, 45, "Output",ExpressionUUID->"38774f06-ffa8-496c-8c0a-cbc6e8161bd5",
 CellID->1841574061]
}, Open  ]],
Cell[100957, 2865, 291, 5, 75, "Text",ExpressionUUID->"a2d9d965-953b-4f69-b4e2-f8c219d6d19b",
 CellID->1997799016],
Cell[101251, 2872, 859, 12, 252, "Text",ExpressionUUID->"108feef2-619a-49e7-9ba6-71ddaf370b21",
 CellID->525998574],
Cell[102113, 2886, 1445, 41, 125, "Input",ExpressionUUID->"3021f315-6940-4068-ab9e-3e302ed6a448",
 CellID->211571619],
Cell[103561, 2929, 163, 2, 45, "Text",ExpressionUUID->"f5a2bfe5-e529-40ac-b33d-98b773a56cc6",
 CellID->859244794],
Cell[CellGroupData[{
Cell[103749, 2935, 238, 4, 31, "Input",ExpressionUUID->"924e19c4-9f50-4cb4-94d2-4f6cddb28330",
 CellID->1226956899],
Cell[103990, 2941, 776, 23, 45, "Output",ExpressionUUID->"d11e74eb-ed9b-4749-bf01-e9a79a954d5a",
 CellID->747155942]
}, Open  ]],
Cell[104781, 2967, 307, 5, 75, "Text",ExpressionUUID->"3588f0ba-dabe-4155-8bd0-bb596b7c1c29",
 CellID->1113033185],
Cell[105091, 2974, 1159, 34, 101, "Input",ExpressionUUID->"43faaa56-fa57-4da9-b21d-d443db08b15a",
 CellID->146604],
Cell[CellGroupData[{
Cell[106275, 3012, 240, 4, 31, "Input",ExpressionUUID->"5dc1ab75-2a22-4298-98f9-a91cfaf718a6",
 CellID->2023819040],
Cell[106518, 3018, 753, 23, 45, "Output",ExpressionUUID->"99ff74f0-5390-48aa-abb7-3716d69894be",
 CellID->1639352728]
}, Open  ]],
Cell[107286, 3044, 344, 6, 104, "Text",ExpressionUUID->"b82accdc-2655-4fb5-b978-de8126ff8db2",
 CellID->1579595786],
Cell[107633, 3052, 443, 7, 134, "Text",ExpressionUUID->"42884cc2-2be7-4601-aed2-740cd2b028a1",
 CellID->1857374536],
Cell[108079, 3061, 271, 5, 75, "Text",ExpressionUUID->"56f22672-9be7-428b-8436-893bf0fd44ce",
 CellID->1367782915]
}, Open  ]],
Cell[CellGroupData[{
Cell[108387, 3071, 149, 2, 66, "Subsubsection",ExpressionUUID->"5a0a86c5-bdf4-408e-89ef-e0cbce7f063b",
 CellID->976881281],
Cell[108539, 3075, 318, 5, 75, "Text",ExpressionUUID->"7624effa-10f3-4877-b7f4-e5e63a5c57f0",
 CellID->931208452],
Cell[108860, 3082, 941, 14, 281, "Text",ExpressionUUID->"e7112aef-f0b8-4c58-8c71-b623e887e116",
 CellID->868008882],
Cell[109804, 3098, 150, 2, 38, "ItemNumbered",ExpressionUUID->"96357bd5-4d21-4c99-b793-f303ec3fdb14",
 CellID->1483084509],
Cell[CellGroupData[{
Cell[109979, 3104, 374, 8, 54, "Input",ExpressionUUID->"d65507f0-1ba1-4b8e-bade-d2350e187243",
 CellID->1217008811],
Cell[110356, 3114, 235, 5, 45, "Output",ExpressionUUID->"84827f71-a5e4-4578-b322-90c92db7a995",
 CellID->934861737]
}, Open  ]],
Cell[110606, 3122, 189, 2, 45, "Text",ExpressionUUID->"eeaa25b5-7a8d-4e21-a007-8afdad499852",
 CellID->857983830],
Cell[CellGroupData[{
Cell[110820, 3128, 269, 5, 31, "Input",ExpressionUUID->"40d3a9b4-622d-47ae-9f25-1d57ebdf99c8",
 CellID->560068805],
Cell[111092, 3135, 267, 6, 45, "Output",ExpressionUUID->"fd47617c-5347-45cb-8819-469751151e7b",
 CellID->1568952000]
}, Open  ]],
Cell[111374, 3144, 180, 2, 45, "Text",ExpressionUUID->"c64a9280-ae8d-41d8-9549-fc45f8c2e128",
 CellID->424562487],
Cell[CellGroupData[{
Cell[111579, 3150, 371, 9, 31, "Input",ExpressionUUID->"464cb688-7ce1-436d-9683-51809071b958",
 CellID->1006185793],
Cell[111953, 3161, 298, 7, 45, "Output",ExpressionUUID->"52783616-cbb9-4af2-a02c-24eef83da115",
 CellID->1192297985]
}, Open  ]],
Cell[112266, 3171, 461, 7, 134, "Text",ExpressionUUID->"11513a3e-e06b-46a8-adc7-14394e2b4a89",
 CellID->782323738],
Cell[CellGroupData[{
Cell[112752, 3182, 314, 7, 31, "Input",ExpressionUUID->"91023839-064d-4520-a101-7f6f24f08bad",
 CellID->1375562009],
Cell[113069, 3191, 557, 11, 32, "Message",ExpressionUUID->"6dd188fa-b336-4a11-9dff-17d0e65a9b3b",
 CellID->1906823268],
Cell[113629, 3204, 355, 9, 45, "Output",ExpressionUUID->"37eb4822-26ae-4daa-b7ca-ae304a906155",
 CellID->1080201095]
}, Open  ]],
Cell[113999, 3216, 165, 2, 45, "Text",ExpressionUUID->"f9bd9d77-d500-4d63-8f67-40203992118d",
 CellID->908176623],
Cell[CellGroupData[{
Cell[114189, 3222, 579, 15, 54, "Input",ExpressionUUID->"6c14fbf0-7bcc-4a20-b3c0-790bf41fac50",
 CellID->499827159],
Cell[114771, 3239, 751, 23, 45, "Output",ExpressionUUID->"bdda1bb6-927e-4146-80f3-41497cf14418",
 CellID->162713917]
}, Open  ]],
Cell[115537, 3265, 235, 5, 75, "Text",ExpressionUUID->"2ae2bf06-38ee-4b7d-b35a-2d143f4b84d4",
 CellID->104374142],
Cell[CellGroupData[{
Cell[115797, 3274, 265, 5, 31, "Input",ExpressionUUID->"3c095e01-2d05-41ed-8a8e-01fc53b50868",
 CellID->1670786837],
Cell[116065, 3281, 786, 24, 45, "Output",ExpressionUUID->"7f83af3f-e4a7-41ca-846f-b396e022b0c5",
 CellID->818336246]
}, Open  ]],
Cell[CellGroupData[{
Cell[116888, 3310, 366, 9, 31, "Input",ExpressionUUID->"22599009-504b-4aef-b303-e5c978976003",
 CellID->1623974321],
Cell[117257, 3321, 825, 26, 45, "Output",ExpressionUUID->"a2c3dbd9-ac24-44d9-901c-383824d3cd33",
 CellID->1545992544]
}, Open  ]],
Cell[CellGroupData[{
Cell[118119, 3352, 314, 7, 31, "Input",ExpressionUUID->"6317af0f-733a-4b25-af29-8de04875ec86",
 CellID->1553890423],
Cell[118436, 3361, 788, 25, 45, "Output",ExpressionUUID->"da7ffab3-77be-4186-ae2e-acced2b88350",
 CellID->1256062016]
}, Open  ]],
Cell[CellGroupData[{
Cell[119261, 3391, 419, 11, 31, "Input",ExpressionUUID->"2a38d8d0-d353-4d3f-b4d1-821846410838",
 CellID->762971491],
Cell[119683, 3404, 819, 26, 45, "Output",ExpressionUUID->"9910c9bd-a96e-4a1c-9493-cb1f42b3c7f3",
 CellID->589248667]
}, Open  ]],
Cell[CellGroupData[{
Cell[120539, 3435, 439, 11, 31, "Input",ExpressionUUID->"1e7ea888-bbde-424c-b61f-7dcf5dbe8eb6",
 CellID->694687581],
Cell[120981, 3448, 820, 25, 45, "Output",ExpressionUUID->"10f8a1fb-02e5-4ab8-9fb8-0f3d2e51b9fe",
 CellID->1161675225]
}, Open  ]],
Cell[121816, 3476, 353, 6, 104, "Text",ExpressionUUID->"2ff8234a-52b0-4c5e-8c24-fbc9ddf16ef3",
 CellID->1501671698],
Cell[122172, 3484, 168, 2, 38, "ItemNumbered",ExpressionUUID->"0926664c-563d-4e50-8669-15919d30c667",
 CellID->197434840],
Cell[122343, 3488, 309, 5, 75, "Text",ExpressionUUID->"0b96898e-4703-475b-a2a5-6fef987feed8",
 CellID->425121265],
Cell[CellGroupData[{
Cell[122677, 3497, 377, 9, 31, "Input",ExpressionUUID->"22468270-af2f-4678-b699-0284c15ef45e",
 CellID->885375515],
Cell[123057, 3508, 948, 30, 68, "Output",ExpressionUUID->"c20f7f4b-1f16-460f-ac0e-1efd2c135743",
 CellID->1131086]
}, Open  ]],
Cell[124020, 3541, 407, 7, 104, "Text",ExpressionUUID->"58794e4b-11b4-4c6d-b366-3ab87be34e53",
 CellID->809909970],
Cell[CellGroupData[{
Cell[124452, 3552, 345, 9, 31, "Input",ExpressionUUID->"e4990a97-5410-49b0-903e-05a48b043a93",
 CellID->1518133439],
Cell[124800, 3563, 856, 27, 45, "Output",ExpressionUUID->"7ba79804-6554-411e-a7dc-10d398971bd3",
 CellID->1819416513]
}, Open  ]],
Cell[125671, 3593, 738, 16, 75, "Text",ExpressionUUID->"cde5c254-e65c-4e8b-9811-f0211ca35545",
 CellID->597798063],
Cell[126412, 3611, 197, 3, 38, "ItemNumbered",ExpressionUUID->"62836ce6-a27c-4132-be1b-671db00b8e4d",
 CellTags->"5.2.3.3",
 CellID->700287318],
Cell[126612, 3616, 554, 9, 163, "Text",ExpressionUUID->"145e4660-5462-4d72-a4db-a626d729d943",
 CellID->1518568066],
Cell[127169, 3627, 224, 5, 45, "Text",ExpressionUUID->"3d844a49-0630-4ec1-b4d5-3f98f7610ea8",
 CellID->1685814354],
Cell[CellGroupData[{
Cell[127418, 3636, 362, 8, 31, "Input",ExpressionUUID->"32ae1f6b-d21c-4a89-a46e-b6f4a64d6460",
 CellID->741226869],
Cell[127783, 3646, 988, 31, 68, "Output",ExpressionUUID->"f8067a09-d97c-4eb5-8b68-84cb52962216",
 CellID->941745742]
}, Open  ]],
Cell[128786, 3680, 158, 2, 45, "Text",ExpressionUUID->"49b0250d-01c8-4258-be76-8e97cefdaf83",
 CellID->966207404],
Cell[CellGroupData[{
Cell[128969, 3686, 453, 12, 31, "Input",ExpressionUUID->"3c124891-91af-4816-b3f3-8e95214a166f",
 CellID->8625299],
Cell[129425, 3700, 953, 30, 68, "Output",ExpressionUUID->"166ee5f9-c44c-4b1b-8072-e1c73d49699b",
 CellID->1861321483]
}, Open  ]],
Cell[130393, 3733, 250, 4, 45, "Text",ExpressionUUID->"1d0bc299-2067-4dca-8beb-89c4036bf379",
 CellID->835878932],
Cell[130646, 3739, 664, 10, 193, "Text",ExpressionUUID->"e1799137-b8f5-43de-9aa0-ba99c5624a06",
 CellID->1567448893],
Cell[131313, 3751, 198, 2, 38, "ItemNumbered",ExpressionUUID->"393e4073-7647-48ca-a657-ff7e4aaf8223",
 CellID->1900929339],
Cell[131514, 3755, 307, 5, 75, "Text",ExpressionUUID->"bfc62b82-e6c8-4782-b223-799fd9170a53",
 CellID->805184154],
Cell[131824, 3762, 504, 13, 54, "Input",ExpressionUUID->"841ca1e0-ecfa-4fee-89dd-dbc2987d760b",
 CellID->1762901395],
Cell[132331, 3777, 226, 4, 45, "Text",ExpressionUUID->"ff4216d0-2cdf-447e-a229-b75a7409b83d",
 CellID->2054130698],
Cell[CellGroupData[{
Cell[132582, 3785, 394, 9, 54, "Input",ExpressionUUID->"4ecacea7-9c4b-4682-a7e8-be4785574b3b",
 CellID->1228142026],
Cell[132979, 3796, 245, 5, 45, "Output",ExpressionUUID->"dd032ca0-4034-47fd-8dd8-8f775104e355",
 CellID->991833710]
}, Open  ]],
Cell[133239, 3804, 484, 8, 104, "Text",ExpressionUUID->"f907c6a9-b378-4238-b0ca-67862d4cecc2",
 CellID->2013532513],
Cell[CellGroupData[{
Cell[133748, 3816, 501, 12, 54, "Input",ExpressionUUID->"36fca98c-3c0d-4630-9365-5f15ece972aa",
 CellID->1545338610],
Cell[134252, 3830, 722, 12, 68, "Output",ExpressionUUID->"24eb8f00-69cc-44aa-be4e-a3411ff1d745",
 CellID->902934273]
}, Open  ]],
Cell[134989, 3845, 253, 5, 45, "Text",ExpressionUUID->"b3e08359-bfc0-48ea-a358-fb08e5858dc4",
 CellID->1786516745],
Cell[CellGroupData[{
Cell[135267, 3854, 491, 13, 54, "Input",ExpressionUUID->"66d1a9c3-0281-465f-956d-2c52a9f9d4b7",
 CellID->253465238],
Cell[135761, 3869, 2841, 83, 138, "Output",ExpressionUUID->"4745b45f-3e56-4cf8-92ba-36b104801e44",
 CellID->1651326796]
}, Open  ]],
Cell[138617, 3955, 282, 6, 45, "Text",ExpressionUUID->"6bcd2d0d-11a6-4960-8bb0-75bbaf8ea124",
 CellID->1591010303],
Cell[CellGroupData[{
Cell[138924, 3965, 839, 21, 78, "Input",ExpressionUUID->"fe0974df-d11b-4438-9d9d-c9c6d1b580d6",
 CellID->1895412032],
Cell[139766, 3988, 16054, 385, 204, "Output",ExpressionUUID->"c1d24aeb-6428-499d-8b46-f0e20377a585",
 CellID->207234642]
}, Open  ]],
Cell[155835, 4376, 180, 2, 38, "ItemNumbered",ExpressionUUID->"2821c76e-eeef-45cd-ac62-d1666d8b1ba0",
 CellID->456795341],
Cell[156018, 4380, 338, 6, 75, "Text",ExpressionUUID->"39a00c13-2725-489c-a9a7-561978212026",
 CellID->105258162],
Cell[CellGroupData[{
Cell[156381, 4390, 616, 16, 54, "Input",ExpressionUUID->"20afaad9-437a-4c35-a549-862a95fe5bc6",
 CellID->884048157],
Cell[157000, 4408, 428, 12, 45, "Output",ExpressionUUID->"ca6724cc-09e6-40f3-96b3-f2ebb95744b5",
 CellID->2051717220]
}, Open  ]],
Cell[157443, 4423, 651, 10, 193, "Text",ExpressionUUID->"dc57b566-4117-468b-9165-29b5305ac672",
 CellID->1066396661],
Cell[CellGroupData[{
Cell[158119, 4437, 683, 20, 31, "Input",ExpressionUUID->"cfb3db1d-9a83-4b6f-beec-b92ba5684176",
 CellID->142875389],
Cell[158805, 4459, 592, 18, 45, "Output",ExpressionUUID->"12ff5e0e-2500-48d6-a81b-e8d6e105011b",
 CellID->1604405829]
}, Open  ]],
Cell[159412, 4480, 497, 8, 134, "Text",ExpressionUUID->"000094da-0056-4881-a699-186d09ef5096",
 CellID->1816697186],
Cell[159912, 4490, 162, 2, 38, "ItemNumbered",ExpressionUUID->"ed408ad0-4cc2-449d-a3a8-b64439fdda13",
 CellID->1199026464],
Cell[160077, 4494, 761, 11, 252, "Text",ExpressionUUID->"59c6e6dd-e0b0-4fdb-8efd-8aaa5696cc2c",
 CellID->51237000],
Cell[160841, 4507, 172, 2, 38, "ItemNumbered",ExpressionUUID->"6d7edac4-1f2d-487c-a711-802d4e2cc4a6",
 CellID->1782180283],
Cell[161016, 4511, 431, 7, 104, "Text",ExpressionUUID->"832b669a-f0a7-4e4b-9bf2-3589017292c9",
 CellID->2108025],
Cell[CellGroupData[{
Cell[161472, 4522, 556, 14, 54, "Input",ExpressionUUID->"2443d9f5-ab45-4e77-a73a-79f43f60cda1",
 CellID->2076403143],
Cell[162031, 4538, 756, 23, 45, "Output",ExpressionUUID->"8335b3d2-3a49-465b-976e-b9cea16e2797",
 CellID->742810719]
}, Open  ]],
Cell[162802, 4564, 501, 8, 134, "Text",ExpressionUUID->"cd1f59ab-2858-4262-a0ab-ea9e8a769b31",
 CellID->565866704],
Cell[CellGroupData[{
Cell[163328, 4576, 562, 16, 31, "Input",ExpressionUUID->"4e6bbe1f-fe50-48b0-8b8d-1d8bb2399a7b",
 CellID->1709759579],
Cell[163893, 4594, 725, 23, 45, "Output",ExpressionUUID->"5d8ee859-ac06-4031-a333-87e985bf7af9",
 CellID->96732195]
}, Open  ]],
Cell[164633, 4620, 191, 2, 45, "Text",ExpressionUUID->"bcddf7bd-18cf-43bf-b133-99aedd250b56",
 CellID->1020619190],
Cell[164827, 4624, 661, 18, 78, "Input",ExpressionUUID->"72e4d648-857c-4816-ac18-c8085d3a16be",
 CellID->1694514780],
Cell[165491, 4644, 172, 2, 45, "Text",ExpressionUUID->"854b760b-fbdf-4aab-9df3-fc97c6a79adc",
 CellID->1744123382],
Cell[CellGroupData[{
Cell[165688, 4650, 375, 9, 31, "Input",ExpressionUUID->"7cd5d3d7-d209-4bab-a27f-a582aa27c541",
 CellID->1254166463],
Cell[166066, 4661, 727, 23, 45, "Output",ExpressionUUID->"d2538659-2c80-4731-95c5-92421b743525",
 CellID->2023349134]
}, Open  ]],
Cell[166808, 4687, 213, 4, 45, "Text",ExpressionUUID->"a5eafa0c-7bd4-4551-8fca-13787c9e06ef",
 CellID->1025344893],
Cell[CellGroupData[{
Cell[167046, 4695, 391, 10, 31, "Input",ExpressionUUID->"9f2c45a6-5e66-4db4-aa0d-83818c6c2d20",
 CellID->663811804],
Cell[167440, 4707, 727, 23, 45, "Output",ExpressionUUID->"a631e3dc-0278-4cb1-8cf2-5976da28b14d",
 CellID->1012379854]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[168216, 4736, 150, 2, 66, "Subsubsection",ExpressionUUID->"12b2895f-27be-4751-8b34-7fa46338f4c0",
 CellID->555270997],
Cell[168369, 4740, 382, 6, 104, "Text",ExpressionUUID->"3a5775c0-ca4d-4893-a9fc-730992d0ac27",
 CellID->2037747398],
Cell[CellGroupData[{
Cell[168776, 4750, 581, 15, 54, "Input",ExpressionUUID->"e9578b87-7361-4ee5-a3c7-dc5b2129a553",
 CellID->467895041],
Cell[169360, 4767, 750, 23, 45, "Output",ExpressionUUID->"267c64cd-3d1a-4bd4-8ff7-1758c2faa07d",
 CellID->976988544]
}, Open  ]],
Cell[CellGroupData[{
Cell[170147, 4795, 257, 5, 31, "Input",ExpressionUUID->"b58d7809-7d58-43c9-aa71-5f014980425c",
 CellID->255491392],
Cell[170407, 4802, 1766, 52, 91, "Output",ExpressionUUID->"85467915-58b6-475d-a67b-3113b4c77aec",
 CellID->667784228]
}, Open  ]],
Cell[172188, 4857, 177, 2, 38, "ItemNumbered",ExpressionUUID->"60ab102e-9a99-4eec-a9ad-55bb684b042e",
 CellID->699980774],
Cell[172368, 4861, 437, 7, 134, "Text",ExpressionUUID->"fed709cf-325d-4cef-bb8c-baee8e7de07e",
 CellID->661450352],
Cell[CellGroupData[{
Cell[172830, 4872, 404, 10, 31, "Input",ExpressionUUID->"aef42abe-90dc-4196-b959-1233978a8823",
 CellID->441548339],
Cell[173237, 4884, 426, 13, 45, "Output",ExpressionUUID->"b480d032-ec46-4fb4-88df-85db504075cc",
 CellID->442729258]
}, Open  ]],
Cell[173678, 4900, 221, 5, 45, "Text",ExpressionUUID->"6688af24-1e64-43d5-9d8a-f1b6f0402c2f",
 CellID->1008159864],
Cell[173902, 4907, 332, 8, 31, "Input",ExpressionUUID->"e145c0ad-5e3c-4a10-b9ba-e56a03aa9f9b",
 CellID->1299818790],
Cell[174237, 4917, 208, 2, 45, "Text",ExpressionUUID->"4039f83f-12e9-4def-b9a2-166d502ed4fe",
 CellID->1469603089],
Cell[CellGroupData[{
Cell[174470, 4923, 260, 5, 31, "Input",ExpressionUUID->"0f0b5034-34e9-4c22-ac24-b576d7de207b",
 CellID->1665211828],
Cell[CellGroupData[{
Cell[174755, 4932, 207, 4, 28, "Print",ExpressionUUID->"ec395127-ebf0-45fa-ab55-4cd34e9b7883",
 CellID->232015799],
Cell[174965, 4938, 193, 3, 28, "Print",ExpressionUUID->"413c2d50-466f-48a9-96f6-afa1f3f2902c",
 CellID->1806714488],
Cell[175161, 4943, 253, 6, 28, "Print",ExpressionUUID->"c2ffdf78-ec8f-45ca-a899-d52976989e0b",
 CellID->31631236],
Cell[175417, 4951, 191, 3, 28, "Print",ExpressionUUID->"53cfdd73-8750-41e9-ba4b-a2b437274609",
 CellID->1197722643],
Cell[175611, 4956, 308, 8, 28, "Print",ExpressionUUID->"eeedbfec-cc0b-4967-97fe-b119180abf66",
 CellID->1760237570],
Cell[175922, 4966, 190, 3, 28, "Print",ExpressionUUID->"d58f7645-269f-4a05-9a80-3eab31a8d671",
 CellID->578117918],
Cell[176115, 4971, 364, 11, 28, "Print",ExpressionUUID->"7dec115f-af0f-405a-baa2-00cbd54283b3",
 CellID->1211828798],
Cell[176482, 4984, 190, 3, 28, "Print",ExpressionUUID->"848e29e8-fba5-458a-bf17-d3d2ca37c0f7",
 CellID->471699838],
Cell[176675, 4989, 425, 13, 28, "Print",ExpressionUUID->"10972583-b20b-488f-ae2f-8b585a40e248",
 CellID->1497036189]
}, Open  ]],
Cell[177115, 5005, 406, 13, 45, "Output",ExpressionUUID->"20d2f641-9bac-4a7e-843b-b80374821cad",
 CellID->768820271]
}, Open  ]],
Cell[177536, 5021, 525, 8, 163, "Text",ExpressionUUID->"02117184-5d85-49b0-88be-355a3501c69e",
 CellID->153190698],
Cell[178064, 5031, 178, 2, 38, "ItemNumbered",ExpressionUUID->"63e3458a-3060-4d50-be95-6ba5e78dce35",
 CellID->2084566492],
Cell[178245, 5035, 481, 8, 134, "Text",ExpressionUUID->"01a15c15-3cd6-4a97-911e-cf17b6aecc93",
 CellID->1260813886],
Cell[178729, 5045, 395, 11, 31, "Input",ExpressionUUID->"d9eda413-5e5c-405b-ac51-defdddfc6edd",
 CellID->1200447424],
Cell[179127, 5058, 175, 2, 45, "Text",ExpressionUUID->"f846eef2-0b79-4c11-9e80-47e4e2207435",
 CellID->745115883],
Cell[CellGroupData[{
Cell[179327, 5064, 226, 4, 31, "Input",ExpressionUUID->"7383ed9d-11ac-47a0-bc12-ace7d46c40ea",
 CellID->1689338797],
Cell[179556, 5070, 429, 14, 49, "Output",ExpressionUUID->"0331985b-4bfd-4cf3-ba12-0e4d666f0546",
 CellID->497724981]
}, Open  ]],
Cell[CellGroupData[{
Cell[180022, 5089, 254, 5, 31, "Input",ExpressionUUID->"6cba2eda-966a-4175-8605-f308275d876c",
 CellID->814950602],
Cell[180279, 5096, 428, 14, 49, "Output",ExpressionUUID->"30e268d8-f0ff-45dd-80c2-c57cbb574ada",
 CellID->118993461]
}, Open  ]],
Cell[180722, 5113, 438, 8, 104, "Text",ExpressionUUID->"12cc9d90-5810-4b4b-b55b-9aea2a954912",
 CellID->1513500137],
Cell[181163, 5123, 605, 17, 31, "Input",ExpressionUUID->"02d64c28-04e0-4b7d-bc22-d1faf44d9bb9",
 CellID->1076337207],
Cell[CellGroupData[{
Cell[181793, 5144, 228, 4, 31, "Input",ExpressionUUID->"8376015f-e14c-4f6f-870b-64770674715b",
 CellID->1443691413],
Cell[182024, 5150, 430, 14, 49, "Output",ExpressionUUID->"adb27cba-5f65-4ea2-98ec-597d40f056cc",
 CellID->1250724599]
}, Open  ]],
Cell[CellGroupData[{
Cell[182491, 5169, 260, 5, 31, "Input",ExpressionUUID->"56f56c61-270b-4290-8578-8bfcdd62d461",
 CellID->1358398557],
Cell[182754, 5176, 451, 14, 49, "Output",ExpressionUUID->"6700af6d-cea8-4ef2-94bc-056357e7cdd1",
 CellID->163300875]
}, Open  ]],
Cell[CellGroupData[{
Cell[183242, 5195, 231, 4, 31, "Input",ExpressionUUID->"91bddcb2-7019-42d3-ae4d-00f890fc9eb1",
 CellID->1931325830],
Cell[183476, 5201, 512, 16, 49, "Output",ExpressionUUID->"5bb3936b-f0d6-4f41-8bdc-b6c654b73fdf",
 CellID->1876339935]
}, Open  ]],
Cell[184003, 5220, 626, 9, 193, "Text",ExpressionUUID->"1f42a3d9-c258-4204-88b6-59ce5a672edc",
 CellID->1323019929],
Cell[CellGroupData[{
Cell[184654, 5233, 377, 10, 31, "Input",ExpressionUUID->"f769458d-6362-4ea5-8a49-3774d41cce43",
 CellID->461799757],
Cell[185034, 5245, 8707, 261, 453, "Output",ExpressionUUID->"4556c43b-61e7-4caa-a055-861ca408b190",
 CellID->106836544]
}, Open  ]],
Cell[193756, 5509, 216, 2, 31, "Subitem",ExpressionUUID->"570cfa91-3e11-4486-a832-bb1da700b3aa",
 CellID->492122378],
Cell[193975, 5513, 417, 7, 104, "Text",ExpressionUUID->"92d4c105-29be-4d69-bc08-efd500fa66ed",
 CellID->1141282449],
Cell[CellGroupData[{
Cell[194417, 5524, 503, 14, 31, "Input",ExpressionUUID->"92d7f1d1-3d76-4271-b025-e5c9c5980dd8",
 CellID->1303880480],
Cell[194923, 5540, 6607, 198, 225, "Output",ExpressionUUID->"b5e17a91-bd3d-4caf-9f83-bc94012b6f2f",
 CellID->1941193096]
}, Open  ]],
Cell[201545, 5741, 268, 5, 75, "Text",ExpressionUUID->"82014670-feb4-4c59-a4c8-11f86000ea4f",
 CellID->1060799248],
Cell[201816, 5748, 316, 6, 75, "Text",ExpressionUUID->"9f14e8ad-fa71-4f7e-999c-ef2d8d831dc1",
 CellID->443723742],
Cell[CellGroupData[{
Cell[202157, 5758, 360, 8, 31, "Input",ExpressionUUID->"6a506d18-ef11-4ed9-821f-63b71d07fa4b",
 CellID->1079702141],
Cell[202520, 5768, 2269, 82, 108, "Output",ExpressionUUID->"e0a87b15-67b4-4f75-afa6-d36bccd720c3",
 CellID->945197404]
}, Open  ]],
Cell[204804, 5853, 580, 9, 163, "Text",ExpressionUUID->"341df499-0e6b-4a21-93b5-eb9d5c608101",
 CellID->82252474],
Cell[205387, 5864, 514, 8, 134, "Text",ExpressionUUID->"70e1d83e-5bec-465e-85f9-592c11e18b75",
 CellID->2060230079],
Cell[205904, 5874, 431, 7, 134, "Text",ExpressionUUID->"8f15f1c3-df02-4cb1-80d9-ec571c0c1ba6",
 CellID->557176284]
}, Open  ]],
Cell[CellGroupData[{
Cell[206372, 5886, 147, 2, 66, "Subsubsection",ExpressionUUID->"63bd88ec-b982-47bb-9737-d72499940096",
 CellID->1105604685],
Cell[206522, 5890, 416, 7, 104, "Text",ExpressionUUID->"0cab5ccf-99af-4d67-8b79-4260706f65b5",
 CellID->1869426951],
Cell[206941, 5899, 242, 4, 31, "Input",ExpressionUUID->"2a297c51-728d-4b34-868f-e1477ade1fcc",
 CellID->795993754],
Cell[207186, 5905, 365, 6, 104, "Text",ExpressionUUID->"518707cb-339a-4033-b9f9-69796e769076",
 CellID->637803592],
Cell[207554, 5913, 157, 2, 38, "ItemNumbered",ExpressionUUID->"68db035b-a4f6-4ce3-af2f-f3fc0cd03f46",
 CellID->1314366989],
Cell[207714, 5917, 212, 2, 45, "Text",ExpressionUUID->"3a5ace4e-bebd-4bbe-a40d-0bd05a59fb54",
 CellID->1549191081],
Cell[207929, 5921, 324, 8, 31, "Input",ExpressionUUID->"7e9f0abb-0cff-403b-a7e4-c96d16109698",
 CellID->442082473],
Cell[208256, 5931, 400, 6, 104, "Text",ExpressionUUID->"c82f6347-d027-41c9-8c28-a5f206b3c303",
 CellID->193619190],
Cell[CellGroupData[{
Cell[208681, 5941, 516, 15, 31, "Input",ExpressionUUID->"a3509e5d-795f-4fbe-ab48-e6a35377317d",
 CellID->951531440],
Cell[209200, 5958, 172, 3, 45, "Output",ExpressionUUID->"9fc16357-c70e-4070-a31a-e93a09d2b094",
 CellID->442110578]
}, Open  ]],
Cell[209387, 5964, 695, 11, 193, "Text",ExpressionUUID->"129c6f64-76c7-41c9-8ce5-5d682cacb921",
 CellID->259065826],
Cell[CellGroupData[{
Cell[210107, 5979, 624, 17, 54, "Input",ExpressionUUID->"ffd46e40-d5da-4b3b-9f7d-26dc4db4d335",
 CellID->1001531898],
Cell[210734, 5998, 174, 3, 45, "Output",ExpressionUUID->"1aebfee5-2ed4-4397-ab2d-ee50aff290b2",
 CellID->1111581936]
}, Open  ]],
Cell[210923, 6004, 297, 5, 75, "Text",ExpressionUUID->"4221ea7d-6423-41c1-aba2-81a2af140c32",
 CellID->1397353099],
Cell[211223, 6011, 177, 2, 38, "ItemNumbered",ExpressionUUID->"4eae5b25-eca4-44db-9932-e6dc1519d3c8",
 CellID->1927278106],
Cell[211403, 6015, 426, 7, 104, "Text",ExpressionUUID->"32803e69-8637-4e58-bbbc-71b9d489577d",
 CellID->1267279841],
Cell[211832, 6024, 949, 27, 101, "Input",ExpressionUUID->"b6c21c6f-e6a5-4b57-8edf-35f562680539",
 CellID->555291676],
Cell[212784, 6053, 584, 9, 163, "Text",ExpressionUUID->"bc24e771-f9d5-4fd8-814e-1c3960dcbd75",
 CellID->1816531442]
}, Open  ]],
Cell[CellGroupData[{
Cell[213405, 6067, 153, 2, 66, "Subsubsection",ExpressionUUID->"21d167dc-17a0-483f-bbab-33ec54ccc60f",
 CellID->1108946741],
Cell[213561, 6071, 602, 10, 134, "Text",ExpressionUUID->"f22cb796-e8c7-400f-a667-c6babaea14b9",
 CellID->57303674],
Cell[214166, 6083, 167, 2, 38, "ItemNumbered",ExpressionUUID->"edf5a3d1-cc28-48f3-96a1-c3f07910bf1d",
 CellID->758136648],
Cell[214336, 6087, 173, 2, 45, "Text",ExpressionUUID->"f936b1e4-df03-47b5-ada3-0e2b6ac31a37",
 CellID->982165285],
Cell[CellGroupData[{
Cell[214534, 6093, 402, 10, 31, "Input",ExpressionUUID->"1a9e3cf2-b2f5-4f46-b4cd-8887ff2055d4",
 CellID->386337662],
Cell[214939, 6105, 356, 8, 45, "Output",ExpressionUUID->"84063cda-3fb5-42c1-981c-3de1c9903b59",
 CellID->1406077512]
}, Open  ]],
Cell[215310, 6116, 342, 6, 104, "Text",ExpressionUUID->"c3feeb58-e733-45ce-a89c-d6b2e9f48a52",
 CellID->1034692596],
Cell[CellGroupData[{
Cell[215677, 6126, 578, 18, 31, "Input",ExpressionUUID->"14ed4157-81d4-4079-bf68-381ebe0a32f5",
 CellID->801860404],
Cell[216258, 6146, 767, 20, 68, "Output",ExpressionUUID->"20bbd474-3be8-4364-b5ea-84ee16ea7842",
 CellID->1177696742]
}, Open  ]],
Cell[217040, 6169, 490, 8, 134, "Text",ExpressionUUID->"a6fe51bc-b37e-4425-aa84-1798a1087cc1",
 CellID->1599128427],
Cell[217533, 6179, 270, 5, 31, "Input",ExpressionUUID->"c8837a33-1f4a-46f8-8e6b-b967067e76ac",
 CellID->270346487],
Cell[217806, 6186, 285, 5, 75, "Text",ExpressionUUID->"aea6db26-0fb7-4cc5-b814-9cf935915a9f",
 CellID->1811379942],
Cell[CellGroupData[{
Cell[218116, 6195, 477, 14, 31, "Input",ExpressionUUID->"ed45cd1c-c1a6-43a4-ad59-6acd2f1b9407",
 CellID->1487198138],
Cell[218596, 6211, 825, 23, 68, "Output",ExpressionUUID->"f53ca5b8-ee7f-4f7b-884c-11ed23424a43",
 CellID->48716445]
}, Open  ]],
Cell[219436, 6237, 429, 7, 104, "Text",ExpressionUUID->"e2e45efa-fbe9-4653-9dc8-1bea75142003",
 CellID->122389500],
Cell[219868, 6246, 230, 5, 45, "Text",ExpressionUUID->"b8004034-564a-4b38-aa48-618b800d2b03",
 CellID->1247234921],
Cell[CellGroupData[{
Cell[220123, 6255, 627, 17, 78, "Input",ExpressionUUID->"15f51d6b-fcef-482c-805a-34f1bba73813",
 CellID->489667849],
Cell[220753, 6274, 827, 23, 68, "Output",ExpressionUUID->"49feb250-35ff-4b99-9717-dde63df6fba6",
 CellID->1676231783]
}, Open  ]],
Cell[221595, 6300, 226, 5, 45, "Text",ExpressionUUID->"d86d22c0-d90f-4767-81b6-b0eaf9ca7e02",
 CellID->1011161738],
Cell[CellGroupData[{
Cell[221846, 6309, 263, 5, 31, "Input",ExpressionUUID->"f5cef42d-547b-427f-85d8-10a6996c8bde",
 CellID->1012580996],
Cell[222112, 6316, 1479, 50, 68, "Output",ExpressionUUID->"6fb7fff9-a23d-4aae-9074-27cbbaac3b40",
 CellID->1660850496]
}, Open  ]],
Cell[223606, 6369, 155, 2, 38, "ItemNumbered",ExpressionUUID->"95cc5d16-c487-4a0b-8409-7754dba20f81",
 CellID->1643265161],
Cell[223764, 6373, 183, 2, 31, "SubitemNumbered",ExpressionUUID->"731dd74a-03cf-420f-92f8-55fc7dbf5857",
 CellID->1717860507],
Cell[223950, 6377, 404, 7, 104, "Text",ExpressionUUID->"a5f006c9-b5d5-4dc8-a77b-4604fbb075b3",
 CellID->1311390881],
Cell[CellGroupData[{
Cell[224379, 6388, 648, 18, 55, "Input",ExpressionUUID->"16d123c9-d544-4b56-b3c0-a08b1bdc1e9c",
 CellID->1799335218],
Cell[225030, 6408, 1256, 38, 133, "Output",ExpressionUUID->"5aaa44d7-efa4-4c45-a796-0429b8d078a5",
 CellID->915196705]
}, Open  ]],
Cell[226301, 6449, 434, 7, 104, "Text",ExpressionUUID->"79d7b92a-6691-4e5c-9d2d-807f9927f4bf",
 CellID->1433141121],
Cell[CellGroupData[{
Cell[226760, 6460, 348, 8, 31, "Input",ExpressionUUID->"23bca46c-d557-4353-af05-7ce4d0bb2d16",
 CellID->454343110],
Cell[227111, 6470, 1359, 45, 68, "Output",ExpressionUUID->"562132e2-0053-4d8c-8db2-3fe1b798cd0c",
 CellID->794975597]
}, Open  ]],
Cell[228485, 6518, 287, 5, 75, "Text",ExpressionUUID->"9836c2a1-0d24-4e07-9c3b-a1fd75c6c6e3",
 CellID->1867898161],
Cell[CellGroupData[{
Cell[228797, 6527, 742, 21, 55, "Input",ExpressionUUID->"0135d47d-1924-452b-a361-16ace32ea188",
 CellID->2066348099],
Cell[229542, 6550, 983, 29, 133, "Output",ExpressionUUID->"56e540a8-27a7-4adc-86cc-8d3ec0fe721d",
 CellID->1122213998]
}, Open  ]],
Cell[230540, 6582, 468, 7, 134, "Text",ExpressionUUID->"35436102-a8d0-4b4d-b4cf-2dc5f54a2b94",
 CellID->1849276432],
Cell[231011, 6591, 496, 8, 134, "Text",ExpressionUUID->"64d8aacd-0458-46cc-8bdd-e1cfc2043219",
 CellID->1907122695],
Cell[231510, 6601, 205, 3, 31, "SubitemNumbered",ExpressionUUID->"1adc8366-2894-4afc-b4e1-0a66e7febe5d",
 CellID->435796461],
Cell[231718, 6606, 281, 5, 75, "Text",ExpressionUUID->"678476e5-2b87-4213-883d-149cc831d92b",
 CellID->1511883757],
Cell[CellGroupData[{
Cell[232024, 6615, 521, 14, 31, "Input",ExpressionUUID->"73e33b06-f4f9-4bec-9a3e-b6c30dfec112",
 CellID->848812848],
Cell[232548, 6631, 919, 28, 116, "Output",ExpressionUUID->"e0ca859a-f3f1-475d-a35d-0983f0d4caee",
 CellID->757791731]
}, Open  ]],
Cell[233482, 6662, 178, 2, 45, "Text",ExpressionUUID->"f8b99469-bc72-431f-b64f-42442d29c6b0",
 CellID->1627596207],
Cell[CellGroupData[{
Cell[233685, 6668, 230, 4, 31, "Input",ExpressionUUID->"f164ead2-e28e-42f1-baa7-540bfaa488f3",
 CellID->126673508],
Cell[233918, 6674, 171, 3, 45, "Output",ExpressionUUID->"75c03b46-2576-4e7e-b5a1-efb470f98155",
 CellID->1987214360]
}, Open  ]],
Cell[234104, 6680, 233, 5, 75, "Text",ExpressionUUID->"16ee31b8-e325-4d96-bdc6-cced9419d3b3",
 CellID->1446070376],
Cell[CellGroupData[{
Cell[234362, 6689, 904, 25, 55, "Input",ExpressionUUID->"9a3b78d2-b270-4cdd-8874-7d718e016a48",
 CellID->803530064],
Cell[235269, 6716, 1186, 37, 147, "Output",ExpressionUUID->"459be646-5314-4892-97a1-0c6cc2c2b8de",
 CellID->994758579]
}, Open  ]],
Cell[236470, 6756, 184, 2, 31, "SubitemNumbered",ExpressionUUID->"41221a03-c664-4a8b-8a2e-39b8b67ee704",
 CellID->1052981991],
Cell[236657, 6760, 187, 2, 45, "Text",ExpressionUUID->"4a185edb-f55e-4e7f-a1e9-5eb0d4b625b9",
 CellID->55587810],
Cell[CellGroupData[{
Cell[236869, 6766, 558, 14, 54, "Input",ExpressionUUID->"6a6f28e5-1a44-43cc-8ab7-13b2194060ce",
 CellID->1235066331],
Cell[237430, 6782, 752, 23, 45, "Output",ExpressionUUID->"2be9f7b3-ddfd-41ce-9b94-48b03c26174b",
 CellID->254780480]
}, Open  ]],
Cell[238197, 6808, 185, 2, 45, "Text",ExpressionUUID->"a8d966a8-f697-4578-a4f2-493e488fc209",
 CellID->13135242],
Cell[CellGroupData[{
Cell[238407, 6814, 656, 18, 54, "Input",ExpressionUUID->"63bf42eb-011c-40cb-9ef7-a06574954474",
 CellID->1022516676],
Cell[239066, 6834, 612, 17, 45, "Output",ExpressionUUID->"2721790d-46d8-468c-a54d-ef0ad824bd19",
 CellID->1384536612]
}, Open  ]],
Cell[239693, 6854, 180, 2, 31, "SubitemNumbered",ExpressionUUID->"8eb3db5b-3ab8-4edc-8288-2e6ee5097464",
 CellID->10674994],
Cell[239876, 6858, 377, 6, 104, "Text",ExpressionUUID->"800b7bc2-7e35-4e80-9a6e-3eabb3db9870",
 CellID->1173481457],
Cell[CellGroupData[{
Cell[240278, 6868, 513, 13, 54, "Input",ExpressionUUID->"07f85ae0-3ec5-48f3-ba02-8757a73cdeb0",
 CellID->872698763],
Cell[240794, 6883, 381, 8, 45, "Output",ExpressionUUID->"748aa4ea-37d0-4772-b073-3ae0583455ae",
 CellID->627751511]
}, Open  ]],
Cell[241190, 6894, 312, 5, 75, "Text",ExpressionUUID->"2935bbfe-da40-46a4-aa16-fb349f6e94d6",
 CellID->448263146],
Cell[CellGroupData[{
Cell[241527, 6903, 410, 10, 31, "Input",ExpressionUUID->"73774b74-d34c-4c54-97e8-6e972da5810b",
 CellID->1850034012],
Cell[241940, 6915, 435, 11, 45, "Output",ExpressionUUID->"c9a09937-a277-4433-a84c-5e0670c2f650",
 CellID->1844500733]
}, Open  ]],
Cell[242390, 6929, 152, 2, 45, "Text",ExpressionUUID->"94d4e072-a361-4bea-9818-b9bb5b77013d",
 CellID->1597375086],
Cell[CellGroupData[{
Cell[242567, 6935, 629, 18, 31, "Input",ExpressionUUID->"2074636e-3711-446f-be15-a1a037b3f786",
 CellID->1390366719],
Cell[243199, 6955, 458, 11, 45, "Output",ExpressionUUID->"da5daa25-af61-47fd-818f-ea0ffb7ba5fd",
 CellID->219974402]
}, Open  ]],
Cell[243672, 6969, 173, 2, 45, "Text",ExpressionUUID->"af2fc09a-ad5a-4ae6-9e9a-dac3ce5d314e",
 CellID->486378117],
Cell[243848, 6973, 1329, 37, 125, "Input",ExpressionUUID->"0c8db432-d183-44e2-92be-ec24b193455b",
 CellID->1527758786],
Cell[245180, 7012, 162, 2, 45, "Text",ExpressionUUID->"ac18ed62-2179-463f-9f9b-bf6ec535c352",
 CellID->968935174],
Cell[CellGroupData[{
Cell[245367, 7018, 260, 5, 31, "Input",ExpressionUUID->"8213fed0-2d50-41a1-997d-9a7053e82873",
 CellID->1642802885],
Cell[245630, 7025, 435, 11, 45, "Output",ExpressionUUID->"e656425f-19ca-4ac1-85a9-7c7396bc247b",
 CellID->460192361]
}, Open  ]],
Cell[CellGroupData[{
Cell[246102, 7041, 260, 5, 31, "Input",ExpressionUUID->"40a81fb4-0fe8-42c7-81d0-8583c9b8a97e",
 CellID->440444694],
Cell[246365, 7048, 545, 15, 45, "Output",ExpressionUUID->"f6df0f38-d749-4a06-944b-5de50b106794",
 CellID->1213857649]
}, Open  ]],
Cell[CellGroupData[{
Cell[246947, 7068, 285, 6, 31, "Input",ExpressionUUID->"c9bf5e4a-2662-4503-970d-b8e9a07bef58",
 CellID->580086551],
Cell[247235, 7076, 493, 15, 45, "Output",ExpressionUUID->"39dd2da1-1d97-463a-a060-93b4d165d4ba",
 CellID->803968096]
}, Open  ]],
Cell[247743, 7094, 220, 5, 45, "Text",ExpressionUUID->"fb5ca0ad-4d4c-4736-a151-dd17d7d6f5dc",
 CellID->334877563],
Cell[CellGroupData[{
Cell[247988, 7103, 345, 9, 31, "Input",ExpressionUUID->"744ef82f-970e-43cf-b899-bade7eb9e35b",
 CellID->2009601896],
Cell[248336, 7114, 229, 5, 45, "Output",ExpressionUUID->"dcc96270-f68e-4474-86ae-5654a97461b6",
 CellID->2096166408]
}, Open  ]],
Cell[CellGroupData[{
Cell[248602, 7124, 347, 9, 31, "Input",ExpressionUUID->"72f8f0de-9d72-421a-a2a9-e3683c226266",
 CellID->1907665068],
Cell[248952, 7135, 226, 5, 45, "Output",ExpressionUUID->"3f5aa924-2b88-4921-896a-e0b9d9ffdd7f",
 CellID->452040758]
}, Open  ]],
Cell[249193, 7143, 463, 7, 134, "Text",ExpressionUUID->"71ce423b-9f77-4043-9911-f47833926bfb",
 CellID->1799360267],
Cell[249659, 7152, 214, 3, 31, "SubitemNumbered",ExpressionUUID->"af0bc87d-8a0a-4954-8d0e-0276397592c0",
 CellTags->"5.2.6.2.5",
 CellID->625939973],
Cell[249876, 7157, 818, 16, 134, "Text",ExpressionUUID->"dc643799-1e66-42d8-8c99-57c35e4f0639",
 CellID->382911027],
Cell[CellGroupData[{
Cell[250719, 7177, 352, 8, 31, "Input",ExpressionUUID->"696da165-f2ba-4d3b-bf7f-3b2d04cf98c7",
 CellID->419447946],
Cell[251074, 7187, 238, 5, 45, "Output",ExpressionUUID->"16befb24-de84-478e-a67a-1c37bcfbf836",
 CellID->2055469181]
}, Open  ]],
Cell[251327, 7195, 335, 6, 75, "Text",ExpressionUUID->"f9da4c3d-0e88-414f-9a95-91146ffc5dec",
 CellID->1848579425],
Cell[251665, 7203, 168, 3, 31, "Input",ExpressionUUID->"b71b0890-d342-42f3-b90a-0be9227bfe26",
 CellID->1656710769],
Cell[251836, 7208, 341, 6, 104, "Text",ExpressionUUID->"d17e127e-4e5f-494b-bd86-0da5ebd7a1b7",
 CellID->64927581],
Cell[252180, 7216, 784, 11, 222, "Text",ExpressionUUID->"6c24ecee-284f-49ad-ad7c-810507b02d76",
 CellID->316161191],
Cell[252967, 7229, 188, 2, 45, "Text",ExpressionUUID->"744cdc6c-3c20-4edb-afb8-a744d0fdd5c2",
 CellID->447716899],
Cell[CellGroupData[{
Cell[253180, 7235, 401, 10, 31, "Input",ExpressionUUID->"9e5e1513-d5ac-4bee-952d-ff77a837f635",
 CellID->1307339421],
Cell[253584, 7247, 431, 8, 45, "Output",ExpressionUUID->"c9396d53-89eb-4b72-b422-ad9e44358143",
 CellID->2135977080]
}, Open  ]],
Cell[254030, 7258, 186, 2, 45, "Text",ExpressionUUID->"b757787d-e03a-4059-9f43-36bee068bce0",
 CellID->620738533],
Cell[CellGroupData[{
Cell[254241, 7264, 291, 6, 31, "Input",ExpressionUUID->"91df6496-377e-4c40-b732-3514973bd39c",
 CellID->1387389986],
Cell[254535, 7272, 1531, 45, 91, "Output",ExpressionUUID->"b4980074-ccf4-466d-8a5d-f5b5fef21d1c",
 CellID->1577554937]
}, Open  ]],
Cell[256081, 7320, 185, 2, 45, "Text",ExpressionUUID->"8bee6ae2-eaf6-49d7-9844-537d160592ee",
 CellID->1177571731],
Cell[CellGroupData[{
Cell[256291, 7326, 286, 6, 31, "Input",ExpressionUUID->"082735c7-4879-499d-824f-21111adbedf4",
 CellID->1880464559],
Cell[256580, 7334, 315, 7, 45, "Output",ExpressionUUID->"fe396202-c9f3-4a7f-bba0-c5e8638e3b72",
 CellID->971200219]
}, Open  ]],
Cell[CellGroupData[{
Cell[256932, 7346, 222, 4, 31, "Input",ExpressionUUID->"e0587b7a-2f18-4527-8b85-821e19f8545c",
 CellID->1580247519],
Cell[257157, 7352, 526, 14, 45, "Output",ExpressionUUID->"ad472e21-6596-43e2-a0b6-09ff91fc7a09",
 CellID->844781049]
}, Open  ]],
Cell[257698, 7369, 156, 2, 45, "Text",ExpressionUUID->"eaaa96d4-6477-4d59-8e7e-4a1936e9dfc6",
 CellID->1419413118],
Cell[CellGroupData[{
Cell[257879, 7375, 250, 5, 31, "Input",ExpressionUUID->"c612ccc3-fdc9-40c3-91c3-56554ea33060",
 CellID->6689468],
Cell[258132, 7382, 526, 14, 45, "Output",ExpressionUUID->"c3e2605b-2ffc-45ef-88b7-7ca00e92fdba",
 CellID->1533095345]
}, Open  ]],
Cell[258673, 7399, 177, 2, 45, "Text",ExpressionUUID->"8e6e64d4-5603-41ae-b58b-61eb46215a95",
 CellID->745137341],
Cell[CellGroupData[{
Cell[258875, 7405, 320, 7, 31, "Input",ExpressionUUID->"e3ab579c-96f6-4157-9017-70f8df4640a8",
 CellID->1498987010],
Cell[259198, 7414, 345, 8, 45, "Output",ExpressionUUID->"b9ba622b-37aa-4bca-95f2-82ac057f6a0d",
 CellID->245737891]
}, Open  ]],
Cell[259558, 7425, 174, 2, 45, "Text",ExpressionUUID->"f5c2e97f-bcb0-448e-9696-4301b8013989",
 CellID->505680856],
Cell[259735, 7429, 652, 18, 78, "Input",ExpressionUUID->"9becec9e-04d7-4bdc-a26c-3af2518fb044",
 CellID->654086917],
Cell[260390, 7449, 694, 10, 222, "Text",ExpressionUUID->"6abf9ba1-ac53-4a30-8a71-30b35f3e6ce3",
 CellID->925119529],
Cell[CellGroupData[{
Cell[261109, 7463, 239, 4, 31, "Input",ExpressionUUID->"9f5278c3-60b1-4091-a2dd-893e055dccaf",
 CellID->185066889],
Cell[261351, 7469, 294, 7, 45, "Output",ExpressionUUID->"0fcb213d-c862-4948-9c1b-ad75d14bb8f4",
 CellID->1896737165]
}, Open  ]],
Cell[261660, 7479, 196, 2, 31, "SubitemNumbered",ExpressionUUID->"6bfc9998-6fab-4bdc-9146-9cf02b0626a9",
 CellID->1214276087],
Cell[261859, 7483, 1058, 19, 222, "Text",ExpressionUUID->"0b46e936-c608-4e09-b324-b182175fa320",
 CellID->801096768],
Cell[262920, 7504, 227, 4, 45, "Text",ExpressionUUID->"b9184f53-ec9b-442e-a9e4-39870fe0ffb2",
 CellID->108493506],
Cell[CellGroupData[{
Cell[263172, 7512, 403, 10, 31, "Input",ExpressionUUID->"772c1371-0e13-4531-a364-74341899f37e",
 CellID->1733314229],
Cell[263578, 7524, 644, 11, 68, "Output",ExpressionUUID->"90b8b924-c37d-4b8e-bb25-5d4e04e70d6c",
 CellID->1527097757]
}, Open  ]],
Cell[264237, 7538, 389, 6, 104, "Text",ExpressionUUID->"d7585108-5f32-4f5f-9d14-d283a9bbb137",
 CellID->1354936602],
Cell[264629, 7546, 172, 2, 45, "Text",ExpressionUUID->"e787fb1f-be23-42a7-95cf-0da7b5130c0b",
 CellID->1484452712],
Cell[CellGroupData[{
Cell[264826, 7552, 257, 5, 31, "Input",ExpressionUUID->"47415178-199b-4cfe-a401-d12de824b966",
 CellID->729295266],
Cell[265086, 7559, 408, 8, 45, "Output",ExpressionUUID->"9ad9cc1f-5924-47a1-9401-015f3298efad",
 CellID->1703975630]
}, Open  ]],
Cell[265509, 7570, 156, 2, 45, "Text",ExpressionUUID->"c1bfd0cb-91b5-4814-ac10-56e11f77ca9c",
 CellID->2023980665],
Cell[CellGroupData[{
Cell[265690, 7576, 408, 11, 31, "Input",ExpressionUUID->"3a1ce360-e5b2-45b1-ab6e-8d49f95f6245",
 CellID->1972753052],
Cell[266101, 7589, 976, 24, 68, "Output",ExpressionUUID->"15a2dd44-ec36-4da7-bba4-d2ce9e522985",
 CellID->914395560]
}, Open  ]],
Cell[267092, 7616, 268, 5, 75, "Text",ExpressionUUID->"8809e3ef-99b5-47d7-ae31-a4ffcdd23261",
 CellID->1948848788],
Cell[CellGroupData[{
Cell[267385, 7625, 333, 7, 31, "Input",ExpressionUUID->"a4af2f1d-3d54-48a4-9ea7-8f541be0188a",
 CellID->2145358286],
Cell[267721, 7634, 640, 11, 68, "Output",ExpressionUUID->"73ea4a04-29cb-41f4-ac5f-3e5d3bd60e2c",
 CellID->437875136]
}, Open  ]],
Cell[268376, 7648, 180, 2, 45, "Text",ExpressionUUID->"4cf274a4-d9cf-44f4-aaa6-21a375bfa7e0",
 CellID->469169327],
Cell[CellGroupData[{
Cell[268581, 7654, 363, 9, 31, "Input",ExpressionUUID->"f3c26d3a-cfc7-40d4-9d28-65e9282e3ccf",
 CellID->1155771158],
Cell[268947, 7665, 397, 8, 45, "Output",ExpressionUUID->"c2a563e5-ea37-43f6-a0d5-033a43f0c7b7",
 CellID->2086935781]
}, Open  ]],
Cell[269359, 7676, 271, 5, 75, "Text",ExpressionUUID->"cdd91a68-6420-4c5d-a5f0-816afe86ac36",
 CellID->279264816],
Cell[269633, 7683, 360, 10, 31, "Input",ExpressionUUID->"a0f79ff6-2b11-4b4a-b1b0-fda40afb60c2",
 CellID->435613412],
Cell[269996, 7695, 200, 2, 45, "Text",ExpressionUUID->"87ad9548-80b8-4850-bde2-93b5f5185cfe",
 CellID->1412779244],
Cell[CellGroupData[{
Cell[270221, 7701, 203, 3, 31, "Input",ExpressionUUID->"63a80c8b-a8de-4668-ac86-50045103490c",
 CellID->1911978924],
Cell[270427, 7706, 396, 8, 45, "Output",ExpressionUUID->"b4649cbe-a4e8-43db-8730-bc164b22e9ab",
 CellID->453695529]
}, Open  ]],
Cell[270838, 7717, 505, 8, 134, "Text",ExpressionUUID->"b0c98412-8b4b-4bc1-bb33-f55dacad37a1",
 CellID->1693809053],
Cell[CellGroupData[{
Cell[271368, 7729, 463, 13, 31, "Input",ExpressionUUID->"508031dc-69f8-4065-8f5a-aa47bde63f68",
 CellID->1496004690],
Cell[271834, 7744, 1328, 43, 68, "Output",ExpressionUUID->"64578dc6-8b2e-4ff8-af54-51ebbc00ce8f",
 CellID->1209629736]
}, Open  ]],
Cell[273177, 7790, 196, 2, 45, "Text",ExpressionUUID->"78f0dd99-9454-40ad-ae66-790574e68ba2",
 CellID->873967826],
Cell[273376, 7794, 1775, 50, 149, "Input",ExpressionUUID->"e15ba3bd-5f74-40ab-9733-5a51b2013d4d",
 CellID->1589849956],
Cell[275154, 7846, 162, 2, 45, "Text",ExpressionUUID->"cab9e10b-8c16-4e29-9690-acad2910b22a",
 CellID->407124477],
Cell[CellGroupData[{
Cell[275341, 7852, 239, 4, 31, "Input",ExpressionUUID->"f04b5b28-0e3b-47d6-888f-8a03463aff58",
 CellID->892332861],
Cell[275583, 7858, 1327, 43, 68, "Output",ExpressionUUID->"ac0aa9f7-49dc-4f03-9f4a-f5ca26a36fc3",
 CellID->1617096076]
}, Open  ]],
Cell[276925, 7904, 312, 5, 75, "Text",ExpressionUUID->"71a4fd85-057e-429d-bde7-debe3ed79666",
 CellID->2128196547],
Cell[277240, 7911, 626, 16, 54, "Input",ExpressionUUID->"be67e61e-9edb-483d-969d-1344808fc352",
 CellID->685668004],
Cell[277869, 7929, 188, 2, 45, "Text",ExpressionUUID->"0d880f8d-b415-4d49-81a6-b1583f7ac648",
 CellID->923480311],
Cell[CellGroupData[{
Cell[278082, 7935, 681, 19, 78, "Input",ExpressionUUID->"4dc0eaa6-a9f6-490d-afe2-09f9bd5f5456",
 CellID->1079547060],
Cell[278766, 7956, 225, 5, 45, "Output",ExpressionUUID->"2257c218-1e1f-41d5-969f-0f13be2ac5c2",
 CellID->776059119],
Cell[278994, 7963, 229, 5, 45, "Output",ExpressionUUID->"700d4f51-95a6-4394-a9ae-7f5129c97989",
 CellID->1557424802]
}, Open  ]],
Cell[CellGroupData[{
Cell[279260, 7973, 656, 19, 78, "Input",ExpressionUUID->"020ec8c3-d82a-4697-a529-9698f4356cfa",
 CellID->2107957578],
Cell[279919, 7994, 226, 5, 45, "Output",ExpressionUUID->"c122af14-e22b-4a95-af70-2cee4691aeed",
 CellID->512678737],
Cell[280148, 8001, 228, 5, 45, "Output",ExpressionUUID->"84b5e4ac-9fdc-44ae-8147-d0d1212c64fd",
 CellID->887140995]
}, Open  ]],
Cell[CellGroupData[{
Cell[280413, 8011, 682, 19, 78, "Input",ExpressionUUID->"c3cd4226-fba0-4d69-87da-db0a2cfbb796",
 CellID->217396271],
Cell[281098, 8032, 227, 5, 45, "Output",ExpressionUUID->"9abbd6c9-7778-4e48-9b02-9e124dda2042",
 CellID->1555588360],
Cell[281328, 8039, 228, 5, 45, "Output",ExpressionUUID->"a93601ee-aaca-4b9c-83ca-231ba7ad1f86",
 CellID->1307647942]
}, Open  ]],
Cell[281571, 8047, 945, 14, 281, "Text",ExpressionUUID->"9340c1d9-8e8a-4fd4-be2c-84ef077fe9f6",
 CellID->764804219]
}, Open  ]],
Cell[CellGroupData[{
Cell[282553, 8066, 148, 2, 66, "Subsubsection",ExpressionUUID->"2d7d2d00-6b12-4e72-8c90-fcb4bd4a4c46",
 CellID->1269443729],
Cell[282704, 8070, 537, 9, 134, "Text",ExpressionUUID->"015c64f6-8c6a-40da-9739-6a9f163d14a7",
 CellID->1434192683],
Cell[283244, 8081, 156, 2, 38, "ItemNumbered",ExpressionUUID->"0d91a7bc-7616-4085-9e5f-9711442f2817",
 CellID->561772453],
Cell[CellGroupData[{
Cell[283425, 8087, 400, 9, 54, "Input",ExpressionUUID->"dd535c9f-2458-4168-b427-ab1ebf8afcd7",
 CellID->1948585462],
Cell[283828, 8098, 226, 5, 45, "Output",ExpressionUUID->"e9e54794-d5a4-40e4-96ea-e137b816c9c0",
 CellID->1035860868]
}, Open  ]],
Cell[284069, 8106, 215, 4, 45, "Text",ExpressionUUID->"34040c0c-f396-461b-8634-35eba5007a34",
 CellID->63682247],
Cell[CellGroupData[{
Cell[284309, 8114, 261, 5, 31, "Input",ExpressionUUID->"0bb92c80-820c-4f59-a69c-c2af0dc97b16",
 CellID->1963587716],
Cell[284573, 8121, 369, 11, 45, "Output",ExpressionUUID->"0afab875-a8bf-469f-92df-abe941b72707",
 CellID->1889119203]
}, Open  ]],
Cell[284957, 8135, 229, 5, 45, "Text",ExpressionUUID->"b75c7cab-b647-4576-9fa9-d612de923371",
 CellID->2028207573],
Cell[CellGroupData[{
Cell[285211, 8144, 283, 6, 31, "Input",ExpressionUUID->"b8564083-7500-4856-b842-c0ce4ef8a3b9",
 CellID->102304791],
Cell[285497, 8152, 203, 4, 45, "Output",ExpressionUUID->"3afaac07-ccfe-4bef-b907-d80a0d015dba",
 CellID->1723449393]
}, Open  ]],
Cell[285715, 8159, 192, 2, 45, "Text",ExpressionUUID->"1f326969-2bc1-44df-97d9-2874bdd22c64",
 CellID->754517415],
Cell[CellGroupData[{
Cell[285932, 8165, 226, 4, 31, "Input",ExpressionUUID->"ae713407-6bb4-4c22-84f4-0070cebf3eff",
 CellID->1899662838],
Cell[286161, 8171, 304, 7, 45, "Output",ExpressionUUID->"95755604-53c1-44e2-8480-dd4bc41d29a2",
 CellID->1939784052]
}, Open  ]],
Cell[286480, 8181, 187, 2, 45, "Text",ExpressionUUID->"947c6e21-4f8b-4cd1-b3a5-b97e9cd73a61",
 CellID->1001316857],
Cell[CellGroupData[{
Cell[286692, 8187, 285, 6, 31, "Input",ExpressionUUID->"69009248-a379-4d45-b508-daea46581d8d",
 CellID->1289020805],
Cell[286980, 8195, 171, 3, 45, "Output",ExpressionUUID->"6a5488bd-5c65-442e-9fc2-2f5fbdc3457e",
 CellID->647482283]
}, Open  ]],
Cell[287166, 8201, 156, 2, 45, "Text",ExpressionUUID->"ff9e8172-8ad2-4c71-818b-f606627a8e43",
 CellID->935091032],
Cell[CellGroupData[{
Cell[287347, 8207, 287, 6, 31, "Input",ExpressionUUID->"654bd869-524c-43d3-80e9-276ab7c8cd37",
 CellID->132694486],
Cell[287637, 8215, 177, 3, 45, "Output",ExpressionUUID->"fb21ed29-9427-44d9-9756-fd0bf0b459ca",
 CellID->1301919200]
}, Open  ]],
Cell[287829, 8221, 247, 5, 75, "Text",ExpressionUUID->"67446243-8244-4003-96b4-8b975f07d780",
 CellID->645115117],
Cell[CellGroupData[{
Cell[288101, 8230, 346, 8, 31, "Input",ExpressionUUID->"863daa7a-f3bc-4563-b13e-19b124d0217a",
 CellID->1262505428],
Cell[288450, 8240, 226, 5, 45, "Output",ExpressionUUID->"b38c766d-154e-4cea-9130-d1891acb8f7f",
 CellID->665262204]
}, Open  ]],
Cell[CellGroupData[{
Cell[288713, 8250, 271, 6, 31, "Input",ExpressionUUID->"c10a5187-b674-4183-aabe-2c994f60b4a3",
 CellID->1824089450],
Cell[288987, 8258, 228, 5, 45, "Output",ExpressionUUID->"08365e0e-f441-4ca6-915e-6ce5cf1be3c4",
 CellID->353616277]
}, Open  ]],
Cell[289230, 8266, 160, 2, 38, "ItemNumbered",ExpressionUUID->"4fd4df5e-a87c-402a-a682-6647c1e3cc85",
 CellID->1141516290],
Cell[289393, 8270, 307, 5, 75, "Text",ExpressionUUID->"c97f312d-74fd-4d4b-9276-c11982c61075",
 CellID->1967080241],
Cell[289703, 8277, 218, 4, 31, "Input",ExpressionUUID->"c30c0255-725d-4090-839e-c211b230b579",
 CellID->83022614],
Cell[289924, 8283, 274, 5, 75, "Text",ExpressionUUID->"a6353d6b-0f56-40ce-a7dc-eead52522354",
 CellID->610743969],
Cell[290201, 8290, 725, 11, 193, "Text",ExpressionUUID->"6c4f015c-fd40-4309-a2f2-6e3046ad1e01",
 CellID->1019879466],
Cell[290929, 8303, 158, 2, 38, "ItemNumbered",ExpressionUUID->"25a3630b-5845-47da-acf8-ceffbe4003bc",
 CellID->1276074225],
Cell[291090, 8307, 215, 4, 31, "SubitemNumbered",ExpressionUUID->"32f7a556-6bb1-4dc4-b82d-5c81126c5b9a",
 CellID->60316986],
Cell[291308, 8313, 714, 14, 104, "Text",ExpressionUUID->"daab425f-e730-4b22-8536-eecf14cc8e00",
 CellID->135302318],
Cell[292025, 8329, 479, 11, 54, "Input",ExpressionUUID->"37b4edc1-319e-4cf6-9dba-a580c2a334a7",
 CellID->164561814],
Cell[292507, 8342, 1088, 20, 193, "Text",ExpressionUUID->"101d4381-5887-4b8f-9198-8dfb9ab727c9",
 CellID->1515162607],
Cell[293598, 8364, 168, 2, 45, "Text",ExpressionUUID->"67e17d43-72af-444b-97f7-955891c4eea3",
 CellID->362468813],
Cell[CellGroupData[{
Cell[293791, 8370, 265, 5, 31, "Input",ExpressionUUID->"d57c54ad-608c-4256-bc8d-8583de9d04de",
 CellID->2003385222],
Cell[294059, 8377, 184, 4, 50, "Output",ExpressionUUID->"3cb8e071-8749-480b-9af6-8023e390a7cb",
 CellID->1055739334]
}, Open  ]],
Cell[294258, 8384, 150, 2, 45, "Text",ExpressionUUID->"ede03329-32bf-4036-85b3-1231ff134551",
 CellID->1301095024],
Cell[CellGroupData[{
Cell[294433, 8390, 492, 14, 31, "Input",ExpressionUUID->"9f6e49b2-d834-4c60-ac2e-5cfecb601f89",
 CellID->1752077124],
Cell[294928, 8406, 685, 19, 108, "Output",ExpressionUUID->"a858ea1e-97d2-48cb-82d0-a8a67c3aaa45",
 CellID->894827997]
}, Open  ]],
Cell[CellGroupData[{
Cell[295650, 8430, 235, 4, 31, "Input",ExpressionUUID->"73d13210-b7cc-4e64-99c2-7cedcf0585ef",
 CellID->1060770588],
Cell[295888, 8436, 182, 4, 50, "Output",ExpressionUUID->"c9562433-9134-4043-adcb-0878f826cfd7",
 CellID->89383446]
}, Open  ]],
Cell[296085, 8443, 225, 4, 31, "SubitemNumbered",ExpressionUUID->"df15a7ce-0b3c-4d37-8f6a-b8cdff8642dd",
 CellTags->"5.2.7.3.2",
 CellID->1176507669],
Cell[296313, 8449, 415, 7, 104, "Text",ExpressionUUID->"cbd694c7-1a88-483d-b8c3-06d84cde6c14",
 CellID->1682454954],
Cell[296731, 8458, 205, 2, 45, "Text",ExpressionUUID->"c2fe99b9-98d6-43c6-be8b-ed068de0f7c7",
 CellID->1960648801],
Cell[CellGroupData[{
Cell[296961, 8464, 257, 5, 31, "Input",ExpressionUUID->"9f66003e-ce89-445b-a49f-6b0e154bf62f",
 CellID->1308012767],
Cell[297221, 8471, 304, 7, 45, "Output",ExpressionUUID->"78f51094-44b0-42e1-abf9-6227075f4741",
 CellID->1706707298]
}, Open  ]],
Cell[297540, 8481, 155, 2, 45, "Text",ExpressionUUID->"74924753-2a28-43e6-a842-86c5844fd521",
 CellID->690484507],
Cell[CellGroupData[{
Cell[297720, 8487, 227, 4, 31, "Input",ExpressionUUID->"6aed4afb-51ef-4507-8344-61fd2dd3d014",
 CellID->486722536],
Cell[297950, 8493, 172, 3, 45, "Output",ExpressionUUID->"d94b3416-95b6-4fdf-989c-dec40e97ee16",
 CellID->1261813678]
}, Open  ]],
Cell[298137, 8499, 318, 5, 75, "Text",ExpressionUUID->"1e40bde4-c1eb-4d4e-8b20-df800aea5228",
 CellID->499365104],
Cell[298458, 8506, 387, 9, 54, "Input",ExpressionUUID->"4db4b6ae-5272-4789-9b9a-51bfc082dc0f",
 CellID->646126882],
Cell[298848, 8517, 164, 2, 45, "Text",ExpressionUUID->"c18bdf84-0151-460c-a966-a891fc5710cb",
 CellID->1214853355],
Cell[CellGroupData[{
Cell[299037, 8523, 296, 6, 31, "Input",ExpressionUUID->"76e05b2e-0681-41f3-a6ef-a3cc1c7aa4fe",
 CellID->1048027305],
Cell[299336, 8531, 172, 3, 45, "Output",ExpressionUUID->"ebc3f493-74eb-4720-a75d-893d0625a49d",
 CellID->1895607107]
}, Open  ]],
Cell[299523, 8537, 589, 9, 163, "Text",ExpressionUUID->"284b6fa3-8592-45ac-b400-80553eae616d",
 CellID->1548744104],
Cell[CellGroupData[{
Cell[300137, 8550, 258, 5, 31, "Input",ExpressionUUID->"79d4850b-8b53-43c3-b0e1-4b51de627978",
 CellID->1603022021],
Cell[300398, 8557, 337, 7, 45, "Output",ExpressionUUID->"a65e1e9f-d155-449f-8866-62573164cde1",
 CellID->764808683]
}, Open  ]],
Cell[300750, 8567, 516, 8, 134, "Text",ExpressionUUID->"07278f57-2cb1-489d-95b2-b6318292c695",
 CellID->1449907886],
Cell[CellGroupData[{
Cell[301291, 8579, 315, 7, 31, "Input",ExpressionUUID->"9d2165f5-bfee-4225-a65e-e26767d2c191",
 CellID->409631367],
Cell[301609, 8588, 175, 3, 45, "Output",ExpressionUUID->"3a944560-250b-493b-8c6b-bb39df42377e",
 CellID->1817767782]
}, Open  ]],
Cell[301799, 8594, 156, 2, 45, "Text",ExpressionUUID->"3dddb788-0ed8-4bb1-8bc9-b9b33d1277eb",
 CellID->1441493419],
Cell[CellGroupData[{
Cell[301980, 8600, 285, 6, 31, "Input",ExpressionUUID->"6309de94-f222-4bd4-a475-a7bdbded356d",
 CellID->2057698146],
Cell[302268, 8608, 177, 3, 45, "Output",ExpressionUUID->"fe956609-9b57-4563-bc18-7a4e88027856",
 CellID->1531388122]
}, Open  ]],
Cell[302460, 8614, 192, 2, 45, "Text",ExpressionUUID->"0c83f20d-237b-4b3d-bc4a-707fdaa0a383",
 CellID->448657159],
Cell[302655, 8618, 513, 13, 54, "Input",ExpressionUUID->"b12cc8dc-fc4f-4ab6-a143-5423af96a910",
 CellID->707503201],
Cell[303171, 8633, 166, 2, 45, "Text",ExpressionUUID->"641475a2-6234-411f-a384-2a6be9510b49",
 CellID->698765093],
Cell[CellGroupData[{
Cell[303362, 8639, 299, 6, 31, "Input",ExpressionUUID->"a2e43ba9-0142-463e-8581-f38b02a6fd15",
 CellID->824246563],
Cell[303664, 8647, 173, 3, 45, "Output",ExpressionUUID->"7f7756d4-ff05-45d1-b617-bf06142c88e6",
 CellID->265404722]
}, Open  ]],
Cell[CellGroupData[{
Cell[303874, 8655, 312, 7, 31, "Input",ExpressionUUID->"da71a5a3-30a2-4a56-b46a-b131719e6392",
 CellID->203220528],
Cell[304189, 8664, 287, 7, 45, "Output",ExpressionUUID->"183590cc-1009-4edd-8c0b-1890935c10a6",
 CellID->857825256]
}, Open  ]],
Cell[304491, 8674, 642, 10, 193, "Text",ExpressionUUID->"d466e7c0-e47a-4f90-971d-5354149d3d61",
 CellID->1411355281],
Cell[305136, 8686, 364, 7, 75, "Text",ExpressionUUID->"8e49e62f-f0ab-41a7-9250-d7dde1572903",
 CellID->2042225427],
Cell[305503, 8695, 483, 12, 54, "Input",ExpressionUUID->"1199d0fc-bc90-4c93-b1d5-da78af754d59",
 CellID->1639011724],
Cell[305989, 8709, 244, 5, 75, "Text",ExpressionUUID->"982a935a-d7ad-49a8-8d20-62579f196b27",
 CellID->840290016],
Cell[306236, 8716, 392, 10, 31, "Input",ExpressionUUID->"8e5575f2-d5ae-45fa-8670-38527c1b3580",
 CellID->222105154],
Cell[CellGroupData[{
Cell[306653, 8730, 217, 4, 31, "Input",ExpressionUUID->"7a145cd6-de73-4053-aca0-fd875afd6f3d",
 CellID->838355231],
Cell[306873, 8736, 10917, 275, 294, "Output",ExpressionUUID->"34b7688f-0cfe-4409-b70e-9173da16cd08",
 CellID->1267470611]
}, Open  ]],
Cell[317805, 9014, 952, 19, 163, "Text",ExpressionUUID->"edf287b4-1d39-438e-a081-91bca68e173b",
 CellID->1020978639],
Cell[CellGroupData[{
Cell[318782, 9037, 235, 4, 31, "Input",ExpressionUUID->"2e8fba31-e91f-46d0-8056-0823b55dd9d9",
 CellID->486951614],
Cell[319020, 9043, 704, 19, 68, "Output",ExpressionUUID->"b6ba4151-567c-4f53-acaf-5c9235b29f28",
 CellID->1742723853]
}, Open  ]],
Cell[319739, 9065, 1054, 15, 281, "Text",ExpressionUUID->"3f23a1e6-f8aa-4a74-acea-fddf26be61e4",
 CellID->1578618006],
Cell[320796, 9082, 243, 5, 31, "SubitemNumbered",ExpressionUUID->"c0ec9c93-0883-43f7-be6d-d58640df2e99",
 CellID->250466274],
Cell[321042, 9089, 247, 5, 75, "Text",ExpressionUUID->"fbaa09a5-7728-4c07-8fd5-4f9e59cdb9bb",
 CellID->1855209892],
Cell[321292, 9096, 1319, 23, 125, "Input",ExpressionUUID->"44b7da98-d34d-42f8-888d-d8ea4b7dfcdf",
 CellID->1197584051],
Cell[322614, 9121, 731, 11, 163, "Text",ExpressionUUID->"01a65ab5-ffaf-47df-8aa2-234f97f10453",
 CellID->1847507327],
Cell[CellGroupData[{
Cell[323370, 9136, 235, 4, 31, "Input",ExpressionUUID->"45d8dc68-421d-4ecf-8626-ffdc684053d2",
 CellID->1093796865],
Cell[323608, 9142, 184, 3, 45, "Output",ExpressionUUID->"bb3f5e17-1c90-48f4-9f8b-efc8188db1f4",
 CellID->1691441708]
}, Open  ]],
Cell[323807, 9148, 374, 6, 104, "Text",ExpressionUUID->"53c0be24-b586-42bc-b238-4571084ce587",
 CellID->1819751017],
Cell[CellGroupData[{
Cell[324206, 9158, 238, 4, 31, "Input",ExpressionUUID->"ca619328-ff10-42c9-ad79-ac132fae0797",
 CellID->1106006450],
Cell[324447, 9164, 308, 6, 45, "Output",ExpressionUUID->"d84bfa66-f95d-4f6a-9704-01f06054882e",
 CellID->1509589241]
}, Open  ]],
Cell[324770, 9173, 338, 6, 75, "Text",ExpressionUUID->"b804f0b6-7d3f-4762-a62b-7a4074d3f9bc",
 CellID->1294567829],
Cell[CellGroupData[{
Cell[325133, 9183, 307, 7, 31, "Input",ExpressionUUID->"1704b21a-a85e-4611-8dd2-e9676667673a",
 CellID->1148623890],
Cell[325443, 9192, 175, 3, 45, "Output",ExpressionUUID->"993e4978-d372-4792-8e68-b6d6a26f3da7",
 CellID->998712639]
}, Open  ]],
Cell[325633, 9198, 398, 6, 104, "Text",ExpressionUUID->"735f3c0a-71ec-4863-a72a-a5cb2a13ce1c",
 CellID->631138721],
Cell[CellGroupData[{
Cell[326056, 9208, 443, 12, 31, "Input",ExpressionUUID->"d8576d32-7e12-423f-94f5-2d40411e63d9",
 CellID->1948941558],
Cell[326502, 9222, 225, 5, 45, "Output",ExpressionUUID->"6e0b6474-8dd7-4230-86a2-9493f03c2044",
 CellID->1158456395]
}, Open  ]],
Cell[326742, 9230, 277, 5, 45, "Text",ExpressionUUID->"c8ae2902-b231-4bd6-ade6-3947291df48a",
 CellID->1089887063],
Cell[CellGroupData[{
Cell[327044, 9239, 480, 13, 31, "Input",ExpressionUUID->"e9e7857f-29bd-4827-af79-73d7a9f30fb4",
 CellID->1082314888],
Cell[327527, 9254, 171, 3, 45, "Output",ExpressionUUID->"938877a3-0632-46ca-b99a-40178df269a3",
 CellID->9634334]
}, Open  ]],
Cell[327713, 9260, 384, 6, 75, "Text",ExpressionUUID->"86015175-dfe3-4f74-9076-46021ee5005c",
 CellID->862978013],
Cell[CellGroupData[{
Cell[328122, 9270, 621, 18, 54, "Input",ExpressionUUID->"b2032e51-1866-4fec-9190-3ff0fa774892",
 CellID->1475046669],
Cell[328746, 9290, 544, 10, 68, "Output",ExpressionUUID->"5e2548f5-c352-4495-a726-e545a648476a",
 CellID->1358066411]
}, Open  ]],
Cell[329305, 9303, 299, 5, 75, "Text",ExpressionUUID->"f31cba1b-7559-4073-b0dc-567bcb5776a0",
 CellID->1240292577],
Cell[329607, 9310, 779, 21, 101, "Input",ExpressionUUID->"692e2bbf-65ae-46b4-aeb7-ea0df2de8069",
 CellID->558760337],
Cell[330389, 9333, 441, 8, 75, "Text",ExpressionUUID->"ccdb2991-c66e-4f89-bd65-09d4f0ebe885",
 CellID->1391251214],
Cell[CellGroupData[{
Cell[330855, 9345, 337, 7, 31, "Input",ExpressionUUID->"0e3412fc-f078-4fea-aadb-2458e7a4bdcd",
 CellID->1736672435],
Cell[331195, 9354, 822, 13, 91, "Output",ExpressionUUID->"0f4bf333-461c-458d-b0af-ff44e17048f7",
 CellID->149097614]
}, Open  ]],
Cell[332032, 9370, 886, 13, 222, "Text",ExpressionUUID->"e2d2f35c-cd8b-4e81-b398-5a757193788f",
 CellID->525918084],
Cell[CellGroupData[{
Cell[332943, 9387, 376, 8, 31, "Input",ExpressionUUID->"f42380cc-a9dc-4b14-bc9d-38edd65acffa",
 CellID->735388331],
Cell[333322, 9397, 174, 3, 45, "Output",ExpressionUUID->"69389934-2a8a-4129-a36e-2dbc137af8b1",
 CellID->1517984315]
}, Open  ]],
Cell[333511, 9403, 413, 7, 104, "Text",ExpressionUUID->"40cbc8af-5db0-4061-bb6d-e90c117f814e",
 CellID->656655845],
Cell[CellGroupData[{
Cell[333949, 9414, 434, 11, 31, "Input",ExpressionUUID->"10f86034-d038-4a12-9e75-a3dff6f3c99d",
 CellID->713988488],
Cell[334386, 9427, 175, 3, 45, "Output",ExpressionUUID->"29e209f5-8a31-4fed-a3ac-bd8a59e48cf7",
 CellID->215638220]
}, Open  ]],
Cell[334576, 9433, 157, 2, 45, "Text",ExpressionUUID->"860c5882-395c-4f93-8278-b6605b10227e",
 CellID->646553481],
Cell[CellGroupData[{
Cell[334758, 9439, 396, 9, 31, "Input",ExpressionUUID->"b331d650-40f0-4c2a-bf2a-dc680758caf0",
 CellID->357101347],
Cell[335157, 9450, 175, 3, 45, "Output",ExpressionUUID->"7606a9ce-7258-4a70-85fe-9c7ff442cfa9",
 CellID->874126656]
}, Open  ]],
Cell[335347, 9456, 166, 2, 45, "Text",ExpressionUUID->"6af166a3-f42c-4201-a217-b5481a10a527",
 CellID->1787759600],
Cell[335516, 9460, 692, 18, 78, "Input",ExpressionUUID->"2faf048d-63be-4a1c-9dba-09731ef47000",
 CellID->1431892023],
Cell[336211, 9480, 166, 2, 45, "Text",ExpressionUUID->"d95d5fb7-4a96-43fe-bd3d-b7b4470e0898",
 CellID->1178703886],
Cell[CellGroupData[{
Cell[336402, 9486, 336, 7, 31, "Input",ExpressionUUID->"f2f80ae2-b822-4427-8a9f-a06d59c9ccb7",
 CellID->56630157],
Cell[336741, 9495, 566, 10, 68, "Output",ExpressionUUID->"7f3bea58-f4aa-48c0-9104-a3157ada8fd6",
 CellID->1401190764]
}, Open  ]],
Cell[337322, 9508, 1591, 26, 370, "Text",ExpressionUUID->"8d352448-38ed-4585-ba03-1ddd8896ffe3",
 CellID->1628906496],
Cell[CellGroupData[{
Cell[338938, 9538, 296, 6, 31, "Input",ExpressionUUID->"aea32ec4-7771-4926-bb03-00c8fb2c78dd",
 CellID->1239704802],
Cell[339237, 9546, 690, 11, 45, "Output",ExpressionUUID->"59b5a734-7a74-4f99-b97b-c2b973f7e77c",
 CellID->1461893337]
}, Open  ]],
Cell[CellGroupData[{
Cell[339964, 9562, 308, 6, 31, "Input",ExpressionUUID->"b07c8a40-4154-4572-8631-dc9f31778cfc",
 CellID->1169835932],
Cell[340275, 9570, 1139, 19, 115, "Output",ExpressionUUID->"894b165a-97d7-4fb6-81ef-755809c59509",
 CellID->964895710]
}, Open  ]],
Cell[CellGroupData[{
Cell[341451, 9594, 312, 6, 31, "Input",ExpressionUUID->"fa710588-922a-4bbd-8d46-7f148a7cf596",
 CellID->1187698107],
Cell[341766, 9602, 1137, 19, 115, "Output",ExpressionUUID->"01fe5995-5621-41d2-a395-e828f2bdd5f4",
 CellID->240804187]
}, Open  ]],
Cell[342918, 9624, 758, 12, 222, "Text",ExpressionUUID->"a2e47d48-9eb2-4737-9724-363cc679d2d3",
 CellID->135524262],
Cell[343679, 9638, 181, 2, 31, "SubitemNumbered",ExpressionUUID->"1808bc91-793c-4f4e-b47d-c4dcc9134264",
 CellID->1954492976],
Cell[343863, 9642, 794, 12, 252, "Text",ExpressionUUID->"c29ddac4-0504-4482-ae5b-3a02db196c64",
 CellID->1253583120],
Cell[344660, 9656, 210, 3, 45, "Text",ExpressionUUID->"f19a2e6a-2836-4896-85bd-e23d99a67a0f",
 CellID->1774293490],
Cell[CellGroupData[{
Cell[344895, 9663, 545, 14, 54, "Input",ExpressionUUID->"69b62185-36c4-4749-a63a-03aaf953602e",
 CellID->411069283],
Cell[345443, 9679, 773, 21, 158, "Output",ExpressionUUID->"eecbc7f6-a814-4c5d-8b98-0ecb1533c6aa",
 CellID->1612215988]
}, Open  ]],
Cell[346231, 9703, 891, 14, 222, "Text",ExpressionUUID->"70fc0f65-0885-4046-a5e6-65062358c456",
 CellID->1712936117],
Cell[347125, 9719, 262, 4, 45, "Text",ExpressionUUID->"16d8ea83-5d1b-4fc1-a813-793947d9b955",
 CellID->481459614],
Cell[CellGroupData[{
Cell[347412, 9727, 441, 12, 31, "Input",ExpressionUUID->"59cf533c-ad2b-406c-90a3-9787ff5496f1",
 CellID->1515742482],
Cell[347856, 9741, 2206, 75, 115, "Output",ExpressionUUID->"cf898886-21a7-4c9f-9c8b-7340558b6597",
 CellID->1374603892]
}, Open  ]],
Cell[350077, 9819, 533, 8, 163, "Text",ExpressionUUID->"e301fea9-1f0e-41b4-b497-9a2ad0a756f2",
 CellID->1678024965],
Cell[350613, 9829, 388, 7, 104, "Text",ExpressionUUID->"927549ec-1f83-4aea-af92-888440bf21d1",
 CellID->2092985420],
Cell[CellGroupData[{
Cell[351026, 9840, 282, 6, 31, "Input",ExpressionUUID->"59293e47-9094-4e95-ba3f-a381036f3c32",
 CellID->1349923126],
Cell[351311, 9848, 1893, 65, 91, "Output",ExpressionUUID->"a5282f53-e8b0-4db5-857c-3478590ff69d",
 CellID->1860314404]
}, Open  ]],
Cell[353219, 9916, 362, 7, 75, "Text",ExpressionUUID->"f4560318-1b14-47a1-b271-a67302963315",
 CellID->1089771355],
Cell[CellGroupData[{
Cell[353606, 9927, 401, 10, 31, "Input",ExpressionUUID->"17dba1e6-d086-4dcc-8557-8e6ec248fe2b",
 CellID->1747392270],
Cell[354010, 9939, 1893, 65, 91, "Output",ExpressionUUID->"cb928ded-d944-4b74-a5ee-4cd6bc4c84e2",
 CellID->1474358711]
}, Open  ]],
Cell[355918, 10007, 368, 6, 75, "Text",ExpressionUUID->"9737f05b-ed49-43d7-8c56-25b20328e4f9",
 CellID->1880536691],
Cell[356289, 10015, 490, 8, 134, "Text",ExpressionUUID->"a65e76b7-5016-40c4-80ed-1d682f725fac",
 CellID->889137231],
Cell[356782, 10025, 295, 6, 75, "Text",ExpressionUUID->"01f552bd-6dd9-4243-b0ae-31e21c656f9f",
 CellID->515773488],
Cell[CellGroupData[{
Cell[357102, 10035, 403, 10, 31, "Input",ExpressionUUID->"365d1c57-5afd-42a3-a20e-1b772ec49a81",
 CellID->1705973671],
Cell[357508, 10047, 2325, 81, 115, "Output",ExpressionUUID->"47b7259e-2e5e-4bdf-b85c-f691f7cbecc5",
 CellID->33846901]
}, Open  ]],
Cell[359848, 10131, 487, 8, 134, "Text",ExpressionUUID->"98be897e-3653-49c9-8dcc-bf8e12c61c9a",
 CellID->1149780767],
Cell[CellGroupData[{
Cell[360360, 10143, 391, 10, 31, "Input",ExpressionUUID->"db4df997-1b12-4fef-b39f-10dfbac8803e",
 CellID->1435915317],
Cell[360754, 10155, 777, 21, 68, "Output",ExpressionUUID->"99c6f963-ac4b-43e0-a6ba-bac8a0a36026",
 CellID->1539872139]
}, Open  ]],
Cell[361546, 10179, 325, 6, 75, "Text",ExpressionUUID->"0558be6f-5e5b-4298-8467-7538a15767ba",
 CellID->1305610176],
Cell[CellGroupData[{
Cell[361896, 10189, 304, 6, 31, "Input",ExpressionUUID->"6a8937cd-56a8-4f15-b055-6550f6aa7c5b",
 CellID->1498071789],
Cell[362203, 10197, 777, 21, 68, "Output",ExpressionUUID->"a6f4d33d-587d-4b75-8c3c-2a546f5647e0",
 CellID->2070269207]
}, Open  ]],
Cell[362995, 10221, 580, 9, 163, "Text",ExpressionUUID->"6e264694-2f68-4c8b-b897-99d5086d300e",
 CellID->1484513355],
Cell[363578, 10232, 486, 8, 134, "Text",ExpressionUUID->"de6d5e62-c287-400e-9fd2-106b369a9301",
 CellID->110067553],
Cell[CellGroupData[{
Cell[364089, 10244, 258, 5, 31, "Input",ExpressionUUID->"39c4c21c-4a80-49a4-8823-ea2f74102dfb",
 CellID->326698448],
Cell[364350, 10251, 776, 21, 68, "Output",ExpressionUUID->"51a6600d-9536-4985-b649-6fd0cd785711",
 CellID->1812344973]
}, Open  ]],
Cell[365141, 10275, 197, 2, 45, "Text",ExpressionUUID->"c033b43c-8837-4938-a503-196e0752901f",
 CellID->173912163],
Cell[365341, 10279, 1562, 43, 148, "Input",ExpressionUUID->"76bec474-9e10-4fc5-a740-841baf151760",
 CellID->541625000],
Cell[366906, 10324, 601, 9, 163, "Text",ExpressionUUID->"76621907-7b10-42ef-a00b-4f6b1a4c8297",
 CellID->1378086202],
Cell[367510, 10335, 208, 3, 45, "Text",ExpressionUUID->"3721c78b-44f3-4a6b-a08d-f7d0605ea0d9",
 CellID->1622141694],
Cell[CellGroupData[{
Cell[367743, 10342, 243, 4, 31, "Input",ExpressionUUID->"e23bbf0b-c572-4bd1-a02d-1d4e8f536383",
 CellID->1038456096],
Cell[367989, 10348, 801, 21, 68, "Output",ExpressionUUID->"2992e1ef-6a09-4a00-9ddd-834caba31e2f",
 CellID->1545250473]
}, Open  ]],
Cell[368805, 10372, 1118, 16, 340, "Text",ExpressionUUID->"f41cecd5-8bb5-4c42-9511-bb1d456590c4",
 CellID->1504956540],
Cell[369926, 10390, 291, 5, 75, "Text",ExpressionUUID->"b33ad7bc-6948-438a-9b0a-4511e60c81d7",
 CellID->1328324811],
Cell[370220, 10397, 188, 2, 38, "ItemNumbered",ExpressionUUID->"9db0d5d3-b1e2-440f-93ea-0935d5695aff",
 CellID->1564824696],
Cell[370411, 10401, 470, 7, 134, "Text",ExpressionUUID->"5c2392d3-42f2-4d46-879f-a8c49adfa25f",
 CellID->571810305],
Cell[370884, 10410, 566, 13, 54, "Input",ExpressionUUID->"f99afa3b-e860-41f8-af96-cde36f1a5d34",
 CellID->1768319153],
Cell[371453, 10425, 299, 5, 75, "Text",ExpressionUUID->"a4833eb5-157d-4fef-95dd-92e752e30967",
 CellID->2103751883],
Cell[CellGroupData[{
Cell[371777, 10434, 434, 11, 31, "Input",ExpressionUUID->"de0919ab-3cd1-4b6d-a843-4dabbffaf865",
 CellID->800201466],
Cell[372214, 10447, 890, 25, 68, "Output",ExpressionUUID->"23739932-1fd5-456c-9a8e-9e9ecab4725c",
 CellID->1383028664]
}, Open  ]],
Cell[373119, 10475, 674, 13, 163, "Text",ExpressionUUID->"e505681e-b429-4edb-887f-369d5f86038e",
 CellID->874303778],
Cell[373796, 10490, 706, 19, 55, "Input",ExpressionUUID->"c98f5fa2-b85f-459a-bc7d-b2ec29f068a2",
 CellID->7478514],
Cell[374505, 10511, 153, 2, 45, "Text",ExpressionUUID->"a8993476-3154-4c8f-a7a4-3cb507217114",
 CellID->1556299326],
Cell[CellGroupData[{
Cell[374683, 10517, 222, 4, 31, "Input",ExpressionUUID->"cc85f7c8-0c5e-4ce9-bedf-1470f1e43951",
 CellID->66014537],
Cell[374908, 10523, 646, 15, 68, "Output",ExpressionUUID->"a2d13b8d-1b86-420e-a958-0cab35ec2f16",
 CellID->1867415687]
}, Open  ]],
Cell[375569, 10541, 402, 7, 104, "Text",ExpressionUUID->"95a2df1e-cfe1-42bf-8b62-54b5c09017ce",
 CellID->1141772707],
Cell[CellGroupData[{
Cell[375996, 10552, 347, 9, 31, "Input",ExpressionUUID->"79805158-892e-40cd-9719-7a25e6544037",
 CellID->1728702682],
Cell[376346, 10563, 1631, 46, 115, "Output",ExpressionUUID->"56fa3563-947d-4d08-88e2-ec224abc34b8",
 CellID->75647317]
}, Open  ]],
Cell[377992, 10612, 667, 10, 193, "Text",ExpressionUUID->"0d264d07-0b05-4e69-82d6-28385fccdf7d",
 CellID->94137795],
Cell[CellGroupData[{
Cell[378684, 10626, 383, 10, 31, "Input",ExpressionUUID->"1ac4dd04-1d7c-477f-bfc0-4963d594cc58",
 CellID->2100718146],
Cell[379070, 10638, 672, 15, 68, "Output",ExpressionUUID->"81dfd2f5-e3d1-46f4-bda4-cd7b5452714b",
 CellID->2088669496]
}, Open  ]],
Cell[379757, 10656, 560, 11, 134, "Text",ExpressionUUID->"bf49a2f7-1170-40c8-8013-b96101fc0990",
 CellID->538992261],
Cell[380320, 10669, 199, 3, 38, "ItemNumbered",ExpressionUUID->"8b1d5b7d-17cd-4004-b5b1-e60c80253f83",
 CellTags->"5.2.7.5",
 CellID->1800072686],
Cell[380522, 10674, 365, 8, 75, "Text",ExpressionUUID->"99860c9e-6754-4605-af87-2a176f657708",
 CellID->72014666],
Cell[380890, 10684, 352, 6, 104, "Text",ExpressionUUID->"81bde4e0-7486-4a49-935b-206a4f62a4b6",
 CellID->1813456643],
Cell[CellGroupData[{
Cell[381267, 10694, 624, 16, 54, "Input",ExpressionUUID->"5accb956-1949-4935-8c69-4fc749863a26",
 CellID->1699830755],
Cell[381894, 10712, 1023, 29, 68, "Output",ExpressionUUID->"3b2ff281-edca-41a8-956d-3528a14b0855",
 CellID->602455351]
}, Open  ]],
Cell[382932, 10744, 255, 5, 75, "Text",ExpressionUUID->"59a43009-8c1e-4b8a-8d07-d14c5501bba9",
 CellID->1289514180],
Cell[CellGroupData[{
Cell[383212, 10753, 365, 10, 31, "Input",ExpressionUUID->"01358285-a982-4f42-ae02-ab70d9f6984d",
 CellID->35323399],
Cell[383580, 10765, 348, 7, 45, "Output",ExpressionUUID->"cf7fd903-4a4f-4b45-bbb9-da3d62e226d8",
 CellID->998770715]
}, Open  ]],
Cell[383943, 10775, 265, 5, 75, "Text",ExpressionUUID->"2f0b57d8-912b-4284-a9c6-8c13fd3cff7b",
 CellID->2053072804],
Cell[CellGroupData[{
Cell[384233, 10784, 297, 6, 31, "Input",ExpressionUUID->"e862e078-b430-4301-b015-6291571e0a15",
 CellID->1149007411],
Cell[384533, 10792, 351, 7, 45, "Output",ExpressionUUID->"c9befcce-e7fb-464b-94b8-3ffbdd79aad7",
 CellID->1883063536]
}, Open  ]],
Cell[384899, 10802, 315, 5, 75, "Text",ExpressionUUID->"2b4f68bc-68ab-4a55-8a8c-7b004ec7651f",
 CellID->1948047258],
Cell[CellGroupData[{
Cell[385239, 10811, 256, 5, 31, "Input",ExpressionUUID->"c29daf6e-608a-4dbb-be63-ed7472e9ac59",
 CellID->788742137],
Cell[385498, 10818, 349, 7, 45, "Output",ExpressionUUID->"9a459688-6259-4d6b-bd15-eb8692892fb5",
 CellID->1496418952]
}, Open  ]],
Cell[385862, 10828, 532, 8, 163, "Text",ExpressionUUID->"791312d7-ca28-4da0-bde8-51fe4fd8e1a1",
 CellID->1054530502]
}, Open  ]],
Cell[CellGroupData[{
Cell[386431, 10841, 189, 2, 66, "Subsubsection",ExpressionUUID->"7dbf247c-90d8-4fee-ac69-8aee2cc92f62",
 CellID->1690555036],
Cell[386623, 10845, 485, 8, 134, "Text",ExpressionUUID->"a252ffc6-7c73-4f39-abae-41993dafaf04",
 CellID->1949840242],
Cell[387111, 10855, 192, 3, 45, "Text",ExpressionUUID->"5433d0f5-32bc-4c0a-b95f-bdb21bc8de20",
 CellID->478782088],
Cell[CellGroupData[{
Cell[387328, 10862, 725, 21, 54, "Input",ExpressionUUID->"cfd47608-6c8d-480b-9e95-ef81223b41a1",
 CellID->1842727320],
Cell[388056, 10885, 398, 11, 45, "Output",ExpressionUUID->"66b45122-19b7-4895-9280-8171adc4920c",
 CellID->1378685918],
Cell[388457, 10898, 431, 12, 45, "Output",ExpressionUUID->"e40362ca-37ae-4781-b1d7-daa293e02183",
 CellID->225672696]
}, Open  ]],
Cell[388903, 10913, 147, 2, 45, "Text",ExpressionUUID->"16996334-3025-4f52-a550-a5c4172ad440",
 CellID->66817669],
Cell[CellGroupData[{
Cell[389075, 10919, 741, 21, 54, "Input",ExpressionUUID->"d92647b8-43f8-46dc-9610-efa8e0713bdd",
 CellID->2018099149],
Cell[389819, 10942, 504, 15, 45, "Output",ExpressionUUID->"ec053ce6-3bd2-4f5a-9185-8d5e7757d8e2",
 CellID->1077466854],
Cell[390326, 10959, 587, 18, 45, "Output",ExpressionUUID->"0e20d4e5-1305-4c41-a41a-7611030b4d0b",
 CellID->1403303674]
}, Open  ]],
Cell[390928, 10980, 143, 2, 45, "Text",ExpressionUUID->"a5869912-c087-4185-b533-e1265a3f2820",
 CellID->1390124833],
Cell[CellGroupData[{
Cell[391096, 10986, 607, 17, 78, "Input",ExpressionUUID->"2f3d63f6-4758-415e-aa24-12b501686540",
 CellID->1665821002],
Cell[391706, 11005, 283, 7, 45, "Output",ExpressionUUID->"97dd5634-2335-45c4-a7c0-e1636c6ddb65",
 CellID->420261781]
}, Open  ]],
Cell[CellGroupData[{
Cell[392026, 11017, 647, 18, 78, "Input",ExpressionUUID->"5aadd86d-1443-47c3-9b82-9021b0b401ef",
 CellID->266038284],
Cell[392676, 11037, 324, 7, 45, "Output",ExpressionUUID->"bceb7be5-cb46-49d2-9a6e-474eac1fdce7",
 CellID->658126780]
}, Open  ]],
Cell[393015, 11047, 359, 6, 104, "Text",ExpressionUUID->"94ff8138-81c5-48cf-b121-2bb7ef0fc2a2",
 CellID->1359192971],
Cell[393377, 11055, 313, 5, 75, "Text",ExpressionUUID->"4853eb37-b781-4d05-8974-35016406e6f0",
 CellID->984782273],
Cell[393693, 11062, 1353, 19, 429, "Text",ExpressionUUID->"fcb26bf5-3069-4159-9561-5248e993842d",
 CellID->917671841]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[395095, 11087, 155, 2, 68, "Subsection",ExpressionUUID->"11b88833-5c0f-4ea6-8870-e37767532491",
 CellID->2091942566],
Cell[CellGroupData[{
Cell[395275, 11093, 150, 2, 66, "Subsubsection",ExpressionUUID->"41050359-68f3-4b06-9698-b3f107b446a3",
 CellID->676438078],
Cell[395428, 11097, 334, 6, 75, "Text",ExpressionUUID->"28228c69-5220-497b-9d29-eca70ad838e3",
 CellID->116349728],
Cell[395765, 11105, 157, 2, 38, "ItemNumbered",ExpressionUUID->"8891ad61-e5e3-445c-a5dc-5ed9466321ad",
 CellID->207140778],
Cell[CellGroupData[{
Cell[395947, 11111, 454, 11, 54, "Input",ExpressionUUID->"cfb5c3b7-1820-4993-a949-3b94c9420603",
 CellID->1658661889],
Cell[396404, 11124, 847, 25, 68, "Output",ExpressionUUID->"30839499-749d-4502-8f0e-bdb9bdc8263d",
 CellID->1670675280]
}, Open  ]],
Cell[CellGroupData[{
Cell[397288, 11154, 449, 11, 31, "Input",ExpressionUUID->"7fbdece5-4a14-4fb4-983a-d0ddd1f54608",
 CellID->78737363],
Cell[397740, 11167, 957, 25, 68, "Output",ExpressionUUID->"5090886c-697c-457a-98e9-fa6a0e8f7c27",
 CellID->1892421831]
}, Open  ]],
Cell[398712, 11195, 240, 5, 75, "Text",ExpressionUUID->"6cb14268-9939-4e79-891e-3153c3d15c48",
 CellID->1700901547],
Cell[CellGroupData[{
Cell[398977, 11204, 314, 7, 31, "Input",ExpressionUUID->"beeab4e0-06e0-429a-80b8-ce0ba2f50a2a",
 CellID->733730134],
Cell[399294, 11213, 837, 25, 45, "Output",ExpressionUUID->"32d9c6f7-593d-4526-836f-c36ba40ff456",
 CellID->2059906225]
}, Open  ]],
Cell[400146, 11241, 251, 5, 45, "Text",ExpressionUUID->"49eca656-e573-45a8-8ee5-cab3e8dd5acb",
 CellID->1817167183],
Cell[400400, 11248, 234, 4, 45, "Text",ExpressionUUID->"fde0cdbe-9e95-4b8e-b67d-ca2a1d8d0ce9",
 CellID->1615839605],
Cell[CellGroupData[{
Cell[400659, 11256, 365, 9, 31, "Input",ExpressionUUID->"29cfd85f-526b-4e25-ac30-1ec07fd73890",
 CellID->174787682],
Cell[401027, 11267, 773, 13, 32, "Message",ExpressionUUID->"e4dbe125-df3a-430e-8a44-702bda14c87e",
 CellID->792134658],
Cell[401803, 11282, 411, 11, 45, "Output",ExpressionUUID->"c77ea655-d4d8-4d14-888b-a18bd9afb7a1",
 CellID->1156069253]
}, Open  ]],
Cell[402229, 11296, 166, 2, 38, "ItemNumbered",ExpressionUUID->"ed919d21-46b0-43ed-a702-6ac8c26ce656",
 CellID->843609709],
Cell[402398, 11300, 302, 5, 75, "Text",ExpressionUUID->"c8715f9a-c8c4-4cc2-9063-a62fbe9a67cf",
 CellID->861341669],
Cell[402703, 11307, 240, 4, 45, "Text",ExpressionUUID->"5b17ab5b-89a4-4d77-9c0d-a132d7d405c8",
 CellID->253433112],
Cell[402946, 11313, 746, 20, 101, "Input",ExpressionUUID->"345fd24b-d47a-419d-8779-8ee0eb7b9e6d",
 CellID->2136143478],
Cell[403695, 11335, 442, 7, 134, "Text",ExpressionUUID->"eb6c6c11-ce9e-40b3-92d6-53408a9314d6",
 CellID->39146966],
Cell[CellGroupData[{
Cell[404162, 11346, 446, 11, 31, "Input",ExpressionUUID->"2f86bca6-9bce-4b9d-8246-e304dabc3c7f",
 CellID->258348261],
Cell[404611, 11359, 906, 25, 68, "Output",ExpressionUUID->"0798691e-2d06-4cd8-a2cb-47301de3b84a",
 CellID->968920471]
}, Open  ]],
Cell[405532, 11387, 508, 11, 134, "Text",ExpressionUUID->"0414056e-7a78-4e5d-a666-63a14ee731d1",
 CellID->277860896],
Cell[CellGroupData[{
Cell[406065, 11402, 450, 11, 31, "Input",ExpressionUUID->"7ca03d2b-54e7-48bf-a618-0b1fd0ba33d0",
 CellID->576122374],
Cell[406518, 11415, 957, 25, 68, "Output",ExpressionUUID->"301a2d14-2725-4fd7-81bc-33801524d37c",
 CellID->1659976808]
}, Open  ]],
Cell[407490, 11443, 365, 6, 104, "Text",ExpressionUUID->"db2d3c8b-6d09-4862-9738-da0f1dbeaa87",
 CellID->1270153879],
Cell[407858, 11451, 269, 5, 75, "Text",ExpressionUUID->"04ede164-650c-47fb-82a3-785daa12610c",
 CellID->357407514],
Cell[408130, 11458, 167, 2, 31, "Input",ExpressionUUID->"edb5a357-9bc9-412d-9fbe-a42aecee8fb8",
 CellID->972779082],
Cell[CellGroupData[{
Cell[408322, 11464, 550, 15, 31, "Input",ExpressionUUID->"26c1f5b3-864a-4055-8113-9641fc7393a1",
 CellID->583485652],
Cell[408875, 11481, 250, 5, 45, "Output",ExpressionUUID->"5285dde4-9a55-46a9-ad75-24433a1b66a3",
 CellID->260090411]
}, Open  ]],
Cell[CellGroupData[{
Cell[409162, 11491, 549, 15, 31, "Input",ExpressionUUID->"8198d87c-3b07-4481-a38a-2e4571126aa4",
 CellID->1725489397],
Cell[409714, 11508, 226, 5, 45, "Output",ExpressionUUID->"7afecf4d-4b91-494b-9522-f4b4d5c9e72c",
 CellID->936785784]
}, Open  ]],
Cell[409955, 11516, 407, 7, 104, "Text",ExpressionUUID->"345916dd-e034-4936-85aa-afa8c1b92555",
 CellID->1467733127],
Cell[410365, 11525, 243, 6, 63, "ItemNumbered",ExpressionUUID->"d906e96a-4e2f-4f57-8638-ea0ca2dd7397",
 CellID->693977857],
Cell[410611, 11533, 163, 2, 45, "Text",ExpressionUUID->"3cac2a45-6aa5-402c-b1e3-c95bd10e4f14",
 CellID->702155742],
Cell[CellGroupData[{
Cell[410799, 11539, 312, 7, 31, "Input",ExpressionUUID->"a0229a65-c8dd-465a-977f-252d0bccefef",
 CellID->504022347],
Cell[411114, 11548, 838, 25, 45, "Output",ExpressionUUID->"33bea098-c2a1-47ef-a2a9-4ddc831e5d38",
 CellID->174426433]
}, Open  ]],
Cell[411967, 11576, 486, 8, 134, "Text",ExpressionUUID->"3fc43306-c331-4415-b909-705995cd0a7e",
 CellID->269881276],
Cell[412456, 11586, 307, 8, 45, "Text",ExpressionUUID->"9a13f739-b728-4c9d-a84e-4a1379db163d",
 CellID->1284510424],
Cell[412766, 11596, 448, 12, 54, "Input",ExpressionUUID->"32176236-077f-44cd-bdd7-2084701a9db3",
 CellID->42521556],
Cell[413217, 11610, 294, 5, 75, "Text",ExpressionUUID->"108d57b3-49aa-4294-b9c5-07142b89ced2",
 CellID->1504442840],
Cell[CellGroupData[{
Cell[413536, 11619, 311, 7, 31, "Input",ExpressionUUID->"37bfc92f-7c24-43d4-b493-8416b82a376c",
 CellID->1808633968],
Cell[413850, 11628, 550, 15, 45, "Output",ExpressionUUID->"9d9059b3-cd9f-4eb3-9110-1219e393f8f7",
 CellID->1499662665]
}, Open  ]],
Cell[414415, 11646, 300, 5, 75, "Text",ExpressionUUID->"3a36cc81-435a-48ee-9a0d-0890b1b61950",
 CellID->1962329463],
Cell[CellGroupData[{
Cell[414740, 11655, 353, 9, 31, "Input",ExpressionUUID->"542280d3-0c99-4806-9f6e-e53c5f928b18",
 CellID->306921657],
Cell[415096, 11666, 526, 15, 45, "Output",ExpressionUUID->"a68d349b-c1d3-4821-838b-ef5d68086055",
 CellID->1966316595]
}, Open  ]],
Cell[415637, 11684, 157, 2, 45, "Text",ExpressionUUID->"942b8a8e-2ce7-49de-9d70-2d0e91c3ffa0",
 CellID->1503276355],
Cell[CellGroupData[{
Cell[415819, 11690, 399, 11, 31, "Input",ExpressionUUID->"530acb73-d722-4574-99ff-abeb8d8d9f61",
 CellID->1219663657],
Cell[416221, 11703, 227, 5, 45, "Output",ExpressionUUID->"e205eccf-fc1b-4d1c-8956-a7103ee2c513",
 CellID->1968751593]
}, Open  ]],
Cell[CellGroupData[{
Cell[416485, 11713, 448, 13, 31, "Input",ExpressionUUID->"7512be16-e4f9-4198-9b5d-7fadfbdfdbce",
 CellID->1612223182],
Cell[416936, 11728, 226, 5, 45, "Output",ExpressionUUID->"6d1fb9b2-d886-4232-99d4-9412cbfd414e",
 CellID->439871189]
}, Open  ]],
Cell[417177, 11736, 239, 5, 75, "Text",ExpressionUUID->"24865521-ffee-49ce-9973-f344c82da3d6",
 CellID->1543562148],
Cell[417419, 11743, 229, 5, 38, "ItemNumbered",ExpressionUUID->"a865e655-7223-4265-aada-2b000d5152ec",
 CellID->1046565676],
Cell[417651, 11750, 170, 2, 45, "Text",ExpressionUUID->"3738056c-ed70-4aee-9ca6-14d2b1408665",
 CellID->1738247602],
Cell[417824, 11754, 564, 13, 54, "Input",ExpressionUUID->"bcbe7c8e-086e-4f01-8803-4e4e212c44df",
 CellID->1744278030],
Cell[418391, 11769, 278, 5, 75, "Text",ExpressionUUID->"c1315cb1-d2bd-4a97-979b-4ee4c3b6bf07",
 CellID->182927277],
Cell[CellGroupData[{
Cell[418694, 11778, 464, 12, 31, "Input",ExpressionUUID->"dbc90414-9398-423a-b14c-4f3966fdca0d",
 CellID->162876093],
Cell[419161, 11792, 910, 25, 68, "Output",ExpressionUUID->"1448b541-0bb3-4e04-9759-9441bd48e2e7",
 CellID->1362532399]
}, Open  ]],
Cell[420086, 11820, 163, 2, 45, "Text",ExpressionUUID->"0e380647-740b-4d21-8956-d50236dda283",
 CellID->1986347039],
Cell[CellGroupData[{
Cell[420274, 11826, 413, 11, 31, "Input",ExpressionUUID->"f704a193-df8a-4fc7-8997-54fc48703dca",
 CellID->2136290046],
Cell[420690, 11839, 669, 15, 68, "Output",ExpressionUUID->"9be5c309-c030-44d5-bcc1-9cdfc5dcfb37",
 CellID->1183958934]
}, Open  ]],
Cell[421374, 11857, 161, 2, 45, "Text",ExpressionUUID->"562e96a6-4431-4ad3-8a8a-33ee5ae338e5",
 CellID->489497454],
Cell[CellGroupData[{
Cell[421560, 11863, 375, 9, 31, "Input",ExpressionUUID->"5fddf14d-0e08-4596-93ca-899ed9c07001",
 CellID->860864482],
Cell[421938, 11874, 671, 15, 68, "Output",ExpressionUUID->"98fb72f9-ecb7-4f79-b0f1-43ecd838bae0",
 CellID->1698140045]
}, Open  ]],
Cell[422624, 11892, 466, 7, 134, "Text",ExpressionUUID->"b2c71343-7a26-44b6-bde2-88104e9758c3",
 CellID->271062755],
Cell[CellGroupData[{
Cell[423115, 11903, 441, 12, 31, "Input",ExpressionUUID->"17959bb2-f51d-48c0-b2d0-3c2d4846962b",
 CellID->701901495],
Cell[423559, 11917, 252, 5, 45, "Output",ExpressionUUID->"81d4d658-b272-45b9-a0eb-47cf320e2c2a",
 CellID->500108125]
}, Open  ]],
Cell[CellGroupData[{
Cell[423848, 11927, 434, 11, 31, "Input",ExpressionUUID->"18e975d5-22e2-4840-a648-dba7019e03c6",
 CellID->1296521006],
Cell[424285, 11940, 249, 5, 45, "Output",ExpressionUUID->"13506e10-3d3d-4a24-8aaa-e18e906d9df7",
 CellID->1982082205]
}, Open  ]],
Cell[424549, 11948, 1045, 15, 340, "Text",ExpressionUUID->"39dc5792-17e2-40d6-b47a-2757ab77c096",
 CellID->1162431749],
Cell[425597, 11965, 658, 10, 193, "Text",ExpressionUUID->"bbcab62b-c5dd-4453-b908-fe0ab8269e9d",
 CellID->1075858485],
Cell[426258, 11977, 237, 5, 38, "ItemNumbered",ExpressionUUID->"b2decd3e-bbcf-48eb-8684-64c83b8ddaa7",
 CellTags->"5.3.1.5",
 CellID->2123699886],
Cell[426498, 11984, 394, 6, 104, "Text",ExpressionUUID->"30102570-ce29-4687-a0be-29cd76a0b4a1",
 CellID->1845770862],
Cell[426895, 11992, 197, 2, 45, "Text",ExpressionUUID->"8103341b-f379-4a63-9a82-c0990592a930",
 CellID->93669439],
Cell[CellGroupData[{
Cell[427117, 11998, 298, 6, 31, "Input",ExpressionUUID->"86539097-13f6-4458-abac-ddd44de7ea54",
 CellID->1766673021],
Cell[427418, 12006, 688, 11, 45, "Output",ExpressionUUID->"24ce5ec2-0e70-4ef1-80f8-33f30f756d1b",
 CellID->1954276544]
}, Open  ]],
Cell[428121, 12020, 179, 2, 45, "Text",ExpressionUUID->"55f184ed-cab0-44f6-8929-7382dade6e0d",
 CellID->1910977790],
Cell[CellGroupData[{
Cell[428325, 12026, 296, 6, 31, "Input",ExpressionUUID->"dfb68360-b281-44bb-859e-4a1256533b8c",
 CellID->1475999933],
Cell[428624, 12034, 687, 11, 45, "Output",ExpressionUUID->"79bf5e8e-4340-43f6-b516-6ff3da4a60c1",
 CellID->902948865]
}, Open  ]],
Cell[429326, 12048, 172, 2, 45, "Text",ExpressionUUID->"0c2a986e-8459-48fc-b43a-c901be0dfed5",
 CellID->1742124353],
Cell[CellGroupData[{
Cell[429523, 12054, 330, 7, 31, "Input",ExpressionUUID->"06c2bff7-7478-477f-9370-39b08e5c006c",
 CellID->137362849],
Cell[429856, 12063, 1651, 31, 68, "Output",ExpressionUUID->"b9afdf3a-3d23-4c7e-9717-5922c25ca002",
 CellID->1704379514]
}, Open  ]],
Cell[431522, 12097, 364, 6, 104, "Text",ExpressionUUID->"6ef60d45-4e6d-40fa-9064-60e140cb9773",
 CellID->222124465],
Cell[CellGroupData[{
Cell[431911, 12107, 235, 4, 31, "Input",ExpressionUUID->"e1060646-1a62-45c9-9393-e75f03bb3f4b",
 CellID->2026632676],
Cell[432149, 12113, 2601, 63, 162, "Output",ExpressionUUID->"f54fe8ca-90b6-4600-8c68-34287af12c73",
 CellID->1729373270]
}, Open  ]],
Cell[434765, 12179, 178, 2, 45, "Text",ExpressionUUID->"761f195a-1bc4-4941-9469-c8eaa93cb7a2",
 CellID->1930499307],
Cell[CellGroupData[{
Cell[434968, 12185, 246, 4, 31, "Input",ExpressionUUID->"04797394-d168-4032-815b-09120aa81a86",
 CellID->1835444067],
Cell[435217, 12191, 193, 3, 45, "Output",ExpressionUUID->"b93360af-d07c-4422-ade5-7067db15eb81",
 CellID->1396357313]
}, Open  ]],
Cell[435425, 12197, 208, 4, 45, "Text",ExpressionUUID->"2150f647-0663-4b1e-ac20-1b3ce7f97c3c",
 CellID->876065175],
Cell[CellGroupData[{
Cell[435658, 12205, 237, 4, 31, "Input",ExpressionUUID->"b010ebf7-d946-450d-9efc-fe695037c176",
 CellID->834846850],
Cell[435898, 12211, 478, 8, 45, "Output",ExpressionUUID->"58c86a39-89bf-4818-97f8-e15e796eb6e5",
 CellID->1419632953]
}, Open  ]],
Cell[436391, 12222, 158, 2, 45, "Text",ExpressionUUID->"69759c2b-eb51-4ad6-a2f2-4568ec3fb527",
 CellID->378656947],
Cell[CellGroupData[{
Cell[436574, 12228, 269, 5, 31, "Input",ExpressionUUID->"7ee20603-8efd-4563-a144-8d1631e2aac3",
 CellID->587173844],
Cell[436846, 12235, 477, 8, 45, "Output",ExpressionUUID->"4640e0a9-0d1c-4084-9764-230680a3a863",
 CellID->941620664]
}, Open  ]],
Cell[437338, 12246, 387, 9, 104, "Text",ExpressionUUID->"0a9c97dd-a0a4-49fc-ac7c-4097b1f65382",
 CellID->900130990],
Cell[CellGroupData[{
Cell[437750, 12259, 338, 8, 31, "Input",ExpressionUUID->"2e695a2c-73fc-4f28-8c05-4b0eae90568c",
 CellID->1539067668],
Cell[438091, 12269, 192, 3, 45, "Output",ExpressionUUID->"c23369d0-1b7b-4aa3-855e-d6b419c5395c",
 CellID->1425929998]
}, Open  ]],
Cell[438298, 12275, 191, 2, 45, "Text",ExpressionUUID->"61874bfc-6565-4a14-ba32-2adbf10dcda6",
 CellID->1835459513],
Cell[438492, 12279, 542, 14, 54, "Input",ExpressionUUID->"49a965ae-9068-472b-873f-77dc03c93482",
 CellID->1495300977],
Cell[439037, 12295, 167, 2, 45, "Text",ExpressionUUID->"52802c6c-f5f8-49b0-abe1-ce3714e9b48d",
 CellID->454176493],
Cell[CellGroupData[{
Cell[439229, 12301, 293, 6, 31, "Input",ExpressionUUID->"12a2df84-ca03-45a6-a980-8a60c7ad9b4d",
 CellID->1315459604],
Cell[439525, 12309, 192, 3, 45, "Output",ExpressionUUID->"724bc212-7dff-4117-9e28-16c12fc1c549",
 CellID->488438061]
}, Open  ]],
Cell[439732, 12315, 309, 5, 75, "Text",ExpressionUUID->"0d5e5848-9f24-438f-b39a-c8cc88e069f1",
 CellID->1495992393],
Cell[CellGroupData[{
Cell[440066, 12324, 201, 3, 31, "Input",ExpressionUUID->"b03e3a77-b271-4a90-96ee-cf891ed35b49",
 CellID->244993031],
Cell[440270, 12329, 1651, 31, 68, "Output",ExpressionUUID->"708c6a4c-cc6c-48d3-ae42-e9cc2142fc06",
 CellID->887593018]
}, Open  ]],
Cell[441936, 12363, 371, 6, 104, "Text",ExpressionUUID->"d8f12679-7dab-4c50-bcbd-0dd3af813886",
 CellID->1354441464],
Cell[CellGroupData[{
Cell[442332, 12373, 350, 7, 54, "Input",ExpressionUUID->"1aeb57aa-20b8-4110-8142-6cca928ad15b",
 CellID->1718056706],
Cell[442685, 12382, 217, 4, 45, "Output",ExpressionUUID->"215ce16f-436a-44f8-86ff-55a0a2922d49",
 CellID->1663232597]
}, Open  ]],
Cell[442917, 12389, 188, 2, 45, "Text",ExpressionUUID->"5e0d0402-7b07-4f2a-8f7e-eb56bfe6a342",
 CellID->71792876],
Cell[CellGroupData[{
Cell[443130, 12395, 262, 5, 31, "Input",ExpressionUUID->"053af016-66ac-4a22-83d3-0455a64d4cba",
 CellID->243689152],
Cell[443395, 12402, 1652, 31, 68, "Output",ExpressionUUID->"9756f301-fe3c-4c18-a088-33c91b5daf54",
 CellID->1081389122]
}, Open  ]],
Cell[445062, 12436, 168, 2, 45, "Text",ExpressionUUID->"8defc9d1-d816-4e80-8962-fd7e29c503d9",
 CellID->752868893],
Cell[CellGroupData[{
Cell[445255, 12442, 289, 6, 31, "Input",ExpressionUUID->"cfb334cf-88ee-4326-bece-9f57166cab99",
 CellID->2033697281],
Cell[445547, 12450, 195, 3, 45, "Output",ExpressionUUID->"a133f41d-2f87-443b-822f-57e686b1712f",
 CellID->1727607198]
}, Open  ]],
Cell[445757, 12456, 301, 5, 75, "Text",ExpressionUUID->"467fc01a-c313-4e78-972e-7960a557f154",
 CellID->589700241],
Cell[446061, 12463, 182, 2, 38, "ItemNumbered",ExpressionUUID->"4ef7074f-a002-4fc3-9b81-9bdad63635d7",
 CellID->791631354],
Cell[446246, 12467, 379, 6, 104, "Text",ExpressionUUID->"77eaa441-5670-4fbc-b691-314aad39752b",
 CellID->1286973513],
Cell[446628, 12475, 214, 2, 45, "Text",ExpressionUUID->"3e633967-fac6-449d-b10a-7e1bc17d0000",
 CellID->1115478117],
Cell[446845, 12479, 653, 18, 78, "Input",ExpressionUUID->"9db4a9f8-cf0a-4dfc-9795-14f7427195ff",
 CellID->1691827292],
Cell[447501, 12499, 237, 5, 75, "Text",ExpressionUUID->"ac8f19d9-81dc-4e42-a24c-b1b275f42d20",
 CellID->1968780925],
Cell[CellGroupData[{
Cell[447763, 12508, 400, 10, 31, "Input",ExpressionUUID->"21e1e44b-e6fc-4e32-a035-621ccc47cfba",
 CellID->457321389],
Cell[448166, 12520, 411, 8, 45, "Output",ExpressionUUID->"8db95f3f-a3a5-4c88-9bab-9984f703bb92",
 CellID->192132943]
}, Open  ]],
Cell[448592, 12531, 236, 5, 75, "Text",ExpressionUUID->"c3aa0620-521f-487f-ad9b-a74308c8f6ea",
 CellID->1510451560],
Cell[CellGroupData[{
Cell[448853, 12540, 368, 9, 31, "Input",ExpressionUUID->"ed4d7123-fc89-4fa4-bfc4-c17896539fac",
 CellID->643804761],
Cell[449224, 12551, 1036, 25, 68, "Output",ExpressionUUID->"08a83b6c-06e8-41c7-8a9d-d39f5ade79ae",
 CellID->1931504793]
}, Open  ]],
Cell[450275, 12579, 278, 5, 75, "Text",ExpressionUUID->"bae29dcf-8530-4263-8ae8-77bfdcd91ac2",
 CellID->304825322],
Cell[CellGroupData[{
Cell[450578, 12588, 263, 5, 31, "Input",ExpressionUUID->"c3244240-9b5c-4113-9042-6377865b8af7",
 CellID->1380863661],
Cell[450844, 12595, 1509, 45, 91, "Output",ExpressionUUID->"95bda835-e6f3-4e7c-8a2c-3209d16fe1f0",
 CellID->525390990]
}, Open  ]],
Cell[452368, 12643, 216, 4, 45, "Text",ExpressionUUID->"9d65efe1-18d5-4cd7-a49f-a2a7ecd769ba",
 CellID->2027908335],
Cell[CellGroupData[{
Cell[452609, 12651, 400, 10, 31, "Input",ExpressionUUID->"73d4d4bb-d03c-46e5-8edb-22df1c7a93f8",
 CellID->926643227],
Cell[453012, 12663, 1509, 45, 91, "Output",ExpressionUUID->"c31433d0-a10d-47c4-acc7-1514370b5614",
 CellID->233227146]
}, Open  ]],
Cell[454536, 12711, 435, 7, 104, "Text",ExpressionUUID->"0f652140-5c1d-4d7c-aede-eea2090561e0",
 CellID->252936490],
Cell[454974, 12720, 776, 21, 78, "Input",ExpressionUUID->"2866f908-89ab-4c18-942e-c23b1f65c249",
 CellID->1088246382],
Cell[455753, 12743, 165, 2, 45, "Text",ExpressionUUID->"3b18214a-eaac-45b7-92a3-734b990b6f09",
 CellID->165750705],
Cell[CellGroupData[{
Cell[455943, 12749, 245, 4, 31, "Input",ExpressionUUID->"7da5e040-9ec1-4daa-8aca-614489a73bc5",
 CellID->1530960067],
Cell[456191, 12755, 293, 7, 45, "Output",ExpressionUUID->"3d92aab0-11d7-431d-9a29-0a4623add451",
 CellID->791481930]
}, Open  ]],
Cell[456499, 12765, 185, 2, 45, "Text",ExpressionUUID->"ebab0241-d546-478a-b23b-e4e9524a625e",
 CellID->923087992],
Cell[456687, 12769, 429, 11, 31, "Input",ExpressionUUID->"d0243b44-509e-4253-a9fa-1a3a4e325982",
 CellID->1565938064],
Cell[CellGroupData[{
Cell[457141, 12784, 420, 11, 54, "Input",ExpressionUUID->"8e902fdd-8939-4f97-b706-1dee7851613a",
 CellID->275656328],
Cell[457564, 12797, 250, 5, 45, "Output",ExpressionUUID->"7fd0bdca-bc32-4a37-98d0-0be0def18dd5",
 CellID->314493847],
Cell[457817, 12804, 252, 5, 45, "Output",ExpressionUUID->"a26b3355-bddf-4184-bad8-08e1aa41e76e",
 CellID->740831262]
}, Open  ]],
Cell[458084, 12812, 168, 2, 45, "Text",ExpressionUUID->"35dba781-3ce5-4d5b-b138-b986f907e2b1",
 CellID->105904064],
Cell[458255, 12816, 345, 6, 104, "Text",ExpressionUUID->"266ad442-76f3-4466-b02b-b9a1621ae5ca",
 CellID->1813143932]
}, Open  ]],
Cell[CellGroupData[{
Cell[458637, 12827, 153, 2, 66, "Subsubsection",ExpressionUUID->"f99c070d-a94c-40a5-a897-40d56bce7218",
 CellID->860031594],
Cell[458793, 12831, 300, 5, 75, "Text",ExpressionUUID->"0f77961a-dfe6-438e-bf26-ca9c283e6083",
 CellID->1986056048],
Cell[459096, 12838, 326, 7, 31, "Input",ExpressionUUID->"893f4847-2ff6-4d5f-acd0-e2dd3398bb76",
 CellID->1465180859],
Cell[459425, 12847, 246, 5, 75, "Text",ExpressionUUID->"ab742b32-c025-41b9-a253-276e505c94d6",
 CellID->449386877],
Cell[459674, 12854, 156, 2, 38, "ItemNumbered",ExpressionUUID->"bd9389f1-a2d9-46ea-b050-4546a93e4123",
 CellID->145255240],
Cell[459833, 12858, 209, 3, 45, "Text",ExpressionUUID->"82bfe0ef-5ebe-4efb-948f-1d1a9d926198",
 CellID->1763395688],
Cell[460045, 12863, 206, 4, 45, "Text",ExpressionUUID->"5b50d47e-5801-412c-85c2-a23a77b5659e",
 CellID->2122942822],
Cell[CellGroupData[{
Cell[460276, 12871, 479, 12, 54, "Input",ExpressionUUID->"26b398b1-716a-4a9f-823e-dded24d1c8b4",
 CellID->344223337],
Cell[460758, 12885, 847, 25, 68, "Output",ExpressionUUID->"83707925-7993-4f7c-89c8-4c5f179d1056",
 CellID->2004383325]
}, Open  ]],
Cell[461620, 12913, 243, 3, 45, "Text",ExpressionUUID->"3a998438-5b83-488e-8f83-aecf0e09360a",
 CellID->1664875648],
Cell[461866, 12918, 233, 5, 75, "Text",ExpressionUUID->"678e7563-97d7-4581-87fc-4d4ef3f26b92",
 CellID->905604004],
Cell[CellGroupData[{
Cell[462124, 12927, 407, 10, 31, "Input",ExpressionUUID->"38be9a9b-795a-4a16-bfd8-22ea27fac204",
 CellID->1330913887],
Cell[462534, 12939, 319, 7, 45, "Output",ExpressionUUID->"0db5044c-b3d0-443d-9736-c226ffdc6d9d",
 CellID->2098499577]
}, Open  ]],
Cell[462868, 12949, 297, 5, 75, "Text",ExpressionUUID->"45c0aeec-99fe-474b-9267-44df0026858c",
 CellID->1670634849],
Cell[CellGroupData[{
Cell[463190, 12958, 308, 7, 31, "Input",ExpressionUUID->"9e43589c-8c84-4ed9-93b4-ef13deb1d49f",
 CellID->749247776],
Cell[463501, 12967, 319, 7, 45, "Output",ExpressionUUID->"10ab7edf-7b19-4298-b533-096f54c48c49",
 CellID->1539394550]
}, Open  ]],
Cell[463835, 12977, 211, 4, 45, "Text",ExpressionUUID->"712c2cc5-18d0-44ba-8a31-2ccdca301286",
 CellID->1868706441],
Cell[CellGroupData[{
Cell[464071, 12985, 471, 13, 31, "Input",ExpressionUUID->"fe5ed26f-caa8-4c3d-818c-6fdeff69902b",
 CellID->1133810754],
Cell[464545, 13000, 226, 5, 45, "Output",ExpressionUUID->"82e97b71-c76e-4d3d-b5df-37675edfc196",
 CellID->671074624]
}, Open  ]],
Cell[CellGroupData[{
Cell[464808, 13010, 363, 9, 31, "Input",ExpressionUUID->"f91f7a27-229d-45ec-a8f1-a3905a9507fe",
 CellID->167091524],
Cell[465174, 13021, 227, 5, 45, "Output",ExpressionUUID->"67ff2c2c-89dd-4f55-b435-feb2a865e6df",
 CellID->1430345249]
}, Open  ]],
Cell[465416, 13029, 570, 9, 163, "Text",ExpressionUUID->"40a10065-c3b1-4753-ae01-a9c739d9cf4a",
 CellID->1547863323],
Cell[465989, 13040, 299, 5, 75, "Text",ExpressionUUID->"91053a4d-1833-435f-9777-faff6fbc30e2",
 CellID->1922991410],
Cell[CellGroupData[{
Cell[466313, 13049, 677, 19, 54, "Input",ExpressionUUID->"3fb064ba-996f-4397-b98d-88793336832d",
 CellID->2000018609],
Cell[466993, 13070, 15874, 301, 84, "Output",ExpressionUUID->"dabc5614-8bfd-4580-a98a-56c0b88c594b",
 CellID->460396010]
}, Open  ]],
Cell[CellGroupData[{
Cell[482904, 13376, 405, 11, 31, "Input",ExpressionUUID->"feb3f765-2900-4147-a5dd-0722bf95248f",
 CellID->1772402106],
Cell[483312, 13389, 252, 5, 45, "Output",ExpressionUUID->"6f416491-570b-4723-bbfe-5287b7b17a65",
 CellID->1489970091]
}, Open  ]],
Cell[483579, 13397, 450, 7, 134, "Text",ExpressionUUID->"02ea4ba1-67cc-4ea1-9cfa-4c6040e99409",
 CellID->337112242],
Cell[484032, 13406, 200, 3, 38, "ItemNumbered",ExpressionUUID->"6d5d182c-1141-42fc-b7e2-551d22a39f60",
 CellID->1435944552],
Cell[484235, 13411, 359, 6, 104, "Text",ExpressionUUID->"87b6df5a-4ae4-4352-a13f-a9c2ba2fc428",
 CellID->498860478],
Cell[CellGroupData[{
Cell[484619, 13421, 444, 12, 31, "Input",ExpressionUUID->"2f8fa7d8-d28b-4e18-aed2-668e36ec7893",
 CellID->450022990],
Cell[485066, 13435, 226, 5, 45, "Output",ExpressionUUID->"b2198978-16c9-4ba7-b04c-af1e24cd9e5e",
 CellID->193871534]
}, Open  ]],
Cell[485307, 13443, 344, 6, 104, "Text",ExpressionUUID->"65f2d028-7747-4d3f-b4fd-d874c1ebb2c6",
 CellID->1249920173],
Cell[CellGroupData[{
Cell[485676, 13453, 416, 11, 31, "Input",ExpressionUUID->"0ebb4914-b7ce-404e-a491-5bc09e17eb73",
 CellID->723312657],
Cell[486095, 13466, 1961, 60, 162, "Output",ExpressionUUID->"d4798c6c-7a2f-452a-a896-af702a8a451a",
 CellID->714182468]
}, Open  ]],
Cell[488071, 13529, 678, 10, 193, "Text",ExpressionUUID->"ec8b4ffd-79cc-4609-8477-7e841bd5b926",
 CellID->396930300],
Cell[488752, 13541, 462, 7, 134, "Text",ExpressionUUID->"b91cfd84-b126-49be-a704-1d6c2fd7b8a8",
 CellID->1347333049],
Cell[489217, 13550, 205, 3, 38, "ItemNumbered",ExpressionUUID->"29094f2d-49e0-47d9-bb55-c5d8ac528f8c",
 CellTags->"5.3.2.3",
 CellID->1796829426],
Cell[489425, 13555, 229, 3, 45, "Text",ExpressionUUID->"28547271-68dd-4bd8-9849-6bee76eb6778",
 CellID->1397118668],
Cell[489657, 13560, 216, 4, 45, "Text",ExpressionUUID->"f4c90e6d-98f2-4358-a8ed-537bc9af8be2",
 CellID->598795017],
Cell[CellGroupData[{
Cell[489898, 13568, 567, 14, 31, "Input",ExpressionUUID->"ec533cc6-21e4-487c-9cfe-04e4e870c5bc",
 CellID->187538949],
Cell[490468, 13584, 265, 6, 45, "Output",ExpressionUUID->"6dc711f1-b11b-423f-ae3f-4c9f3fcb019d",
 CellID->724225355]
}, Open  ]],
Cell[490748, 13593, 166, 2, 45, "Text",ExpressionUUID->"7be04f5c-3e85-47c4-9851-bd141b03be42",
 CellID->1677025376],
Cell[CellGroupData[{
Cell[490939, 13599, 568, 14, 31, "Input",ExpressionUUID->"13cb7039-b71d-4690-91cd-716a64d6ecaa",
 CellID->1434126948],
Cell[491510, 13615, 265, 6, 45, "Output",ExpressionUUID->"9a421c2c-5894-4d53-9a6c-aaf5ff214627",
 CellID->1871558415]
}, Open  ]],
Cell[491790, 13624, 176, 2, 45, "Text",ExpressionUUID->"56151d15-14fd-4f85-b27a-223274fd5f12",
 CellID->193241838],
Cell[CellGroupData[{
Cell[491991, 13630, 606, 15, 31, "Input",ExpressionUUID->"56e37646-8fa0-4cff-9400-3dd1103709dc",
 CellID->2034182521],
Cell[492600, 13647, 174, 3, 45, "Output",ExpressionUUID->"4b686335-6fe6-4bf9-9086-3532c996912b",
 CellID->710728758]
}, Open  ]],
Cell[492789, 13653, 230, 3, 45, "Text",ExpressionUUID->"3f57c929-3992-4434-aa84-a1adb1fecac1",
 CellID->1401680585],
Cell[493022, 13658, 161, 2, 45, "Text",ExpressionUUID->"69d21894-29b6-4f78-8bd0-51743efe81b1",
 CellID->93303135],
Cell[493186, 13662, 776, 22, 101, "Input",ExpressionUUID->"f5ea3a38-e23e-4d4f-8ef7-81a9e12d3432",
 CellID->381572170],
Cell[493965, 13686, 885, 13, 252, "Text",ExpressionUUID->"2062cbe8-4dab-481f-9eaf-4d62e48f378f",
 CellID->1143308411],
Cell[494853, 13701, 162, 2, 45, "Text",ExpressionUUID->"e6c36051-5828-48ae-b533-9ba5db48a3bf",
 CellID->695089637],
Cell[CellGroupData[{
Cell[495040, 13707, 374, 9, 31, "Input",ExpressionUUID->"dc81b367-4ec5-4dee-ba73-cca4ae5b87ca",
 CellID->885227822],
Cell[495417, 13718, 175, 3, 45, "Output",ExpressionUUID->"84dddca3-d1fc-4887-bf39-52b4e75191fe",
 CellID->196962998]
}, Open  ]],
Cell[CellGroupData[{
Cell[495629, 13726, 373, 9, 31, "Input",ExpressionUUID->"437c6dce-109e-4391-ba97-ce03f929bd4e",
 CellID->1084807359],
Cell[496005, 13737, 175, 3, 45, "Output",ExpressionUUID->"5c9658f7-c8fb-47ea-8736-846e5e069dd9",
 CellID->1394499856]
}, Open  ]],
Cell[CellGroupData[{
Cell[496217, 13745, 380, 9, 31, "Input",ExpressionUUID->"f39c2bb5-73cc-4eaa-aff1-e61bb822c5cf",
 CellID->1967849965],
Cell[496600, 13756, 357, 9, 45, "Output",ExpressionUUID->"3272be41-88b2-4654-9ebe-599d6507c54f",
 CellID->326763411]
}, Open  ]],
Cell[496972, 13768, 455, 7, 134, "Text",ExpressionUUID->"54e00a3b-fa91-4c33-8c69-2348d9316aec",
 CellID->1276359842],
Cell[CellGroupData[{
Cell[497452, 13779, 685, 19, 101, "Input",ExpressionUUID->"45e77062-ad33-4ef0-b927-330fc20447da",
 CellID->2074840278],
Cell[498140, 13800, 174, 3, 45, "Output",ExpressionUUID->"00f3daba-a02a-4796-a0f4-7e702a26e868",
 CellID->1940154013]
}, Open  ]],
Cell[498329, 13806, 976, 14, 311, "Text",ExpressionUUID->"9766d1e1-977d-4bb7-976c-c6746c05df37",
 CellID->776800443],
Cell[499308, 13822, 221, 3, 45, "Text",ExpressionUUID->"fd32224a-2be8-43d0-bd4c-67907bf5247a",
 CellID->1869124575],
Cell[499532, 13827, 398, 6, 104, "Text",ExpressionUUID->"171fde3c-2190-46d4-be9c-e2277c9bf166",
 CellID->1536588003],
Cell[CellGroupData[{
Cell[499955, 13837, 430, 11, 31, "Input",ExpressionUUID->"7b11f557-3aa7-4267-b607-ffe3cd3c9616",
 CellID->1480813340],
Cell[500388, 13850, 228, 5, 45, "Output",ExpressionUUID->"098db87d-847d-4f68-9d32-4cbeec1d659d",
 CellID->437479031]
}, Open  ]],
Cell[CellGroupData[{
Cell[500653, 13860, 426, 11, 31, "Input",ExpressionUUID->"d07bdf82-da35-40a4-95c5-dda106f03326",
 CellID->856367305],
Cell[501082, 13873, 229, 5, 45, "Output",ExpressionUUID->"b6cbe853-1e16-4258-aaa7-dc79a485a00f",
 CellID->1142011531]
}, Open  ]],
Cell[501326, 13881, 520, 8, 134, "Text",ExpressionUUID->"75793a97-ba0e-40d9-8daf-73e715a4d498",
 CellID->1299349427],
Cell[CellGroupData[{
Cell[501871, 13893, 525, 14, 31, "Input",ExpressionUUID->"557d1571-2102-4505-b6d8-767a69d84432",
 CellID->232375424],
Cell[502399, 13909, 227, 5, 45, "Output",ExpressionUUID->"8372facf-3743-48ce-9dac-bdee845fe958",
 CellID->1196866447]
}, Open  ]],
Cell[502641, 13917, 449, 7, 134, "Text",ExpressionUUID->"7b80570b-19cb-4946-a945-89fc9fa02e2e",
 CellID->255053280],
Cell[CellGroupData[{
Cell[503115, 13928, 496, 13, 31, "Input",ExpressionUUID->"612aeaeb-dd00-4791-850b-79cf9221f28d",
 CellID->812849343],
Cell[503614, 13943, 175, 3, 45, "Output",ExpressionUUID->"3b5699a4-eaac-4daf-b324-fe904053956c",
 CellID->723952630]
}, Open  ]],
Cell[CellGroupData[{
Cell[503826, 13951, 541, 14, 78, "Input",ExpressionUUID->"7fba7317-4d0d-49b7-ba3e-2cbf9ddeb525",
 CellID->1976992155],
Cell[504370, 13967, 251, 5, 45, "Output",ExpressionUUID->"283ecca6-e762-4743-a75d-bd268c939add",
 CellID->1010555364]
}, Open  ]],
Cell[504636, 13975, 212, 2, 45, "Text",ExpressionUUID->"3b58019e-803b-4979-9b08-5648053947bd",
 CellID->1100630753],
Cell[504851, 13979, 223, 3, 45, "Text",ExpressionUUID->"66ab5b27-d16d-45fb-bf92-a01cf031898c",
 CellID->1585545231],
Cell[505077, 13984, 521, 8, 163, "Text",ExpressionUUID->"87177a48-3e22-4458-94f5-99e7140ab8a2",
 CellID->267476358],
Cell[505601, 13994, 1249, 36, 172, "Input",ExpressionUUID->"3cb01c92-d5e3-47e2-bf8f-a63f54ab1ac3",
 CellID->1524028341],
Cell[506853, 14032, 819, 12, 252, "Text",ExpressionUUID->"29fe8919-c3f9-4d81-bfdd-585d70a8bc3a",
 CellID->227200366],
Cell[507675, 14046, 170, 2, 45, "Text",ExpressionUUID->"4fb95878-9887-4aaa-af44-7d2c986392eb",
 CellID->118875998],
Cell[CellGroupData[{
Cell[507870, 14052, 442, 11, 31, "Input",ExpressionUUID->"cb99789f-049a-4847-9ef8-f406df72f1ce",
 CellID->354832360],
Cell[508315, 14065, 174, 3, 45, "Output",ExpressionUUID->"d06aca55-756d-4693-a21a-54be00b08534",
 CellID->2143389984]
}, Open  ]],
Cell[CellGroupData[{
Cell[508526, 14073, 442, 11, 31, "Input",ExpressionUUID->"7654e144-a4d7-476b-bd67-d62eccb647f2",
 CellID->2064766310],
Cell[508971, 14086, 176, 3, 45, "Output",ExpressionUUID->"46069189-854d-4065-a90d-683de2cd3e56",
 CellID->419303823]
}, Open  ]],
Cell[CellGroupData[{
Cell[509184, 14094, 407, 9, 31, "Input",ExpressionUUID->"681503e4-7768-4f90-9dd0-535dc36ba63f",
 CellID->1286192819],
Cell[509594, 14105, 226, 5, 45, "Output",ExpressionUUID->"48fe3e6d-1c1b-4f9a-9412-c4b4d2e60752",
 CellID->936858224]
}, Open  ]],
Cell[CellGroupData[{
Cell[509857, 14115, 401, 9, 31, "Input",ExpressionUUID->"3a0983d8-1536-4a8f-8722-f85abc471a75",
 CellID->1264212850],
Cell[510261, 14126, 227, 5, 45, "Output",ExpressionUUID->"270117fc-4b9e-47a7-83f9-92ffabee4c7e",
 CellID->1023363094]
}, Open  ]],
Cell[510503, 14134, 238, 3, 45, "Text",ExpressionUUID->"e190da9d-195f-419a-9935-26df21c61218",
 CellID->11379708],
Cell[510744, 14139, 416, 7, 104, "Text",ExpressionUUID->"83457665-7600-47c0-9419-aad5f91664bd",
 CellID->1996784835],
Cell[CellGroupData[{
Cell[511185, 14150, 549, 16, 31, "Input",ExpressionUUID->"9830f23a-434d-4681-bc0f-964e424aaa8b",
 CellID->1415681293],
Cell[511737, 14168, 434, 9, 32, "Message",ExpressionUUID->"1e9d624a-7739-430e-9ccf-c86c4f3bb312",
 CellID->778909336],
Cell[512174, 14179, 433, 9, 32, "Message",ExpressionUUID->"57e848f9-26d4-46d9-a9b5-784d6a8996d8",
 CellID->68898040],
Cell[512610, 14190, 436, 9, 32, "Message",ExpressionUUID->"f089d220-fcb2-40f4-ac53-8576ca6a472f",
 CellID->475672547],
Cell[513049, 14201, 471, 9, 32, "Message",ExpressionUUID->"589a4a43-4b4a-4225-a295-98cdd96b469c",
 CellID->1694363295],
Cell[513523, 14212, 175, 3, 45, "Output",ExpressionUUID->"cab182e0-0ac6-4edd-b779-2c5a3064cc9c",
 CellID->1530739845]
}, Open  ]],
Cell[513713, 14218, 634, 10, 193, "Text",ExpressionUUID->"cfc6f6db-019c-415b-bd69-d0793bb20429",
 CellID->232816785],
Cell[514350, 14230, 2163, 58, 265, "Input",ExpressionUUID->"b8fa8ef4-2150-4751-95e8-91358cf16b85",
 CellID->1806630302],
Cell[516516, 14290, 513, 8, 134, "Text",ExpressionUUID->"63cd1707-da82-4d19-9129-46bee500b254",
 CellID->1926441291],
Cell[CellGroupData[{
Cell[517054, 14302, 468, 11, 54, "Input",ExpressionUUID->"1b965d15-e73d-4036-a453-624355b6f281",
 CellID->1380408442],
Cell[517525, 14315, 313, 7, 45, "Output",ExpressionUUID->"a99f70f9-224f-4d97-a391-747756425a69",
 CellID->1594109169]
}, Open  ]],
Cell[517853, 14325, 244, 5, 45, "Text",ExpressionUUID->"c239a457-e42d-4912-91cc-ebf2f40b6a8d",
 CellID->1422128342],
Cell[518100, 14332, 528, 8, 163, "Text",ExpressionUUID->"ff460f6b-e286-4d88-9af6-ca6e153d9ece",
 CellID->127986598],
Cell[518631, 14342, 216, 3, 45, "Text",ExpressionUUID->"2f4f0659-5606-44eb-8825-ee8535fc95f3",
 CellID->35767062],
Cell[CellGroupData[{
Cell[518872, 14349, 528, 16, 31, "Input",ExpressionUUID->"a143d103-74c7-4335-8746-f2bd28b20932",
 CellID->1989073521],
Cell[519403, 14367, 198, 3, 45, "Output",ExpressionUUID->"8a430b99-1b50-44aa-bd57-5bf106949314",
 CellID->552995828]
}, Open  ]],
Cell[519616, 14373, 236, 5, 75, "Text",ExpressionUUID->"1035b5f9-d30e-4619-b087-70e16f60ae39",
 CellID->2039140627],
Cell[CellGroupData[{
Cell[519877, 14382, 381, 9, 31, "Input",ExpressionUUID->"20cd8e22-8838-49e5-9e7e-6783cf8c078a",
 CellID->144995516],
Cell[520261, 14393, 227, 5, 45, "Output",ExpressionUUID->"43fc4a3a-af18-4672-9765-2f589c2fb4f8",
 CellID->1163310364]
}, Open  ]],
Cell[520503, 14401, 353, 6, 104, "Text",ExpressionUUID->"9860f6dc-ddb5-4732-b6ab-3e92ebbc7311",
 CellID->1892416264],
Cell[520859, 14409, 527, 8, 163, "Text",ExpressionUUID->"0076d177-a532-4a23-9e42-731dd1b4b2b2",
 CellID->11034425],
Cell[521389, 14419, 157, 2, 38, "ItemNumbered",ExpressionUUID->"267a9998-951c-48a2-aa32-5268beb2617f",
 CellID->1034978470],
Cell[521549, 14423, 205, 3, 31, "SubitemNumbered",ExpressionUUID->"67ec12b4-e95e-4dd4-87e5-f43ff304695b",
 CellID->265604590],
Cell[521757, 14428, 352, 6, 104, "Text",ExpressionUUID->"f7dbe11d-1682-4397-96db-45d4a7f5f006",
 CellID->1545325664],
Cell[522112, 14436, 181, 2, 45, "Text",ExpressionUUID->"a3601fac-8920-4780-90d3-6c7c02124096",
 CellID->1413671019],
Cell[CellGroupData[{
Cell[522318, 14442, 506, 14, 31, "Input",ExpressionUUID->"d062baf3-7bb4-428c-9a38-d64ce69bb296",
 CellID->519865163],
Cell[522827, 14458, 769, 21, 158, "Output",ExpressionUUID->"e18d8569-ba16-4c6d-94cd-94a9666da30b",
 CellID->1372780159]
}, Open  ]],
Cell[523611, 14482, 169, 2, 45, "Text",ExpressionUUID->"87c33f9f-2ed9-4386-9d4b-c782c584bc21",
 CellID->1899312592],
Cell[CellGroupData[{
Cell[523805, 14488, 434, 10, 54, "Input",ExpressionUUID->"cce698c6-1091-49e2-b9a5-41e1f127454e",
 CellID->739043489],
Cell[524242, 14500, 248, 5, 45, "Output",ExpressionUUID->"71590903-4dc9-4da1-942d-83ea78cbde38",
 CellID->1872125044]
}, Open  ]],
Cell[524505, 14508, 379, 6, 104, "Text",ExpressionUUID->"f7b6aae5-d356-4669-9b5d-44eecbb1456e",
 CellID->2022702311],
Cell[CellGroupData[{
Cell[524909, 14518, 346, 8, 31, "Input",ExpressionUUID->"1d3c436d-43e8-4c2a-98f3-6e019f6e15c8",
 CellID->131019603],
Cell[525258, 14528, 246, 5, 45, "Output",ExpressionUUID->"1b824ef2-7e0e-4a0b-aace-39345cdde89e",
 CellID->1217555130]
}, Open  ]],
Cell[525519, 14536, 176, 2, 45, "Text",ExpressionUUID->"b0b5af07-fad5-4bbf-bee5-bd32e5bbdc60",
 CellID->77397647],
Cell[CellGroupData[{
Cell[525720, 14542, 397, 9, 31, "Input",ExpressionUUID->"e0ee915d-6994-4f9d-9246-a62d4ccc4603",
 CellID->15278399],
Cell[526120, 14553, 647, 16, 45, "Output",ExpressionUUID->"fb8167bc-021d-466a-a7c8-0b1a75e703e7",
 CellID->1955970954]
}, Open  ]],
Cell[526782, 14572, 279, 5, 75, "Text",ExpressionUUID->"9e8865db-cdc6-486f-9823-c348458bb4bb",
 CellID->324155602],
Cell[CellGroupData[{
Cell[527086, 14581, 231, 4, 31, "Input",ExpressionUUID->"3b593636-e3b4-401e-89f6-6dde48b44fbe",
 CellID->792039932],
Cell[527320, 14587, 763, 21, 158, "Output",ExpressionUUID->"e0a69807-2d3f-4749-85f6-b6bb985222f6",
 CellID->235297661]
}, Open  ]],
Cell[528098, 14611, 206, 4, 45, "Text",ExpressionUUID->"a019aba6-c6f7-49da-b4aa-8560f796a9c8",
 CellID->1130394300],
Cell[CellGroupData[{
Cell[528329, 14619, 548, 15, 31, "Input",ExpressionUUID->"3aa6128a-2ed2-4ce7-9db8-ff240d90df5d",
 CellID->2043637145],
Cell[528880, 14636, 645, 16, 45, "Output",ExpressionUUID->"36d8d7fd-22d8-4298-ab1f-f9dd97dbe880",
 CellID->584585702]
}, Open  ]],
Cell[529540, 14655, 745, 12, 193, "Text",ExpressionUUID->"befa61a4-32a1-4df6-b71d-b428148b9d9d",
 CellID->2136887865],
Cell[530288, 14669, 259, 3, 45, "Text",ExpressionUUID->"5569295c-3942-4f11-b5dd-380abb0c6153",
 CellID->1064375382],
Cell[530550, 14674, 893, 24, 101, "Input",ExpressionUUID->"c95892aa-7588-42a1-a06d-7419854054c0",
 CellID->1078718917],
Cell[531446, 14700, 571, 12, 134, "Text",ExpressionUUID->"1c659c7b-9bf1-4eb6-a73b-239a36955614",
 CellID->203711348],
Cell[532020, 14714, 315, 5, 75, "Text",ExpressionUUID->"061e7ba7-12a1-47e0-8da8-7e20a912a741",
 CellID->357040045],
Cell[CellGroupData[{
Cell[532360, 14723, 359, 9, 31, "Input",ExpressionUUID->"63153075-1a0d-4574-92fa-49c385228b44",
 CellID->512720659],
Cell[532722, 14734, 768, 21, 158, "Output",ExpressionUUID->"83a617b5-94bb-4e4b-820a-af6b108c347e",
 CellID->27116491]
}, Open  ]],
Cell[CellGroupData[{
Cell[533527, 14760, 505, 14, 31, "Input",ExpressionUUID->"915fed50-4e0f-45bf-9540-ec20344bdd81",
 CellID->533314838],
Cell[534035, 14776, 636, 18, 83, "Output",ExpressionUUID->"800deccb-81b7-4564-a911-d639d0c87aea",
 CellID->624665252]
}, Open  ]],
Cell[CellGroupData[{
Cell[534708, 14799, 521, 14, 31, "Input",ExpressionUUID->"51a3aa7c-c70d-4088-9f3a-c6a038469d35",
 CellID->1241188753],
Cell[535232, 14815, 1114, 18, 53, "Message",ExpressionUUID->"475ab783-a52d-4f52-899f-3e3f5946335d",
 CellID->1996570346],
Cell[536349, 14835, 644, 18, 45, "Output",ExpressionUUID->"be174d29-7c4b-4db5-83b4-6b29c5ab3d1c",
 CellID->1925820847]
}, Open  ]],
Cell[537008, 14856, 471, 7, 134, "Text",ExpressionUUID->"253b21af-6090-4fa8-8b69-84df7e9fae69",
 CellID->775008909],
Cell[537482, 14865, 189, 2, 31, "SubitemNumbered",ExpressionUUID->"01c06b01-90db-4db3-a0c3-6a28a37bceb3",
 CellID->1051226894],
Cell[537674, 14869, 474, 7, 134, "Text",ExpressionUUID->"6c9dc7a9-c180-4b87-a8db-77d5d82a4ae0",
 CellID->622443589],
Cell[538151, 14878, 181, 2, 45, "Text",ExpressionUUID->"5ab41813-79d4-4add-9d8a-a7091b15b36d",
 CellID->1631383923],
Cell[CellGroupData[{
Cell[538357, 14884, 619, 16, 54, "Input",ExpressionUUID->"b569eb2b-4b77-452e-bc3b-fe7ec690b3aa",
 CellID->1811920923],
Cell[538979, 14902, 1020, 28, 68, "Output",ExpressionUUID->"98a34646-c948-4bc3-8861-ab8ad777ff1f",
 CellID->996758047]
}, Open  ]],
Cell[540014, 14933, 157, 2, 45, "Text",ExpressionUUID->"84af90a1-6739-4de3-95b2-2862c26e6ba0",
 CellID->2140049329],
Cell[CellGroupData[{
Cell[540196, 14939, 403, 10, 31, "Input",ExpressionUUID->"73f96994-778d-40bc-93cf-296d8ed55fe2",
 CellID->545304236],
Cell[540602, 14951, 302, 7, 45, "Output",ExpressionUUID->"a18fb88f-db11-47cd-af8a-d1e980547a9b",
 CellID->309513390]
}, Open  ]],
Cell[540919, 14961, 173, 2, 45, "Text",ExpressionUUID->"4ad81a40-2888-4469-9517-48cbd5f81fec",
 CellID->786152696],
Cell[CellGroupData[{
Cell[541117, 14967, 352, 8, 31, "Input",ExpressionUUID->"ca9742e3-23b7-4a0d-9eda-9b17e17ec1cc",
 CellID->1663498762],
Cell[541472, 14977, 1129, 29, 68, "Output",ExpressionUUID->"a25e152e-66d8-4960-8b0e-251b3e362424",
 CellID->1122142296]
}, Open  ]],
Cell[542616, 15009, 205, 2, 45, "Text",ExpressionUUID->"e6b44ac8-9b9f-498a-b12f-61cb1af2ed0f",
 CellID->164272004],
Cell[542824, 15013, 673, 17, 78, "Input",ExpressionUUID->"077116c9-31ab-4331-8959-fbad1c631f20",
 CellID->128860524],
Cell[543500, 15032, 272, 5, 31, "SubitemNumbered",ExpressionUUID->"689e2180-1cda-4cd2-9273-2d3102633d68",
 CellID->133437914],
Cell[543775, 15039, 348, 6, 104, "Text",ExpressionUUID->"73f320a9-11f7-4be7-84c4-9111ff7077ab",
 CellID->1953349143],
Cell[544126, 15047, 283, 5, 45, "Text",ExpressionUUID->"01f01012-aaf4-48ad-b3a9-7a8259f74959",
 CellID->278113320],
Cell[CellGroupData[{
Cell[544434, 15056, 258, 5, 31, "Input",ExpressionUUID->"70ccdd42-1786-43db-b022-fc97f237c31b",
 CellID->2074367410],
Cell[544695, 15063, 302, 7, 45, "Output",ExpressionUUID->"a5486d37-173a-4bd9-8cd8-4ceec5932c9d",
 CellID->540502706]
}, Open  ]],
Cell[545012, 15073, 288, 5, 75, "Text",ExpressionUUID->"8c4f11ae-cd2c-4e90-aa03-77e3d4bd5eaf",
 CellID->373152932],
Cell[CellGroupData[{
Cell[545325, 15082, 472, 13, 31, "Input",ExpressionUUID->"adc12fd0-09af-4aae-86b4-7313ccdd3f6c",
 CellID->884508409],
Cell[545800, 15097, 304, 7, 45, "Output",ExpressionUUID->"75772bb4-652a-4323-8729-89e77c24f20a",
 CellID->548904147]
}, Open  ]],
Cell[546119, 15107, 169, 2, 45, "Text",ExpressionUUID->"8afe1922-4cc5-40cd-b667-fd308f60b2d9",
 CellID->856827464],
Cell[CellGroupData[{
Cell[546313, 15113, 316, 7, 31, "Input",ExpressionUUID->"2f107cf4-a85e-4950-a484-2c1a8ffed86f",
 CellID->933894253],
Cell[546632, 15122, 781, 22, 45, "Output",ExpressionUUID->"751258c2-d0ea-4a1e-97bf-03b235cd96d2",
 CellID->999898262]
}, Open  ]],
Cell[547428, 15147, 191, 2, 45, "Text",ExpressionUUID->"61b78a48-e227-4ebf-867b-0011b7087ecf",
 CellID->1230551659],
Cell[547622, 15151, 1038, 30, 125, "Input",ExpressionUUID->"58fec46a-6513-4488-98d5-83e805ff7cca",
 CellID->903583270],
Cell[548663, 15183, 166, 2, 45, "Text",ExpressionUUID->"64ad96c3-08b0-46df-9919-c2a33aa316d2",
 CellID->1882085439],
Cell[CellGroupData[{
Cell[548854, 15189, 270, 5, 31, "Input",ExpressionUUID->"80a476b6-eaf5-4d20-8596-fc644893d979",
 CellID->1868126435],
Cell[549127, 15196, 781, 22, 45, "Output",ExpressionUUID->"4a8815e8-ea04-4817-bc34-06a5f9bfa09d",
 CellID->254254523]
}, Open  ]],
Cell[549923, 15221, 664, 10, 193, "Text",ExpressionUUID->"64d4f396-7920-4ef8-a2aa-758a8679fe76",
 CellID->1910794178],
Cell[550590, 15233, 206, 2, 31, "SubitemNumbered",ExpressionUUID->"51e59bb0-07e1-4bd9-a031-c0b2cfa40dc1",
 CellID->1757197477],
Cell[550799, 15237, 401, 7, 104, "Text",ExpressionUUID->"90a67145-cf33-4aa2-8114-414a8f853975",
 CellID->1022882395],
Cell[551203, 15246, 2050, 57, 312, "Input",ExpressionUUID->"b96d70c9-db71-4043-8366-7a596a239f04",
 CellID->1514683357],
Cell[553256, 15305, 843, 13, 252, "Text",ExpressionUUID->"11b51512-a544-4a75-a3d8-5b22e719c1b8",
 CellID->101623283],
Cell[554102, 15320, 622, 10, 193, "Text",ExpressionUUID->"28579338-a2cd-4d35-839a-c90533768e05",
 CellID->768088879],
Cell[554727, 15332, 691, 10, 193, "Text",ExpressionUUID->"025184fb-1457-4f94-a7b1-fb07a562f664",
 CellID->2090564683],
Cell[555421, 15344, 293, 6, 75, "Text",ExpressionUUID->"2141306a-de6a-4113-8b81-47eb832fa56a",
 CellID->393620541],
Cell[CellGroupData[{
Cell[555739, 15354, 574, 15, 31, "Input",ExpressionUUID->"12c71759-b22e-409c-8eba-5c1a79abbf64",
 CellID->1499526121],
Cell[556316, 15371, 318, 9, 45, "Output",ExpressionUUID->"c2cd2490-c364-4d5e-8729-693eec34a6be",
 CellID->1572127388]
}, Open  ]],
Cell[CellGroupData[{
Cell[556671, 15385, 571, 15, 31, "Input",ExpressionUUID->"a2918b91-48d2-4c30-9d5d-d0d296a9692f",
 CellID->637401739],
Cell[557245, 15402, 285, 4, 45, "Output",ExpressionUUID->"e2a7bfb9-aa29-4a40-922b-221e97b93b8a",
 CellID->603668759]
}, Open  ]],
Cell[CellGroupData[{
Cell[557567, 15411, 581, 15, 31, "Input",ExpressionUUID->"fd87f2a9-512e-45c5-93e7-1bbd558936f7",
 CellID->597282192],
Cell[558151, 15428, 271, 4, 45, "Output",ExpressionUUID->"171eab9a-2660-4c0d-9402-2a9b46a6634f",
 CellID->307671838]
}, Open  ]],
Cell[558437, 15435, 783, 12, 252, "Text",ExpressionUUID->"c7c41e28-cd1a-4516-9daf-b043661e9df3",
 CellID->2047442937],
Cell[559223, 15449, 871, 14, 252, "Text",ExpressionUUID->"f7f1e22c-82ef-4051-bc11-22544eca1954",
 CellID->1568832143],
Cell[560097, 15465, 651, 17, 78, "Input",ExpressionUUID->"77039199-1065-4bdd-9d09-3b77e727a695",
 CellID->155445210],
Cell[560751, 15484, 434, 7, 134, "Text",ExpressionUUID->"36d1f98a-10b9-44cd-a567-81e27968aa01",
 CellID->2053546015],
Cell[561188, 15493, 426, 7, 104, "Text",ExpressionUUID->"7930714b-749f-43b1-b524-84c478f67ada",
 CellID->666405011],
Cell[561617, 15502, 231, 4, 31, "SubitemNumbered",ExpressionUUID->"e52f217b-25d7-4815-8e5c-ebb16bf810cf",
 CellTags->"5.3.2.4.5",
 CellID->105311872],
Cell[561851, 15508, 364, 6, 104, "Text",ExpressionUUID->"e451fe35-cb98-4675-9d8f-241d0c32cac7",
 CellID->450107576],
Cell[CellGroupData[{
Cell[562240, 15518, 619, 16, 54, "Input",ExpressionUUID->"dc0fc71e-a947-48e4-a72b-a9f554ca1a87",
 CellID->240827355],
Cell[562862, 15536, 989, 28, 68, "Output",ExpressionUUID->"7f3c51b3-3925-4ce0-9661-718aabd3fbde",
 CellID->460207041]
}, Open  ]],
Cell[563866, 15567, 163, 2, 45, "Text",ExpressionUUID->"8ca1dcd5-57dd-43e4-ac48-f12d7f79a3bc",
 CellID->1611125240],
Cell[CellGroupData[{
Cell[564054, 15573, 444, 11, 31, "Input",ExpressionUUID->"2d651763-1cd0-4d84-baf3-02125ff4947b",
 CellID->1054903810],
Cell[564501, 15586, 303, 7, 45, "Output",ExpressionUUID->"0cf391ce-2a9b-47a6-93b5-1d53d124aff2",
 CellID->1460255832]
}, Open  ]],
Cell[564819, 15596, 158, 2, 45, "Text",ExpressionUUID->"cf7057a0-e3e4-47d9-9585-9f80b60c59e1",
 CellID->1076650508],
Cell[CellGroupData[{
Cell[565002, 15602, 326, 7, 31, "Input",ExpressionUUID->"294fc98b-0c7e-4d31-b5dc-70e3a5453b1e",
 CellID->913832270],
Cell[565331, 15611, 992, 28, 68, "Output",ExpressionUUID->"302703c3-588b-47da-a42f-a485b57ede07",
 CellID->1030465192]
}, Open  ]],
Cell[566338, 15642, 161, 2, 45, "Text",ExpressionUUID->"e7c0768c-6e3e-4595-9b73-d19ab6f14ff4",
 CellID->1720352536],
Cell[566502, 15646, 872, 24, 101, "Input",ExpressionUUID->"6c3657f2-18b7-4e1b-a6ee-3b178d60db77",
 CellID->884606015],
Cell[567377, 15672, 315, 5, 75, "Text",ExpressionUUID->"5d53e73c-f70f-48f4-a06d-ddf0590106be",
 CellID->193181887],
Cell[567695, 15679, 759, 11, 252, "Text",ExpressionUUID->"51c3d025-a28d-446d-a731-40015c3d21dd",
 CellID->269086317],
Cell[568457, 15692, 171, 2, 31, "SubitemNumbered",ExpressionUUID->"d778bc65-32ae-431b-a628-eeafc3882a5f",
 CellID->47980337],
Cell[568631, 15696, 167, 2, 45, "Text",ExpressionUUID->"b0b85202-acdf-448f-a4eb-a2c2dd5c607d",
 CellID->1099156334],
Cell[CellGroupData[{
Cell[568823, 15702, 404, 10, 31, "Input",ExpressionUUID->"4853f0a5-166d-4a91-916b-08354b1e2efa",
 CellID->2142998142],
Cell[569230, 15714, 796, 25, 45, "Output",ExpressionUUID->"f98b2eb5-cc39-42ac-9e79-9cdc50a9bdc6",
 CellID->376561405]
}, Open  ]],
Cell[570041, 15742, 302, 5, 75, "Text",ExpressionUUID->"95a16997-03e0-4021-812b-058ae8557ab0",
 CellID->233226126],
Cell[CellGroupData[{
Cell[570368, 15751, 376, 9, 31, "Input",ExpressionUUID->"27873949-4ff7-4d92-bb10-aee3c8af712d",
 CellID->172935604],
Cell[570747, 15762, 799, 25, 45, "Output",ExpressionUUID->"f3ee9183-cb33-4f09-ba75-9007bd9539a9",
 CellID->1833760460]
}, Open  ]],
Cell[571561, 15790, 191, 2, 45, "Text",ExpressionUUID->"d9f439df-5c6b-4bcf-b7cb-19d02ab24042",
 CellID->1474233123],
Cell[571755, 15794, 432, 10, 54, "Input",ExpressionUUID->"73170d1a-b320-4865-903d-e6b8013729ef",
 CellID->444126119],
Cell[572190, 15806, 168, 2, 45, "Text",ExpressionUUID->"4f07b440-2adf-476c-93e7-f1c540a73fac",
 CellID->1304561757],
Cell[572361, 15810, 442, 12, 31, "Input",ExpressionUUID->"b5486dd2-d199-4279-aa12-a71a58c269e6",
 CellID->25646797],
Cell[CellGroupData[{
Cell[572828, 15826, 288, 7, 31, "Input",ExpressionUUID->"08134c2f-02d8-4ac5-b7ed-4b8eb135025f",
 CellID->844597387],
Cell[573119, 15835, 251, 5, 45, "Output",ExpressionUUID->"2fb5d17e-f466-4f8e-8847-7aa46170ce03",
 CellID->1492219278]
}, Open  ]],
Cell[CellGroupData[{
Cell[573407, 15845, 285, 7, 31, "Input",ExpressionUUID->"1f9db159-6d08-4afc-8cff-8a469deb7005",
 CellID->542695941],
Cell[573695, 15854, 226, 5, 45, "Output",ExpressionUUID->"d332956d-dd88-4437-bc6c-e51eb396fece",
 CellID->1994230275]
}, Open  ]],
Cell[573936, 15862, 985, 14, 311, "Text",ExpressionUUID->"c21dedd1-fdf9-4905-84b0-7fbb7ca49977",
 CellID->1250953196],
Cell[574924, 15878, 1943, 28, 576, "Text",ExpressionUUID->"5deef237-6f48-4b48-bf0c-e66061b1772b",
 CellID->978551909]
}, Open  ]],
Cell[CellGroupData[{
Cell[576904, 15911, 150, 2, 66, "Subsubsection",ExpressionUUID->"2d4a3842-8811-4afc-8272-32cbfe624844",
 CellID->1612977153],
Cell[577057, 15915, 287, 5, 75, "Text",ExpressionUUID->"2ee8ba67-f5cc-456c-8622-be54e447f0b3",
 CellID->1620934390],
Cell[577347, 15922, 276, 5, 31, "Input",ExpressionUUID->"c913c050-4d39-4a3d-a16a-15cbb810f2a1",
 CellID->27830626],
Cell[577626, 15929, 296, 5, 75, "Text",ExpressionUUID->"2c34ef62-d5b7-4bdc-b06d-fa747d012cfc",
 CellID->1231296416],
Cell[577925, 15936, 158, 2, 38, "ItemNumbered",ExpressionUUID->"07bffe48-08bf-447f-a27a-1684d34f5c02",
 CellID->234608055],
Cell[CellGroupData[{
Cell[578108, 15942, 386, 9, 31, "Input",ExpressionUUID->"67c1eeee-7548-4f98-9276-85cf407b8e68",
 CellID->1364232567],
Cell[578497, 15953, 395, 11, 45, "Output",ExpressionUUID->"0236c627-3757-4ae4-a42b-c4f62fc9fd16",
 CellID->1459665559]
}, Open  ]],
Cell[578907, 15967, 187, 2, 45, "Text",ExpressionUUID->"b6d7762d-d8c8-4fc5-861a-fffd541ee0c1",
 CellID->1893350432],
Cell[CellGroupData[{
Cell[579119, 15973, 393, 9, 31, "Input",ExpressionUUID->"590b00b1-4999-4e37-8a57-dad75a4f3d5d",
 CellID->11141752],
Cell[579515, 15984, 272, 7, 45, "Output",ExpressionUUID->"9520f4a1-41b9-464c-99fe-5f8d7a7a67b8",
 CellID->1556624465]
}, Open  ]],
Cell[579802, 15994, 166, 2, 38, "ItemNumbered",ExpressionUUID->"958ea67a-a8db-4e3c-8b4d-128eb4786899",
 CellID->1541595501],
Cell[579971, 15998, 430, 8, 104, "Text",ExpressionUUID->"8218f369-926f-499c-b3a5-fe4ced4efe0b",
 CellID->886902635],
Cell[CellGroupData[{
Cell[580426, 16010, 459, 13, 31, "Input",ExpressionUUID->"02a3ea99-c714-465e-9f10-bdda6b9c2e7b",
 CellID->1255220888],
Cell[580888, 16025, 393, 11, 45, "Output",ExpressionUUID->"1d16c53d-7c64-4a1b-9641-3e5ccb807b29",
 CellID->1159381374]
}, Open  ]],
Cell[581296, 16039, 242, 4, 45, "Text",ExpressionUUID->"87ab5cf3-1be3-4d8e-9879-fd25be41ac55",
 CellID->1603623587],
Cell[CellGroupData[{
Cell[581563, 16047, 503, 14, 31, "Input",ExpressionUUID->"68fa2bae-e27d-4cb6-b4a2-d8b60eb31f92",
 CellID->289244352],
Cell[582069, 16063, 395, 11, 45, "Output",ExpressionUUID->"fe28e70c-8a26-4166-8057-14484144fd85",
 CellID->2129452799]
}, Open  ]],
Cell[582479, 16077, 445, 7, 134, "Text",ExpressionUUID->"39fa1bc6-74de-4d1d-b9b9-289262009cc9",
 CellID->1451308673],
Cell[582927, 16086, 175, 2, 38, "ItemNumbered",ExpressionUUID->"1daca758-ddb1-48fe-8e05-97a9985d0e6f",
 CellID->1002039750],
Cell[583105, 16090, 203, 4, 45, "Text",ExpressionUUID->"b1108345-4042-497c-bfa7-214278801ed4",
 CellID->715318476],
Cell[CellGroupData[{
Cell[583333, 16098, 369, 8, 31, "Input",ExpressionUUID->"1aac0eb2-9268-499a-91ec-2a0f8bd469b1",
 CellID->324228254],
Cell[583705, 16108, 607, 15, 45, "Output",ExpressionUUID->"1d092204-f3ff-4d23-804a-8835ac65a303",
 CellID->1751846725]
}, Open  ]],
Cell[584327, 16126, 161, 2, 45, "Text",ExpressionUUID->"e4e5f58c-c24d-442b-af5f-c83dc0f0ec9c",
 CellID->1287106705],
Cell[584491, 16130, 592, 14, 78, "Input",ExpressionUUID->"b480b66c-8183-42ed-9960-3c0fb38b67dd",
 CellID->171667202],
Cell[585086, 16146, 184, 2, 45, "Text",ExpressionUUID->"8d317adf-da4e-4559-9e2b-afa3f2797bf0",
 CellID->589212919],
Cell[CellGroupData[{
Cell[585295, 16152, 429, 11, 31, "Input",ExpressionUUID->"f16219a1-bd0c-49a5-9d2b-5ce89ae8acff",
 CellID->237594523],
Cell[585727, 16165, 226, 5, 45, "Output",ExpressionUUID->"b366c7ac-e4c8-4a9b-bf0f-38bb4d0fc981",
 CellID->744706687]
}, Open  ]],
Cell[CellGroupData[{
Cell[585990, 16175, 471, 13, 31, "Input",ExpressionUUID->"58a39bfb-bb50-4fcb-b38b-dfbfdc36baca",
 CellID->909255773],
Cell[586464, 16190, 226, 5, 45, "Output",ExpressionUUID->"e0de7f0c-e36d-406a-9b5f-582c6b9f1fb3",
 CellID->597015085]
}, Open  ]],
Cell[586705, 16198, 171, 2, 38, "ItemNumbered",ExpressionUUID->"0f954f94-cb4e-4c10-a4cd-bc36239e840e",
 CellID->988934811],
Cell[586879, 16202, 299, 5, 75, "Text",ExpressionUUID->"470b7640-e376-41b0-9cce-fc18dc74be8b",
 CellID->1651424344],
Cell[CellGroupData[{
Cell[587203, 16211, 577, 16, 31, "Input",ExpressionUUID->"3975f85d-e24f-4437-8819-50b97a1275ac",
 CellID->1135678231],
Cell[587783, 16229, 264, 7, 45, "Output",ExpressionUUID->"15107e2c-7f0a-4db9-91b4-e867316f9a03",
 CellID->2088033096]
}, Open  ]],
Cell[588062, 16239, 168, 2, 45, "Text",ExpressionUUID->"a6c6ec00-d20c-4dcf-b3cf-92dd40c3246e",
 CellID->1541968845],
Cell[588233, 16243, 728, 19, 78, "Input",ExpressionUUID->"5ab9293f-56b1-48e5-af3b-b3b6ffe508b1",
 CellID->551844768],
Cell[588964, 16264, 164, 2, 45, "Text",ExpressionUUID->"0376fd44-82b1-4121-a0b9-6d781eefc2a4",
 CellID->1704378892],
Cell[CellGroupData[{
Cell[589153, 16270, 440, 11, 31, "Input",ExpressionUUID->"e386b1a6-6657-4ddb-938a-5b897ad10eb9",
 CellID->1958214765],
Cell[589596, 16283, 263, 7, 45, "Output",ExpressionUUID->"570ee06f-1024-4d41-b736-076ab9d86511",
 CellID->714116788]
}, Open  ]],
Cell[589874, 16293, 191, 2, 45, "Text",ExpressionUUID->"2585bf6f-a7a3-4732-871d-130e356f766e",
 CellID->2022236480],
Cell[590068, 16297, 685, 18, 78, "Input",ExpressionUUID->"2e72527f-31c3-433c-9073-22b37855b71f",
 CellID->1652321938],
Cell[590756, 16317, 164, 2, 45, "Text",ExpressionUUID->"a285e52b-f202-441b-95a1-34e7474d2517",
 CellID->1521811760],
Cell[CellGroupData[{
Cell[590945, 16323, 443, 11, 31, "Input",ExpressionUUID->"30423166-c961-4fc7-9c16-20788984618c",
 CellID->1091994163],
Cell[591391, 16336, 266, 7, 45, "Output",ExpressionUUID->"b21c7175-d707-43fa-b125-6e4dfb97afb4",
 CellID->1477310833]
}, Open  ]],
Cell[591672, 16346, 295, 5, 75, "Text",ExpressionUUID->"8dfa36ff-70f1-45d5-82ae-c1d27870621d",
 CellID->2104727264],
Cell[CellGroupData[{
Cell[591992, 16355, 383, 10, 31, "Input",ExpressionUUID->"98624ede-256d-44e3-b99e-f0ce5f1aa9e7",
 CellID->960764338],
Cell[592378, 16367, 228, 5, 45, "Output",ExpressionUUID->"ee7038e6-df2e-4a9c-b682-1efc9c782c1f",
 CellID->1818205329]
}, Open  ]],
Cell[CellGroupData[{
Cell[592643, 16377, 389, 10, 31, "Input",ExpressionUUID->"f118036c-b124-4a1f-99d9-ebf0bc356727",
 CellID->2032151340],
Cell[593035, 16389, 227, 5, 45, "Output",ExpressionUUID->"7faaeb5a-167a-40bd-8bb1-29662e9ad5d4",
 CellID->1936898139]
}, Open  ]],
Cell[593277, 16397, 705, 10, 193, "Text",ExpressionUUID->"9dc73a60-cef6-4879-a3dd-2779c340d2fd",
 CellID->1889900947],
Cell[593985, 16409, 203, 3, 38, "ItemNumbered",ExpressionUUID->"1ba9a3e7-0351-4fca-8a58-c2e2d1676d30",
 CellID->2093009320],
Cell[594191, 16414, 183, 2, 45, "Text",ExpressionUUID->"7e566796-94a0-4ee3-b6ff-b7d7bc125044",
 CellID->1425503380],
Cell[CellGroupData[{
Cell[594399, 16420, 223, 4, 31, "Input",ExpressionUUID->"ccf3100a-8ce2-416c-bc61-efed66e05c7a",
 CellID->1279486653],
Cell[594625, 16426, 177, 3, 45, "Output",ExpressionUUID->"5505a5a0-37b7-4268-bf57-cbac2ac5be39",
 CellID->2117263635]
}, Open  ]],
Cell[594817, 16432, 204, 4, 45, "Text",ExpressionUUID->"e65c40c2-e149-4112-b894-c956441d55dc",
 CellID->1045882655],
Cell[CellGroupData[{
Cell[595046, 16440, 264, 5, 31, "Input",ExpressionUUID->"181b167c-6674-491b-a21b-2bd0385c2ad4",
 CellID->206163218],
Cell[595313, 16447, 434, 13, 45, "Output",ExpressionUUID->"f00b5297-725a-4638-9ef4-02aef0ba2048",
 CellID->1764365863]
}, Open  ]],
Cell[595762, 16463, 526, 8, 163, "Text",ExpressionUUID->"981a8028-1a41-44ae-ba39-c163db27b7ac",
 CellID->1242861665],
Cell[CellGroupData[{
Cell[596313, 16475, 346, 8, 31, "Input",ExpressionUUID->"4f71f0d1-dad3-4e18-a862-93e19b6f9aa5",
 CellID->1904336114],
Cell[596662, 16485, 179, 3, 45, "Output",ExpressionUUID->"3697fd57-afaa-4702-bcc5-ab25983a9da8",
 CellID->1152163804]
}, Open  ]],
Cell[596856, 16491, 161, 2, 45, "Text",ExpressionUUID->"4dec6406-6d89-49da-be5f-a5e14ca12c7a",
 CellID->557008829],
Cell[597020, 16495, 541, 14, 78, "Input",ExpressionUUID->"03491cc6-f4af-4ff6-93a0-59692a0f5441",
 CellID->736318698],
Cell[597564, 16511, 308, 5, 75, "Text",ExpressionUUID->"eff523bd-93ce-4f48-af63-52972c66e5ae",
 CellID->818900855],
Cell[CellGroupData[{
Cell[597897, 16520, 277, 5, 31, "Input",ExpressionUUID->"19affacb-5d52-4037-8a4a-d8a6782e3474",
 CellID->833359347],
Cell[598177, 16527, 172, 3, 45, "Output",ExpressionUUID->"bfc4c7b7-c6e0-4c39-8bf6-88161fbdb2b6",
 CellID->702753031]
}, Open  ]],
Cell[598364, 16533, 240, 5, 75, "Text",ExpressionUUID->"ba86f3ef-c14b-4b64-9246-1f7686c3d197",
 CellID->10133517],
Cell[598607, 16540, 488, 12, 54, "Input",ExpressionUUID->"a36ae8e9-4c21-47e0-adff-f4d4e48a3a35",
 CellID->885388553],
Cell[599098, 16554, 310, 5, 75, "Text",ExpressionUUID->"34d0ef18-1cf2-433b-8d74-6f9d15468830",
 CellID->1864042513],
Cell[599411, 16561, 184, 2, 45, "Text",ExpressionUUID->"8ff3b3ea-cdf0-489c-9fe9-50ec2fcc5488",
 CellID->1991681079],
Cell[CellGroupData[{
Cell[599620, 16567, 246, 4, 31, "Input",ExpressionUUID->"a3d8b124-2222-4ab0-8a12-b1383e98355a",
 CellID->1757188690],
Cell[599869, 16573, 177, 3, 45, "Output",ExpressionUUID->"71b3bf4f-a338-48c1-b880-523a8d8ea5ad",
 CellID->1759564434]
}, Open  ]],
Cell[600061, 16579, 178, 2, 45, "Text",ExpressionUUID->"59ceedc3-12b8-4d1d-b52e-5e916af1178f",
 CellID->2139401],
Cell[CellGroupData[{
Cell[600264, 16585, 281, 6, 31, "Input",ExpressionUUID->"b50ff608-d266-4ca1-813c-6426da056c75",
 CellID->162116285],
Cell[600548, 16593, 1094, 35, 68, "Output",ExpressionUUID->"443065b0-e139-4781-985b-90ad1c143414",
 CellID->626465930]
}, Open  ]],
Cell[601657, 16631, 170, 2, 45, "Text",ExpressionUUID->"36414e47-aed8-4d02-afbd-c7f149fa8b5a",
 CellID->2048047916],
Cell[CellGroupData[{
Cell[601852, 16637, 272, 6, 31, "Input",ExpressionUUID->"d8ebd604-2ebd-4b1e-9f82-619b5c0f4317",
 CellID->824804773],
Cell[602127, 16645, 298, 8, 68, "Output",ExpressionUUID->"6c89cae6-430d-4610-8920-813573993adc",
 CellID->1815178767]
}, Open  ]],
Cell[CellGroupData[{
Cell[602462, 16658, 276, 6, 31, "Input",ExpressionUUID->"6bb731fb-bd69-41e5-91c7-03d1c5541149",
 CellID->205341783],
Cell[602741, 16666, 298, 8, 68, "Output",ExpressionUUID->"b2aba753-e8b2-4148-be68-08d2c1d95e5f",
 CellID->1408656079]
}, Open  ]],
Cell[603054, 16677, 312, 5, 75, "Text",ExpressionUUID->"55a50908-eb00-4eae-b65d-ed7854172dc7",
 CellID->1422995225]
}, Open  ]],
Cell[CellGroupData[{
Cell[603403, 16687, 171, 2, 66, "Subsubsection",ExpressionUUID->"e31f5d04-10f9-4b54-b65b-928864308b53",
 CellID->933698357],
Cell[603577, 16691, 468, 7, 134, "Text",ExpressionUUID->"5d562cf0-bbed-4b75-8099-2dda937b347b",
 CellID->1643296556],
Cell[604048, 16700, 279, 5, 31, "Input",ExpressionUUID->"087d3e27-dd12-47f6-a613-5d3b6dc0a501",
 CellID->426812094],
Cell[604330, 16707, 158, 2, 38, "ItemNumbered",ExpressionUUID->"5c254dc8-6528-445b-bbd1-d87a982e8706",
 CellID->256300953],
Cell[CellGroupData[{
Cell[604513, 16713, 358, 9, 31, "Input",ExpressionUUID->"2dc974b8-d403-4b85-b50c-2e8cf94806a9",
 CellID->980553077],
Cell[604874, 16724, 525, 17, 45, "Output",ExpressionUUID->"a3a2776e-c960-471a-ac09-e5ce514106e6",
 CellID->845742992]
}, Open  ]],
Cell[CellGroupData[{
Cell[605436, 16746, 417, 11, 31, "Input",ExpressionUUID->"750bf590-c0a3-4648-a557-f0477ccd6675",
 CellID->1085045194],
Cell[605856, 16759, 1067, 34, 68, "Output",ExpressionUUID->"fc00909b-00e8-4c2b-bf0f-aed1d1aacd8c",
 CellID->1185085913]
}, Open  ]],
Cell[606938, 16796, 362, 6, 104, "Text",ExpressionUUID->"f1d3ccac-cea1-422b-857a-dd90e6567af0",
 CellID->1975597513],
Cell[CellGroupData[{
Cell[607325, 16806, 369, 9, 31, "Input",ExpressionUUID->"4cb1f428-3d55-4577-bdef-c9111331b05c",
 CellID->726002684],
Cell[607697, 16817, 681, 21, 45, "Output",ExpressionUUID->"aadd6f4e-e2b1-4b8f-afac-37048ee000d7",
 CellID->508096546]
}, Open  ]],
Cell[608393, 16841, 189, 2, 45, "Text",ExpressionUUID->"93fd3a9c-8389-4a6d-9f0d-4fae180a7859",
 CellID->1183668150],
Cell[CellGroupData[{
Cell[608607, 16847, 403, 10, 31, "Input",ExpressionUUID->"9fd573b0-8961-4465-815f-a508c929a0a9",
 CellID->324452909],
Cell[609013, 16859, 1013, 31, 109, "Output",ExpressionUUID->"d70b3e10-2568-463e-b1c5-9da2ddb4c568",
 CellID->148549208]
}, Open  ]],
Cell[610041, 16893, 166, 2, 38, "ItemNumbered",ExpressionUUID->"85b22c29-21bd-4988-9240-8ad8bc81f5d7",
 CellID->1290541042],
Cell[610210, 16897, 204, 4, 45, "Text",ExpressionUUID->"cc1946ae-3a2d-47c5-9dcc-c23f3c08692b",
 CellID->538458194],
Cell[CellGroupData[{
Cell[610439, 16905, 493, 13, 31, "Input",ExpressionUUID->"1f597e68-440b-4717-a37c-9c2b1bd755c0",
 CellID->1817466753],
Cell[610935, 16920, 1349, 21, 115, "Output",ExpressionUUID->"6f6e7333-aebb-457c-b008-a4285fd82147",
 CellID->1635327131]
}, Open  ]],
Cell[612299, 16944, 165, 2, 38, "ItemNumbered",ExpressionUUID->"b1020ac3-1e42-435d-8e0e-7442191f708e",
 CellID->1447376411],
Cell[612467, 16948, 251, 5, 75, "Text",ExpressionUUID->"e142353f-5296-4f7a-a83b-d6df4fbab8bb",
 CellID->1508070108],
Cell[CellGroupData[{
Cell[612743, 16957, 499, 14, 31, "Input",ExpressionUUID->"0a87bd15-0183-4860-9711-c233990f3497",
 CellID->797029610],
Cell[613245, 16973, 3045, 70, 162, "Output",ExpressionUUID->"6ac30ad5-4a99-430b-ab0c-123330d7b623",
 CellID->20065557]
}, Open  ]],
Cell[616305, 17046, 194, 2, 38, "ItemNumbered",ExpressionUUID->"ef5e5411-a894-4458-b0ae-0e83ef8b3610",
 CellID->1761930339],
Cell[616502, 17050, 326, 6, 75, "Text",ExpressionUUID->"63be41d4-3367-45de-8ae1-224748439b97",
 CellID->1111199090],
Cell[CellGroupData[{
Cell[616853, 17060, 298, 6, 31, "Input",ExpressionUUID->"081e6cac-0e61-4c1c-ace5-cb0f0725e4ec",
 CellID->906834508],
Cell[617154, 17068, 267, 5, 45, "Output",ExpressionUUID->"02648a0c-d81c-4acd-87e0-f3939310571e",
 CellID->1429722637]
}, Open  ]],
Cell[617436, 17076, 164, 2, 45, "Text",ExpressionUUID->"7519e54e-6709-405e-9711-aadda286f7b7",
 CellID->1153833776],
Cell[CellGroupData[{
Cell[617625, 17082, 364, 9, 31, "Input",ExpressionUUID->"57d6d86d-2d71-4460-941f-2cef6bff2934",
 CellID->1674860150],
Cell[617992, 17093, 313, 8, 64, "Output",ExpressionUUID->"99684db5-71eb-4e49-96ca-f7f3256f603c",
 CellID->166020319]
}, Open  ]],
Cell[618320, 17104, 161, 2, 45, "Text",ExpressionUUID->"7f8f87cf-4b31-4fa5-ab47-726bf94f6ba9",
 CellID->722243980],
Cell[CellGroupData[{
Cell[618506, 17110, 355, 9, 31, "Input",ExpressionUUID->"7f6a56b5-8eac-490a-a446-fb10996ddcdd",
 CellID->1350589395],
Cell[618864, 17121, 744, 24, 149, "Output",ExpressionUUID->"09db8072-170d-4c47-8265-a72512cb2b96",
 CellID->1453136321]
}, Open  ]],
Cell[619623, 17148, 233, 5, 75, "Text",ExpressionUUID->"6d385241-e592-4514-ad10-4d216549a838",
 CellID->1678113363],
Cell[CellGroupData[{
Cell[619881, 17157, 542, 14, 54, "Input",ExpressionUUID->"68392db2-6ae7-4c66-9ad4-0b5432c999f3",
 CellID->48340347],
Cell[620426, 17173, 987, 31, 132, "Output",ExpressionUUID->"0a8b2152-d55b-4eb9-8650-6c68a84ba518",
 CellID->1354685950]
}, Open  ]],
Cell[621428, 17207, 188, 2, 45, "Text",ExpressionUUID->"f7badae9-301f-415a-b7c3-1e955bc39b79",
 CellID->585136156],
Cell[CellGroupData[{
Cell[621641, 17213, 347, 8, 31, "Input",ExpressionUUID->"81813a0a-0006-4a9b-b40d-90bf797e1cd2",
 CellID->1465320917],
Cell[621991, 17223, 1098, 34, 186, "Output",ExpressionUUID->"88f6d872-fc5c-4431-9d0e-2ef12ff89d2b",
 CellID->1982221820]
}, Open  ]],
Cell[623104, 17260, 217, 4, 38, "ItemNumbered",ExpressionUUID->"ef6fe2ae-1b37-428b-a4cd-9efe26dc5d97",
 CellID->1288312829],
Cell[623324, 17266, 188, 2, 45, "Text",ExpressionUUID->"6aa0a94b-6944-4606-8432-789046ff308c",
 CellID->1743587949],
Cell[623515, 17270, 541, 15, 54, "Input",ExpressionUUID->"10076951-8385-4333-8b7d-818c42c75907",
 CellID->525145107],
Cell[624059, 17287, 357, 6, 104, "Text",ExpressionUUID->"a76362a4-86a4-4735-8689-637bdff48d01",
 CellID->893653996],
Cell[CellGroupData[{
Cell[624441, 17297, 292, 6, 31, "Input",ExpressionUUID->"8b6d8e2c-162b-4398-8c19-3a03fdcc12b0",
 CellID->1154812095],
Cell[624736, 17305, 292, 7, 45, "Output",ExpressionUUID->"c87f626d-5fcb-4649-b3fb-cbeec190de41",
 CellID->783553612]
}, Open  ]],
Cell[CellGroupData[{
Cell[625065, 17317, 292, 6, 31, "Input",ExpressionUUID->"1a6e3f9f-e0e7-45a8-a133-205851849080",
 CellID->30212265],
Cell[625360, 17325, 262, 6, 45, "Output",ExpressionUUID->"82dd061d-9924-4142-a85b-598e7dde0b2a",
 CellID->906047492]
}, Open  ]],
Cell[625637, 17334, 286, 5, 75, "Text",ExpressionUUID->"712f254a-f3c2-424f-a1fa-22bdc8102454",
 CellID->133657167],
Cell[CellGroupData[{
Cell[625948, 17343, 588, 17, 31, "Input",ExpressionUUID->"7f2ef9e8-29e0-40b0-94e0-0bfc00546a12",
 CellID->594991467],
Cell[626539, 17362, 1181, 30, 68, "Output",ExpressionUUID->"df8e33cc-d6ad-4c17-aba5-8bcda8c1f8cc",
 CellID->289230665]
}, Open  ]],
Cell[627735, 17395, 407, 7, 104, "Text",ExpressionUUID->"581abbf4-fb17-4f76-8b4f-a91f44bdeb78",
 CellID->1344293494],
Cell[CellGroupData[{
Cell[628167, 17406, 354, 9, 31, "Input",ExpressionUUID->"d9f9a0a1-ffab-4c39-9875-70726c363e54",
 CellID->1358037745],
Cell[628524, 17417, 767, 19, 68, "Output",ExpressionUUID->"21b39dd9-060a-4b9c-a40b-4d67a18292d5",
 CellID->350185068]
}, Open  ]],
Cell[629306, 17439, 193, 2, 45, "Text",ExpressionUUID->"c8f7572d-bc84-4584-84c6-94f8c9ce6c98",
 CellID->1455245096],
Cell[CellGroupData[{
Cell[629524, 17445, 323, 7, 31, "Input",ExpressionUUID->"d40632f8-fabb-436b-8c98-c0e57f537bc9",
 CellID->287826417],
Cell[629850, 17454, 9892, 201, 84, "Output",ExpressionUUID->"aec917c3-5d96-4a3d-899f-b79b96015032",
 CellID->648628140]
}, Open  ]],
Cell[639757, 17658, 177, 2, 45, "Text",ExpressionUUID->"1dc4eda5-a5c0-4e10-9ccf-32680e913bcb",
 CellID->866156808],
Cell[CellGroupData[{
Cell[639959, 17664, 438, 11, 31, "Input",ExpressionUUID->"23084b43-8d66-446c-bce8-72849636e46f",
 CellID->1523564742],
Cell[640400, 17677, 327778, 5392, 212, 209825, 3457, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"1e9e41fe-b028-45a7-b7b5-4fe08019bd1c",
 CellID->200879086]
}, Open  ]],
Cell[968193, 23072, 452, 7, 134, "Text",ExpressionUUID->"c80c1731-df48-4939-a001-d14cebd3f668",
 CellID->330505318],
Cell[968648, 23081, 972, 27, 125, "Input",ExpressionUUID->"60efae7a-926f-4569-ac9d-63a81fc937f6",
 CellID->1034525545],
Cell[969623, 23110, 291, 5, 75, "Text",ExpressionUUID->"ab010217-221e-4a91-abc6-e7c7c68beb30",
 CellID->1054824341],
Cell[969917, 23117, 165, 2, 45, "Text",ExpressionUUID->"f3a9a109-9ba9-46e1-9f0e-05c433f62d99",
 CellID->1491884689],
Cell[CellGroupData[{
Cell[970107, 23123, 432, 10, 31, "Input",ExpressionUUID->"decd79b2-1773-49d0-a943-37af33051ad9",
 CellID->334396397],
Cell[970542, 23135, 13245, 261, 84, "Output",ExpressionUUID->"a95811a6-7b9b-4640-8a06-4df945d7254c",
 CellID->1972768167]
}, Open  ]],
Cell[CellGroupData[{
Cell[983824, 23401, 438, 11, 31, "Input",ExpressionUUID->"26da7222-4e38-4983-b378-56fd0934598d",
 CellID->443301616],
Cell[984265, 23414, 189090, 3124, 230, "Output",ExpressionUUID->"abab9ebb-05b0-47a0-b86c-87a89044dc88",
 CellID->948426882]
}, Open  ]],
Cell[1173370, 26541, 213, 4, 45, "Text",ExpressionUUID->"dca09970-c48c-42d2-9488-5f34c47fd64b",
 CellID->1586977740],
Cell[CellGroupData[{
Cell[1173608, 26549, 521, 14, 31, "Input",ExpressionUUID->"be2421cb-6d9b-48db-932e-147d69faf2cc",
 CellID->1614995233],
Cell[1174132, 26565, 78367, 1284, 247, "Output",ExpressionUUID->"dc62440e-b5bf-474a-9447-0f43ca3e64f2",
 CellID->1519694840]
}, Open  ]],
Cell[1252514, 27852, 293, 5, 75, "Text",ExpressionUUID->"cd2263f3-404b-4b5e-9620-3531602ee136",
 CellID->1488162109],
Cell[1252810, 27859, 324, 6, 75, "Text",ExpressionUUID->"4f101138-fa9d-4705-82d4-f2172e497e4d",
 CellID->1323555413],
Cell[1253137, 27867, 166, 2, 38, "ItemNumbered",ExpressionUUID->"e3c9ef36-dba0-4f13-959f-bc86a9cb2855",
 CellID->1097224340],
Cell[1253306, 27871, 547, 8, 163, "Text",ExpressionUUID->"0c8cbd17-cde4-4aa7-8690-463d898987a1",
 CellID->607405591],
Cell[CellGroupData[{
Cell[1253878, 27883, 490, 13, 54, "Input",ExpressionUUID->"bf8d1e5d-92f8-4a58-9c5f-ebc63cd5acc4",
 CellID->334794713],
Cell[1254371, 27898, 373, 11, 45, "Output",ExpressionUUID->"ba61615d-72c6-412b-ae33-70bc10cf3279",
 CellID->1320897203]
}, Open  ]],
Cell[1254759, 27912, 412, 7, 104, "Text",ExpressionUUID->"ce1ef16e-5ec4-4af9-bf69-a101b4efff99",
 CellID->1780831782],
Cell[CellGroupData[{
Cell[1255196, 27923, 492, 14, 31, "Input",ExpressionUUID->"07a1372b-8067-414b-b454-60d12463e9d0",
 CellID->1605826599],
Cell[1255691, 27939, 881, 29, 45, "Output",ExpressionUUID->"3761e025-bb06-49b4-9fc2-f107f7b7bcc0",
 CellID->351428122]
}, Open  ]],
Cell[1256587, 27971, 390, 6, 104, "Text",ExpressionUUID->"f5cec7db-fff8-4e8d-9e3e-aedc92f3396e",
 CellID->872417204],
Cell[CellGroupData[{
Cell[1257002, 27981, 491, 14, 31, "Input",ExpressionUUID->"dc475529-2335-4b0a-b24c-acd025d48af0",
 CellID->1518027777],
Cell[1257496, 27997, 927, 29, 45, "Output",ExpressionUUID->"c85660eb-ed77-4999-8e5f-274084ea23e2",
 CellID->2100174544]
}, Open  ]],
Cell[1258438, 28029, 174, 2, 45, "Text",ExpressionUUID->"28ab7ff0-2212-4617-9db7-2b61c1275615",
 CellID->1592338916],
Cell[1258615, 28033, 597, 16, 54, "Input",ExpressionUUID->"564ed7c6-bb02-43a1-b57e-ec8af1d5732e",
 CellID->2115114598],
Cell[1259215, 28051, 408, 7, 104, "Text",ExpressionUUID->"b03a3293-54bf-48c1-a8ad-105c715deee5",
 CellID->1655898574],
Cell[1259626, 28060, 166, 2, 45, "Text",ExpressionUUID->"3bb53b88-4a07-4c27-8284-fd5da5c93bbb",
 CellID->1513397144],
Cell[CellGroupData[{
Cell[1259817, 28066, 378, 9, 31, "Input",ExpressionUUID->"d5f5da74-621a-49a2-8291-eed7c0291763",
 CellID->1941206792],
Cell[1260198, 28077, 925, 29, 45, "Output",ExpressionUUID->"c9ace94f-c7b5-46a3-8858-49fb6098a605",
 CellID->1564934615]
}, Open  ]],
Cell[CellGroupData[{
Cell[1261160, 28111, 376, 9, 31, "Input",ExpressionUUID->"8741b987-3f8e-4544-8a32-ee76766da74b",
 CellID->1816293196],
Cell[1261539, 28122, 923, 29, 45, "Output",ExpressionUUID->"1ffdddd9-c7cd-4f48-b485-43ab735ae696",
 CellID->641379301]
}, Open  ]],
Cell[1262477, 28154, 163, 2, 45, "Text",ExpressionUUID->"7a3d9eb8-aba3-43de-adf7-6ba81b6d0c2e",
 CellID->1441487614],
Cell[CellGroupData[{
Cell[1262665, 28160, 553, 15, 31, "Input",ExpressionUUID->"e3334aca-3bc3-4f33-9d8e-ef9312842ddc",
 CellID->818900362],
Cell[1263221, 28177, 1027, 28, 45, "Output",ExpressionUUID->"18f8351c-edac-4dcf-ba2b-c8843369f81b",
 CellID->610312105]
}, Open  ]],
Cell[CellGroupData[{
Cell[1264285, 28210, 548, 15, 31, "Input",ExpressionUUID->"504e53fb-39df-4ec4-ba07-e2b2bfbb9102",
 CellID->147331908],
Cell[1264836, 28227, 1028, 28, 68, "Output",ExpressionUUID->"b0c1aa61-c051-44f7-a10e-0b9c0fb1d656",
 CellID->274001088]
}, Open  ]],
Cell[1265879, 28258, 264, 5, 75, "Text",ExpressionUUID->"50edddc1-8c51-4986-9cbe-d984f2581619",
 CellID->159787954],
Cell[1266146, 28265, 513, 8, 163, "Text",ExpressionUUID->"5aa5de15-304c-4f5b-8917-140f65faf1f6",
 CellID->998698326],
Cell[1266662, 28275, 770, 21, 78, "Input",ExpressionUUID->"b2dc2b6b-1f54-4019-bf44-46fa20325b3e",
 CellID->324652224],
Cell[1267435, 28298, 246, 5, 75, "Text",ExpressionUUID->"4034fe1e-460c-45c1-9f55-7cb59934bb5d",
 CellID->1922364246],
Cell[CellGroupData[{
Cell[1267706, 28307, 369, 9, 31, "Input",ExpressionUUID->"377921c3-d14c-4bd8-adc7-a3fbb3dfa912",
 CellID->1985016874],
Cell[1268078, 28318, 681, 21, 45, "Output",ExpressionUUID->"73672dbf-53b8-4d98-bf46-0dcbf999be33",
 CellID->118525701]
}, Open  ]],
Cell[CellGroupData[{
Cell[1268796, 28344, 553, 15, 31, "Input",ExpressionUUID->"d58e6ee2-374e-430a-97d9-de95758d96db",
 CellID->1057629623],
Cell[1269352, 28361, 1026, 28, 68, "Output",ExpressionUUID->"90a11445-2982-4ddb-8fac-cf169dc7625f",
 CellID->2078584063]
}, Open  ]],
Cell[1270393, 28392, 217, 2, 38, "ItemNumbered",ExpressionUUID->"461b52ae-6986-4619-a3da-a1e2d9599504",
 CellID->234570794],
Cell[1270613, 28396, 242, 4, 45, "Text",ExpressionUUID->"0ff7e425-6943-4564-80d6-0f75e38772ee",
 CellID->811565782],
Cell[1270858, 28402, 230, 5, 45, "Text",ExpressionUUID->"e74af560-0fe7-4277-80ee-7d766a6070fd",
 CellID->409254758],
Cell[CellGroupData[{
Cell[1271113, 28411, 485, 13, 31, "Input",ExpressionUUID->"f458b762-0a0a-412b-a81e-93566838eaaf",
 CellID->1405284887],
Cell[1271601, 28426, 725, 23, 45, "Output",ExpressionUUID->"597df4f0-672c-43ac-91f6-2443b50622c9",
 CellID->688391986]
}, Open  ]],
Cell[1272341, 28452, 345, 6, 75, "Text",ExpressionUUID->"a3104b41-a2e9-4086-b3fa-b9efd1b0f458",
 CellID->1309702313],
Cell[CellGroupData[{
Cell[1272711, 28462, 310, 7, 31, "Input",ExpressionUUID->"a4bcb9a4-924f-43bb-82c0-d4626d628f64",
 CellID->416494263],
Cell[1273024, 28471, 549, 17, 45, "Output",ExpressionUUID->"ae93ffb7-d2f0-437f-b4fe-bbd0a03b8798",
 CellID->854580734]
}, Open  ]],
Cell[1273588, 28491, 368, 6, 104, "Text",ExpressionUUID->"2dc8e9aa-ab00-47d8-8e0d-4f10e2fbffb5",
 CellID->567765202],
Cell[1273959, 28499, 614, 16, 78, "Input",ExpressionUUID->"b5b30f23-1630-4563-926c-a1911d631a85",
 CellID->833949770],
Cell[1274576, 28517, 164, 2, 45, "Text",ExpressionUUID->"ed1d2bd1-f8ac-47b1-afbf-c957a2515397",
 CellID->1470780404],
Cell[CellGroupData[{
Cell[1274765, 28523, 253, 5, 31, "Input",ExpressionUUID->"55c36423-0d87-4e99-bb33-723b08270a95",
 CellID->999384780],
Cell[1275021, 28530, 187, 4, 45, "Output",ExpressionUUID->"aeea4b30-410a-401c-8b12-d22e3f99cf48",
 CellID->158103633]
}, Open  ]],
Cell[CellGroupData[{
Cell[1275245, 28539, 278, 6, 31, "Input",ExpressionUUID->"d704e380-eb88-43df-8960-99d05dde8cd8",
 CellID->391312123],
Cell[1275526, 28547, 314, 9, 45, "Output",ExpressionUUID->"f20313c1-e6cf-4474-aeef-c7715a62eb92",
 CellID->1950611706]
}, Open  ]],
Cell[CellGroupData[{
Cell[1275877, 28561, 298, 6, 31, "Input",ExpressionUUID->"43b74420-90bf-4bfd-b8af-3c6b04825fad",
 CellID->715988391],
Cell[1276178, 28569, 906, 29, 68, "Output",ExpressionUUID->"37548b00-9f60-46ee-93f7-73438ec61412",
 CellID->1537757465]
}, Open  ]],
Cell[1277099, 28601, 252, 4, 45, "Text",ExpressionUUID->"90dc115b-6ac6-49d1-9081-0e12e1d960a8",
 CellID->1119405014],
Cell[1277354, 28607, 318, 5, 75, "Text",ExpressionUUID->"95395070-c2bc-4a24-bc1b-fb557cbfced1",
 CellID->1834188568],
Cell[1277675, 28614, 933, 23, 101, "Input",ExpressionUUID->"f875f2f5-e404-40db-ac88-c2f8593ff33f",
 CellID->1911446443],
Cell[1278611, 28639, 168, 2, 45, "Text",ExpressionUUID->"b7bcad25-6b87-4ffe-8aa3-614e80a1d95e",
 CellID->1709535772],
Cell[CellGroupData[{
Cell[1278804, 28645, 329, 8, 31, "Input",ExpressionUUID->"0b03758e-1f74-4365-bdee-74864ab231d6",
 CellID->1095542290],
Cell[1279136, 28655, 928, 29, 68, "Output",ExpressionUUID->"793119d6-028b-417a-a517-6a14b3509628",
 CellID->1495079089]
}, Open  ]],
Cell[CellGroupData[{
Cell[1280101, 28689, 329, 8, 31, "Input",ExpressionUUID->"1e0b415a-1737-4305-ae21-9ff2758c7354",
 CellID->1001070949],
Cell[1280433, 28699, 1850, 53, 91, "Output",ExpressionUUID->"8c2463c8-56d5-45f1-b147-012e9dc940b9",
 CellID->1765910930]
}, Open  ]],
Cell[CellGroupData[{
Cell[1282320, 28757, 327, 8, 31, "Input",ExpressionUUID->"798439da-da8d-42f9-9fdc-b638b4efab28",
 CellID->1696601571],
Cell[1282650, 28767, 2090, 53, 115, "Output",ExpressionUUID->"fb3a16f0-5efe-4916-88d2-653e7dda7dce",
 CellID->1842123166]
}, Open  ]],
Cell[CellGroupData[{
Cell[1284777, 28825, 327, 8, 31, "Input",ExpressionUUID->"5a2f3f1c-d9d5-44ab-93ab-4d4e17bd8021",
 CellID->1595422852],
Cell[1285107, 28835, 185, 4, 45, "Output",ExpressionUUID->"4bf2aaab-337b-4fcd-af43-07faa19bd6f2",
 CellID->295066105]
}, Open  ]],
Cell[1285307, 28842, 448, 7, 134, "Text",ExpressionUUID->"1d02de04-8749-4f00-a73a-89912aa4d10f",
 CellID->636285812],
Cell[1285758, 28851, 241, 4, 45, "Text",ExpressionUUID->"307455f7-ae8b-4bac-90a3-55827a000e35",
 CellID->566503762],
Cell[1286002, 28857, 225, 5, 45, "Text",ExpressionUUID->"f2bdabe5-3250-4b90-b9ef-38bb1242b35a",
 CellID->1311486347],
Cell[CellGroupData[{
Cell[1286252, 28866, 359, 9, 31, "Input",ExpressionUUID->"3f381174-9009-4282-a0ff-fa92a529348d",
 CellID->567667992],
Cell[1286614, 28877, 242, 6, 45, "Output",ExpressionUUID->"18e9ddb4-83e6-41f4-9616-5ecb06e4bd3b",
 CellID->1477012221]
}, Open  ]],
Cell[1286871, 28886, 305, 5, 75, "Text",ExpressionUUID->"2a44f5b4-27da-49ed-a007-3987f735b418",
 CellID->1380922674],
Cell[1287179, 28893, 1273, 34, 148, "Input",ExpressionUUID->"2c91fdbf-ffc3-4266-9733-15a0d42fe441",
 CellID->30487468],
Cell[1288455, 28929, 646, 10, 193, "Text",ExpressionUUID->"cf2faf34-c3b8-4cf1-970c-65b768c9936a",
 CellID->1304571200],
Cell[1289104, 28941, 243, 4, 45, "Text",ExpressionUUID->"1d236626-3eb7-4c0b-b603-11e363ae8648",
 CellID->1845730048],
Cell[1289350, 28947, 334, 6, 75, "Text",ExpressionUUID->"50817264-f267-4d74-a2af-a128ffc68b0b",
 CellID->357154540],
Cell[1289687, 28955, 821, 22, 101, "Input",ExpressionUUID->"ca911e98-c04f-48f2-acb5-b50f60f1a47d",
 CellID->1299257861],
Cell[1290511, 28979, 402, 7, 104, "Text",ExpressionUUID->"4170668a-66b1-480b-80d6-852e81e1869d",
 CellID->965293844],
Cell[CellGroupData[{
Cell[1290938, 28990, 299, 6, 31, "Input",ExpressionUUID->"b3c1bd27-2715-49a5-bd3e-298e73b8d142",
 CellID->18258210],
Cell[1291240, 28998, 903, 29, 68, "Output",ExpressionUUID->"828cbbe3-8151-456d-b832-93a627a6b375",
 CellID->1274972368]
}, Open  ]],
Cell[1292158, 29030, 181, 2, 45, "Text",ExpressionUUID->"4d80d886-681b-4cbb-8cb6-070f261382fa",
 CellID->868759210],
Cell[CellGroupData[{
Cell[1292364, 29036, 533, 14, 31, "Input",ExpressionUUID->"aa7502ba-2e82-414c-8944-8d8aef648ec3",
 CellID->1959373682],
Cell[1292900, 29052, 908, 25, 45, "Output",ExpressionUUID->"a54d1a0d-2701-405c-ada9-8b4eb64db5ba",
 CellID->1588672692]
}, Open  ]],
Cell[CellGroupData[{
Cell[1293845, 29082, 486, 13, 31, "Input",ExpressionUUID->"57b506a4-b101-4052-bc20-6b0d993149f2",
 CellID->452845618],
Cell[1294334, 29097, 912, 25, 45, "Output",ExpressionUUID->"b887e525-fc02-429c-8242-298b56b66fb5",
 CellID->646630489]
}, Open  ]],
Cell[1295261, 29125, 396, 6, 104, "Text",ExpressionUUID->"b21977ea-9668-45ed-967c-8b51ac80c40c",
 CellID->1337348573],
Cell[1295660, 29133, 342, 6, 75, "Text",ExpressionUUID->"349a98eb-eea1-43ba-afb3-bd8874ebb4f6",
 CellID->776907362],
Cell[1296005, 29141, 251, 4, 45, "Text",ExpressionUUID->"d50c8f4e-3742-45b8-960d-3738b2346cbc",
 CellID->723793424],
Cell[1296259, 29147, 575, 9, 163, "Text",ExpressionUUID->"d417a574-fe4f-434f-837b-84d57a9efac6",
 CellID->739091491],
Cell[CellGroupData[{
Cell[1296859, 29160, 414, 10, 54, "Input",ExpressionUUID->"3825e476-eb1c-44ac-bd6e-e5fd27370e30",
 CellID->1449709438],
Cell[1297276, 29172, 235, 5, 45, "Output",ExpressionUUID->"c93fcafa-121c-49fa-930f-6376b2d38c70",
 CellID->1427681127]
}, Open  ]],
Cell[1297526, 29180, 181, 2, 45, "Text",ExpressionUUID->"6005b630-660b-4d1c-afc1-50be722767c0",
 CellID->1201913558],
Cell[CellGroupData[{
Cell[1297732, 29186, 279, 6, 31, "Input",ExpressionUUID->"019b6e89-2d96-4c3a-9d5c-801478b024f0",
 CellID->2058584592],
Cell[1298014, 29194, 470, 13, 45, "Output",ExpressionUUID->"29836965-e644-4479-897c-a618dbac5825",
 CellID->254422579]
}, Open  ]],
Cell[1298499, 29210, 247, 5, 75, "Text",ExpressionUUID->"e7572b61-d509-4206-8011-82f867090dbe",
 CellID->440344076],
Cell[CellGroupData[{
Cell[1298771, 29219, 288, 6, 31, "Input",ExpressionUUID->"bd924b1b-8182-44db-9e08-812e28e1c9ed",
 CellID->1672860329],
Cell[1299062, 29227, 611, 17, 45, "Output",ExpressionUUID->"b14bbead-d7dc-47af-a9d8-ad05358f2a45",
 CellID->1429327703]
}, Open  ]],
Cell[1299688, 29247, 279, 5, 75, "Text",ExpressionUUID->"1abb4513-338c-4618-bb75-ff165b646bf7",
 CellID->958628979],
Cell[CellGroupData[{
Cell[1299992, 29256, 382, 9, 31, "Input",ExpressionUUID->"ab6d9a90-db15-4fdb-b5cd-beed5c57c47b",
 CellID->1814792006],
Cell[1300377, 29267, 1850, 53, 91, "Output",ExpressionUUID->"39918a72-1af4-4c74-9219-5b9f84a719e1",
 CellID->696379397]
}, Open  ]],
Cell[1302242, 29323, 448, 7, 134, "Text",ExpressionUUID->"d5300ca4-6752-416c-b0a7-103883fd16ec",
 CellID->262649229],
Cell[1302693, 29332, 685, 18, 78, "Input",ExpressionUUID->"ebb50bef-656b-4234-96aa-5ac565889898",
 CellID->650305432],
Cell[1303381, 29352, 394, 6, 104, "Text",ExpressionUUID->"f2e992ae-ed21-4437-85f1-9734698039bf",
 CellID->1658082855],
Cell[1303778, 29360, 265, 5, 75, "Text",ExpressionUUID->"a84b15bc-61e6-48ce-992f-8ea4733e23df",
 CellID->398915350],
Cell[CellGroupData[{
Cell[1304068, 29369, 516, 14, 31, "Input",ExpressionUUID->"1fe2af1b-5104-42ab-af72-96e9f40f4551",
 CellID->1708016176],
Cell[1304587, 29385, 613, 14, 45, "Output",ExpressionUUID->"c09af326-8b0b-447c-b1cd-66ecd6cd1d33",
 CellID->2132543673]
}, Open  ]],
Cell[CellGroupData[{
Cell[1305237, 29404, 432, 12, 31, "Input",ExpressionUUID->"d09996dc-9720-46cb-b2bc-13af65a7eddb",
 CellID->300315331],
Cell[1305672, 29418, 836, 24, 45, "Output",ExpressionUUID->"aa293c03-1742-4c36-8eb2-bd17c94e012e",
 CellID->911885156]
}, Open  ]],
Cell[1306523, 29445, 417, 7, 104, "Text",ExpressionUUID->"40ef8c36-e418-4c7d-9180-55be65b85fa2",
 CellID->931346848],
Cell[CellGroupData[{
Cell[1306965, 29456, 456, 13, 31, "Input",ExpressionUUID->"5ca7368a-670d-40e7-966b-123c408f5a28",
 CellID->340094059],
Cell[1307424, 29471, 739, 20, 45, "Output",ExpressionUUID->"a83fb507-f01e-4e3c-a9c4-010ba45f8b7f",
 CellID->1083611526]
}, Open  ]],
Cell[CellGroupData[{
Cell[1308200, 29496, 461, 13, 31, "Input",ExpressionUUID->"28a3f95b-edc0-4206-b117-4724b99fc348",
 CellID->722587613],
Cell[1308664, 29511, 595, 14, 45, "Output",ExpressionUUID->"1b3e210d-dbb2-4d14-8d9f-2d5e0c149e31",
 CellID->1330556018]
}, Open  ]],
Cell[1309274, 29528, 308, 5, 75, "Text",ExpressionUUID->"bbdcc8f6-8ca2-4e07-9819-7efc5df94dcd",
 CellID->907778315],
Cell[CellGroupData[{
Cell[1309607, 29537, 329, 8, 31, "Input",ExpressionUUID->"407e6100-0a4c-4197-bb07-08b06b352a35",
 CellID->2001447249],
Cell[1309939, 29547, 174, 3, 45, "Output",ExpressionUUID->"8362628a-fcfb-4385-ac5c-1b1116c824d9",
 CellID->242445592]
}, Open  ]],
Cell[1310128, 29553, 596, 9, 163, "Text",ExpressionUUID->"8c86b6a7-b46a-41bf-bf1c-7f06bdca4a0c",
 CellID->1006586385],
Cell[1310727, 29564, 213, 3, 38, "ItemNumbered",ExpressionUUID->"3f8e0a34-ac9d-4019-8eff-20952d1b5641",
 CellTags->"5.3.4.8",
 CellID->579170669],
Cell[1310943, 29569, 360, 6, 104, "Text",ExpressionUUID->"eacd7b38-58c8-4586-8099-b833481431df",
 CellID->1725545679],
Cell[1311306, 29577, 167, 2, 45, "Text",ExpressionUUID->"ab5e508c-ca77-4cac-9a27-653955dcbd4a",
 CellID->1816324869],
Cell[CellGroupData[{
Cell[1311498, 29583, 648, 19, 54, "Input",ExpressionUUID->"50ab8640-8c73-4dc3-8f37-fa9251e4f56e",
 CellID->1755967696],
Cell[1312149, 29604, 2039, 66, 68, "Output",ExpressionUUID->"cbee5fdf-5ea1-42e4-a728-62da1c4609b2",
 CellID->347845572]
}, Open  ]],
Cell[1314203, 29673, 546, 8, 163, "Text",ExpressionUUID->"d0c81e1f-4ee4-4ff4-9b34-84feac55ac10",
 CellID->790041470],
Cell[CellGroupData[{
Cell[1314774, 29685, 578, 17, 31, "Input",ExpressionUUID->"7f9e9775-e107-422e-88c5-afb011cf86d6",
 CellID->1206181539],
Cell[1315355, 29704, 1000, 33, 45, "Output",ExpressionUUID->"ccac9379-fb3c-4a6b-9f11-c96311ff7985",
 CellID->505650254]
}, Open  ]],
Cell[1316370, 29740, 295, 8, 75, "Text",ExpressionUUID->"c38b75ec-131d-4b7f-991d-a03112b00ec2",
 CellID->871027799],
Cell[CellGroupData[{
Cell[1316690, 29752, 645, 20, 31, "Input",ExpressionUUID->"f4d30d7a-ac32-4f75-95f4-16108a311642",
 CellID->196860661],
Cell[1317338, 29774, 874, 29, 45, "Output",ExpressionUUID->"9bfa5726-7f35-40b4-b16f-d9229f4eb071",
 CellID->978254804]
}, Open  ]],
Cell[1318227, 29806, 219, 4, 45, "Text",ExpressionUUID->"2fd61190-6b06-47c3-8dc2-bd17df82edfd",
 CellID->393689396]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1318495, 29816, 150, 2, 68, "Subsection",ExpressionUUID->"7e6c1de9-75ed-49be-9430-e6a946f9c79c",
 CellID->340562165],
Cell[CellGroupData[{
Cell[1318670, 29822, 159, 2, 66, "Subsubsection",ExpressionUUID->"02562baa-63a3-4c68-94fb-a8f87592beba",
 CellID->784387900],
Cell[1318832, 29826, 260, 5, 75, "Text",ExpressionUUID->"c9c6af04-d75b-4cc8-b753-81e03cd5b31b",
 CellID->1952810014],
Cell[1319095, 29833, 253, 4, 31, "Input",ExpressionUUID->"806006ac-d30d-4129-b9a2-b1cd179ed2e4",
 CellID->1944300563],
Cell[1319351, 29839, 275, 5, 75, "Text",ExpressionUUID->"907c454f-020b-4ce9-8b41-62a48fbe5667",
 CellID->1455891219],
Cell[1319629, 29846, 157, 2, 38, "ItemNumbered",ExpressionUUID->"f6cde26d-d59f-42c3-8f5e-7872571b2244",
 CellID->1555461161],
Cell[CellGroupData[{
Cell[1319811, 29852, 362, 8, 54, "Input",ExpressionUUID->"454b99da-9863-457d-8032-d6087b5d67cf",
 CellID->1418501849],
Cell[1320176, 29862, 315, 8, 45, "Output",ExpressionUUID->"a6d36e0b-a900-4cc1-8f79-7feaa4e2f40c",
 CellID->1692669456]
}, Open  ]],
Cell[1320506, 29873, 156, 2, 45, "Text",ExpressionUUID->"94b2e8cb-1eb6-497c-a24e-ae657c61c7c5",
 CellID->979675183],
Cell[1320665, 29877, 290, 7, 31, "Input",ExpressionUUID->"8661b3a7-7676-445f-9270-42f94e94dd9d",
 CellID->1986592717],
Cell[CellGroupData[{
Cell[1320980, 29888, 255, 5, 31, "Input",ExpressionUUID->"05c63beb-764a-41ac-a373-77566aa009ef",
 CellID->660409639],
Cell[1321238, 29895, 194, 3, 45, "Output",ExpressionUUID->"18b45a9a-51dc-4b53-94d2-3b674b10642c",
 CellID->96735598]
}, Open  ]],
Cell[1321447, 29901, 149, 2, 38, "ItemNumbered",ExpressionUUID->"cc219751-52af-4a4e-b981-b13369896d28",
 CellID->190074807],
Cell[1321599, 29905, 353, 6, 104, "Text",ExpressionUUID->"08902b62-0bce-4ff8-90b4-ca63972a34e0",
 CellID->1279098160],
Cell[CellGroupData[{
Cell[1321977, 29915, 260, 5, 31, "Input",ExpressionUUID->"b22f2e79-9af0-4099-9323-202f913a1150",
 CellID->81293786],
Cell[1322240, 29922, 238, 5, 45, "Output",ExpressionUUID->"64b4a699-a177-402b-a99d-e1ab53ed8a3d",
 CellID->1543009376]
}, Open  ]],
Cell[CellGroupData[{
Cell[1322515, 29932, 261, 5, 31, "Input",ExpressionUUID->"c578b383-d99b-4ea3-98e7-89e62d1691d8",
 CellID->865880744],
Cell[1322779, 29939, 309, 8, 49, "Output",ExpressionUUID->"b4261586-23c2-43d4-9292-c2bec44bfb38",
 CellID->703966528]
}, Open  ]],
Cell[1323103, 29950, 313, 5, 75, "Text",ExpressionUUID->"a0732195-07be-4c71-bbc9-419e71417e36",
 CellID->1078024773],
Cell[1323419, 29957, 482, 8, 134, "Text",ExpressionUUID->"18350093-c041-4448-a704-5789d4113d3e",
 CellID->758483646],
Cell[1323904, 29967, 156, 2, 38, "ItemNumbered",ExpressionUUID->"e6b538ae-195d-458a-99c1-a68b8db92046",
 CellID->1536510645],
Cell[1324063, 29971, 189, 2, 45, "Text",ExpressionUUID->"c0e5febb-9f05-4eb5-9d5b-62c1815662d6",
 CellID->643555340],
Cell[CellGroupData[{
Cell[1324277, 29977, 305, 7, 31, "Input",ExpressionUUID->"6d509bc9-f573-469d-a89d-31f8660eec03",
 CellID->2085900945],
Cell[1324585, 29986, 238, 5, 45, "Output",ExpressionUUID->"f2ac75ad-4ff7-4b33-8d59-401a3ebfab1d",
 CellID->1531095402]
}, Open  ]],
Cell[1324838, 29994, 167, 2, 38, "ItemNumbered",ExpressionUUID->"4ee3c57d-865e-44fc-abb9-0939e0d210ca",
 CellID->1971363060],
Cell[1325008, 29998, 326, 6, 75, "Text",ExpressionUUID->"628f2ce8-a13f-4124-9cb9-e31cb314c298",
 CellID->1321243504],
Cell[1325337, 30006, 616, 18, 31, "Input",ExpressionUUID->"d9eafa08-06f3-4117-a0e3-3524e3cb3511",
 CellID->1155377711],
Cell[1325956, 30026, 175, 2, 45, "Text",ExpressionUUID->"6bb90d16-2b70-42ea-a2bd-89676fa0e3c2",
 CellID->1010081329],
Cell[CellGroupData[{
Cell[1326156, 30032, 338, 7, 54, "Input",ExpressionUUID->"fa1bb005-a00b-42c3-9df1-ef9ebdef4c97",
 CellID->341547123],
Cell[1326497, 30041, 315, 8, 45, "Output",ExpressionUUID->"68b55436-1617-4244-914e-cf7d41036d9f",
 CellID->1078687567]
}, Open  ]],
Cell[1326827, 30052, 178, 2, 45, "Text",ExpressionUUID->"789abbc1-4622-4b52-bc52-2297be5fbf49",
 CellID->444990595],
Cell[CellGroupData[{
Cell[1327030, 30058, 302, 7, 31, "Input",ExpressionUUID->"f4508b10-9928-4a0d-880c-8e9b59bb48ce",
 CellID->1311707689],
Cell[1327335, 30067, 194, 4, 47, "Output",ExpressionUUID->"ea661988-2999-4210-92f4-8b50719081a4",
 CellID->1601943153]
}, Open  ]],
Cell[1327544, 30074, 192, 2, 45, "Text",ExpressionUUID->"6398f0b3-e096-4851-8373-ee7770f9486d",
 CellID->856090032],
Cell[CellGroupData[{
Cell[1327761, 30080, 395, 10, 31, "Input",ExpressionUUID->"f95e66d9-f639-4875-a87e-21b9dbf8f4b1",
 CellID->396575264],
Cell[1328159, 30092, 260, 5, 45, "Output",ExpressionUUID->"4b8525ed-49a0-4cde-8bc5-c1836f002341",
 CellID->30788564]
}, Open  ]],
Cell[CellGroupData[{
Cell[1328456, 30102, 344, 9, 31, "Input",ExpressionUUID->"a19d9185-c7d9-42b0-ba65-a5feb1aa4869",
 CellID->1647137486],
Cell[1328803, 30113, 241, 5, 45, "Output",ExpressionUUID->"0db8375e-1182-4472-b363-9d3e9b6a35c6",
 CellID->319205475]
}, Open  ]],
Cell[1329059, 30121, 213, 2, 45, "Text",ExpressionUUID->"d074a4f9-791e-485c-b67c-cad2ccad4a05",
 CellID->1763389878],
Cell[1329275, 30125, 1030, 16, 311, "Text",ExpressionUUID->"3a5ff93b-44db-48e6-ae0c-a2b6dd7eaada",
 CellID->1979229022],
Cell[1330308, 30143, 884, 13, 252, "Text",ExpressionUUID->"6c2185ff-a2c7-4327-b532-cf6326f97328",
 CellID->651357616],
Cell[1331195, 30158, 192, 2, 38, "ItemNumbered",ExpressionUUID->"c2667634-6351-4c87-a250-62beda3b26d7",
 CellID->1382327821],
Cell[1331390, 30162, 385, 7, 104, "Text",ExpressionUUID->"e270bb4d-9fbe-4a5c-9690-6807a93b7f69",
 CellID->1305594301],
Cell[1331778, 30171, 414, 12, 37, "DisplayFormula",ExpressionUUID->"295c5b1e-a7ce-4bbb-8944-aaa73d949599",
 CellID->1775494403],
Cell[1332195, 30185, 308, 5, 75, "Text",ExpressionUUID->"255c2f43-2e00-488b-b20e-746fc19fdfd0",
 CellID->1590248585],
Cell[CellGroupData[{
Cell[1332528, 30194, 391, 11, 31, "Input",ExpressionUUID->"876cf251-99ae-49c1-b3ca-ef08c46eecde",
 CellID->943004487],
Cell[1332922, 30207, 343, 8, 45, "Output",ExpressionUUID->"908df952-95db-4c23-9bee-628d29bf4762",
 CellID->1092166391]
}, Open  ]],
Cell[1333280, 30218, 376, 6, 104, "Text",ExpressionUUID->"dfe4b9e3-e4f4-46f3-b6cf-21b140b16153",
 CellID->1497802628],
Cell[CellGroupData[{
Cell[1333681, 30228, 421, 12, 31, "Input",ExpressionUUID->"70ffdc29-326f-4363-8ae6-4cafefd5f999",
 CellID->1716502429],
Cell[1334105, 30242, 190, 3, 45, "Output",ExpressionUUID->"db76dac4-4013-42bf-aa40-10cb26878ad9",
 CellID->1850302843]
}, Open  ]],
Cell[1334310, 30248, 161, 2, 45, "Text",ExpressionUUID->"d8dd9805-7c12-4610-b7f1-1b39843e33f0",
 CellID->329190094],
Cell[CellGroupData[{
Cell[1334496, 30254, 243, 5, 31, "Input",ExpressionUUID->"19e09e0a-d75c-4761-8fde-29a718c93aed",
 CellID->1811189814],
Cell[1334742, 30261, 191, 3, 47, "Output",ExpressionUUID->"8d0fc19c-62ad-4f13-8d3c-3bc9a94620b5",
 CellID->935917050]
}, Open  ]],
Cell[1334948, 30267, 285, 5, 75, "Text",ExpressionUUID->"f63346da-c80a-4d4b-9ffb-88771a3b95c6",
 CellID->1787628722],
Cell[1335236, 30274, 694, 19, 78, "Input",ExpressionUUID->"0255c0e4-cb9c-4168-b62c-991e58e6fabe",
 CellID->970459634],
Cell[1335933, 30295, 425, 7, 134, "Text",ExpressionUUID->"6884342e-e10c-4404-9dfd-de3c8d8f03b6",
 CellID->78723954],
Cell[1336361, 30304, 411, 7, 104, "Text",ExpressionUUID->"d4f54400-a60a-4f61-9ecc-5190e683a482",
 CellID->435545890],
Cell[1336775, 30313, 333, 6, 75, "Text",ExpressionUUID->"0d2b7135-a808-4dc7-9f6c-f6f291e15467",
 CellID->1248814440],
Cell[CellGroupData[{
Cell[1337133, 30323, 229, 4, 31, "Input",ExpressionUUID->"2c25a849-544e-474c-b559-5a5fe17b82e8",
 CellID->113619948],
Cell[1337365, 30329, 174, 3, 45, "Output",ExpressionUUID->"9e433105-df89-43d4-9724-d2cbd3e0af72",
 CellID->396660953]
}, Open  ]],
Cell[1337554, 30335, 274, 5, 75, "Text",ExpressionUUID->"f40c2049-7124-4ca4-9df8-6eb5a7ea1d94",
 CellID->891396783],
Cell[CellGroupData[{
Cell[1337853, 30344, 268, 6, 31, "Input",ExpressionUUID->"f3617445-baf5-464a-ba4f-0142e7ec139d",
 CellID->906949168],
Cell[1338124, 30352, 221, 5, 45, "Output",ExpressionUUID->"71aa2606-0bbc-4985-b8c9-b0e8c8aeb8d6",
 CellID->1513369199]
}, Open  ]],
Cell[1338360, 30360, 207, 4, 45, "Text",ExpressionUUID->"812498cc-8508-45c9-bd24-8b04dc1a01cd",
 CellID->399812525],
Cell[CellGroupData[{
Cell[1338592, 30368, 364, 9, 31, "Input",ExpressionUUID->"f2e90604-2197-464f-ae1d-47599caf0eee",
 CellID->451904340],
Cell[1338959, 30379, 472, 10, 45, "Output",ExpressionUUID->"db31cbbc-8a08-4211-ae07-df1939447080",
 CellID->845158403]
}, Open  ]],
Cell[CellGroupData[{
Cell[1339468, 30394, 221, 4, 31, "Input",ExpressionUUID->"06cc7392-8dd5-4eb3-b666-87b9ab18c1c3",
 CellID->2064227245],
Cell[1339692, 30400, 465, 9, 45, "Output",ExpressionUUID->"7cfd187c-bf7e-4c86-a771-d0ce29f206af",
 CellID->1093082678]
}, Open  ]],
Cell[1340172, 30412, 446, 7, 134, "Text",ExpressionUUID->"83bb267a-2bfd-4ac3-bd78-e4315234aa70",
 CellID->1865452708],
Cell[1340621, 30421, 525, 15, 54, "Input",ExpressionUUID->"517d9244-a285-469e-b7a9-f130c3b3bdc5",
 CellID->1004887566],
Cell[1341149, 30438, 173, 2, 45, "Text",ExpressionUUID->"69d5900e-5049-4f6a-9156-cb327df9dfd5",
 CellID->315434975],
Cell[1341325, 30442, 658, 17, 78, "Input",ExpressionUUID->"1b96d153-178c-48d4-b2dd-710264b873ee",
 CellID->1963862929],
Cell[1341986, 30461, 177, 2, 45, "Text",ExpressionUUID->"070af291-5f79-4d1b-a6a2-0a4b3e889e4d",
 CellID->1133226940],
Cell[CellGroupData[{
Cell[1342188, 30467, 259, 5, 31, "Input",ExpressionUUID->"5306c1cf-ec65-411f-b224-88046f84a1c3",
 CellID->1537850354],
Cell[1342450, 30474, 236, 4, 45, "Output",ExpressionUUID->"3e37b739-f0ef-4cc3-93a7-822c9696a210",
 CellID->1096972174]
}, Open  ]],
Cell[1342701, 30481, 341, 6, 75, "Text",ExpressionUUID->"4ad1cc04-1b3c-4079-a607-1a7b2b2b4e4a",
 CellID->664218923],
Cell[CellGroupData[{
Cell[1343067, 30491, 255, 5, 31, "Input",ExpressionUUID->"f8cf83f4-404b-4f32-bd70-1d5484ce9e5f",
 CellID->690314988],
Cell[1343325, 30498, 187, 3, 45, "Output",ExpressionUUID->"58bb6edf-e4ff-41b8-ac8c-c143ad7d6cac",
 CellID->751356130]
}, Open  ]],
Cell[1343527, 30504, 223, 5, 45, "Text",ExpressionUUID->"a0741935-4947-4cb6-b010-bad116e21779",
 CellID->838632550],
Cell[CellGroupData[{
Cell[1343775, 30513, 228, 4, 31, "Input",ExpressionUUID->"9a63fdf2-c8e0-497f-a8d5-6c60c9c9cea9",
 CellID->1485765060],
Cell[1344006, 30519, 306, 9, 67, "Output",ExpressionUUID->"cf594e85-dd7a-466f-ace2-c6d0350bcd2b",
 CellID->377137725]
}, Open  ]],
Cell[1344327, 30531, 332, 6, 75, "Text",ExpressionUUID->"064eb0da-eecb-445a-9bcf-225a35e74a20",
 CellID->1329501778],
Cell[1344662, 30539, 393, 7, 104, "Text",ExpressionUUID->"07c17f27-68dd-485e-8372-bb113316247e",
 CellID->696986301],
Cell[1345058, 30548, 568, 15, 54, "Input",ExpressionUUID->"179c64c9-0900-43a4-897c-77f86885c710",
 CellID->400838840],
Cell[1345629, 30565, 238, 4, 45, "Text",ExpressionUUID->"b25d050d-5e7e-4790-a034-c3992ed19b2a",
 CellID->634263340],
Cell[1345870, 30571, 689, 11, 193, "Text",ExpressionUUID->"956b5c3d-c73f-42a1-be58-61d2c726e7f8",
 CellID->1213774012],
Cell[CellGroupData[{
Cell[1346584, 30586, 250, 5, 31, "Input",ExpressionUUID->"45f5b95b-b8cf-4888-95fc-e25ce1ff882a",
 CellID->368039614],
Cell[1346837, 30593, 309, 9, 67, "Output",ExpressionUUID->"963e2c87-e19d-4974-95b0-253e4f9f8938",
 CellID->495148333]
}, Open  ]],
Cell[CellGroupData[{
Cell[1347183, 30607, 281, 6, 31, "Input",ExpressionUUID->"dcd3228e-37ef-4658-b784-323be10f93e2",
 CellID->1128708665],
Cell[1347467, 30615, 482, 13, 67, "Output",ExpressionUUID->"d7c25f5b-bf26-41ae-ad6d-72cb24362d4e",
 CellID->1449955416]
}, Open  ]],
Cell[1347964, 30631, 378, 7, 75, "Text",ExpressionUUID->"fb356922-6f47-43c9-a7e1-3e3850961610",
 CellID->590801605],
Cell[CellGroupData[{
Cell[1348367, 30642, 343, 8, 31, "Input",ExpressionUUID->"fe592074-9ffa-4eea-a3b2-a4794e84cbcb",
 CellID->1529287174],
Cell[1348713, 30652, 274, 7, 67, "Output",ExpressionUUID->"43f4c08c-1516-44e2-af97-c4773dfe8d8d",
 CellID->136959928]
}, Open  ]],
Cell[1349002, 30662, 343, 6, 75, "Text",ExpressionUUID->"28a8f8fb-f1ea-404d-8c4f-a0ef90e341a3",
 CellID->1930523959],
Cell[1349348, 30670, 180, 2, 38, "ItemNumbered",ExpressionUUID->"7eb9f892-08da-42d7-9215-528460980d87",
 CellID->1023769026],
Cell[1349531, 30674, 263, 5, 45, "Text",ExpressionUUID->"250ca666-b2cf-40e9-a9f3-69c8993bd9d5",
 CellID->847040218],
Cell[CellGroupData[{
Cell[1349819, 30683, 626, 19, 31, "Input",ExpressionUUID->"394b2cb5-1937-4d7d-86dd-548bfcf5e269",
 CellID->1597782270],
Cell[1350448, 30704, 689, 22, 80, "Output",ExpressionUUID->"47eab4e6-7bec-4d0f-a8f7-84248574fbba",
 CellID->1751926528]
}, Open  ]],
Cell[1351152, 30729, 176, 2, 45, "Text",ExpressionUUID->"4bfe3d56-f8f2-43c8-8c48-922eb5c219fd",
 CellID->480872079],
Cell[1351331, 30733, 818, 24, 78, "Input",ExpressionUUID->"505a3429-d047-4e72-a1ef-d4f70ca5a1ef",
 CellID->2133011164],
Cell[1352152, 30759, 295, 5, 75, "Text",ExpressionUUID->"a8e60177-2fea-42a9-bdbb-07b71213dcc0",
 CellID->871988528],
Cell[CellGroupData[{
Cell[1352472, 30768, 354, 9, 31, "Input",ExpressionUUID->"273a7da8-9b2c-4b3b-8f54-6249917b26dd",
 CellID->252681447],
Cell[1352829, 30779, 478, 15, 49, "Output",ExpressionUUID->"b43a3a40-31df-429f-b3bb-4aa1269f9210",
 CellID->447845570]
}, Open  ]],
Cell[1353322, 30797, 164, 2, 45, "Text",ExpressionUUID->"336dab3b-d39b-4917-99d7-ec966a7f3065",
 CellID->10312255],
Cell[CellGroupData[{
Cell[1353511, 30803, 355, 9, 31, "Input",ExpressionUUID->"b6083ce0-74d4-4a7d-b796-66ae3e16d4a9",
 CellID->458419698],
Cell[1353869, 30814, 479, 15, 49, "Output",ExpressionUUID->"d358c517-4cee-4688-aa00-51e77471cca6",
 CellID->84999170]
}, Open  ]],
Cell[1354363, 30832, 390, 6, 104, "Text",ExpressionUUID->"47df8fa0-051a-475e-8cba-e0db5b2486ed",
 CellID->504424935],
Cell[1354756, 30840, 830, 24, 78, "Input",ExpressionUUID->"4cabf31f-17d0-431a-b477-30fdf5e8abe0",
 CellID->1503200940],
Cell[1355589, 30866, 163, 2, 45, "Text",ExpressionUUID->"d4f475cf-b455-47d3-8173-49ef390e14c1",
 CellID->623050805],
Cell[CellGroupData[{
Cell[1355777, 30872, 256, 5, 31, "Input",ExpressionUUID->"b541a36e-b401-4156-8fd7-6c5768371f72",
 CellID->213093334],
Cell[1356036, 30879, 826, 27, 49, "Output",ExpressionUUID->"803a26a8-3072-4232-828d-d8b661e7e3a1",
 CellID->113234912]
}, Open  ]],
Cell[1356877, 30909, 319, 5, 75, "Text",ExpressionUUID->"e1c40aff-3c0e-45b6-ba09-bf7d02c2bee5",
 CellID->468654742],
Cell[CellGroupData[{
Cell[1357221, 30918, 915, 28, 54, "Input",ExpressionUUID->"2db757b2-11b8-44fc-84ea-ee285c9e92ca",
 CellID->702528167],
Cell[1358139, 30948, 1011, 26, 49, "Output",ExpressionUUID->"56aa3639-6321-41c4-9d36-b5bfc3b0788c",
 CellID->1024047377]
}, Open  ]],
Cell[1359165, 30977, 182, 2, 45, "Text",ExpressionUUID->"2c45cdca-94df-45ef-9e0e-b22df5a44722",
 CellID->1230318181],
Cell[CellGroupData[{
Cell[1359372, 30983, 425, 12, 31, "Input",ExpressionUUID->"1f31c375-14c5-4f4f-af1c-ba263cfe2097",
 CellID->1195959858],
Cell[1359800, 30997, 986, 26, 49, "Output",ExpressionUUID->"077c4236-8c24-469e-ae5f-06099d81c9d6",
 CellID->1649917375]
}, Open  ]],
Cell[1360801, 31026, 203, 4, 45, "Text",ExpressionUUID->"385017ee-cf7d-48a5-8ec1-504218a6b5b9",
 CellID->1852471561],
Cell[1361007, 31032, 178, 2, 38, "ItemNumbered",ExpressionUUID->"1748cf92-ff28-49f0-8e32-53abde2daf98",
 CellID->271611521],
Cell[1361188, 31036, 211, 3, 45, "Text",ExpressionUUID->"a1dc3f2d-c471-436d-9121-867b92ae9b1c",
 CellID->1572083572],
Cell[1361402, 31041, 170, 2, 45, "Text",ExpressionUUID->"38eb8ee5-ce68-4a80-87e1-9ad18377518b",
 CellID->2015582445],
Cell[CellGroupData[{
Cell[1361597, 31047, 404, 10, 31, "Input",ExpressionUUID->"145f4824-83bd-4840-8748-63ab0c01120a",
 CellID->648193172],
Cell[1362004, 31059, 302, 7, 45, "Output",ExpressionUUID->"53dcb0c0-460c-4de2-a5c4-484fe888f932",
 CellID->693499916]
}, Open  ]],
Cell[1362321, 31069, 741, 11, 222, "Text",ExpressionUUID->"98dc0c88-b260-4a0d-8893-7a73541400f9",
 CellID->1259335943],
Cell[1363065, 31082, 226, 3, 45, "Text",ExpressionUUID->"95cee8da-71ed-44c4-a97d-1432dacfaa2d",
 CellID->1270461953],
Cell[1363294, 31087, 210, 2, 45, "Text",ExpressionUUID->"da656191-60ec-4dad-856f-7de1146ca02a",
 CellID->715318558],
Cell[1363507, 31091, 945, 26, 101, "Input",ExpressionUUID->"d0c95028-2ee4-4921-a4f4-c7bf3e04cece",
 CellID->912815633],
Cell[1364455, 31119, 378, 6, 104, "Text",ExpressionUUID->"debecdc6-f579-4b9d-b929-c6d968803568",
 CellID->1067040215],
Cell[CellGroupData[{
Cell[1364858, 31129, 344, 9, 31, "Input",ExpressionUUID->"10edc3c9-5891-45a7-bcd1-37470cc4db5a",
 CellID->859203401],
Cell[1365205, 31140, 378, 10, 45, "Output",ExpressionUUID->"206bb282-a9f3-47fe-a36c-0fcbd5cd1e52",
 CellID->175070835]
}, Open  ]],
Cell[1365598, 31153, 163, 2, 45, "Text",ExpressionUUID->"9387d340-5380-4a1e-ad6c-4627194da2e8",
 CellID->362927455],
Cell[CellGroupData[{
Cell[1365786, 31159, 382, 9, 31, "Input",ExpressionUUID->"f3463dc1-6c12-4580-a7d6-330eb30760b0",
 CellID->1475597217],
Cell[1366171, 31170, 375, 10, 45, "Output",ExpressionUUID->"f8fd08a3-82ab-4a79-815b-5502e75d3c08",
 CellID->1167258363]
}, Open  ]],
Cell[1366561, 31183, 242, 3, 45, "Text",ExpressionUUID->"9b3b871c-dbeb-4068-8440-e187ef3de98f",
 CellID->848191596],
Cell[1366806, 31188, 227, 5, 45, "Text",ExpressionUUID->"bb46986c-7405-49a6-a555-3360d3a0b0a0",
 CellID->383754160],
Cell[CellGroupData[{
Cell[1367058, 31197, 406, 10, 31, "Input",ExpressionUUID->"3c005d37-3b39-4c78-8089-04d9a04273b1",
 CellID->236593568],
Cell[1367467, 31209, 442, 11, 45, "Output",ExpressionUUID->"85c9c5b0-7a05-4687-8e83-90c96f05c88b",
 CellID->1334387449]
}, Open  ]],
Cell[1367924, 31223, 189, 2, 45, "Text",ExpressionUUID->"8f3dc924-f27a-4b59-9245-2a03e08d5990",
 CellID->878129722],
Cell[CellGroupData[{
Cell[1368138, 31229, 242, 5, 31, "Input",ExpressionUUID->"1213b0e7-8b83-479b-b4f6-4ee9ad5fe7e9",
 CellID->718662851],
Cell[1368383, 31236, 197, 4, 45, "Output",ExpressionUUID->"2270ae57-c02a-420d-a634-461a5a888b56",
 CellID->801624128]
}, Open  ]],
Cell[1368595, 31243, 238, 5, 75, "Text",ExpressionUUID->"ff45dfc4-2b1f-454f-89ec-ff237479f865",
 CellID->1734833814],
Cell[1368836, 31250, 1304, 37, 148, "Input",ExpressionUUID->"27c12f87-0316-4a52-815f-ae9fe05fff85",
 CellID->1480760992],
Cell[1370143, 31289, 237, 3, 45, "Text",ExpressionUUID->"fae8ef6d-bddf-402c-9b04-467af7c6b0fa",
 CellID->898806822],
Cell[1370383, 31294, 333, 6, 75, "Text",ExpressionUUID->"ed37b300-945d-4ed0-870f-9fe979c29bd0",
 CellID->705241960],
Cell[CellGroupData[{
Cell[1370741, 31304, 411, 10, 31, "Input",ExpressionUUID->"8cd78efb-4119-43c5-89f4-be0c8d7c2f1a",
 CellID->2001443139],
Cell[1371155, 31316, 2978, 93, 162, "Output",ExpressionUUID->"8582082d-809f-48bd-8d0b-541d972a197f",
 CellID->1859001739]
}, Open  ]],
Cell[1374148, 31412, 260, 5, 75, "Text",ExpressionUUID->"7de4e918-b3f6-4d35-8746-51289cafb804",
 CellID->502647170],
Cell[1374411, 31419, 214, 3, 45, "Text",ExpressionUUID->"59342dd0-1ce7-4bbc-a95b-e5424237d53d",
 CellID->1785521930],
Cell[1374628, 31424, 284, 5, 75, "Text",ExpressionUUID->"45ae2929-6474-4522-a75a-181f624f58c6",
 CellID->437974059],
Cell[1374915, 31431, 1375, 39, 148, "Input",ExpressionUUID->"3a889469-961f-41f5-a089-fe76250efad9",
 CellID->1111442409],
Cell[1376293, 31472, 183, 2, 45, "Text",ExpressionUUID->"e8808ad0-94d0-43af-91a6-e34195baeaa0",
 CellID->194276173],
Cell[1376479, 31476, 603, 16, 54, "Input",ExpressionUUID->"60ddfd22-3d76-4ac2-a956-69e434b404cd",
 CellID->1646378419],
Cell[1377085, 31494, 163, 2, 45, "Text",ExpressionUUID->"89abe83d-2930-44ec-ac2a-19c613f67d8a",
 CellID->1198072132],
Cell[CellGroupData[{
Cell[1377273, 31500, 260, 5, 31, "Input",ExpressionUUID->"c4241068-19cb-417c-b49a-fb76e60757e0",
 CellID->1299402618],
Cell[1377536, 31507, 327, 7, 45, "Output",ExpressionUUID->"e3cdb981-8c1f-453f-afff-fe3e096b990e",
 CellID->283629827]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1377912, 31520, 170, 2, 66, "Subsubsection",ExpressionUUID->"52b235a4-127f-45dd-a130-8ec4188d49db",
 CellID->1700289696],
Cell[1378085, 31524, 451, 8, 104, "Text",ExpressionUUID->"6d5dc739-82ec-420a-bd4b-915d7dabe13e",
 CellID->204030043],
Cell[1378539, 31534, 248, 4, 31, "Input",ExpressionUUID->"68fd2569-19dd-412b-a7ef-76fcb9a8d6e2",
 CellID->802785095],
Cell[1378790, 31540, 531, 8, 163, "Text",ExpressionUUID->"11d6a9e3-48bb-4ee8-967e-68ebedaff263",
 CellID->1237450518],
Cell[1379324, 31550, 179, 3, 38, "ItemNumbered",ExpressionUUID->"445fd047-3365-42dd-bf75-efcfa351ba9a",
 CellTags->"5.4.2.1",
 CellID->1445623944],
Cell[1379506, 31555, 230, 3, 45, "Text",ExpressionUUID->"17d66cd8-f4d5-45a5-b910-b8f2cfc96015",
 CellID->2119128297],
Cell[1379739, 31560, 217, 4, 45, "Text",ExpressionUUID->"5291c7af-9311-4d66-8279-2e3ac5dcdffa",
 CellID->1347110188],
Cell[CellGroupData[{
Cell[1379981, 31568, 513, 13, 54, "Input",ExpressionUUID->"9c3374f1-abc4-4b53-b13c-5ff68b21fec9",
 CellID->1414678086],
Cell[1380497, 31583, 497, 13, 45, "Output",ExpressionUUID->"6f4f23a3-f0f6-4242-8378-b1297314de82",
 CellID->343975557]
}, Open  ]],
Cell[1381009, 31599, 240, 5, 75, "Text",ExpressionUUID->"3ac5d513-3e16-4eb9-95d4-4cad88d81c47",
 CellID->171208775],
Cell[CellGroupData[{
Cell[1381274, 31608, 441, 11, 31, "Input",ExpressionUUID->"bf619f13-a159-407a-89e3-969ca1d1a562",
 CellID->1233087294],
Cell[1381718, 31621, 476, 13, 45, "Output",ExpressionUUID->"7e26e544-714b-4591-82b4-31fbcb8ad23f",
 CellID->88081967]
}, Open  ]],
Cell[1382209, 31637, 253, 4, 45, "Text",ExpressionUUID->"a8ed7dd2-3b0b-4b36-bdad-2804b50c0f47",
 CellID->777386586],
Cell[1382465, 31643, 1153, 17, 340, "Text",ExpressionUUID->"c200ed36-795f-444b-aba8-c6c306f0ab64",
 CellID->1684973451],
Cell[1383621, 31662, 727, 21, 78, "Input",ExpressionUUID->"9608249c-f714-4948-8798-b72aade84f12",
 CellID->1568870518],
Cell[1384351, 31685, 163, 2, 45, "Text",ExpressionUUID->"b51b90d6-6f4b-4fc5-af11-a82471c39d79",
 CellID->586579807],
Cell[CellGroupData[{
Cell[1384539, 31691, 582, 13, 31, "Input",ExpressionUUID->"0d6ffa5e-87db-4f25-afbf-cd9e927f4fd4",
 CellID->1284411702],
Cell[1385124, 31706, 793, 22, 68, "Output",ExpressionUUID->"7ef40e4e-6336-4658-9260-054a7ebcb922",
 CellID->246206066]
}, Open  ]],
Cell[1385932, 31731, 639, 10, 163, "Text",ExpressionUUID->"b5904d13-cd47-473a-abf9-a1a71cad7ba0",
 CellID->999233928],
Cell[1386574, 31743, 747, 21, 101, "Input",ExpressionUUID->"cbffb270-c03e-4022-a3ff-f21141488104",
 CellID->1565454853],
Cell[1387324, 31766, 163, 2, 45, "Text",ExpressionUUID->"9f31e22c-6cf0-41d4-a59f-171f67e9692d",
 CellID->1359628013],
Cell[CellGroupData[{
Cell[1387512, 31772, 413, 11, 31, "Input",ExpressionUUID->"0b918462-2d39-4003-a30f-d6e04d379fe9",
 CellID->1875275549],
Cell[1387928, 31785, 640, 20, 45, "Output",ExpressionUUID->"05ac0a37-ae93-4082-8741-802cda0bcaac",
 CellID->2022218323]
}, Open  ]],
Cell[1388583, 31808, 631, 10, 193, "Text",ExpressionUUID->"7585d108-d514-468f-9c24-088c3e65a08c",
 CellID->1347157239],
Cell[1389217, 31820, 455, 7, 134, "Text",ExpressionUUID->"395c22e0-f932-45ed-b2b6-004e6f0a39cb",
 CellID->1948705564],
Cell[1389675, 31829, 220, 3, 45, "Text",ExpressionUUID->"467bb221-95ab-4a0c-9a8f-c2c8f34b44f7",
 CellID->18381704],
Cell[1389898, 31834, 331, 6, 75, "Text",ExpressionUUID->"eaca2a06-e9a7-4b10-b493-67fe39030359",
 CellID->801899881],
Cell[CellGroupData[{
Cell[1390254, 31844, 911, 28, 55, "Input",ExpressionUUID->"258c660d-a8b8-43d5-901a-b5ed4587c407",
 CellID->309424680],
Cell[1391168, 31874, 286, 8, 45, "Output",ExpressionUUID->"24c144f0-b8a8-402d-b72f-1926071b125a",
 CellID->1417528396]
}, Open  ]],
Cell[1391469, 31885, 466, 7, 134, "Text",ExpressionUUID->"4f0fcb9b-b51c-44f3-9555-22a6dc1a68c4",
 CellID->216171754],
Cell[CellGroupData[{
Cell[1391960, 31896, 916, 28, 55, "Input",ExpressionUUID->"ea6a4b9d-5f85-4ccb-84fc-b4cbb806e47e",
 CellID->1783776073],
Cell[1392879, 31926, 736, 24, 45, "Output",ExpressionUUID->"593db8dc-681a-47d0-ba30-69c7af104d24",
 CellID->1646836892]
}, Open  ]],
Cell[1393630, 31953, 632, 10, 193, "Text",ExpressionUUID->"60906bfa-435f-48d3-885a-8d2998f959e5",
 CellID->1618401308],
Cell[1394265, 31965, 1259, 38, 125, "Input",ExpressionUUID->"92ad12c4-7cdb-43b9-85ad-982c897126e1",
 CellID->1185404825],
Cell[1395527, 32005, 163, 2, 45, "Text",ExpressionUUID->"f6c7512f-0fa6-44a0-9605-da8afc2ada18",
 CellID->700460863],
Cell[CellGroupData[{
Cell[1395715, 32011, 256, 5, 31, "Input",ExpressionUUID->"c615c45d-2630-4b8a-918b-1d73108cf318",
 CellID->345400908],
Cell[1395974, 32018, 235, 5, 45, "Output",ExpressionUUID->"5ba66ee7-db2f-4846-b6fd-1fa7b1c289f7",
 CellID->789547150]
}, Open  ]],
Cell[CellGroupData[{
Cell[1396246, 32028, 261, 5, 31, "Input",ExpressionUUID->"44146bcc-c1b4-45a9-8333-c16fb64e947b",
 CellID->1601465955],
Cell[1396510, 32035, 225, 5, 45, "Output",ExpressionUUID->"de0b2b80-bb2f-450d-9564-4a5acf6b9a43",
 CellID->907187349]
}, Open  ]],
Cell[CellGroupData[{
Cell[1396772, 32045, 259, 5, 31, "Input",ExpressionUUID->"d4a0f4b3-b664-46df-a759-9c14a489305d",
 CellID->684881102],
Cell[1397034, 32052, 268, 6, 45, "Output",ExpressionUUID->"e70ee444-7bd2-49af-ab92-d2f525b0b890",
 CellID->336110389]
}, Open  ]],
Cell[1397317, 32061, 174, 2, 38, "ItemNumbered",ExpressionUUID->"b73a3246-48b0-4da9-921b-be84882ba28d",
 CellID->1125316313],
Cell[1397494, 32065, 316, 5, 75, "Text",ExpressionUUID->"0ac0afef-ff48-4796-b62e-022ef6c964ed",
 CellID->302793462],
Cell[1397813, 32072, 261, 4, 31, "Input",ExpressionUUID->"3dd3d698-4242-4dbf-8074-0cd9c89ae069",
 CellID->887038629],
Cell[1398077, 32078, 304, 5, 75, "Text",ExpressionUUID->"c811df57-7f86-48ed-8526-247945cb89e3",
 CellID->1290942498],
Cell[1398384, 32085, 180, 2, 38, "ItemNumbered",ExpressionUUID->"f02c8a13-a2dd-4edb-b4b7-23d879faa43c",
 CellID->1732877162],
Cell[1398567, 32089, 333, 6, 75, "Text",ExpressionUUID->"7ca48693-4ec7-4485-8e3f-488edd6f2059",
 CellID->293241120],
Cell[CellGroupData[{
Cell[1398925, 32099, 474, 13, 31, "Input",ExpressionUUID->"3ddd8753-6a16-4247-9844-7465da314849",
 CellID->2058217910],
Cell[1399402, 32114, 314, 7, 45, "Output",ExpressionUUID->"6ff85888-ad1a-4a41-aed6-4354dda18f93",
 CellID->1026547419]
}, Open  ]],
Cell[1399731, 32124, 244, 4, 45, "Text",ExpressionUUID->"02ea8495-50a4-4541-a5f7-140804452714",
 CellID->298851135],
Cell[1399978, 32130, 865, 18, 104, "Text",ExpressionUUID->"02ba771b-14bf-4ea1-8f39-ef8e97b628c0",
 CellID->322179179],
Cell[CellGroupData[{
Cell[1400868, 32152, 701, 21, 55, "Input",ExpressionUUID->"6c986f40-884b-4877-a211-60f6d28d7dc0",
 CellID->527828794],
Cell[1401572, 32175, 300, 7, 45, "Output",ExpressionUUID->"5400d1ed-3891-429a-85d8-e127935100a9",
 CellID->822810545]
}, Open  ]],
Cell[1401887, 32185, 808, 17, 104, "Text",ExpressionUUID->"b00b3718-6041-43d6-bad5-f5e132b729e0",
 CellID->1329626782],
Cell[1402698, 32204, 184, 2, 38, "ItemNumbered",ExpressionUUID->"463886cf-560b-4a64-978b-bfe5a51c83e5",
 CellID->1607322742],
Cell[1402885, 32208, 350, 6, 104, "Text",ExpressionUUID->"fef567ad-f7ff-46b4-b71f-0e132746ad36",
 CellID->1076529181],
Cell[1403238, 32216, 414, 10, 31, "Input",ExpressionUUID->"e3cd72cf-a34a-4912-8691-5edd4341c95c",
 CellID->1421334047],
Cell[1403655, 32228, 458, 7, 134, "Text",ExpressionUUID->"5875c02c-137d-4f02-92db-cea823f237d4",
 CellID->1155155816],
Cell[1404116, 32237, 488, 12, 55, "Input",ExpressionUUID->"e6fe7ad9-5c78-4aa6-ba80-2544d08ef2a7",
 CellID->860152479],
Cell[1404607, 32251, 301, 5, 75, "Text",ExpressionUUID->"95426a1e-580e-4354-a39f-37d048b069c1",
 CellID->1952553359],
Cell[CellGroupData[{
Cell[1404933, 32260, 222, 4, 31, "Input",ExpressionUUID->"d0fca0ed-ddc2-47e0-b7cd-55da2f918c25",
 CellID->1488043037],
Cell[1405158, 32266, 10362, 260, 246, "Output",ExpressionUUID->"9a334bea-bd8d-4d28-bfd2-402473ae1bb6",
 CellID->1886481]
}, Open  ]],
Cell[1415535, 32529, 589, 9, 163, "Text",ExpressionUUID->"13ad6457-147c-43b2-9990-ce9100990a52",
 CellID->1641315109],
Cell[1416127, 32540, 703, 19, 78, "Input",ExpressionUUID->"cd695e50-1463-4b4b-8b6f-e9c552432765",
 CellID->837395063],
Cell[1416833, 32561, 234, 5, 45, "Text",ExpressionUUID->"c29dedaa-f80f-4037-8ea3-99a5c5543282",
 CellID->1772190351],
Cell[CellGroupData[{
Cell[1417092, 32570, 219, 4, 31, "Input",ExpressionUUID->"8b28380b-bab7-47b4-ad84-2a7d012f26b0",
 CellID->339912356],
Cell[1417314, 32576, 10795, 270, 246, "Output",ExpressionUUID->"ccec3397-5898-4398-bb83-08a716003e45",
 CellID->953610448]
}, Open  ]],
Cell[1428124, 32849, 337, 6, 75, "Text",ExpressionUUID->"6d9dbcd5-f0b1-4cdc-98eb-a2915559492e",
 CellID->678568833],
Cell[1428464, 32857, 202, 2, 45, "Text",ExpressionUUID->"0702994e-7a41-48be-aacf-04cd57a23cad",
 CellID->1663421566],
Cell[CellGroupData[{
Cell[1428691, 32863, 260, 5, 31, "Input",ExpressionUUID->"b3e287a9-c411-4607-a601-29a6f04c6b0f",
 CellID->1482215988],
Cell[1428954, 32870, 270, 5, 45, "Output",ExpressionUUID->"e4a68d07-d56c-43b6-884c-7d6818bc3092",
 CellID->1738581241]
}, Open  ]],
Cell[1429239, 32878, 370, 6, 104, "Text",ExpressionUUID->"27c992aa-9d0d-455f-bfa1-d51672a31e61",
 CellID->1672416405],
Cell[1429612, 32886, 1583, 40, 125, "Input",ExpressionUUID->"636b928a-23f1-4134-b925-b189a834e3fa",
 CellID->1168841373],
Cell[1431198, 32928, 439, 7, 134, "Text",ExpressionUUID->"cf0ab32b-ffb8-4290-a254-c879b1e2015d",
 CellID->631784351],
Cell[CellGroupData[{
Cell[1431662, 32939, 500, 13, 31, "Input",ExpressionUUID->"679dbeb5-b1c5-45c8-b787-05d2a180b7db",
 CellID->2004291133],
Cell[1432165, 32954, 277, 7, 45, "Output",ExpressionUUID->"8b222b27-85c8-4425-a463-d488d6bbece2",
 CellID->685642504]
}, Open  ]],
Cell[1432457, 32964, 976, 19, 193, "Text",ExpressionUUID->"44216fa7-d9c1-4ecb-a155-567c98535346",
 CellID->196314926],
Cell[1433436, 32985, 273, 5, 75, "Text",ExpressionUUID->"189b137c-9f35-4498-ab37-32bd83d49bd0",
 CellID->990031340],
Cell[1433712, 32992, 763, 20, 101, "Input",ExpressionUUID->"885643cc-881c-4d97-a000-1abf4064a547",
 CellID->1408781456],
Cell[1434478, 33014, 212, 4, 45, "Text",ExpressionUUID->"937801d4-9119-4ab5-a652-a434518e03a4",
 CellID->1577043976],
Cell[CellGroupData[{
Cell[1434715, 33022, 251, 4, 31, "Input",ExpressionUUID->"588f4ac1-67ce-4f0b-aff5-d67aba3884ce",
 CellID->875195252],
Cell[1434969, 33028, 380, 8, 45, "Output",ExpressionUUID->"6d02a1a3-80bc-4a5e-ae6c-6b4a81131e90",
 CellID->1952709048]
}, Open  ]],
Cell[CellGroupData[{
Cell[1435386, 33041, 252, 4, 31, "Input",ExpressionUUID->"f42a97f5-8436-4115-bdff-c86c3e956312",
 CellID->131142189],
Cell[1435641, 33047, 440, 9, 45, "Output",ExpressionUUID->"8027082d-185e-49a6-a65d-166b524d5025",
 CellID->543144224]
}, Open  ]],
Cell[CellGroupData[{
Cell[1436118, 33061, 251, 4, 31, "Input",ExpressionUUID->"e01bd025-1dba-4a2a-b985-5cd65620b0c4",
 CellID->1863363893],
Cell[1436372, 33067, 823, 14, 68, "Output",ExpressionUUID->"f0af4ae9-babd-4ba4-be40-12a47b09571d",
 CellID->807155721]
}, Open  ]],
Cell[1437210, 33084, 582, 9, 163, "Text",ExpressionUUID->"ba4d2472-1730-4615-8d6b-7798d28a5c37",
 CellID->212004748],
Cell[1437795, 33095, 464, 7, 134, "Text",ExpressionUUID->"8ac7f53d-8f56-4271-b983-ea84ec80a8e8",
 CellID->1371377949],
Cell[1438262, 33104, 207, 2, 45, "Text",ExpressionUUID->"ec4b2ea2-7e68-444d-b623-2714d9008ff9",
 CellID->484814423],
Cell[1438472, 33108, 493, 12, 54, "Input",ExpressionUUID->"c3e6b301-dfd1-4ac2-be8f-73132302a2dd",
 CellID->1849682175],
Cell[1438968, 33122, 155, 2, 45, "Text",ExpressionUUID->"031ba9d2-27ca-48c8-be4f-5a54bc793dd3",
 CellID->1371053324],
Cell[1439126, 33126, 701, 17, 78, "Input",ExpressionUUID->"72add634-6742-4fa4-987a-f7e425e15fe9",
 CellID->1428711989],
Cell[1439830, 33145, 156, 2, 45, "Text",ExpressionUUID->"822656da-547d-486e-ba70-abcc9ec80fc4",
 CellID->220855511],
Cell[CellGroupData[{
Cell[1440011, 33151, 266, 5, 31, "Input",ExpressionUUID->"edb9acc1-5405-441a-bc48-87ffb90241cd",
 CellID->893715524],
Cell[1440280, 33158, 190, 3, 45, "Output",ExpressionUUID->"821729c7-e1c9-48e2-949c-e274dcd825f5",
 CellID->481491367]
}, Open  ]],
Cell[1440485, 33164, 179, 2, 45, "Text",ExpressionUUID->"6e33dafc-e3b5-482b-a29e-bc1d2babd0a8",
 CellID->707023273],
Cell[CellGroupData[{
Cell[1440689, 33170, 269, 5, 31, "Input",ExpressionUUID->"e044828f-1532-4dad-a575-5a0e8f007fca",
 CellID->174033812],
Cell[1440961, 33177, 189, 3, 45, "Output",ExpressionUUID->"cbe7b170-f932-4f20-a43f-e5da8e79b21a",
 CellID->235528797]
}, Open  ]],
Cell[1441165, 33183, 170, 2, 45, "Text",ExpressionUUID->"e5ed6245-8f12-4019-a941-ede46643cd79",
 CellID->720129758],
Cell[CellGroupData[{
Cell[1441360, 33189, 272, 5, 31, "Input",ExpressionUUID->"31a6a3b0-cb97-4039-a3fe-421df26b203a",
 CellID->1699808427],
Cell[1441635, 33196, 192, 3, 45, "Output",ExpressionUUID->"010646d6-7e91-4589-8a3d-b606eaf6bcc1",
 CellID->1705796956]
}, Open  ]],
Cell[1441842, 33202, 607, 10, 193, "Text",ExpressionUUID->"512116ac-39cb-4818-903c-7d7ff64d57be",
 CellID->422752042],
Cell[1442452, 33214, 573, 9, 163, "Text",ExpressionUUID->"9590d344-d789-4bbd-8fc4-139a19e64329",
 CellID->824057749],
Cell[1443028, 33225, 446, 7, 134, "Text",ExpressionUUID->"6dca5f42-00c4-47fe-a93e-9144de7952eb",
 CellID->1244335953],
Cell[1443477, 33234, 184, 2, 38, "ItemNumbered",ExpressionUUID->"56003635-0e5e-4fc9-8855-72c8a7a204ab",
 CellID->929558852],
Cell[1443664, 33238, 675, 10, 193, "Text",ExpressionUUID->"203ba5a9-3223-478f-98e4-7bcdbae309d2",
 CellID->152093639],
Cell[1444342, 33250, 1071, 18, 311, "Text",ExpressionUUID->"fc42c57e-0a76-4a04-a1a9-6cd72259a225",
 CellID->210521732],
Cell[1445416, 33270, 179, 2, 45, "Text",ExpressionUUID->"ab4996d9-8572-4670-beae-126188a6c477",
 CellID->1139879152],
Cell[CellGroupData[{
Cell[1445620, 33276, 487, 12, 54, "Input",ExpressionUUID->"82783d3c-7e58-4620-a9d1-866ac57946a5",
 CellID->1288925050],
Cell[1446110, 33290, 357, 8, 45, "Output",ExpressionUUID->"e6bb9eaa-2023-48c0-8c06-9a06f5c677bd",
 CellID->600159516]
}, Open  ]],
Cell[1446482, 33301, 160, 2, 45, "Text",ExpressionUUID->"b277f587-6ecc-438e-83d1-596790a6f71c",
 CellID->150295453],
Cell[1446645, 33305, 652, 18, 78, "Input",ExpressionUUID->"5c2a7c48-af04-4976-bd21-288fb8c74bbc",
 CellID->978383240],
Cell[1447300, 33325, 169, 2, 45, "Text",ExpressionUUID->"beaf9e52-4d31-476e-af0b-5539271fa197",
 CellID->570673204],
Cell[CellGroupData[{
Cell[1447494, 33331, 239, 4, 31, "Input",ExpressionUUID->"37bba77f-b6e8-4240-bb56-12fb5ae2e695",
 CellID->1028456936],
Cell[1447736, 33337, 284, 7, 45, "Output",ExpressionUUID->"3d27d2f4-03c1-4620-9fac-6341d9a46e56",
 CellID->1795487269]
}, Open  ]],
Cell[1448035, 33347, 179, 2, 45, "Text",ExpressionUUID->"756af317-5a60-41af-8169-1f30e55d6b3d",
 CellID->314322439],
Cell[1448217, 33351, 777, 22, 101, "Input",ExpressionUUID->"0e05db89-dd99-4738-ae48-8687f496b209",
 CellID->837143445],
Cell[1448997, 33375, 211, 4, 45, "Text",ExpressionUUID->"50ef8d80-6085-4a86-95da-661f58dd5f69",
 CellID->1993289450],
Cell[CellGroupData[{
Cell[1449233, 33383, 303, 7, 31, "Input",ExpressionUUID->"89ec7961-ebf1-423f-bb42-60648fb01777",
 CellID->820571455],
Cell[1449539, 33392, 331, 7, 45, "Output",ExpressionUUID->"8f141dd1-21c8-4269-9b93-421c4e29cf31",
 CellID->841184799]
}, Open  ]],
Cell[CellGroupData[{
Cell[1449907, 33404, 305, 7, 31, "Input",ExpressionUUID->"fa25c09f-3c32-4dfd-ae10-5c6096c08a71",
 CellID->1890030162],
Cell[1450215, 33413, 451, 9, 68, "Output",ExpressionUUID->"90413576-a6e5-456b-a4c8-5e8cf66a5589",
 CellID->1854675692]
}, Open  ]],
Cell[1450681, 33425, 498, 8, 134, "Text",ExpressionUUID->"b5ea344c-2e2a-4e57-8130-d4de972f784d",
 CellID->809219239],
Cell[1451182, 33435, 1012, 28, 171, "Input",ExpressionUUID->"81f1b17d-4429-4286-aa42-df336508ace0",
 CellID->2044281420],
Cell[1452197, 33465, 349, 7, 75, "Text",ExpressionUUID->"a7316d94-b97d-430c-9e73-627819330138",
 CellID->835539315],
Cell[CellGroupData[{
Cell[1452571, 33476, 375, 10, 31, "Input",ExpressionUUID->"ef55aae5-8345-497f-8e52-bb1397e797ca",
 CellID->1197286504],
Cell[1452949, 33488, 450, 11, 45, "Output",ExpressionUUID->"bb4d42e3-3386-4d17-80a0-8c21a85ed9d1",
 CellID->1658296394]
}, Open  ]],
Cell[CellGroupData[{
Cell[1453436, 33504, 380, 10, 31, "Input",ExpressionUUID->"bbe8e0da-3429-4e82-bbaa-19210f4c7c64",
 CellID->1616085673],
Cell[1453819, 33516, 446, 11, 45, "Output",ExpressionUUID->"9365d7f4-b076-44ac-9b3f-5af8318fbdd3",
 CellID->626366038]
}, Open  ]],
Cell[1454280, 33530, 316, 6, 75, "Text",ExpressionUUID->"71098c3e-5b01-40ff-a6b1-f9035020b969",
 CellID->369163072],
Cell[CellGroupData[{
Cell[1454621, 33540, 391, 10, 31, "Input",ExpressionUUID->"23330dff-a35f-4bab-9241-cfb4dff99367",
 CellID->51603430],
Cell[1455015, 33552, 449, 11, 45, "Output",ExpressionUUID->"7910958f-ff91-4af4-a623-3b365d4aeac2",
 CellID->1911513575]
}, Open  ]],
Cell[1455479, 33566, 292, 5, 75, "Text",ExpressionUUID->"093ddf03-04fe-4483-81c7-f9b7c796b64c",
 CellID->453295905],
Cell[1455774, 33573, 328, 6, 75, "Text",ExpressionUUID->"81cfb6f4-414d-41f6-a9c9-5e4d211ca6af",
 CellID->1349928268],
Cell[1456105, 33581, 1266, 35, 171, "Input",ExpressionUUID->"2b52626e-db39-477f-9ab8-2b48564c3002",
 CellID->612346313],
Cell[1457374, 33618, 164, 2, 45, "Text",ExpressionUUID->"71ebe335-edaa-42ce-8463-1690e396f7a0",
 CellID->1680160117],
Cell[CellGroupData[{
Cell[1457563, 33624, 392, 10, 31, "Input",ExpressionUUID->"17794467-5f8c-46ab-a3f5-30b36f0acee7",
 CellID->827007415],
Cell[1457958, 33636, 467, 11, 45, "Output",ExpressionUUID->"814b59a2-2219-4020-8907-7ab64e0b2e8e",
 CellID->595946959]
}, Open  ]],
Cell[1458440, 33650, 358, 6, 104, "Text",ExpressionUUID->"88b58b1d-c93a-4d6d-a025-87edb49ff1cc",
 CellID->216810305],
Cell[CellGroupData[{
Cell[1458823, 33660, 401, 10, 31, "Input",ExpressionUUID->"29f4671e-14d2-420d-8d1b-93a5945661c5",
 CellID->2075210636],
Cell[1459227, 33672, 434, 11, 45, "Output",ExpressionUUID->"f0d56686-0ed1-4444-be73-1716cb99191e",
 CellID->499175786]
}, Open  ]],
Cell[1459676, 33686, 395, 6, 104, "Text",ExpressionUUID->"bba558ee-527c-445e-a94f-78097873aeda",
 CellID->1576310120],
Cell[1460074, 33694, 191, 3, 38, "ItemNumbered",ExpressionUUID->"8b221ed0-27ea-4b69-a2fe-61a7061d01a9",
 CellTags->"5.4.2.6",
 CellID->1315310018],
Cell[1460268, 33699, 440, 7, 134, "Text",ExpressionUUID->"96ed4adb-74e8-44f8-bb1b-ce3bec77f42e",
 CellID->218810308],
Cell[1460711, 33708, 194, 2, 45, "Text",ExpressionUUID->"33405f66-9880-437b-bc90-633f3704854d",
 CellID->1684490699],
Cell[1460908, 33712, 572, 16, 78, "Input",ExpressionUUID->"605ae010-ef3c-4d7e-9d7e-cd2e6c756aef",
 CellID->687566935],
Cell[1461483, 33730, 506, 8, 163, "Text",ExpressionUUID->"ab25f61b-69d7-4f4d-b118-e6fb7c0be1d1",
 CellID->361563977],
Cell[1461992, 33740, 367, 6, 75, "Text",ExpressionUUID->"8a652927-fd62-4b6c-9173-255cdb50137f",
 CellID->437660102],
Cell[1462362, 33748, 650, 18, 78, "Input",ExpressionUUID->"1e7c2786-f48d-4bca-a54f-5788fc11a59d",
 CellID->1140276991],
Cell[1463015, 33768, 447, 7, 134, "Text",ExpressionUUID->"8c70fd75-99d0-4f8d-afc2-abcacfe44b94",
 CellID->1086891285],
Cell[1463465, 33777, 171, 2, 45, "Text",ExpressionUUID->"963f5a84-839d-4eba-be93-bc7b880b8b6a",
 CellID->935523134],
Cell[CellGroupData[{
Cell[1463661, 33783, 237, 4, 31, "Input",ExpressionUUID->"8b8bf77a-ed5e-4888-8ed5-a7eb938408b6",
 CellID->1774978396],
Cell[1463901, 33789, 498, 10, 45, "Output",ExpressionUUID->"1548b825-98f6-4f76-8e63-a479a03404e2",
 CellID->484926413]
}, Open  ]],
Cell[1464414, 33802, 337, 6, 75, "Text",ExpressionUUID->"de1624bc-be94-444b-ad0d-8312a56de2cf",
 CellID->457782926],
Cell[CellGroupData[{
Cell[1464776, 33812, 1132, 31, 101, "Input",ExpressionUUID->"ff45f5af-0596-4463-adec-26690a188c8d",
 CellID->1759818812],
Cell[1465911, 33845, 755, 18, 28, "Print",ExpressionUUID->"1f3698fb-2005-472d-94a3-e34e36912c9d",
 CellID->706657676]
}, Open  ]],
Cell[1466681, 33866, 598, 9, 163, "Text",ExpressionUUID->"45bd7e43-56e1-473c-84c2-e93967f89f95",
 CellID->1210992622],
Cell[1467282, 33877, 503, 8, 134, "Text",ExpressionUUID->"d8367642-7ec4-417a-8d8a-548ca6723ee4",
 CellID->687838712],
Cell[1467788, 33887, 215, 2, 45, "Text",ExpressionUUID->"6f3226b1-6c63-47ff-a8b7-319517cb4114",
 CellID->408967390],
Cell[1468006, 33891, 498, 12, 54, "Input",ExpressionUUID->"23c74f37-f57e-4d96-bf9d-3be832556415",
 CellID->807214911],
Cell[1468507, 33905, 163, 2, 45, "Text",ExpressionUUID->"59975fd2-822a-4a29-9bdb-b95c24bf7b8f",
 CellID->1876848807],
Cell[CellGroupData[{
Cell[1468695, 33911, 230, 4, 31, "Input",ExpressionUUID->"207f6cba-610b-45fe-8175-4322dab22a79",
 CellID->1328286800],
Cell[1468928, 33917, 498, 10, 45, "Output",ExpressionUUID->"1b40c78f-bccc-4576-9f3d-dc69cf52022d",
 CellID->649307691]
}, Open  ]],
Cell[1469441, 33930, 183, 2, 45, "Text",ExpressionUUID->"9204a4ec-e811-4d9d-a829-9aa23b162bf7",
 CellID->1549952230],
Cell[CellGroupData[{
Cell[1469649, 33936, 1112, 31, 101, "Input",ExpressionUUID->"b137b8d6-4af0-40ae-b67a-8db5116b5113",
 CellID->1070491500],
Cell[1470764, 33969, 759, 18, 28, "Print",ExpressionUUID->"ec62459f-cc64-49a0-90a3-41d21523f7e0",
 CellID->920505384]
}, Open  ]],
Cell[1471538, 33990, 1023, 15, 311, "Text",ExpressionUUID->"8f51dbbd-9fc1-4368-bf9a-9ad6578e7cc1",
 CellID->461795900],
Cell[1472564, 34007, 656, 10, 193, "Text",ExpressionUUID->"a296bb18-8862-4960-8e77-eb2479beca51",
 CellID->1550194735],
Cell[1473223, 34019, 287, 6, 63, "ItemNumbered",ExpressionUUID->"080c1c6b-023b-4c3b-aaa5-1fd5b47c7494",
 CellID->366177030],
Cell[1473513, 34027, 211, 3, 45, "Text",ExpressionUUID->"4b67bc31-c60b-46f6-a8c1-a401c57ee96f",
 CellID->1796694555],
Cell[1473727, 34032, 624, 10, 193, "Text",ExpressionUUID->"15420104-1382-43e5-9da3-40b1546fcd37",
 CellID->250905219],
Cell[1474354, 34044, 1514, 39, 125, "Input",ExpressionUUID->"4a2719fb-48a0-4a14-afa0-155044607ebe",
 CellID->725119867],
Cell[1475871, 34085, 227, 3, 45, "Text",ExpressionUUID->"2058aa2d-ede3-49a3-8e6a-fe8b9f0beb76",
 CellID->1577444081],
Cell[1476101, 34090, 240, 4, 45, "Text",ExpressionUUID->"d0640fa0-79b2-4c22-acfe-818c8979685f",
 CellID->147431392],
Cell[CellGroupData[{
Cell[1476366, 34098, 534, 14, 31, "Input",ExpressionUUID->"a47995d6-2b03-4cd1-afa2-8970c6392564",
 CellID->1356216945],
Cell[1476903, 34114, 544, 13, 45, "Output",ExpressionUUID->"fb739c03-56f9-4290-b56d-c8357d3638c3",
 CellID->972213032]
}, Open  ]],
Cell[CellGroupData[{
Cell[1477484, 34132, 532, 14, 31, "Input",ExpressionUUID->"3235b424-3c56-4435-83d2-a058859c66a9",
 CellID->1789372071],
Cell[1478019, 34148, 455, 11, 45, "Output",ExpressionUUID->"83811c03-0be1-469b-8fdc-143939dc91f5",
 CellID->1450603947]
}, Open  ]],
Cell[CellGroupData[{
Cell[1478511, 34164, 540, 14, 31, "Input",ExpressionUUID->"71b27603-3bb9-4942-80b2-6cf3747a81a3",
 CellID->1417611405],
Cell[1479054, 34180, 455, 11, 45, "Output",ExpressionUUID->"c75ac916-0c4c-4358-8c19-313908443b62",
 CellID->1421233342]
}, Open  ]],
Cell[1479524, 34194, 302, 5, 45, "Text",ExpressionUUID->"25ba5525-869c-43bc-8a30-87b831b023f5",
 CellID->208173413],
Cell[1479829, 34201, 361, 6, 104, "Text",ExpressionUUID->"8d7281dc-03f8-49a4-8455-093f6ab4325b",
 CellID->1722936263],
Cell[1480193, 34209, 1745, 50, 148, "Input",ExpressionUUID->"2e5d55fa-44c0-42b1-9dcb-2632c3133c7c",
 CellID->2021778479],
Cell[1481941, 34261, 208, 2, 45, "Text",ExpressionUUID->"26a9024e-fe40-4a6f-ab62-460e76d0fc9e",
 CellID->1199152384],
Cell[CellGroupData[{
Cell[1482174, 34267, 271, 5, 31, "Input",ExpressionUUID->"0cd4a9bb-c87a-420f-bf04-41b5a634585c",
 CellID->511025372],
Cell[1482448, 34274, 622, 18, 45, "Output",ExpressionUUID->"4d109e10-d865-4d1c-825f-58f626064784",
 CellID->746408130]
}, Open  ]],
Cell[1483085, 34295, 388, 6, 104, "Text",ExpressionUUID->"2c416eb6-c01f-4428-a77e-0b58c2d04fd2",
 CellID->1429458783],
Cell[CellGroupData[{
Cell[1483498, 34305, 330, 8, 31, "Input",ExpressionUUID->"671b80e6-61cc-4fdb-b77b-6a7679b59150",
 CellID->86600557],
Cell[1483831, 34315, 257, 6, 45, "Output",ExpressionUUID->"6938e515-c75d-4869-97a3-2eace80bb16e",
 CellID->90331683]
}, Open  ]],
Cell[1484103, 34324, 385, 6, 104, "Text",ExpressionUUID->"6cb674ef-5716-4a90-8f90-f02f577ca496",
 CellID->2081141399],
Cell[1484491, 34332, 808, 22, 78, "Input",ExpressionUUID->"4ed65ff8-1cdd-4228-8293-6bcb52bea3d9",
 CellID->1277907820],
Cell[1485302, 34356, 172, 2, 45, "Text",ExpressionUUID->"a4d8a4ec-7c7d-4e9f-a217-89c4e4392525",
 CellID->1730594561],
Cell[CellGroupData[{
Cell[1485499, 34362, 320, 7, 31, "Input",ExpressionUUID->"ed7b138c-900a-46b7-be9e-88a3b3c7c0b9",
 CellID->1508769416],
Cell[1485822, 34371, 261, 6, 45, "Output",ExpressionUUID->"9ec09fad-607b-4f22-9b0a-2956df547ca7",
 CellID->1470770179]
}, Open  ]],
Cell[1486098, 34380, 239, 4, 45, "Text",ExpressionUUID->"f137df53-c262-457b-b615-4b4c25a108a7",
 CellID->1697621483],
Cell[CellGroupData[{
Cell[1486362, 34388, 397, 10, 31, "Input",ExpressionUUID->"917a7b8f-eafb-418f-bccd-8b3c32e25e74",
 CellID->2100543289],
Cell[1486762, 34400, 503, 14, 45, "Output",ExpressionUUID->"ee6fb719-83e4-420d-bf9f-b8276086aa40",
 CellID->161429192]
}, Open  ]],
Cell[1487280, 34417, 442, 7, 134, "Text",ExpressionUUID->"0cf1d814-c56f-4e09-8972-bb3728cc71a8",
 CellID->868583783],
Cell[1487725, 34426, 272, 5, 45, "Text",ExpressionUUID->"da4d9fd6-cab8-4a4e-9fb8-a6d8fc67bdf4",
 CellID->2061300582],
Cell[1488000, 34433, 632, 17, 78, "Input",ExpressionUUID->"c0e99455-b73c-4b9d-98d9-29dc5926f5c7",
 CellID->455994698],
Cell[1488635, 34452, 411, 7, 104, "Text",ExpressionUUID->"ed30bbd3-8373-47c6-a989-b89e8a5e617d",
 CellID->852350792],
Cell[CellGroupData[{
Cell[1489071, 34463, 359, 9, 31, "Input",ExpressionUUID->"4fb39ccf-8451-4f13-b47d-2ee5a7d5c9e0",
 CellID->179459663],
Cell[1489433, 34474, 264, 6, 45, "Output",ExpressionUUID->"ede588eb-b90c-4324-8ae3-51f78ee98f19",
 CellID->1362438666]
}, Open  ]],
Cell[1489712, 34483, 260, 5, 75, "Text",ExpressionUUID->"4b656720-f506-45ca-87f7-c9bcda89eae1",
 CellID->2036015148],
Cell[CellGroupData[{
Cell[1489997, 34492, 477, 12, 31, "Input",ExpressionUUID->"ee2039ea-219c-4d86-97ca-4ae113cac9b9",
 CellID->416399789],
Cell[1490477, 34506, 525, 14, 68, "Output",ExpressionUUID->"42f1b26b-94cc-4203-ade4-21f60f719bf8",
 CellID->1355330291]
}, Open  ]],
Cell[1491017, 34523, 214, 3, 45, "Text",ExpressionUUID->"b0513012-08c4-4e61-9cf4-faeaa7eee0c3",
 CellID->677157108],
Cell[CellGroupData[{
Cell[1491256, 34530, 517, 13, 54, "Input",ExpressionUUID->"40214d14-eb15-46c3-9762-46c70e7e9a8e",
 CellID->454714936],
Cell[1491776, 34545, 490, 13, 68, "Output",ExpressionUUID->"d6ef5863-4ecf-4dc4-ad71-89c9b0ff5bc4",
 CellID->440360315]
}, Open  ]],
Cell[1492281, 34561, 189, 2, 45, "Text",ExpressionUUID->"5659c611-4040-455e-98f3-0afb0742e479",
 CellID->907166643],
Cell[1492473, 34565, 1250, 35, 125, "Input",ExpressionUUID->"1bede733-68c4-410e-8d6f-b3174d30ce91",
 CellID->1497829736],
Cell[1493726, 34602, 353, 7, 75, "Text",ExpressionUUID->"1f91732b-b397-4d82-ab03-e2c538cabf0e",
 CellID->203886509],
Cell[CellGroupData[{
Cell[1494104, 34613, 293, 6, 31, "Input",ExpressionUUID->"31131528-fccc-4cd6-8aef-03685ce3f558",
 CellID->312547726],
Cell[1494400, 34621, 493, 13, 68, "Output",ExpressionUUID->"67161d8e-ea2e-4a6d-ae20-247292d7b67f",
 CellID->1624040057]
}, Open  ]],
Cell[1494908, 34637, 379, 7, 75, "Text",ExpressionUUID->"d0ac07a6-7bef-4d3e-a0b7-3307a6b6bd50",
 CellID->724084629],
Cell[CellGroupData[{
Cell[1495312, 34648, 308, 6, 31, "Input",ExpressionUUID->"3a00a454-33c3-4ede-886e-9bcd0f8ac870",
 CellID->955513121],
Cell[1495623, 34656, 2054, 58, 232, "Output",ExpressionUUID->"50945d62-d1c5-4a04-8412-2f3e35643915",
 CellID->1696897606]
}, Open  ]],
Cell[1497692, 34717, 325, 6, 75, "Text",ExpressionUUID->"dbdb7b35-379b-4a82-8aa1-2ab2f6148936",
 CellID->1175231882],
Cell[1498020, 34725, 809, 22, 78, "Input",ExpressionUUID->"0ff320aa-eeb1-4d2e-a5f1-bf6f895077e8",
 CellID->197234439],
Cell[1498832, 34749, 633, 17, 78, "Input",ExpressionUUID->"4e135e30-13d1-4f2b-92fa-3ba1eef03f12",
 CellID->171215863],
Cell[1499468, 34768, 1250, 35, 125, "Input",ExpressionUUID->"e4b2ea9f-8dc8-4b5b-9a27-e952bb882148",
 CellID->1151846425],
Cell[1500721, 34805, 171, 2, 38, "ItemNumbered",ExpressionUUID->"25c10ad1-40ce-43e0-9504-1547d658bf6b",
 CellID->1193032972],
Cell[1500895, 34809, 212, 3, 45, "Text",ExpressionUUID->"370ee982-bcb9-4ca6-acfd-d54d74e219c2",
 CellID->684506082],
Cell[1501110, 34814, 715, 12, 222, "Text",ExpressionUUID->"9a7538a1-c322-4042-9b19-4eb01886ffa6",
 CellID->1983466551],
Cell[1501828, 34828, 247, 3, 45, "Text",ExpressionUUID->"eb681af5-cfbe-4d02-8a1a-64e401cd5e38",
 CellID->115996149],
Cell[1502078, 34833, 329, 6, 75, "Text",ExpressionUUID->"afa4a27b-bf6c-47ac-af69-7b4104c9862c",
 CellID->1156480248],
Cell[1502410, 34841, 703, 21, 101, "Input",ExpressionUUID->"1b6ddb49-c6eb-49c0-bb15-9a5d37d07cd5",
 CellID->1684504142],
Cell[1503116, 34864, 166, 2, 45, "Text",ExpressionUUID->"dccb861a-6b14-4f67-93fe-64bb81080e3b",
 CellID->754170359],
Cell[CellGroupData[{
Cell[1503307, 34870, 276, 6, 31, "Input",ExpressionUUID->"f9c8daed-af62-40f0-b3a0-3d0855c1c4c2",
 CellID->1945615091],
Cell[1503586, 34878, 452, 9, 45, "Output",ExpressionUUID->"6f0fe3ee-011b-4d72-9417-42a4fe4a79fa",
 CellID->69404590]
}, Open  ]],
Cell[1504053, 34890, 220, 3, 45, "Text",ExpressionUUID->"b203544d-f953-4496-bea7-672093afb54e",
 CellID->399323809],
Cell[1504276, 34895, 219, 4, 45, "Text",ExpressionUUID->"ab770dc3-85c9-40f4-8d71-0f36a650c293",
 CellID->772219892],
Cell[CellGroupData[{
Cell[1504520, 34903, 253, 5, 31, "Input",ExpressionUUID->"817e3867-dadf-4bff-9ff7-c66fdb6d0808",
 CellID->469624191],
Cell[1504776, 34910, 223, 5, 45, "Output",ExpressionUUID->"7f0bcebf-6857-4191-833d-af38e9862b30",
 CellID->1544650935]
}, Open  ]],
Cell[CellGroupData[{
Cell[1505036, 34920, 253, 5, 31, "Input",ExpressionUUID->"f33af838-ed08-4dbe-92a6-ae551c485dbc",
 CellID->951708166],
Cell[1505292, 34927, 224, 5, 45, "Output",ExpressionUUID->"98caf053-f014-4d7a-bc48-aa5dce22d12a",
 CellID->1158466948]
}, Open  ]],
Cell[CellGroupData[{
Cell[1505553, 34937, 255, 5, 31, "Input",ExpressionUUID->"61a80703-fa71-45b2-8b92-b4f13e2a3ba2",
 CellID->2097843239],
Cell[1505811, 34944, 224, 5, 45, "Output",ExpressionUUID->"87ef4f4b-cfc9-45db-a3bf-8c1517f94b92",
 CellID->1423656050]
}, Open  ]],
Cell[CellGroupData[{
Cell[1506072, 34954, 253, 5, 31, "Input",ExpressionUUID->"e9830e83-030b-43ac-815b-e35e83f0bb32",
 CellID->1919070601],
Cell[1506328, 34961, 226, 5, 45, "Output",ExpressionUUID->"60a9a016-7861-4d48-88cd-3a9bbf2a0a5b",
 CellID->1958105930]
}, Open  ]],
Cell[CellGroupData[{
Cell[1506591, 34971, 253, 5, 31, "Input",ExpressionUUID->"8940b255-b4a1-46eb-ad38-7c5d9137ceff",
 CellID->2109296036],
Cell[1506847, 34978, 228, 5, 45, "Output",ExpressionUUID->"bfd1ac81-05a6-4d46-8e56-7f3e110a8b3a",
 CellID->596270776]
}, Open  ]],
Cell[1507090, 34986, 672, 10, 222, "Text",ExpressionUUID->"88dbe58d-f3f2-4827-ae3e-033a42fed7aa",
 CellID->1364235330],
Cell[1507765, 34998, 326, 6, 75, "Text",ExpressionUUID->"a5f31676-c35d-439e-a291-e94df36b6c65",
 CellID->1301731931],
Cell[1508094, 35006, 1004, 30, 101, "Input",ExpressionUUID->"6e44af6e-6226-46e8-8614-14dedf232008",
 CellID->232007551],
Cell[1509101, 35038, 176, 2, 45, "Text",ExpressionUUID->"49568344-9438-4c1c-a5dd-76ef6f270426",
 CellID->733967506],
Cell[CellGroupData[{
Cell[1509302, 35044, 251, 5, 31, "Input",ExpressionUUID->"d45e3d63-f5ee-4719-a3f4-d25a9c1bbd6b",
 CellID->661846080],
Cell[1509556, 35051, 5726, 151, 232, "Output",ExpressionUUID->"582d45d8-e4f4-4877-9e63-7aa2dfbe8afc",
 CellID->1255439629]
}, Open  ]],
Cell[1515297, 35205, 303, 5, 75, "Text",ExpressionUUID->"8c895685-a551-49ee-b821-9215fe63b874",
 CellID->1147012828],
Cell[CellGroupData[{
Cell[1515625, 35214, 585, 17, 31, "Input",ExpressionUUID->"c3794583-64a0-4455-a253-75c9015565b7",
 CellID->1395605855],
Cell[1516213, 35233, 35255, 1035, 341, "Output",ExpressionUUID->"1496dc06-7535-4cb5-94ec-9ee640160900",
 CellID->1603548856]
}, Open  ]],
Cell[1551483, 36271, 226, 5, 45, "Text",ExpressionUUID->"2a58acdd-0df7-4e11-b37f-ba953ef53d66",
 CellID->2073336589],
Cell[CellGroupData[{
Cell[1551734, 36280, 384, 10, 31, "Input",ExpressionUUID->"babc70b0-26a5-4713-af76-b795a79d26e7",
 CellID->2133217785],
Cell[1552121, 36292, 739, 21, 68, "Output",ExpressionUUID->"14d6faf8-d1e9-49a8-991d-ac999d9c146f",
 CellID->415166728]
}, Open  ]],
Cell[1552875, 36316, 160, 2, 45, "Text",ExpressionUUID->"c4d6d41d-3df5-4378-9e04-218dd36b20a7",
 CellID->532828393],
Cell[CellGroupData[{
Cell[1553060, 36322, 564, 16, 31, "Input",ExpressionUUID->"482e53de-2b35-4ea8-83e2-30f35ed2fd5b",
 CellID->1218539746],
Cell[1553627, 36340, 943, 29, 68, "Output",ExpressionUUID->"ca72fbe0-1ca9-4eac-8307-2dc43a6d7bb9",
 CellID->1147488098]
}, Open  ]],
Cell[1554585, 36372, 380, 6, 104, "Text",ExpressionUUID->"cf835925-e21d-496f-be75-713e2cc67eb8",
 CellID->1429313026],
Cell[1554968, 36380, 244, 3, 45, "Text",ExpressionUUID->"9813183b-a2af-4f5c-ad12-561cb66f9970",
 CellID->1778474255],
Cell[1555215, 36385, 481, 7, 134, "Text",ExpressionUUID->"e92acf8a-fa83-40f2-adc7-b553a5dd2b2c",
 CellID->998250651],
Cell[1555699, 36394, 244, 5, 45, "Text",ExpressionUUID->"2df619d0-7138-4a9c-9688-c84f02f88ae4",
 CellID->1104031334],
Cell[1555946, 36401, 964, 26, 171, "Input",ExpressionUUID->"045acaaa-0923-47fe-9f13-9cef056685bd",
 CellID->2118968720],
Cell[1556913, 36429, 171, 2, 45, "Text",ExpressionUUID->"689f5a0e-913a-47ca-86e7-b804d9ac5ed2",
 CellID->1597880391],
Cell[CellGroupData[{
Cell[1557109, 36435, 227, 4, 31, "Input",ExpressionUUID->"20be6478-8993-414f-9d86-1088304aa264",
 CellID->1703081379],
Cell[1557339, 36441, 174, 3, 45, "Output",ExpressionUUID->"009c196a-6ac0-408f-bb4c-abde0ed2b3d0",
 CellID->2106240598]
}, Open  ]],
Cell[1557528, 36447, 249, 3, 45, "Text",ExpressionUUID->"a4faf674-1a6a-4774-9474-eebdc447216b",
 CellID->465293438],
Cell[1557780, 36452, 407, 7, 104, "Text",ExpressionUUID->"b00b7531-fffc-4d00-92f2-519caa767a86",
 CellID->290392868],
Cell[1558190, 36461, 1369, 37, 172, "Input",ExpressionUUID->"5be71225-d03b-4957-97e3-d1b9cc056d81",
 CellID->1613796362],
Cell[1559562, 36500, 171, 2, 45, "Text",ExpressionUUID->"5d8c35a9-c5f2-4636-a8b7-2d59cdfa9d6f",
 CellID->844313309],
Cell[CellGroupData[{
Cell[1559758, 36506, 260, 5, 31, "Input",ExpressionUUID->"6f4df60f-0c1b-4d46-9902-b3c2c7e70d9e",
 CellID->651908064],
Cell[1560021, 36513, 685, 13, 68, "Output",ExpressionUUID->"511f5fc8-48c3-42a6-8383-e17c9fdafcd6",
 CellID->885501547]
}, Open  ]],
Cell[1560721, 36529, 662, 10, 193, "Text",ExpressionUUID->"1f2b7611-c3bf-4bbd-9368-e69fdbb43734",
 CellID->562826719],
Cell[1561386, 36541, 260, 4, 45, "Text",ExpressionUUID->"a4360257-af33-459a-9361-caa4645b1068",
 CellID->1562567876],
Cell[1561649, 36547, 731, 11, 222, "Text",ExpressionUUID->"545b39bd-1fc6-4781-aa1a-57ac7ddfd05c",
 CellID->851667807],
Cell[1562383, 36560, 940, 15, 281, "Text",ExpressionUUID->"28d499bf-b472-4dd9-91b2-c15ce342c76b",
 CellID->961856278],
Cell[1563326, 36577, 682, 10, 193, "Text",ExpressionUUID->"11c2c963-1d93-4461-a178-298e27854520",
 CellID->1576832245],
Cell[1564011, 36589, 265, 4, 31, "Input",ExpressionUUID->"b6a9fafe-9157-4c28-bb85-bb367ed7c2ca",
 CellID->527747649],
Cell[1564279, 36595, 374, 6, 104, "Text",ExpressionUUID->"766a5a2a-deba-4c89-acb8-8278874588c0",
 CellID->1807415964],
Cell[1564656, 36603, 848, 24, 78, "Input",ExpressionUUID->"b5c27032-2be3-45ea-be37-4d70f9476123",
 CellID->1204400409],
Cell[1565507, 36629, 880, 13, 222, "Text",ExpressionUUID->"c241db52-0a08-4a0e-b8a1-db07a926d24e",
 CellID->153613329],
Cell[CellGroupData[{
Cell[1566412, 36646, 261, 5, 31, "Input",ExpressionUUID->"43fb141f-1b2e-44f0-b12e-a664e4c68fc8",
 CellID->145466702],
Cell[1566676, 36653, 659, 13, 68, "Output",ExpressionUUID->"4b5c16ac-3447-4651-b163-9a74396857d9",
 CellID->997187589]
}, Open  ]],
Cell[1567350, 36669, 661, 10, 193, "Text",ExpressionUUID->"e4c57dc2-9772-49fa-9f70-670328afe935",
 CellID->769427135],
Cell[1568014, 36681, 420, 7, 104, "Text",ExpressionUUID->"e19dffc2-58df-4f2f-978c-2af3b8624ee9",
 CellID->1470434941]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1568483, 36694, 157, 2, 68, "Subsection",ExpressionUUID->"ba24dfbd-64ba-4fbf-b829-f3e60ae9c00a",
 CellID->1147783539],
Cell[CellGroupData[{
Cell[1568665, 36700, 177, 2, 66, "Subsubsection",ExpressionUUID->"3b2eddc8-8e51-4261-af6b-51e2183ceec2",
 CellID->2099822619],
Cell[1568845, 36704, 502, 8, 134, "Text",ExpressionUUID->"23d6555d-6666-44ef-94aa-9cf9dcae7a25",
 CellID->2119986382],
Cell[1569350, 36714, 173, 2, 45, "Text",ExpressionUUID->"2e05967e-43e0-453b-bddb-c58914d0113f",
 CellID->1535801123],
Cell[1569526, 36718, 249, 4, 31, "Input",ExpressionUUID->"c8017ed0-6c83-460c-9777-5be731ff74ca",
 CellID->1443391545],
Cell[1569778, 36724, 172, 2, 45, "Text",ExpressionUUID->"d8a4d0bf-a32f-4b3f-b9f1-85a8f62f6865",
 CellID->638534163],
Cell[CellGroupData[{
Cell[1569975, 36730, 397, 9, 54, "Input",ExpressionUUID->"a7a55660-0fcd-4774-9f59-d2648c39b0d2",
 CellID->2054278904],
Cell[1570375, 36741, 337, 10, 45, "Output",ExpressionUUID->"441dee7d-6426-42be-8829-284b5c7a9263",
 CellID->258269151]
}, Open  ]],
Cell[1570727, 36754, 904, 14, 252, "Text",ExpressionUUID->"2174022b-ef77-430d-86b6-fc052b49ea06",
 CellID->665170270],
Cell[1571634, 36770, 294, 5, 75, "Text",ExpressionUUID->"0a0993de-6dec-4c41-b77d-b391ffd0a1ac",
 CellID->2007594723]
}, Open  ]],
Cell[CellGroupData[{
Cell[1571965, 36780, 156, 2, 66, "Subsubsection",ExpressionUUID->"2b2de5ca-fa03-40bd-a684-e215e573ceb0",
 CellID->1412838824],
Cell[1572124, 36784, 164, 2, 38, "ItemNumbered",ExpressionUUID->"a9c8bc2b-2d31-4c87-99bd-444f38d7dfea",
 CellID->855430089],
Cell[CellGroupData[{
Cell[1572313, 36790, 358, 8, 31, "Input",ExpressionUUID->"31de0d8f-b8f1-439a-b434-66637dca79a5",
 CellID->1757010654],
Cell[1572674, 36800, 489, 11, 45, "Output",ExpressionUUID->"d99678b0-ad05-4555-a2c9-4425551bd6e8",
 CellID->1923341798]
}, Open  ]],
Cell[1573178, 36814, 326, 5, 75, "Text",ExpressionUUID->"bd7f7b2e-a584-4329-8d5e-f90650cd5075",
 CellID->1681744342],
Cell[CellGroupData[{
Cell[1573529, 36823, 331, 7, 31, "Input",ExpressionUUID->"810d2be4-8cfb-4e33-a57b-15a0118c530a",
 CellID->830183141],
Cell[1573863, 36832, 1635, 25, 185, "Output",ExpressionUUID->"b9265da4-9b45-46d9-bba8-4ba3cfd70b08",
 CellID->378923841]
}, Open  ]],
Cell[CellGroupData[{
Cell[1575535, 36862, 284, 6, 31, "Input",ExpressionUUID->"5c29a8ff-9da3-43d6-9606-17a35441b468",
 CellID->1425048935],
Cell[1575822, 36870, 226, 5, 45, "Output",ExpressionUUID->"20569e4a-1688-4232-8589-724e2143b6e9",
 CellID->947418280]
}, Open  ]],
Cell[1576063, 36878, 203, 4, 45, "Text",ExpressionUUID->"cb0979c9-fcc4-4a12-8792-ef130d26a11d",
 CellID->1815273102],
Cell[CellGroupData[{
Cell[1576291, 36886, 291, 6, 31, "Input",ExpressionUUID->"ddf778e4-df30-4924-a860-e01ca16d9368",
 CellID->1523401307],
Cell[1576585, 36894, 229, 5, 45, "Output",ExpressionUUID->"dab8ad42-a221-4c27-926f-575b1eb20cca",
 CellID->1671124595]
}, Open  ]],
Cell[1576829, 36902, 188, 2, 38, "ItemNumbered",ExpressionUUID->"c6b79789-d809-47a2-b32a-7281d406a5c1",
 CellID->1799932699],
Cell[1577020, 36906, 523, 8, 134, "Text",ExpressionUUID->"416345db-5e4b-4c06-a077-e68f8ebed817",
 CellID->2014220451],
Cell[1577546, 36916, 961, 27, 101, "Input",ExpressionUUID->"40c13b9f-a3ac-462a-9936-85db711f011b",
 CellID->1033072071],
Cell[1578510, 36945, 367, 7, 75, "Text",ExpressionUUID->"48a85fdb-bea7-4e1a-a0ed-a8e896860f04",
 CellID->1416638223],
Cell[CellGroupData[{
Cell[1578902, 36956, 350, 8, 31, "Input",ExpressionUUID->"292ddfb2-2337-4d73-8925-c2e8e2ee3fde",
 CellID->1983661419],
Cell[1579255, 36966, 374, 11, 45, "Output",ExpressionUUID->"2dc9a2c6-6f27-48b3-a3a4-a1a217668c4f",
 CellID->1214273702]
}, Open  ]],
Cell[1579644, 36980, 246, 5, 38, "ItemNumbered",ExpressionUUID->"3362f809-d629-444f-9cb6-790dbc3c4b57",
 CellID->761012073],
Cell[1579893, 36987, 404, 7, 104, "Text",ExpressionUUID->"3990e340-cfb2-41d0-beba-2d66b78f428e",
 CellID->2064793026],
Cell[1580300, 36996, 869, 24, 101, "Input",ExpressionUUID->"e837e4f6-972e-4f2c-b9b2-ba39a067f0fc",
 CellID->1453390345],
Cell[1581172, 37022, 163, 2, 45, "Text",ExpressionUUID->"1d9c7105-6e20-4013-a0e0-7f41ecead7b4",
 CellID->730420748],
Cell[CellGroupData[{
Cell[1581360, 37028, 378, 9, 31, "Input",ExpressionUUID->"5b94f571-e431-48b7-a182-8e11762fb71c",
 CellID->1785433074],
Cell[1581741, 37039, 633, 18, 45, "Output",ExpressionUUID->"f94e629f-bbf3-40d7-bc00-868da26c71fb",
 CellID->1965135346]
}, Open  ]],
Cell[1582389, 37060, 865, 16, 222, "Text",ExpressionUUID->"b7494d4e-13cf-4a0b-a9b8-cf701d703d25",
 CellID->1878753009],
Cell[1583257, 37078, 1116, 33, 125, "Input",ExpressionUUID->"67c05c6e-4550-4777-aa57-95efb343ea68",
 CellID->60503200],
Cell[1584376, 37113, 269, 5, 75, "Text",ExpressionUUID->"63e893a6-1ce8-44f8-8ea6-5a11e850998a",
 CellID->666797397],
Cell[CellGroupData[{
Cell[1584670, 37122, 543, 15, 31, "Input",ExpressionUUID->"e9bc04fe-8ec6-42d1-8354-4e979a4886c0",
 CellID->2145324314],
Cell[1585216, 37139, 610, 16, 45, "Output",ExpressionUUID->"0ab07775-2186-4ef3-82e5-95d033f37191",
 CellID->1706229860]
}, Open  ]],
Cell[CellGroupData[{
Cell[1585863, 37160, 548, 15, 54, "Input",ExpressionUUID->"8fb9cfb0-863a-4c2b-bb18-7fab9e00c024",
 CellID->1256118629],
Cell[1586414, 37177, 531, 14, 45, "Output",ExpressionUUID->"e8230c7b-6152-48a3-8a67-decf8d12f67b",
 CellID->2013043424]
}, Open  ]],
Cell[1586960, 37194, 487, 8, 134, "Text",ExpressionUUID->"6cad30ae-81f9-445c-b09c-3089b5bed79d",
 CellID->1763452330],
Cell[1587450, 37204, 181, 2, 38, "ItemNumbered",ExpressionUUID->"560d0eae-647b-430d-b6b5-a380fbf75259",
 CellID->1899692770],
Cell[1587634, 37208, 234, 5, 45, "Text",ExpressionUUID->"339b615d-cf78-4aed-971a-34b7339ff217",
 CellID->1497005441],
Cell[1587871, 37215, 514, 12, 54, "Input",ExpressionUUID->"ac515588-93b9-4356-9b59-e47c0370af6a",
 CellID->1175586561],
Cell[1588388, 37229, 171, 2, 45, "Text",ExpressionUUID->"20a57fce-72e2-46b0-be25-3e0c862d20ae",
 CellID->1823985034],
Cell[CellGroupData[{
Cell[1588584, 37235, 260, 5, 31, "Input",ExpressionUUID->"a85ef920-f195-491f-ab2d-86299d5cfe74",
 CellID->940765514],
Cell[1588847, 37242, 325, 7, 45, "Output",ExpressionUUID->"0281e3ca-d579-4073-9766-8e5b5d796caa",
 CellID->444481849]
}, Open  ]],
Cell[1589187, 37252, 381, 6, 104, "Text",ExpressionUUID->"17c2ff76-68d8-4ac0-bf41-5e9785be4883",
 CellID->1458311877],
Cell[1589571, 37260, 170, 2, 38, "ItemNumbered",ExpressionUUID->"d3f5992f-cd79-4ded-9d33-6181656a87b7",
 CellID->1095590],
Cell[1589744, 37264, 399, 6, 104, "Text",ExpressionUUID->"69caaeaf-f6f1-4ef5-93e4-41252ab6c3d4",
 CellID->1233711954],
Cell[CellGroupData[{
Cell[1590168, 37274, 309, 7, 31, "Input",ExpressionUUID->"7957bc94-4783-4e46-a17b-2d36f69ce5a5",
 CellID->750052760],
Cell[1590480, 37283, 175, 3, 45, "Output",ExpressionUUID->"8f2d76bc-67e1-4f78-88de-f778dcc74518",
 CellID->2044260279]
}, Open  ]],
Cell[CellGroupData[{
Cell[1590692, 37291, 325, 8, 31, "Input",ExpressionUUID->"83a70265-4e66-4d27-9c43-6e5404be4663",
 CellID->1049243146],
Cell[1591020, 37301, 172, 3, 45, "Output",ExpressionUUID->"6c514c2f-b82e-4635-945b-f8c97ff6f147",
 CellID->511643690]
}, Open  ]],
Cell[1591207, 37307, 161, 2, 45, "Text",ExpressionUUID->"a0e69212-91fb-44c2-a89c-7755e7170406",
 CellID->670975242],
Cell[CellGroupData[{
Cell[1591393, 37313, 413, 11, 31, "Input",ExpressionUUID->"de87c115-be06-4d2f-b782-8c36ad56ffbf",
 CellID->497154705],
Cell[1591809, 37326, 175, 3, 45, "Output",ExpressionUUID->"e8e8dfb5-f792-41f9-8bfc-ae9ee5f1427a",
 CellID->1492511409]
}, Open  ]],
Cell[1591999, 37332, 355, 6, 104, "Text",ExpressionUUID->"c8ce4fd0-d36a-43eb-9cd4-372987f89f0f",
 CellID->2030254103],
Cell[1592357, 37340, 922, 27, 125, "Input",ExpressionUUID->"27cc3908-f4fd-4bca-a325-a889c1604462",
 CellID->1363873684],
Cell[1593282, 37369, 164, 2, 45, "Text",ExpressionUUID->"45de3237-fac4-40ff-98d5-b2e15b0dbf0e",
 CellID->1422369258],
Cell[CellGroupData[{
Cell[1593471, 37375, 314, 7, 31, "Input",ExpressionUUID->"05d44c92-2b83-4720-90cd-5b0f2de856af",
 CellID->860517965],
Cell[1593788, 37384, 174, 3, 45, "Output",ExpressionUUID->"6bb82ff1-f9e4-4393-b05f-657f1fc290da",
 CellID->834058032]
}, Open  ]],
Cell[CellGroupData[{
Cell[1593999, 37392, 330, 8, 31, "Input",ExpressionUUID->"17b6e780-6e5a-432a-be87-82601a92d3cd",
 CellID->1529700212],
Cell[1594332, 37402, 170, 3, 45, "Output",ExpressionUUID->"7c47b171-3d8c-4dac-ad09-5aa8ffa1e964",
 CellID->557010111]
}, Open  ]],
Cell[1594517, 37408, 242, 5, 75, "Text",ExpressionUUID->"56a4f85c-cd19-40f7-8cc4-12cd3eb48519",
 CellID->787718304],
Cell[1594762, 37415, 607, 17, 78, "Input",ExpressionUUID->"0a569c7a-9435-45b2-922a-39ecdd38f109",
 CellID->833322915],
Cell[1595372, 37434, 169, 2, 45, "Text",ExpressionUUID->"011cac25-fcca-4ff8-b2cb-9bd559459df4",
 CellID->1869751625],
Cell[CellGroupData[{
Cell[1595566, 37440, 318, 7, 31, "Input",ExpressionUUID->"a5b60c69-4191-4276-b538-22cf86627284",
 CellID->2146749109],
Cell[1595887, 37449, 177, 3, 45, "Output",ExpressionUUID->"aa635ba8-6bdd-421f-bc0d-c22bfb454916",
 CellID->1445838299]
}, Open  ]],
Cell[CellGroupData[{
Cell[1596101, 37457, 330, 8, 31, "Input",ExpressionUUID->"1c59c050-c859-4905-b4a0-869046649b23",
 CellID->1853574414],
Cell[1596434, 37467, 170, 3, 45, "Output",ExpressionUUID->"04e104d6-8daf-47aa-8ecb-5e6be2fc2693",
 CellID->213534516]
}, Open  ]],
Cell[1596619, 37473, 296, 5, 75, "Text",ExpressionUUID->"6114d90f-5f7e-410d-b668-e7756477a172",
 CellID->429436275],
Cell[1596918, 37480, 186, 2, 38, "ItemNumbered",ExpressionUUID->"10aded72-f0a5-4843-b69a-40a76edf2cd5",
 CellID->1990420005],
Cell[1597107, 37484, 824, 13, 252, "Text",ExpressionUUID->"ac6ff7da-cf74-4832-a5e3-299b0e5dc226",
 CellID->1636254716],
Cell[1597934, 37499, 212, 2, 45, "Text",ExpressionUUID->"f9261ced-bb42-4d2b-93ae-7e982cb5ddbb",
 CellID->447709942],
Cell[CellGroupData[{
Cell[1598171, 37505, 376, 10, 31, "Input",ExpressionUUID->"111c0504-9e3d-4523-8711-f247d1b0b0c5",
 CellID->1312792236],
Cell[1598550, 37517, 429, 12, 81, "Output",ExpressionUUID->"73f44186-bf7a-46a0-bb5b-6eeec6f93de7",
 CellID->173789897]
}, Open  ]],
Cell[1598994, 37532, 157, 2, 45, "Text",ExpressionUUID->"9eebbc07-3a4f-42a0-9067-0f39da90e467",
 CellID->309038959],
Cell[1599154, 37536, 517, 14, 54, "Input",ExpressionUUID->"b306457b-189c-4bfe-bcab-01405b2c1e40",
 CellID->251098044],
Cell[1599674, 37552, 214, 4, 45, "Text",ExpressionUUID->"41d78b98-d221-432c-8364-89584de6f8e1",
 CellID->393794884],
Cell[CellGroupData[{
Cell[1599913, 37560, 280, 6, 31, "Input",ExpressionUUID->"c008d00e-17b5-471d-887e-486940443ad2",
 CellID->50368640],
Cell[1600196, 37568, 277, 7, 45, "Output",ExpressionUUID->"61cd57c8-4ce7-4e76-86ad-bebe9a54a6a9",
 CellID->1896741372]
}, Open  ]],
Cell[1600488, 37578, 214, 4, 45, "Text",ExpressionUUID->"afcdb3bc-f144-4251-9381-9fe63c945000",
 CellID->1284983136],
Cell[CellGroupData[{
Cell[1600727, 37586, 283, 6, 31, "Input",ExpressionUUID->"09032871-2ddd-431f-8cee-07742d04b95e",
 CellID->1096740031],
Cell[1601013, 37594, 276, 7, 45, "Output",ExpressionUUID->"53caca6b-3f14-45e0-927c-6935a96c9475",
 CellID->641035925]
}, Open  ]],
Cell[1601304, 37604, 203, 4, 45, "Text",ExpressionUUID->"f583d56d-d42b-4851-a201-044c5c6b73bf",
 CellID->2112818123],
Cell[CellGroupData[{
Cell[1601532, 37612, 289, 7, 31, "Input",ExpressionUUID->"b4e3971d-6129-4bf6-94c2-4294f74944bd",
 CellID->1392033593],
Cell[1601824, 37621, 362, 11, 60, "Output",ExpressionUUID->"06444e09-96e1-4b39-8619-a25acb501a0b",
 CellID->1873220888]
}, Open  ]],
Cell[CellGroupData[{
Cell[1602223, 37637, 282, 6, 31, "Input",ExpressionUUID->"6095b59e-f779-48a2-a717-078c65e4d584",
 CellID->668077308],
Cell[1602508, 37645, 223, 5, 45, "Output",ExpressionUUID->"3aa7c514-e7a9-467c-b9b4-ba396f0c740c",
 CellID->1675428285]
}, Open  ]],
Cell[1602746, 37653, 438, 7, 134, "Text",ExpressionUUID->"f85e5ca0-011c-474d-8439-653a7bebfc8f",
 CellID->1117606531],
Cell[1603187, 37662, 191, 2, 45, "Text",ExpressionUUID->"87856e08-824a-4b0f-9602-f2b2fcf856a9",
 CellID->1038737513],
Cell[1603381, 37666, 922, 25, 78, "Input",ExpressionUUID->"a865dc0d-5f3a-41b0-b6f7-fb1adb26d6de",
 CellID->1406481896],
Cell[1604306, 37693, 821, 12, 252, "Text",ExpressionUUID->"3b222fb7-ebe5-4613-bc56-a86ef7f1bd50",
 CellID->217586268],
Cell[1605130, 37707, 177, 2, 45, "Text",ExpressionUUID->"d29a2df2-3f16-460b-a811-99c37d5d4ca3",
 CellID->959405075],
Cell[CellGroupData[{
Cell[1605332, 37713, 295, 6, 31, "Input",ExpressionUUID->"eb115fc7-4ba2-4bc2-8d4d-e4d3a66a53ba",
 CellID->465524542],
Cell[1605630, 37721, 199, 4, 45, "Output",ExpressionUUID->"26c40436-e84b-4b81-a381-1156aeca7f40",
 CellID->198820662]
}, Open  ]],
Cell[CellGroupData[{
Cell[1605866, 37730, 297, 6, 31, "Input",ExpressionUUID->"a8122c5e-9e1f-4129-ba7d-3dffe3e0cf16",
 CellID->250482628],
Cell[1606166, 37738, 276, 7, 45, "Output",ExpressionUUID->"ffc23108-d794-429a-a47a-ef3f60b36733",
 CellID->377205604]
}, Open  ]],
Cell[CellGroupData[{
Cell[1606479, 37750, 296, 6, 31, "Input",ExpressionUUID->"d9fc430a-7b2e-42fe-a296-463fe5d15c65",
 CellID->1772462266],
Cell[1606778, 37758, 411, 12, 45, "Output",ExpressionUUID->"ebee7d6a-20e5-49c9-8d7a-e222dc21246f",
 CellID->302779553]
}, Open  ]],
Cell[1607204, 37773, 174, 2, 45, "Text",ExpressionUUID->"7f4695ae-0745-4c99-9fa8-d38cb96b7f83",
 CellID->1427187528],
Cell[CellGroupData[{
Cell[1607403, 37779, 675, 21, 31, "Input",ExpressionUUID->"231a9797-0450-4ef3-a686-1645a43ddf1e",
 CellID->1500303242],
Cell[1608081, 37802, 414, 12, 45, "Output",ExpressionUUID->"b09c76fe-b4b5-49da-86c5-e187626f9e72",
 CellID->1303422497]
}, Open  ]],
Cell[1608510, 37817, 181, 2, 45, "Text",ExpressionUUID->"06a0a4f8-b96e-42ac-bb24-8be988b41fea",
 CellID->141224032],
Cell[CellGroupData[{
Cell[1608716, 37823, 343, 9, 31, "Input",ExpressionUUID->"e745955f-d513-4ad5-a931-98f7e442b5af",
 CellID->1722152456],
Cell[1609062, 37834, 661, 21, 49, "Output",ExpressionUUID->"a5fbe60f-8cf7-40c9-859e-358df8c21bf0",
 CellID->744914472]
}, Open  ]],
Cell[1609738, 37858, 416, 7, 104, "Text",ExpressionUUID->"c5b89c91-33e7-46d7-a6a7-91b9fb688b5e",
 CellID->2095352541],
Cell[1610157, 37867, 307, 5, 75, "Text",ExpressionUUID->"582c1c32-4699-4a70-97e6-164cb84c9113",
 CellID->680397058],
Cell[1610467, 37874, 178, 2, 38, "ItemNumbered",ExpressionUUID->"f47264d0-7e11-40fe-b401-9555ae046cdb",
 CellID->2005808720],
Cell[1610648, 37878, 1041, 15, 311, "Text",ExpressionUUID->"fe9bc8c7-7fb8-4085-8ef9-8d14b08018dc",
 CellID->428866434],
Cell[1611692, 37895, 921, 26, 101, "Input",ExpressionUUID->"74f2c853-5a64-41f9-a2f7-cf50e15fec29",
 CellID->1935484368],
Cell[1612616, 37923, 154, 2, 45, "Text",ExpressionUUID->"32b2de5e-e02d-464f-85f4-f3a0d297d5da",
 CellID->1263773503],
Cell[CellGroupData[{
Cell[1612795, 37929, 382, 10, 31, "Input",ExpressionUUID->"16a95321-cded-40de-b404-1546e05cbf46",
 CellID->641155010],
Cell[1613180, 37941, 881, 22, 68, "Output",ExpressionUUID->"1623c9ea-5414-4b2b-860d-3bcd1ea4587c",
 CellID->18910504]
}, Open  ]],
Cell[1614076, 37966, 207, 2, 45, "Text",ExpressionUUID->"a5e24dee-9e31-4253-b870-9c3e83c7c76b",
 CellID->1260972],
Cell[CellGroupData[{
Cell[1614308, 37972, 303, 6, 31, "Input",ExpressionUUID->"bd486e0c-6758-4aed-b70a-e4831bd744d3",
 CellID->1004572373],
Cell[1614614, 37980, 672, 12, 68, "Output",ExpressionUUID->"5863ab09-e7ba-4a57-a1c8-c4b72d2bb330",
 CellID->846348298]
}, Open  ]],
Cell[CellGroupData[{
Cell[1615323, 37997, 292, 6, 31, "Input",ExpressionUUID->"d8d78597-bb2d-48cc-aa6e-0fe117c05a4b",
 CellID->252658601],
Cell[1615618, 38005, 8679, 205, 219, "Output",ExpressionUUID->"7207cf68-4138-440f-ba64-5a951d74bffd",
 CellID->348356644]
}, Open  ]],
Cell[1624312, 38213, 160, 2, 45, "Text",ExpressionUUID->"475b8037-c782-4da1-8b03-c12f188ee047",
 CellID->789693986],
Cell[CellGroupData[{
Cell[1624497, 38219, 382, 10, 31, "Input",ExpressionUUID->"7a6eb986-6a91-4bd9-a4bd-5e580dbdf8ab",
 CellID->490486314],
Cell[1624882, 38231, 986, 25, 68, "Output",ExpressionUUID->"0baa4126-6ea9-4d48-bf31-ee75a72b53b5",
 CellID->1356469782]
}, Open  ]],
Cell[CellGroupData[{
Cell[1625905, 38261, 301, 6, 31, "Input",ExpressionUUID->"0b7fc36f-7319-490f-853b-b8d814f418e4",
 CellID->1733712720],
Cell[1626209, 38269, 638, 11, 68, "Output",ExpressionUUID->"c29c7e76-ce5a-4617-a001-6007d9f0b39a",
 CellID->351282583]
}, Open  ]],
Cell[CellGroupData[{
Cell[1626884, 38285, 295, 6, 31, "Input",ExpressionUUID->"bde75616-581a-4b91-8c95-6e8f4c2c09ff",
 CellID->2106763516],
Cell[1627182, 38293, 8629, 205, 216, "Output",ExpressionUUID->"c68aacca-37ee-490c-a0b3-b72a0482c795",
 CellID->922162655]
}, Open  ]],
Cell[1635826, 38501, 203, 3, 38, "ItemNumbered",ExpressionUUID->"4493ffb5-22dc-4656-af4c-b2f2150eda63",
 CellID->398262186],
Cell[1636032, 38506, 594, 9, 193, "Text",ExpressionUUID->"49de25c2-80d3-46ec-a633-e1b5b8eab03c",
 CellID->2033516050],
Cell[1636629, 38517, 268, 5, 45, "Text",ExpressionUUID->"2a60730b-76e2-4b74-961b-0491682c7051",
 CellID->1374318273],
Cell[CellGroupData[{
Cell[1636922, 38526, 400, 10, 31, "Input",ExpressionUUID->"3d0642a8-4f9c-4776-af0f-a0c699c77603",
 CellID->1743555586],
Cell[1637325, 38538, 307, 7, 45, "Output",ExpressionUUID->"a4a2ff6c-5880-433a-87f6-66a95817439b",
 CellID->712769118]
}, Open  ]],
Cell[CellGroupData[{
Cell[1637669, 38550, 293, 6, 31, "Input",ExpressionUUID->"c9272f9b-f226-41e3-9c27-7770bb119c44",
 CellID->512122151],
Cell[1637965, 38558, 1216, 34, 91, "Output",ExpressionUUID->"a56faeaf-b6b9-42a5-8d13-76fecfa2c4b6",
 CellID->1227727873]
}, Open  ]],
Cell[1639196, 38595, 194, 2, 45, "Text",ExpressionUUID->"d91df5ea-4800-4449-b36a-fa2eeb254095",
 CellID->1399481135],
Cell[CellGroupData[{
Cell[1639415, 38601, 373, 10, 31, "Input",ExpressionUUID->"3b1a34aa-c9f9-4deb-b5de-6e859ea77c97",
 CellID->98758124],
Cell[1639791, 38613, 226, 5, 45, "Output",ExpressionUUID->"9c373f39-c439-4971-82f1-7e1be3160c1e",
 CellID->416213596]
}, Open  ]],
Cell[CellGroupData[{
Cell[1640054, 38623, 372, 10, 31, "Input",ExpressionUUID->"4b4bc4ce-ade4-4759-ada6-dbce91d1dc4f",
 CellID->947669693],
Cell[1640429, 38635, 227, 5, 45, "Output",ExpressionUUID->"194834e9-229f-4aa7-8a43-20fba5d139d7",
 CellID->1904970848]
}, Open  ]],
Cell[CellGroupData[{
Cell[1640693, 38645, 371, 10, 31, "Input",ExpressionUUID->"3bf828b2-a4b5-4cdc-83dc-8757da25f4ca",
 CellID->11349213],
Cell[1641067, 38657, 227, 5, 45, "Output",ExpressionUUID->"c8690596-dacf-4b52-8c3f-4f45de3e9764",
 CellID->1644154901]
}, Open  ]],
Cell[CellGroupData[{
Cell[1641331, 38667, 374, 10, 31, "Input",ExpressionUUID->"7ab8e203-9673-4613-abd8-fda3c82a264d",
 CellID->1639335158],
Cell[1641708, 38679, 225, 5, 45, "Output",ExpressionUUID->"549d2912-95c1-4927-8618-1084f6f80e3c",
 CellID->762408181]
}, Open  ]],
Cell[CellGroupData[{
Cell[1641970, 38689, 375, 10, 31, "Input",ExpressionUUID->"e1da865e-3d0f-4433-8530-efb18bd38a41",
 CellID->1906860065],
Cell[1642348, 38701, 226, 5, 45, "Output",ExpressionUUID->"227fe15f-567e-4a08-a87c-3ff1f5bdbe75",
 CellID->287181424]
}, Open  ]],
Cell[1642589, 38709, 598, 9, 163, "Text",ExpressionUUID->"1dee4cf7-cf29-4c12-8cc6-cb8d92e9e59d",
 CellID->1262438359],
Cell[1643190, 38720, 286, 6, 31, "Input",ExpressionUUID->"fed721e5-7cc1-4581-b623-43e9d9102d77",
 CellID->1991967858],
Cell[1643479, 38728, 190, 2, 45, "Text",ExpressionUUID->"4d3ecf14-5f2e-4495-94bc-106ef8ead2a2",
 CellID->613665600],
Cell[1643672, 38732, 422, 12, 31, "Input",ExpressionUUID->"337969ce-2007-4c43-9718-791827589ceb",
 CellID->876191329],
Cell[1644097, 38746, 425, 7, 104, "Text",ExpressionUUID->"f619429b-9544-42c7-b608-708d6aacd421",
 CellID->1859016617],
Cell[1644525, 38755, 529, 15, 54, "Input",ExpressionUUID->"9204513c-f338-4418-a504-cdeeea0c3c6d",
 CellID->742708078],
Cell[1645057, 38772, 299, 6, 75, "Text",ExpressionUUID->"cb23847b-55f1-48f2-b06b-699311cb6d52",
 CellID->539003000],
Cell[1645359, 38780, 227, 4, 45, "Text",ExpressionUUID->"b8a2011d-f032-4e88-b4e2-7ab3e334497a",
 CellID->1028836855],
Cell[CellGroupData[{
Cell[1645611, 38788, 490, 14, 31, "Input",ExpressionUUID->"98478488-f865-4f3f-bf54-abbd4c73084e",
 CellID->573102067],
Cell[1646104, 38804, 400, 12, 45, "Output",ExpressionUUID->"a4776dd2-3cda-4be3-91b7-f9cbd6e42502",
 CellID->1775221511]
}, Open  ]],
Cell[CellGroupData[{
Cell[1646541, 38821, 498, 14, 31, "Input",ExpressionUUID->"11c2741d-d6c2-4ac0-83d7-84317529ab0b",
 CellID->45332222],
Cell[1647042, 38837, 427, 13, 45, "Output",ExpressionUUID->"6011769d-f11a-4f16-b7da-b991669cbb3b",
 CellID->132565674]
}, Open  ]],
Cell[1647484, 38853, 231, 4, 45, "Text",ExpressionUUID->"2a89fa0c-1d4a-455d-a743-106919055a43",
 CellID->1090740979],
Cell[CellGroupData[{
Cell[1647740, 38861, 228, 4, 31, "Input",ExpressionUUID->"c8235e3a-1876-4945-9d51-487be93aca7c",
 CellID->1749708986],
Cell[1647971, 38867, 236, 5, 45, "Output",ExpressionUUID->"94daeea5-1d4d-4f89-9661-078a0a7f2833",
 CellID->1466343719]
}, Open  ]],
Cell[CellGroupData[{
Cell[1648244, 38877, 270, 5, 31, "Input",ExpressionUUID->"91964e5f-104c-4650-895f-b1df52e9f5f3",
 CellID->976857008],
Cell[1648517, 38884, 243, 5, 45, "Output",ExpressionUUID->"038053af-e84e-4063-b4b3-bc199eb45321",
 CellID->1913016371]
}, Open  ]],
Cell[1648775, 38892, 414, 7, 104, "Text",ExpressionUUID->"ea359b12-cdb2-449f-b9ef-8d87d3f19453",
 CellID->2088468160],
Cell[1649192, 38901, 187, 2, 45, "Text",ExpressionUUID->"8ff9e3b7-f564-4dd7-b394-9399efcc6aa8",
 CellID->136094639],
Cell[1649382, 38905, 572, 15, 54, "Input",ExpressionUUID->"4a8a776f-919c-4c1c-b1cd-521316cda498",
 CellID->282231334],
Cell[1649957, 38922, 166, 2, 45, "Text",ExpressionUUID->"2b67a669-aef2-46ce-8288-1da2867d0dd5",
 CellID->461340645],
Cell[CellGroupData[{
Cell[1650148, 38928, 320, 8, 31, "Input",ExpressionUUID->"c368a8a7-15e9-4c9b-945a-6aa52c6ca95a",
 CellID->51199589],
Cell[1650471, 38938, 226, 5, 45, "Output",ExpressionUUID->"4456f9a3-c589-45db-bfcf-1dccaeb97cff",
 CellID->791351292]
}, Open  ]],
Cell[CellGroupData[{
Cell[1650734, 38948, 320, 8, 31, "Input",ExpressionUUID->"04a4c7ec-df88-44a2-a460-300a6925b1b7",
 CellID->874938773],
Cell[1651057, 38958, 229, 5, 45, "Output",ExpressionUUID->"e65f5041-e2d5-4c02-94f2-5fea279f3651",
 CellID->1087237472]
}, Open  ]],
Cell[CellGroupData[{
Cell[1651323, 38968, 377, 10, 31, "Input",ExpressionUUID->"d31d9f6f-c04a-451a-ae30-c6854d5f7b7f",
 CellID->715269716],
Cell[1651703, 38980, 227, 5, 45, "Output",ExpressionUUID->"e5df9875-5b1d-4062-b33c-017aa4e12f7f",
 CellID->1106368956]
}, Open  ]],
Cell[1651945, 38988, 347, 6, 75, "Text",ExpressionUUID->"b7cf4b81-a91e-4643-b9e3-c9dd1fea444e",
 CellID->1829627766],
Cell[CellGroupData[{
Cell[1652317, 38998, 277, 6, 31, "Input",ExpressionUUID->"f2b84133-7bc5-4504-9421-bcfb7b302f2d",
 CellID->1343055299],
Cell[1652597, 39006, 225, 5, 45, "Output",ExpressionUUID->"29378e18-1163-4c97-a8fb-9e870213bf31",
 CellID->378160944]
}, Open  ]],
Cell[1652837, 39014, 534, 8, 163, "Text",ExpressionUUID->"5c086a4a-ee2b-47e3-ab1d-57ba8e389c11",
 CellID->1346874335],
Cell[1653374, 39024, 171, 2, 38, "ItemNumbered",ExpressionUUID->"e7934735-3505-4e2f-9fa6-5e7096c0667e",
 CellID->1540044015],
Cell[1653548, 39028, 346, 6, 75, "Text",ExpressionUUID->"55979c40-6e5b-447c-9fa9-06da028d7f2a",
 CellID->2046846461],
Cell[CellGroupData[{
Cell[1653919, 39038, 290, 6, 31, "Input",ExpressionUUID->"4241ccb8-250b-486d-b3f4-2e5c1eef8b91",
 CellID->1390857540],
Cell[1654212, 39046, 466, 15, 45, "Output",ExpressionUUID->"59e391f0-c022-4d5c-ad3d-2e2f6b6a4c0c",
 CellID->1052610581]
}, Open  ]],
Cell[CellGroupData[{
Cell[1654715, 39066, 317, 7, 31, "Input",ExpressionUUID->"2c538c79-2e32-4ade-921e-829cda7cf0bd",
 CellID->1290279320],
Cell[1655035, 39075, 466, 15, 45, "Output",ExpressionUUID->"0520cc53-dac5-4952-86ab-cfa6a0a78b1c",
 CellID->559123325]
}, Open  ]],
Cell[CellGroupData[{
Cell[1655538, 39095, 319, 7, 31, "Input",ExpressionUUID->"5b64dc4c-7b18-4600-b24d-a00bae65e72d",
 CellID->1008786210],
Cell[1655860, 39104, 473, 15, 45, "Output",ExpressionUUID->"d53866f0-8c6f-4ac7-8afe-fb68d207f277",
 CellID->1935844459]
}, Open  ]],
Cell[1656348, 39122, 409, 7, 104, "Text",ExpressionUUID->"e21ba3be-65ed-4a46-95be-631b7db986a3",
 CellID->1360570363],
Cell[CellGroupData[{
Cell[1656782, 39133, 294, 7, 31, "Input",ExpressionUUID->"1f1ae7e7-3019-4817-8ca4-32b06846ae23",
 CellID->1202889502],
Cell[1657079, 39142, 209, 5, 45, "Output",ExpressionUUID->"526cfc64-d4cc-4cb2-93aa-645e04c00a69",
 CellID->419965013]
}, Open  ]],
Cell[1657303, 39150, 377, 6, 75, "Text",ExpressionUUID->"e1a0214b-f239-4602-bec9-b881ac44f85c",
 CellID->1720709449],
Cell[CellGroupData[{
Cell[1657705, 39160, 325, 8, 31, "Input",ExpressionUUID->"34b45438-4f45-4b1b-a700-765a883e2902",
 CellID->1384793851],
Cell[1658033, 39170, 851, 25, 45, "Output",ExpressionUUID->"9d0da2fd-33a3-4197-94bf-9d5580e175d8",
 CellID->1385303415]
}, Open  ]],
Cell[1658899, 39198, 359, 7, 75, "Text",ExpressionUUID->"986ad331-e1a1-4ff0-a79a-2fa08a08ed2f",
 CellID->1924278778],
Cell[1659261, 39207, 751, 21, 78, "Input",ExpressionUUID->"22a2613d-bc4d-4c3d-b4e6-4b47082273d1",
 CellID->93962752],
Cell[1660015, 39230, 165, 2, 45, "Text",ExpressionUUID->"3baf5102-58aa-4b1c-beca-ea782ab53333",
 CellID->693897267],
Cell[CellGroupData[{
Cell[1660205, 39236, 264, 5, 31, "Input",ExpressionUUID->"070862ef-609c-450e-ab36-24653b0c6cd3",
 CellID->985771659],
Cell[1660472, 39243, 1313, 36, 45, "Output",ExpressionUUID->"ec298ae0-4721-4f8d-8451-eefea28a48a2",
 CellID->1132917770]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1661834, 39285, 205, 3, 66, "Subsubsection",ExpressionUUID->"2e641324-41c0-4316-b9da-5a89657042fe",
 CellID->1358946088],
Cell[1662042, 39290, 425, 7, 104, "Text",ExpressionUUID->"615b2a7e-7e0c-498a-acaa-c259b5227571",
 CellID->1318315171],
Cell[1662470, 39299, 176, 2, 38, "ItemNumbered",ExpressionUUID->"8ab3e6cc-e165-4576-8859-0663b2deda22",
 CellID->578595767],
Cell[1662649, 39303, 344, 6, 104, "Text",ExpressionUUID->"297f8043-49a9-4687-b813-c515d8d1eca1",
 CellID->653102353],
Cell[1662996, 39311, 302, 7, 31, "Input",ExpressionUUID->"081b3913-00bf-4c6b-8dbe-f85e02f3b33d",
 CellID->1171802029],
Cell[1663301, 39320, 173, 2, 45, "Text",ExpressionUUID->"3850398d-c91d-458b-9e2b-1660be4e292f",
 CellID->811125869],
Cell[CellGroupData[{
Cell[1663499, 39326, 401, 10, 31, "Input",ExpressionUUID->"6dee912b-1a72-48b0-a0a6-70c9fd9596b6",
 CellID->255323750],
Cell[1663903, 39338, 313, 7, 45, "Output",ExpressionUUID->"0427db8e-7a12-4477-8ef6-4912a6b2caa4",
 CellID->1545336823]
}, Open  ]],
Cell[CellGroupData[{
Cell[1664253, 39350, 716, 19, 78, "Input",ExpressionUUID->"a57778cb-ef63-457b-8944-526741cca9cc",
 CellID->1360661938],
Cell[1664972, 39371, 789, 25, 45, "Output",ExpressionUUID->"59cdab2a-0309-454c-9511-4f71c88a42d4",
 CellID->1978588754]
}, Open  ]],
Cell[1665776, 39399, 183, 2, 45, "Text",ExpressionUUID->"b3051953-c5a7-4c5b-8f2d-32d08c1b9d38",
 CellID->356914683],
Cell[CellGroupData[{
Cell[1665984, 39405, 405, 10, 31, "Input",ExpressionUUID->"61983817-828e-4ed9-b020-eb3f5693c20a",
 CellID->2056514818],
Cell[1666392, 39417, 1910, 49, 162, "Output",ExpressionUUID->"7bcd5390-f17c-409d-9796-a969554344dc",
 CellID->131944365]
}, Open  ]],
Cell[1668317, 39469, 517, 8, 163, "Text",ExpressionUUID->"b0439995-3be6-4870-a9f9-968650c22a4b",
 CellID->1385818851],
Cell[1668837, 39479, 229, 5, 38, "ItemNumbered",ExpressionUUID->"94c4304d-70fc-4f49-9983-f1dfdb07e304",
 CellID->1047567488],
Cell[1669069, 39486, 822, 12, 252, "Text",ExpressionUUID->"eb000fdf-b9ce-4439-84d9-a531b6e5e62a",
 CellID->1395832710],
Cell[1669894, 39500, 895, 30, 128, "DisplayFormula",ExpressionUUID->"a2235180-3c47-47c6-8796-a203f267d08a",
 CellID->245739517],
Cell[1670792, 39532, 190, 2, 45, "Text",ExpressionUUID->"73087a00-f610-45e0-9a6a-8158e1c6e9cf",
 CellID->818362533],
Cell[1670985, 39536, 647, 18, 54, "Input",ExpressionUUID->"a386950b-4736-4137-9e24-b67b2ef902a0",
 CellID->1052393458],
Cell[1671635, 39556, 311, 6, 75, "Text",ExpressionUUID->"4fa9814a-db52-4ceb-b895-e375d09258a2",
 CellID->1975608927],
Cell[CellGroupData[{
Cell[1671971, 39566, 529, 14, 31, "Input",ExpressionUUID->"7f3c0817-d7e9-4aa2-ae52-702aaa8864ba",
 CellID->1754964178],
Cell[1672503, 39582, 299, 7, 67, "Output",ExpressionUUID->"73ac56d9-fb4e-4d16-b55d-7cb65ccbe36a",
 CellID->340135779]
}, Open  ]],
Cell[1672817, 39592, 504, 8, 134, "Text",ExpressionUUID->"c60cb4fb-2f69-413c-b1cd-7247f0c3a429",
 CellID->60569339],
Cell[1673324, 39602, 1468, 42, 171, "Input",ExpressionUUID->"f63bb5b5-aee6-4781-9cfc-000de677fbbc",
 CellID->691348153],
Cell[1674795, 39646, 350, 6, 75, "Text",ExpressionUUID->"3a6558d0-acd7-42af-8ecb-9b06d91ca5a8",
 CellID->1649600653],
Cell[CellGroupData[{
Cell[1675170, 39656, 623, 17, 31, "Input",ExpressionUUID->"133ba5a4-c9ac-4a70-9f7f-3e761d9488bb",
 CellID->1939611965],
Cell[1675796, 39675, 660, 23, 82, "Output",ExpressionUUID->"df422290-aa10-4c81-96b5-89a4f16ec5e7",
 CellID->1581701959]
}, Open  ]],
Cell[1676471, 39701, 538, 11, 104, "Text",ExpressionUUID->"f81d3897-2771-4312-a6a0-c488195d96a0",
 CellID->2112242347],
Cell[1677012, 39714, 817, 22, 78, "Input",ExpressionUUID->"822b56c6-007a-4964-9cfc-3ef9175096a2",
 CellID->651454170],
Cell[1677832, 39738, 283, 5, 75, "Text",ExpressionUUID->"b1b004d6-ef29-4745-a5df-915c273a3db6",
 CellID->192201034],
Cell[CellGroupData[{
Cell[1678140, 39747, 453, 12, 31, "Input",ExpressionUUID->"7ec6cae2-c259-45d2-9883-d572fdb56683",
 CellID->980224353],
Cell[1678596, 39761, 682, 23, 82, "Output",ExpressionUUID->"cd6343df-b56c-45bc-9b77-81c539d92b2f",
 CellID->1532068578]
}, Open  ]],
Cell[1679293, 39787, 176, 2, 45, "Text",ExpressionUUID->"2ec39046-4a7d-4e19-a0f9-8756f6a33985",
 CellID->1147662916],
Cell[1679472, 39791, 820, 23, 78, "Input",ExpressionUUID->"3a1e7bb1-2cfe-4ef2-962d-8fdb82246618",
 CellID->1083569557],
Cell[1680295, 39816, 176, 2, 45, "Text",ExpressionUUID->"fa8561f0-8832-4e9a-a130-05c58daba59d",
 CellID->1957571141],
Cell[CellGroupData[{
Cell[1680496, 39822, 653, 19, 54, "Input",ExpressionUUID->"b36fe0bb-aa48-4c38-9f97-1940f345dd7c",
 CellID->1535459009],
Cell[1681152, 39843, 674, 21, 74, "Output",ExpressionUUID->"eda7afa0-c100-43a1-b3ea-043f2b1f051b",
 CellID->1354761176]
}, Open  ]],
Cell[CellGroupData[{
Cell[1681863, 39869, 449, 12, 31, "Input",ExpressionUUID->"e830d8c4-a748-473f-ba51-f86d408b90c0",
 CellID->1849459538],
Cell[1682315, 39883, 674, 21, 74, "Output",ExpressionUUID->"fe90a8a5-ae87-479f-a79a-236cd3dc826e",
 CellID->1210759403]
}, Open  ]],
Cell[CellGroupData[{
Cell[1683026, 39909, 223, 4, 31, "Input",ExpressionUUID->"3e54a0da-c55c-464d-bca2-fcdc7f07a8c0",
 CellID->1812820736],
Cell[1683252, 39915, 174, 3, 45, "Output",ExpressionUUID->"b0f52eb9-b9c1-42e8-a86c-f0f5fd74cff1",
 CellID->1938488897]
}, Open  ]],
Cell[1683441, 39921, 607, 10, 163, "Text",ExpressionUUID->"8b8c6aa0-a587-4ea9-9e95-add58ad0be4d",
 CellID->708483242],
Cell[1684051, 39933, 612, 10, 163, "Text",ExpressionUUID->"21addbb7-1e67-4eab-80cc-ca3b8b14784d",
 CellID->2038559444]
}, Open  ]],
Cell[CellGroupData[{
Cell[1684700, 39948, 236, 3, 66, "Subsubsection",ExpressionUUID->"35bd02bc-adc7-493e-9283-af0894ea3ca5",
 CellID->1425896330],
Cell[1684939, 39953, 205, 3, 38, "ItemNumbered",ExpressionUUID->"a2eb0e3d-dafe-4929-b6ef-1746b350d114",
 CellID->1269601437],
Cell[1685147, 39958, 459, 7, 134, "Text",ExpressionUUID->"6b4ab975-359e-4b58-a89f-2deed1855e52",
 CellID->793835067],
Cell[CellGroupData[{
Cell[1685631, 39969, 392, 9, 54, "Input",ExpressionUUID->"2f931a8e-9080-476d-876b-c3d7ecfd3f86",
 CellID->1446568444],
Cell[1686026, 39980, 227, 5, 45, "Output",ExpressionUUID->"31622cf2-cf65-4d55-802a-6d772dd0023c",
 CellID->35542212],
Cell[1686256, 39987, 228, 5, 45, "Output",ExpressionUUID->"ff7d8eef-16b5-437f-9959-0e108c4c8d82",
 CellID->357503218]
}, Open  ]],
Cell[1686499, 39995, 180, 2, 45, "Text",ExpressionUUID->"d2a73219-597d-4122-8e0b-606954182fa7",
 CellID->2044824267],
Cell[CellGroupData[{
Cell[1686704, 40001, 254, 5, 31, "Input",ExpressionUUID->"46656b75-23bf-4cf9-b1ca-322c2eb0a7c1",
 CellID->1632423012],
Cell[1686961, 40008, 279, 7, 45, "Output",ExpressionUUID->"0c4c01e6-6cc3-40e5-8831-9fc5aacc8ebc",
 CellID->123086671]
}, Open  ]],
Cell[1687255, 40018, 246, 5, 75, "Text",ExpressionUUID->"c84bf162-25f4-4287-88f6-c686b36c2066",
 CellID->690927436],
Cell[CellGroupData[{
Cell[1687526, 40027, 222, 4, 31, "Input",ExpressionUUID->"eeca1130-6b7c-4bee-9a73-4fd2c1087c4e",
 CellID->1500809862],
Cell[1687751, 40033, 280, 7, 45, "Output",ExpressionUUID->"4e3e626f-2401-4975-b99a-786c01ba97d5",
 CellID->1468551419]
}, Open  ]],
Cell[1688046, 40043, 298, 5, 75, "Text",ExpressionUUID->"627e0340-dbf8-41d9-aeff-55ddaaff1368",
 CellID->914144162],
Cell[CellGroupData[{
Cell[1688369, 40052, 302, 6, 31, "Input",ExpressionUUID->"cffb5fb7-98d5-42f6-b7be-c6c95ced10ad",
 CellID->1686209487],
Cell[1688674, 40060, 315, 8, 52, "Output",ExpressionUUID->"aa0349ff-5fce-4502-ae04-babb9957aa8b",
 CellID->1469997240]
}, Open  ]],
Cell[1689004, 40071, 472, 7, 134, "Text",ExpressionUUID->"e877943f-5f99-45fa-b77b-bc5d91c383c0",
 CellID->1647511851],
Cell[CellGroupData[{
Cell[1689501, 40082, 282, 6, 31, "Input",ExpressionUUID->"820cb757-17d8-4311-88f1-42b2baa2d08a",
 CellID->1176099041],
Cell[1689786, 40090, 730, 23, 79, "Output",ExpressionUUID->"7849f6e4-7dbf-4911-b8ce-92d7bc4683f9",
 CellID->1234671127]
}, Open  ]],
Cell[1690531, 40116, 173, 2, 45, "Text",ExpressionUUID->"2379b875-09cc-40b5-a724-bdb933ca27f9",
 CellID->2130634175],
Cell[1690707, 40120, 327, 6, 75, "Text",ExpressionUUID->"e65b56ed-38ce-4c37-a473-de7d96aae6bf",
 CellID->602635041],
Cell[CellGroupData[{
Cell[1691059, 40130, 308, 7, 31, "Input",ExpressionUUID->"03efbc2e-495e-4bfa-86a5-e4c11c716732",
 CellID->475122406],
Cell[1691370, 40139, 492, 14, 45, "Output",ExpressionUUID->"c92b3135-0ee2-4073-9790-5bf9ea98a1e2",
 CellID->537861553]
}, Open  ]],
Cell[1691877, 40156, 305, 5, 75, "Text",ExpressionUUID->"c42cd898-ad11-4d1f-ac25-a03cdf05507b",
 CellID->1080451048],
Cell[1692185, 40163, 324, 6, 75, "Text",ExpressionUUID->"4260c5fb-ff56-4ba4-88f8-2eae4bc2ebcd",
 CellID->1507595879],
Cell[1692512, 40171, 645, 10, 193, "Text",ExpressionUUID->"a33440d5-23be-4807-9b5d-223ecdac147a",
 CellID->1264440393],
Cell[1693160, 40183, 656, 10, 193, "Text",ExpressionUUID->"9db8c30c-6f7f-43c6-9760-e5b92e0c5472",
 CellID->1359118639],
Cell[1693819, 40195, 245, 5, 45, "Text",ExpressionUUID->"e07248fe-e90e-4ca5-a2e0-ee595418c237",
 CellID->786114875],
Cell[1694067, 40202, 739, 13, 252, "Text",ExpressionUUID->"364715ad-7702-4ae0-90cb-55bef8fe70cd",
 CellID->1181808683],
Cell[1694809, 40217, 487, 8, 134, "Text",ExpressionUUID->"7cea058d-7ccf-4fe4-8d3d-11aff345fb4e",
 CellID->2045621401],
Cell[1695299, 40227, 419, 7, 134, "Text",ExpressionUUID->"263fa045-9fde-42a2-a100-beda6c21882d",
 CellID->88512561],
Cell[1695721, 40236, 199, 3, 38, "ItemNumbered",ExpressionUUID->"2c3ee0b1-5b71-4181-a83e-a30551e6e91d",
 CellID->680888734],
Cell[1695923, 40241, 207, 4, 45, "Text",ExpressionUUID->"05ad3b38-4390-4d4b-9672-57f8bd5fdd5b",
 CellID->1904081122],
Cell[1696133, 40247, 970, 28, 101, "Input",ExpressionUUID->"f35c44e1-c668-4ac4-a662-b769663b61e6",
 CellID->500445885],
Cell[1697106, 40277, 273, 5, 75, "Text",ExpressionUUID->"bdac3004-b3e7-4970-9492-9128fe160dc0",
 CellID->1638904331],
Cell[1697382, 40284, 313, 6, 75, "Text",ExpressionUUID->"8c716554-fc16-4e5a-a56e-5ccc882d2626",
 CellID->154812918],
Cell[CellGroupData[{
Cell[1697720, 40294, 495, 13, 31, "Input",ExpressionUUID->"9a28b5eb-50b0-43b4-98ba-5881bb2ffe11",
 CellID->670776634],
Cell[1698218, 40309, 225, 5, 45, "Output",ExpressionUUID->"9495018a-853b-4901-8ca8-575a66a89de1",
 CellID->1678500451]
}, Open  ]],
Cell[1698458, 40317, 674, 11, 193, "Text",ExpressionUUID->"e7ded122-e7e9-49b7-ab4f-1d32eda9e4e6",
 CellID->1211892965],
Cell[1699135, 40330, 182, 2, 38, "ItemNumbered",ExpressionUUID->"c0e29417-97be-47a4-a5f6-847d2ec58b13",
 CellID->241303901],
Cell[1699320, 40334, 294, 5, 75, "Text",ExpressionUUID->"fe4d5065-10d3-47d9-a94e-2a84a73445c7",
 CellID->1145538571],
Cell[1699617, 40341, 188, 2, 45, "Text",ExpressionUUID->"6ce3a3b4-21fa-4e53-8b88-5a0d02067dac",
 CellID->1530188566],
Cell[CellGroupData[{
Cell[1699830, 40347, 466, 12, 31, "Input",ExpressionUUID->"58375201-13c0-470c-9e44-757252f5e592",
 CellID->729945531],
Cell[1700299, 40361, 402, 11, 45, "Output",ExpressionUUID->"9d520310-befc-44a2-a764-365e5749231b",
 CellID->536713853]
}, Open  ]],
Cell[1700716, 40375, 178, 2, 45, "Text",ExpressionUUID->"5197dece-2f52-4bd3-90cc-e3ac1cf19f85",
 CellID->1118409971],
Cell[CellGroupData[{
Cell[1700919, 40381, 483, 12, 31, "Input",ExpressionUUID->"7754e375-9587-4b5e-be36-14f70b55911a",
 CellID->1766525848],
Cell[1701405, 40395, 594, 19, 67, "Output",ExpressionUUID->"016dd323-ffc6-4567-b9a7-d203b3d8b043",
 CellID->470922666]
}, Open  ]],
Cell[1702014, 40417, 438, 7, 134, "Text",ExpressionUUID->"677cb47d-98f3-466c-b526-3a647a3e5def",
 CellID->1320008267],
Cell[CellGroupData[{
Cell[1702477, 40428, 282, 5, 31, "Input",ExpressionUUID->"8070dcde-7833-4f55-b9eb-938e4902905b",
 CellID->1655312731],
Cell[1702762, 40435, 454, 13, 67, "Output",ExpressionUUID->"a1d1d831-c30d-49d7-a2b1-06f67b492e0d",
 CellID->1741626566]
}, Open  ]],
Cell[1703231, 40451, 697, 13, 163, "Text",ExpressionUUID->"03846898-4a7a-4a14-8814-5faf0d1e3af4",
 CellID->1315586152],
Cell[1703931, 40466, 202, 2, 45, "Text",ExpressionUUID->"eea468f8-6416-43d2-8078-bbe75fe9705f",
 CellID->461023138],
Cell[1704136, 40470, 683, 18, 78, "Input",ExpressionUUID->"13477901-65ee-43eb-9ac4-788af7e650c9",
 CellID->1007886478],
Cell[1704822, 40490, 221, 5, 45, "Text",ExpressionUUID->"945cc907-0f6d-4520-be0f-d27c809864b9",
 CellID->1729417779],
Cell[1705046, 40497, 904, 27, 101, "Input",ExpressionUUID->"75dda2e1-ffa5-480e-8b95-371e81384d30",
 CellID->133449508],
Cell[1705953, 40526, 487, 8, 134, "Text",ExpressionUUID->"f0da2810-9a27-46c2-b309-5e21d4ec63aa",
 CellID->1050352858],
Cell[1706443, 40536, 406, 6, 104, "Text",ExpressionUUID->"b924e5fe-ddc7-4dc6-97cb-85c9231e935c",
 CellID->643415047],
Cell[CellGroupData[{
Cell[1706874, 40546, 444, 12, 31, "Input",ExpressionUUID->"ccf264d7-3de0-45bf-a930-8328d1c1d1bb",
 CellID->257517222],
Cell[1707321, 40560, 443, 14, 67, "Output",ExpressionUUID->"d0abecbe-270a-42b6-b4d5-c1dfe43fcb5c",
 CellID->168217524]
}, Open  ]],
Cell[1707779, 40577, 427, 7, 134, "Text",ExpressionUUID->"2a1dc905-c1c2-4bf6-a841-2a6475d7dc70",
 CellID->1143446416],
Cell[1708209, 40586, 164, 2, 38, "ItemNumbered",ExpressionUUID->"14784918-bc2f-44b0-a31f-f3105202cd45",
 CellID->1407795088],
Cell[1708376, 40590, 306, 5, 75, "Text",ExpressionUUID->"53d899a2-a5a3-4881-b49d-34382c90620f",
 CellID->1984705017],
Cell[1708685, 40597, 218, 2, 45, "Text",ExpressionUUID->"084d4025-eb98-4bd9-b6bc-595c8753157c",
 CellID->1881585787],
Cell[1708906, 40601, 488, 12, 54, "Input",ExpressionUUID->"9495965d-cf10-45d0-8bd5-e216f8c33234",
 CellID->1339168059],
Cell[1709397, 40615, 167, 2, 45, "Text",ExpressionUUID->"8fa6e543-9091-412c-8261-72e10bbda554",
 CellID->1602617461],
Cell[1709567, 40619, 535, 14, 78, "Input",ExpressionUUID->"ad22e3a0-b3a3-4405-8144-5532ae6b1233",
 CellID->127897657],
Cell[1710105, 40635, 169, 2, 45, "Text",ExpressionUUID->"44ede6cf-bef3-496f-a045-75d63e5915ba",
 CellID->381423583],
Cell[CellGroupData[{
Cell[1710299, 40641, 277, 5, 31, "Input",ExpressionUUID->"82cf9f35-7806-4a53-bc68-de0c8648991d",
 CellID->841214805],
Cell[1710579, 40648, 841, 32, 86, "Output",ExpressionUUID->"924a2f5a-a64c-4bbd-892d-432029cdb729",
 CellID->1654340208]
}, Open  ]],
Cell[1711435, 40683, 319, 5, 75, "Text",ExpressionUUID->"1c0bc7a1-6300-49b6-8a1c-c40a3988516e",
 CellID->1025098147],
Cell[CellGroupData[{
Cell[1711779, 40692, 323, 7, 31, "Input",ExpressionUUID->"c980ebaf-9886-4661-83ab-55a0d0d2fd02",
 CellID->1904541239],
Cell[1712105, 40701, 402, 11, 45, "Output",ExpressionUUID->"af6c2a3b-d83a-4e2b-8287-db46ec326539",
 CellID->228731903]
}, Open  ]],
Cell[1712522, 40715, 191, 2, 38, "ItemNumbered",ExpressionUUID->"811c0ae3-ca99-402f-b72c-c2dc2bd1aef0",
 CellID->301365591],
Cell[1712716, 40719, 462, 7, 134, "Text",ExpressionUUID->"e133efd8-e787-47e6-884f-6671cfb42237",
 CellID->563925098],
Cell[1713181, 40728, 839, 12, 252, "Text",ExpressionUUID->"489db1e9-9241-458a-a3f7-92f0801e1b17",
 CellID->2025796528],
Cell[1714023, 40742, 357, 6, 104, "Text",ExpressionUUID->"d1a964f5-008c-43e5-ac83-19d4f2625eca",
 CellID->370356166],
Cell[1714383, 40750, 192, 2, 45, "Text",ExpressionUUID->"db54a52c-ae4c-4de0-bed3-f33636d0ddd9",
 CellID->1657913497],
Cell[1714578, 40754, 191, 2, 45, "Text",ExpressionUUID->"086483ce-e6dd-4910-8278-59f146638fce",
 CellID->393379480],
Cell[CellGroupData[{
Cell[1714794, 40760, 366, 9, 31, "Input",ExpressionUUID->"f3a4cbb7-3f04-4447-90f0-45acd8d716ea",
 CellID->854650990],
Cell[1715163, 40771, 602, 17, 68, "Output",ExpressionUUID->"4d3cb2d0-35d7-45b5-ad1b-7bf30cd250fa",
 CellID->1446727156]
}, Open  ]],
Cell[1715780, 40791, 179, 2, 45, "Text",ExpressionUUID->"ba9eae9d-ae7b-41b3-9121-9e9c7ff8d4ee",
 CellID->1333459558],
Cell[CellGroupData[{
Cell[1715984, 40797, 228, 4, 31, "Input",ExpressionUUID->"f5bae047-91d8-4253-8bea-f89add78f13e",
 CellID->1743318911],
Cell[1716215, 40803, 189, 3, 45, "Output",ExpressionUUID->"a1c9c102-2cba-4f13-9c79-6bf5aebd884e",
 CellID->234241867]
}, Open  ]],
Cell[1716419, 40809, 249, 5, 75, "Text",ExpressionUUID->"b824d24b-61d2-4f8d-a92e-0a3f9e636f64",
 CellID->565533718],
Cell[CellGroupData[{
Cell[1716693, 40818, 242, 4, 31, "Input",ExpressionUUID->"19d14a4f-6e70-483a-9090-07b8234cb28b",
 CellID->829145844],
Cell[1716938, 40824, 641, 16, 68, "Output",ExpressionUUID->"e157fb0a-b271-480f-84b6-a3978c34d816",
 CellID->509145687]
}, Open  ]],
Cell[1717594, 40843, 183, 2, 45, "Text",ExpressionUUID->"709bdfff-2ad5-44e0-87d4-f4d8c0cded7a",
 CellID->1636711761],
Cell[1717780, 40847, 890, 26, 101, "Input",ExpressionUUID->"7c6f8097-1c6b-4f00-9b4b-f94b922d71c1",
 CellID->1867981221],
Cell[1718673, 40875, 361, 6, 104, "Text",ExpressionUUID->"e4e5c7a3-ff31-4859-9d34-aa35347e6edc",
 CellID->359508540],
Cell[CellGroupData[{
Cell[1719059, 40885, 235, 4, 31, "Input",ExpressionUUID->"b57f4dd5-ace0-4eb7-94c5-2f4776a1c739",
 CellID->623049933],
Cell[1719297, 40891, 629, 17, 68, "Output",ExpressionUUID->"f96c9473-8e52-484a-b373-d496a4bb3387",
 CellID->317405489]
}, Open  ]],
Cell[CellGroupData[{
Cell[1719963, 40913, 236, 4, 31, "Input",ExpressionUUID->"10a41a47-3fc0-4563-b631-a68b2c230454",
 CellID->2077819456],
Cell[1720202, 40919, 1304, 30, 138, "Output",ExpressionUUID->"7db78a9e-2b4b-4e1a-846e-41c1bdb7120a",
 CellID->1908988011]
}, Open  ]],
Cell[1721521, 40952, 163, 2, 38, "ItemNumbered",ExpressionUUID->"a484a3da-33f6-4835-b55d-a3dd666378cf",
 CellID->955814697],
Cell[1721687, 40956, 235, 5, 75, "Text",ExpressionUUID->"f09a2b2b-cd06-4bbe-a51c-6d9b0862c709",
 CellID->1199932919],
Cell[CellGroupData[{
Cell[1721947, 40965, 286, 7, 31, "Input",ExpressionUUID->"f1a5d33a-7fdc-410a-9e67-9cb15fd36d25",
 CellID->183466097],
Cell[1722236, 40974, 228, 5, 45, "Output",ExpressionUUID->"3f61825e-b9b1-40d5-b9cb-a0f5f8414418",
 CellID->473983299]
}, Open  ]],
Cell[1722479, 40982, 543, 8, 163, "Text",ExpressionUUID->"81e5a3aa-cfa8-402d-857f-b650e2b825d0",
 CellID->1220459570],
Cell[CellGroupData[{
Cell[1723047, 40994, 285, 7, 31, "Input",ExpressionUUID->"725f3fac-a3e6-4db1-a691-0c26de061ade",
 CellID->2574417],
Cell[1723335, 41003, 226, 5, 45, "Output",ExpressionUUID->"818648f5-8102-49d3-92b7-ffc9dc6134eb",
 CellID->865021563]
}, Open  ]],
Cell[CellGroupData[{
Cell[1723598, 41013, 290, 7, 31, "Input",ExpressionUUID->"e848f450-baee-413c-bac2-83bb211500e0",
 CellID->2100602798],
Cell[1723891, 41022, 226, 5, 45, "Output",ExpressionUUID->"e2c34915-63c5-428d-b3fb-0a1a839a1442",
 CellID->1657279844]
}, Open  ]],
Cell[CellGroupData[{
Cell[1724154, 41032, 287, 7, 31, "Input",ExpressionUUID->"181d58e3-6109-4b54-9285-5f86d192cf04",
 CellID->1039436518],
Cell[1724444, 41041, 227, 5, 45, "Output",ExpressionUUID->"43ddc43d-49d4-4fc3-8b15-5a014a43f3da",
 CellID->1659410084]
}, Open  ]],
Cell[CellGroupData[{
Cell[1724708, 41051, 288, 7, 31, "Input",ExpressionUUID->"2ed741f6-4954-4376-bca7-61f3c36d8829",
 CellID->335158199],
Cell[1724999, 41060, 227, 5, 45, "Output",ExpressionUUID->"d4e95330-c301-41a9-88d8-65945bbfc80e",
 CellID->1810529220]
}, Open  ]],
Cell[CellGroupData[{
Cell[1725263, 41070, 291, 7, 31, "Input",ExpressionUUID->"7f4df649-b096-4e4c-b372-f371c40b7a63",
 CellID->1868806197],
Cell[1725557, 41079, 226, 5, 45, "Output",ExpressionUUID->"df1679c2-0fe8-479e-96fa-52dcc6eb3f20",
 CellID->485534901]
}, Open  ]],
Cell[1725798, 41087, 503, 8, 163, "Text",ExpressionUUID->"8759b43b-1e6e-4d44-9745-6e8dcde77c63",
 CellID->2094706154],
Cell[1726304, 41097, 212, 4, 38, "ItemNumbered",ExpressionUUID->"25d49d6c-7baf-4abe-af69-baafde1553c0",
 CellID->1944449629],
Cell[1726519, 41103, 209, 4, 45, "Text",ExpressionUUID->"44c1cbc3-cbbb-4f8d-ac18-2f6588c2d9f6",
 CellID->2106258204],
Cell[1726731, 41109, 376, 8, 54, "Input",ExpressionUUID->"95404cd4-444c-4380-b6ec-12972415a406",
 CellID->885961181],
Cell[1727110, 41119, 2534, 77, 312, "Input",ExpressionUUID->"d80fdaee-e5cd-4c16-9ea9-a30bf88a4285",
 CellID->1691616311],
Cell[1729647, 41198, 306, 5, 75, "Text",ExpressionUUID->"c39a5b0d-afc0-4ca7-9892-8dc3f0e94c54",
 CellID->1548695461]
}, Open  ]],
Cell[CellGroupData[{
Cell[1729990, 41208, 184, 2, 66, "Subsubsection",ExpressionUUID->"958f0aa8-bc55-481a-8a66-33ee55121628",
 CellID->1067078419],
Cell[1730177, 41212, 152, 2, 38, "ItemNumbered",ExpressionUUID->"26a424ff-af42-403c-8f0d-e88b9854c33a",
 CellID->751052036],
Cell[1730332, 41216, 530, 8, 163, "Text",ExpressionUUID->"144b8994-a75e-4a4b-9835-6c9cc23dcf20",
 CellID->22691986],
Cell[1730865, 41226, 180, 2, 45, "Text",ExpressionUUID->"7c171b78-91a4-415f-92f3-46af2d126195",
 CellID->92635607],
Cell[CellGroupData[{
Cell[1731070, 41232, 395, 10, 31, "Input",ExpressionUUID->"c1bcb4b1-fc9b-4638-a976-eb8863a31bee",
 CellID->287180305],
Cell[1731468, 41244, 479, 9, 45, "Output",ExpressionUUID->"e7417618-4ff4-411e-840f-5844ada467a3",
 CellID->368227030]
}, Open  ]],
Cell[1731962, 41256, 161, 2, 38, "ItemNumbered",ExpressionUUID->"6c6d8da4-30c2-4013-9fe4-6fcdf8dd3ee1",
 CellID->1891306203],
Cell[1732126, 41260, 189, 2, 45, "Text",ExpressionUUID->"6c6354bd-a786-467d-ba01-57fd0686f193",
 CellID->130410927],
Cell[1732318, 41264, 1698, 49, 172, "Input",ExpressionUUID->"38027a7b-6efb-480b-a40b-537e1bb7f40d",
 CellID->1905419115],
Cell[1734019, 41315, 393, 6, 104, "Text",ExpressionUUID->"8d0561b6-3ef7-45e3-aea0-e9db1df95c9c",
 CellID->1218484881],
Cell[CellGroupData[{
Cell[1734437, 41325, 237, 4, 31, "Input",ExpressionUUID->"ad39673e-709d-49f4-bdee-084f112cafbc",
 CellID->1607160247],
Cell[1734677, 41331, 220, 5, 45, "Output",ExpressionUUID->"bcad359a-7b5e-4ad5-9e8e-03b79ca2b0ff",
 CellID->1253305109]
}, Open  ]],
Cell[1734912, 41339, 175, 2, 38, "ItemNumbered",ExpressionUUID->"d3803468-8f47-4003-a2cc-3224294e17e2",
 CellID->1779357187],
Cell[1735090, 41343, 208, 4, 45, "Text",ExpressionUUID->"1c647334-6475-468c-8744-2b9a8ac7c734",
 CellID->1946457434],
Cell[1735301, 41349, 545, 14, 54, "Input",ExpressionUUID->"f9521e72-8a87-4b0c-ab2a-18b80fc128ba",
 CellID->1252375931],
Cell[1735849, 41365, 165, 2, 45, "Text",ExpressionUUID->"56917ee9-61dc-4904-a11a-06bb3557236f",
 CellID->882392794],
Cell[CellGroupData[{
Cell[1736039, 41371, 234, 4, 31, "Input",ExpressionUUID->"18b69200-8ea3-4114-bd86-a381db7ab877",
 CellID->1419661917],
Cell[1736276, 41377, 218, 5, 45, "Output",ExpressionUUID->"1f4e0c1b-3424-4272-93bf-c4760cc65955",
 CellID->1079618262]
}, Open  ]],
Cell[1736509, 41385, 204, 4, 45, "Text",ExpressionUUID->"d5cfb25b-712c-46bf-8f8b-a16806a6ed3e",
 CellID->1054795931],
Cell[CellGroupData[{
Cell[1736738, 41393, 291, 6, 31, "Input",ExpressionUUID->"91302a62-fed0-44a8-9ad5-bb08acf624d2",
 CellID->1516449438],
Cell[1737032, 41401, 528, 10, 68, "Output",ExpressionUUID->"0f982bb8-bdcf-4272-89d3-2c329ab51292",
 CellID->1943541878]
}, Open  ]],
Cell[1737575, 41414, 673, 10, 193, "Text",ExpressionUUID->"52da26f2-182a-4632-aa2b-2d5c25cf4f26",
 CellID->1708828869],
Cell[1738251, 41426, 231, 4, 45, "Text",ExpressionUUID->"59dc9669-66cd-4e82-85af-ace867348120",
 CellID->1638112382],
Cell[CellGroupData[{
Cell[1738507, 41434, 323, 7, 31, "Input",ExpressionUUID->"affadd89-5d8a-4c11-89b9-823566e2474b",
 CellID->235655736],
Cell[1738833, 41443, 485, 9, 45, "Output",ExpressionUUID->"077dbdb3-03ac-4d99-a743-868066a85d00",
 CellID->831792041]
}, Open  ]],
Cell[1739333, 41455, 315, 5, 75, "Text",ExpressionUUID->"e19e1110-13ed-490d-b832-1aa38cf81b13",
 CellID->1957774764],
Cell[CellGroupData[{
Cell[1739673, 41464, 358, 8, 31, "Input",ExpressionUUID->"a02c0d04-90d7-4422-89a1-be82aede59f8",
 CellID->724829715],
Cell[1740034, 41474, 217, 5, 45, "Output",ExpressionUUID->"c40b5d6b-57b2-4b1f-956e-b7fe6ca68b43",
 CellID->522001605]
}, Open  ]],
Cell[1740266, 41482, 163, 2, 38, "ItemNumbered",ExpressionUUID->"b980a724-ca35-4aab-ba46-067151908a5b",
 CellID->366297965],
Cell[1740432, 41486, 169, 2, 45, "Text",ExpressionUUID->"cd9af3f8-59bc-4e76-bb69-69e88fd1f665",
 CellID->1681765453],
Cell[1740604, 41490, 431, 11, 31, "Input",ExpressionUUID->"f002f562-6582-43a2-a0dd-c9f18fa401f6",
 CellID->1853729368],
Cell[CellGroupData[{
Cell[1741060, 41505, 294, 7, 31, "Input",ExpressionUUID->"c96759f6-0e23-4db6-80db-2aa03e940f00",
 CellID->685418346],
Cell[1741357, 41514, 229, 5, 45, "Output",ExpressionUUID->"aa8eb17c-8d99-4faa-8885-b5c1d115848a",
 CellID->1029066326]
}, Open  ]],
Cell[CellGroupData[{
Cell[1741623, 41524, 288, 7, 31, "Input",ExpressionUUID->"d8c29f78-26b0-4679-a65c-bce70d1c94c7",
 CellID->804564298],
Cell[1741914, 41533, 226, 5, 45, "Output",ExpressionUUID->"ebb2aeaf-39a8-4c97-b2a4-190e90f9b492",
 CellID->324510875]
}, Open  ]],
Cell[1742155, 41541, 646, 10, 193, "Text",ExpressionUUID->"fe6b8e95-2069-44af-bb4b-e565390ca83c",
 CellID->1593296392]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1742850, 41557, 168, 2, 68, "Subsection",ExpressionUUID->"abbb4445-9c3e-4c6f-9d03-7f2d19202268",
 CellID->307718060],
Cell[CellGroupData[{
Cell[1743043, 41563, 172, 2, 66, "Subsubsection",ExpressionUUID->"33b8c6bd-6c07-4f66-92ee-c83f0e5b7da1",
 CellID->676812444],
Cell[1743218, 41567, 362, 6, 104, "Text",ExpressionUUID->"10253919-56d7-491f-881b-78672e282567",
 CellID->2113351796],
Cell[1743583, 41575, 232, 4, 31, "Input",ExpressionUUID->"b2fcd19e-74f4-4953-9f7b-00a19c05a3ba",
 CellID->362956896],
Cell[1743818, 41581, 509, 8, 134, "Text",ExpressionUUID->"6dfce463-b90e-4469-b256-50fa57afe343",
 CellID->2009757947],
Cell[1744330, 41591, 335, 6, 75, "Text",ExpressionUUID->"fb5e1da3-752e-4723-a4fb-756cc77e3c7d",
 CellID->2144624278]
}, Open  ]],
Cell[CellGroupData[{
Cell[1744702, 41602, 183, 2, 66, "Subsubsection",ExpressionUUID->"9bda43da-39a7-4269-bfe3-14a8a96e2acc",
 CellID->1912008274],
Cell[1744888, 41606, 350, 9, 45, "Text",ExpressionUUID->"fe666f25-60cf-4c2e-9f33-6496434e5851",
 CellID->177767410],
Cell[1745241, 41617, 573, 16, 78, "Input",ExpressionUUID->"94d19bf4-e820-4682-9ce2-748e40870827",
 CellID->1797966975],
Cell[1745817, 41635, 281, 5, 75, "Text",ExpressionUUID->"feef6959-e626-4b6b-9db3-652afe2730ab",
 CellID->314903676],
Cell[1746101, 41642, 545, 13, 54, "Input",ExpressionUUID->"1d6dd443-d6d6-4228-bf51-948c4f6be702",
 CellID->1211997577],
Cell[1746649, 41657, 337, 6, 75, "Text",ExpressionUUID->"da3d6062-cd45-469b-b5e5-8919b2b82c19",
 CellID->995183441],
Cell[1746989, 41665, 704, 20, 78, "Input",ExpressionUUID->"654c99c6-617c-4f5f-ba5e-8661fcac42fd",
 CellID->1245469305],
Cell[1747696, 41687, 530, 8, 134, "Text",ExpressionUUID->"d94e46a2-e01f-4760-9f2e-6454f5e0f093",
 CellID->1594572392],
Cell[CellGroupData[{
Cell[1748251, 41699, 233, 4, 31, "Input",ExpressionUUID->"4d9131c9-f79b-4837-93a7-6eb81722a2a1",
 CellID->2045027397],
Cell[1748487, 41705, 1290, 20, 138, "Output",ExpressionUUID->"4803a011-8682-4784-9113-fe370d8e8192",
 CellID->1904909395]
}, Open  ]],
Cell[CellGroupData[{
Cell[1749814, 41730, 236, 4, 31, "Input",ExpressionUUID->"b8188c44-f1e2-4a25-85d4-880d3edf8c39",
 CellID->926503859],
Cell[1750053, 41736, 1266, 20, 138, "Output",ExpressionUUID->"7b061bcf-da74-4e6b-acf1-c4cc957263a0",
 CellID->1864826075]
}, Open  ]],
Cell[1751334, 41759, 741, 11, 193, "Text",ExpressionUUID->"77ff3c66-73c4-4f2c-a6c5-2b15500664d4",
 CellID->1755498207]
}, Open  ]],
Cell[CellGroupData[{
Cell[1752112, 41775, 185, 2, 66, "Subsubsection",ExpressionUUID->"1834e055-d8ce-4c77-85b0-0a7108ad40e2",
 CellID->996330121],
Cell[1752300, 41779, 397, 7, 104, "Text",ExpressionUUID->"a3aceaa1-9232-4476-814d-fc1ccc7c5455",
 CellID->1390347988],
Cell[1752700, 41788, 367, 9, 31, "Input",ExpressionUUID->"c20f3314-ac10-4a81-ab0b-0c7ad4d13ebb",
 CellID->476863593],
Cell[1753070, 41799, 209, 4, 45, "Text",ExpressionUUID->"42648b3c-23ba-4345-9038-14e61660f099",
 CellID->994752869]
}, Open  ]],
Cell[CellGroupData[{
Cell[1753316, 41808, 191, 2, 66, "Subsubsection",ExpressionUUID->"e931c69f-9d9e-4959-a24f-b21d12fb7fa3",
 CellID->651277388],
Cell[1753510, 41812, 216, 4, 45, "Text",ExpressionUUID->"033d9085-3d15-4442-8538-a55e9eabe26c",
 CellID->294911357],
Cell[CellGroupData[{
Cell[1753751, 41820, 510, 13, 54, "Input",ExpressionUUID->"91308b63-3371-436d-85ac-16d4505369da",
 CellID->1284366304],
Cell[1754264, 41835, 467, 10, 45, "Output",ExpressionUUID->"a26591bf-4c99-4d62-92d5-41aad4e2a5fb",
 CellID->1021980020]
}, Open  ]],
Cell[1754746, 41848, 291, 5, 75, "Text",ExpressionUUID->"74b057ea-3004-4269-b065-8994dfc7462b",
 CellID->1130742205],
Cell[CellGroupData[{
Cell[1755062, 41857, 442, 11, 31, "Input",ExpressionUUID->"80999c9a-da9a-4101-8493-8f001a15018a",
 CellID->276053249],
Cell[1755507, 41870, 434, 10, 45, "Output",ExpressionUUID->"f4a0728d-44e5-4e24-9072-04c8867621fa",
 CellID->620593786]
}, Open  ]],
Cell[1755956, 41883, 162, 2, 45, "Text",ExpressionUUID->"95eeb2fb-f1b6-458c-a839-6e2e271139c0",
 CellID->1980793688],
Cell[CellGroupData[{
Cell[1756143, 41889, 488, 13, 31, "Input",ExpressionUUID->"f8325d48-57cb-4795-8f0e-b19cc7d1dfce",
 CellID->1046822972],
Cell[1756634, 41904, 412, 10, 45, "Output",ExpressionUUID->"03f3edd6-0dfc-48e6-812d-5d13e54b689d",
 CellID->1359890211]
}, Open  ]],
Cell[1757061, 41917, 439, 10, 75, "Text",ExpressionUUID->"a3306494-6d75-4e0d-bf8c-304dc63e67cd",
 CellID->6321256]
}, Open  ]],
Cell[CellGroupData[{
Cell[1757537, 41932, 207, 3, 66, "Subsubsection",ExpressionUUID->"217c23ed-fc8d-4ae5-bff4-ae7715c10eab",
 CellID->1326050893],
Cell[1757747, 41937, 282, 5, 75, "Text",ExpressionUUID->"eff6c067-c0df-4204-8d0b-d2dc1433abb6",
 CellID->352070085],
Cell[1758032, 41944, 549, 16, 45, "Text",ExpressionUUID->"0e162dbd-f24d-46c4-af5b-47f3d24f95fc",
 CellID->525596676],
Cell[1758584, 41962, 232, 5, 75, "Text",ExpressionUUID->"c69aa474-cc76-4ded-8a8b-990c9215cbff",
 CellID->1913142244],
Cell[CellGroupData[{
Cell[1758841, 41971, 390, 11, 31, "Input",ExpressionUUID->"c4579b72-1fbd-4082-8d2c-5386bc0d7eb1",
 CellID->384428903],
Cell[1759234, 41984, 342, 8, 45, "Output",ExpressionUUID->"f215a602-cfa0-4446-860a-9eb523d2dc0d",
 CellID->1026995818]
}, Open  ]],
Cell[1759591, 41995, 375, 6, 104, "Text",ExpressionUUID->"abbd6b58-2ff1-43aa-8219-69ca17c8983f",
 CellID->1392642187],
Cell[CellGroupData[{
Cell[1759991, 42005, 422, 12, 31, "Input",ExpressionUUID->"f37c0ba1-b4ba-42d4-8201-eceef1410e24",
 CellID->881607995],
Cell[1760416, 42019, 189, 3, 45, "Output",ExpressionUUID->"fba29917-4b25-4a89-b363-938aa319a9a3",
 CellID->1752152651]
}, Open  ]],
Cell[1760620, 42025, 176, 2, 45, "Text",ExpressionUUID->"d3c39f26-6a2c-45f1-b35d-40d9c99e73db",
 CellID->1686991126],
Cell[CellGroupData[{
Cell[1760821, 42031, 422, 12, 31, "Input",ExpressionUUID->"ad1491a4-0de8-48bf-b9ed-cb6c653bcbd7",
 CellID->711223967],
Cell[1761246, 42045, 399, 8, 45, "Output",ExpressionUUID->"7eeb1a5e-059b-46fd-a09d-b81dda73d704",
 CellID->637982954]
}, Open  ]],
Cell[1761660, 42056, 351, 6, 75, "Text",ExpressionUUID->"66684439-f69c-44af-a004-7db875e6b780",
 CellID->875908633],
Cell[1762014, 42064, 271, 5, 75, "Text",ExpressionUUID->"51d0182a-d535-4c48-9bae-4ea2e6a2def6",
 CellID->168229844]
}, Open  ]],
Cell[CellGroupData[{
Cell[1762322, 42074, 161, 2, 66, "Subsubsection",ExpressionUUID->"c5e752fb-b874-4ac1-aa39-83b1c73bd73b",
 CellID->1350508656],
Cell[1762486, 42078, 770, 12, 222, "Text",ExpressionUUID->"13507f5e-f105-4fdf-bd1b-d48f0b0447e2",
 CellID->1244316249],
Cell[CellGroupData[{
Cell[1763281, 42094, 397, 11, 31, "Input",ExpressionUUID->"102fb4ca-310d-41c5-86ab-63c5e5b62f1d",
 CellID->408791755],
Cell[1763681, 42107, 782, 17, 235, "Output",ExpressionUUID->"31edd2a2-b45c-4520-8d2f-8bfa0554b09c",
 CellID->909150915]
}, Open  ]],
Cell[1764478, 42127, 1094, 18, 311, "Text",ExpressionUUID->"ca0bc18a-d623-4e2b-93cf-f5afda9b2874",
 CellID->753280000]
}, Open  ]],
Cell[CellGroupData[{
Cell[1765609, 42150, 226, 4, 66, "Subsubsection",ExpressionUUID->"f3eece90-2f26-476c-a686-41b810f58ee1",
 CellID->1976718475],
Cell[1765838, 42156, 178, 2, 38, "ItemNumbered",ExpressionUUID->"2a7cb2aa-eec5-4fff-b3dc-4186397ee459",
 CellID->410705675],
Cell[1766019, 42160, 597, 9, 163, "Text",ExpressionUUID->"2026117f-0c45-489c-b7de-7275e9962596",
 CellID->717838267],
Cell[1766619, 42171, 313, 6, 75, "Text",ExpressionUUID->"703ad7b0-cb6f-46ec-80ff-9381ae395860",
 CellID->808930699],
Cell[1766935, 42179, 881, 25, 78, "Input",ExpressionUUID->"9f231dec-9f34-4881-a40a-89481ec2069c",
 CellID->1640945939],
Cell[1767819, 42206, 834, 17, 134, "Text",ExpressionUUID->"deaee275-e9ff-4a62-b178-afd336b6d501",
 CellID->1944296921],
Cell[CellGroupData[{
Cell[1768678, 42227, 569, 16, 31, "Input",ExpressionUUID->"5f0fe625-d145-425d-b33c-aaef81174d79",
 CellID->531393958],
Cell[1769250, 42245, 316, 9, 45, "Output",ExpressionUUID->"20b19bd2-7b3d-4015-a92e-1618b70eca59",
 CellID->1706542933]
}, Open  ]],
Cell[1769581, 42257, 161, 2, 38, "ItemNumbered",ExpressionUUID->"ca8658fe-a34f-4da9-8140-95f3e6d4925f",
 CellID->75485599],
Cell[1769745, 42261, 294, 5, 75, "Text",ExpressionUUID->"94ba8710-57b0-4153-916a-a93ab22c709f",
 CellID->1671110663],
Cell[1770042, 42268, 828, 12, 222, "Text",ExpressionUUID->"a92e57ee-c31c-46e4-a75c-d93b30a3b715",
 CellID->722689473],
Cell[1770873, 42282, 364, 6, 75, "Text",ExpressionUUID->"603b2188-b635-431c-befc-9dad2af79bcb",
 CellID->1254145582],
Cell[CellGroupData[{
Cell[1771262, 42292, 805, 24, 31, "Input",ExpressionUUID->"1c7de7fb-fa83-4a64-b9d0-30852134e551",
 CellID->1250443949],
Cell[1772070, 42318, 588, 19, 45, "Output",ExpressionUUID->"4f0b4953-7b82-42eb-83f2-4cf5f19617a5",
 CellID->643141349]
}, Open  ]],
Cell[1772673, 42340, 408, 7, 104, "Text",ExpressionUUID->"9a36ea28-b15b-4fc5-b75b-dda5adad38a1",
 CellID->1097089571],
Cell[CellGroupData[{
Cell[1773106, 42351, 254, 5, 31, "Input",ExpressionUUID->"ce45bf95-092f-4b0c-a3d1-8b9cd1ef0ee2",
 CellID->1658428137],
Cell[1773363, 42358, 376, 10, 45, "Output",ExpressionUUID->"61e4b78a-1eb4-4051-a612-48e30c9dc581",
 CellID->846673004]
}, Open  ]],
Cell[1773754, 42371, 172, 2, 45, "Text",ExpressionUUID->"28e80080-b4d9-4d72-b5a3-eb9c30150837",
 CellID->806533206],
Cell[CellGroupData[{
Cell[1773951, 42377, 253, 5, 31, "Input",ExpressionUUID->"b2959e48-6509-4a1a-b449-96eea1f01c69",
 CellID->2107232623],
Cell[1774207, 42384, 378, 10, 45, "Output",ExpressionUUID->"45f66f92-aae1-4fca-9cc7-d030020372bf",
 CellID->155118279]
}, Open  ]],
Cell[1774600, 42397, 286, 5, 75, "Text",ExpressionUUID->"f76efe51-8e51-4095-8c80-ebc64c0859e6",
 CellID->27767695],
Cell[CellGroupData[{
Cell[1774911, 42406, 405, 12, 31, "Input",ExpressionUUID->"4d7aa816-ad69-4a6e-9721-1bf07c43325d",
 CellID->272920289],
Cell[1775319, 42420, 316, 9, 45, "Output",ExpressionUUID->"c368b0db-fa26-4bb2-88fb-37eb18db794e",
 CellID->1714418047]
}, Open  ]],
Cell[1775650, 42432, 218, 4, 45, "Text",ExpressionUUID->"01664084-a4f2-4fde-92ae-152250f8df5e",
 CellID->1436024130],
Cell[CellGroupData[{
Cell[1775893, 42440, 1016, 32, 55, "Input",ExpressionUUID->"25c73ebc-6e6d-43f1-a080-a3131d4a046c",
 CellID->1675927631],
Cell[1776912, 42474, 314, 9, 45, "Output",ExpressionUUID->"e22acaeb-36d6-499c-9e91-f2d5984ba206",
 CellID->1654655110]
}, Open  ]],
Cell[1777241, 42486, 277, 6, 75, "Text",ExpressionUUID->"0a677f68-e0e6-43bc-bfd9-9eff74071dcb",
 CellID->1157959328],
Cell[CellGroupData[{
Cell[1777543, 42496, 889, 28, 55, "Input",ExpressionUUID->"e2207f2a-2044-45f0-88ee-33552f180720",
 CellID->1642539696],
Cell[1778435, 42526, 317, 9, 45, "Output",ExpressionUUID->"6a123083-3d4d-482b-b59a-d1e19317545c",
 CellID->2095690264]
}, Open  ]],
Cell[1778767, 42538, 852, 13, 252, "Text",ExpressionUUID->"fbf95c97-10f8-4014-8c57-faa4f31de5a0",
 CellID->1386972601],
Cell[1779622, 42553, 940, 28, 78, "Input",ExpressionUUID->"598828fc-9afd-42b6-bc47-7b6f5aded87a",
 CellID->59654068],
Cell[1780565, 42583, 184, 2, 45, "Text",ExpressionUUID->"7f387805-a518-4386-846f-9033c9eef5cc",
 CellID->588210710],
Cell[1780752, 42587, 450, 10, 54, "Input",ExpressionUUID->"4a465241-1d9f-4e04-86e6-f1962ea9e45c",
 CellID->1622469845],
Cell[1781205, 42599, 167, 2, 45, "Text",ExpressionUUID->"fc270f58-1e27-4ffd-a2b1-fbbef80759e4",
 CellID->770288948],
Cell[CellGroupData[{
Cell[1781397, 42605, 563, 16, 31, "Input",ExpressionUUID->"3b995b1d-0207-4dab-9de5-55c86fa23b3c",
 CellID->1324583494],
Cell[1781963, 42623, 316, 9, 45, "Output",ExpressionUUID->"7884f88e-e55a-4b31-bc25-8fa9d69d96dd",
 CellID->1627313273]
}, Open  ]],
Cell[CellGroupData[{
Cell[1782316, 42637, 439, 12, 31, "Input",ExpressionUUID->"b4f32976-5213-4759-b20a-d0ad734179ec",
 CellID->1173463341],
Cell[1782758, 42651, 240, 6, 45, "Output",ExpressionUUID->"1b3a109a-0fec-43e5-8a24-c25e70988e69",
 CellID->697881034]
}, Open  ]],
Cell[1783013, 42660, 165, 2, 38, "ItemNumbered",ExpressionUUID->"486bbb00-3ed0-4718-bc19-4f36ba8e309b",
 CellID->1130710570],
Cell[1783181, 42664, 371, 6, 104, "Text",ExpressionUUID->"88a6f77c-157b-491c-85b6-e60434001ba4",
 CellID->769757687],
Cell[1783555, 42672, 1393, 38, 148, "Input",ExpressionUUID->"6333e3dc-7c39-42a2-a0bc-d40717061eed",
 CellID->209891916],
Cell[1784951, 42712, 281, 5, 75, "Text",ExpressionUUID->"45faecd7-981e-4874-91ab-2fc3d2ac19bd",
 CellID->1359700354],
Cell[CellGroupData[{
Cell[1785257, 42721, 311, 6, 31, "Input",ExpressionUUID->"cd68d3f4-37e6-4e32-9388-ab0a0971447e",
 CellID->220418027],
Cell[1785571, 42729, 809, 25, 68, "Output",ExpressionUUID->"128538ef-4083-447c-965b-477353c0f99a",
 CellID->1624190628]
}, Open  ]],
Cell[1786395, 42757, 162, 2, 45, "Text",ExpressionUUID->"e023a18f-09d5-40cf-a1b2-f290b897f51d",
 CellID->1720198709],
Cell[CellGroupData[{
Cell[1786582, 42763, 270, 6, 31, "Input",ExpressionUUID->"37c73b98-d39f-4cca-a01c-4e43c1e053ed",
 CellID->748591490],
Cell[1786855, 42771, 709, 21, 45, "Output",ExpressionUUID->"1d9a4d85-9777-4227-bc18-e801200e9ad1",
 CellID->761238949]
}, Open  ]],
Cell[CellGroupData[{
Cell[1787601, 42797, 265, 5, 31, "Input",ExpressionUUID->"3a2e2ecf-ac98-48bf-8e57-45e19c92e8bf",
 CellID->1288250812],
Cell[1787869, 42804, 709, 21, 45, "Output",ExpressionUUID->"5937b8cb-c3f9-4bb3-b618-7a1ee099a646",
 CellID->1137334491]
}, Open  ]],
Cell[1788593, 42828, 246, 5, 75, "Text",ExpressionUUID->"c5f0cd6c-001b-402c-9b1c-2aceba307cf5",
 CellID->428848290],
Cell[CellGroupData[{
Cell[1788864, 42837, 373, 9, 31, "Input",ExpressionUUID->"82eb6a78-7599-4d67-8b96-c478a9056ef2",
 CellID->726362820],
Cell[1789240, 42848, 416, 12, 45, "Output",ExpressionUUID->"c69dd8a0-1854-4a83-9afb-27e2f2b05d73",
 CellID->107302135]
}, Open  ]],
Cell[1789671, 42863, 161, 2, 45, "Text",ExpressionUUID->"be116ba1-6cbe-4b3d-8df8-da0a2b8d77d9",
 CellID->801908544],
Cell[CellGroupData[{
Cell[1789857, 42869, 272, 6, 31, "Input",ExpressionUUID->"4aff6fa1-9c37-4f3c-985a-9f2f37c4ed76",
 CellID->1608187735],
Cell[1790132, 42877, 3531, 105, 209, "Output",ExpressionUUID->"5e2999f2-0474-451b-bd83-2e4b46490cd6",
 CellID->1831686592]
}, Open  ]],
Cell[CellGroupData[{
Cell[1793700, 42987, 266, 5, 31, "Input",ExpressionUUID->"6a37b17a-5b2d-47c9-b3a1-328936c4f5b7",
 CellID->1896602114],
Cell[1793969, 42994, 3530, 105, 209, "Output",ExpressionUUID->"c7889295-1403-4f33-b46b-1b93a51725d6",
 CellID->602786050]
}, Open  ]],
Cell[1797514, 43102, 237, 5, 75, "Text",ExpressionUUID->"21919dc1-4d2a-41a0-91f2-f482b42c7ba9",
 CellID->1308018774],
Cell[CellGroupData[{
Cell[1797776, 43111, 372, 9, 31, "Input",ExpressionUUID->"8e4458d1-b5fa-45f8-bc77-8ea81ebd03c0",
 CellID->81440279],
Cell[1798151, 43122, 479, 14, 45, "Output",ExpressionUUID->"760a27c0-3aba-4c98-8655-569576501036",
 CellID->554871177]
}, Open  ]],
Cell[CellGroupData[{
Cell[1798667, 43141, 378, 10, 31, "Input",ExpressionUUID->"26a5b63f-fee9-4af0-bdfc-1272103f8777",
 CellID->1017525663],
Cell[1799048, 43153, 482, 14, 45, "Output",ExpressionUUID->"b66b4ba1-90c9-476e-a324-dd90ce03265e",
 CellID->380798974]
}, Open  ]],
Cell[CellGroupData[{
Cell[1799567, 43172, 374, 10, 31, "Input",ExpressionUUID->"5f377107-2b48-42fc-bde8-af68b2d44f26",
 CellID->587087958],
Cell[1799944, 43184, 483, 14, 45, "Output",ExpressionUUID->"6e78aff6-5952-4858-94c9-c3e0c6f9ff34",
 CellID->1259928829]
}, Open  ]],
Cell[1800442, 43201, 915, 13, 252, "Text",ExpressionUUID->"c297c70f-3dfe-44f3-ae3c-f27a92a288c9",
 CellID->1207485723],
Cell[1801360, 43216, 160, 2, 38, "ItemNumbered",ExpressionUUID->"67556497-a5ed-4bea-962f-47015156c48f",
 CellID->1981157929],
Cell[1801523, 43220, 694, 12, 193, "Text",ExpressionUUID->"2c1419f1-ef59-4df0-b948-f38a04551ee3",
 CellID->587365968]
}, Open  ]],
Cell[CellGroupData[{
Cell[1802254, 43237, 194, 2, 66, "Subsubsection",ExpressionUUID->"c1ba58ef-5e35-4eec-bdf4-d5d2a9451be3",
 CellID->355978449],
Cell[1802451, 43241, 597, 9, 163, "Text",ExpressionUUID->"11277d2b-f905-422e-bdf4-cb4f2104be45",
 CellID->40351801],
Cell[1803051, 43252, 211, 3, 45, "Text",ExpressionUUID->"fc4a8508-e011-4c97-a38d-1c1438e1482d",
 CellID->175724423],
Cell[CellGroupData[{
Cell[1803287, 43259, 398, 10, 31, "Input",ExpressionUUID->"7e987c89-c1d8-4d21-85d4-bc216ba6b81f",
 CellID->1698921571],
Cell[1803688, 43271, 427, 9, 45, "Output",ExpressionUUID->"e14fd089-1703-4a2f-b9e2-fa6553f0b435",
 CellID->1598584533]
}, Open  ]],
Cell[1804130, 43283, 411, 7, 104, "Text",ExpressionUUID->"02978c61-9c46-492b-8c3e-4dc80282128e",
 CellID->242338514],
Cell[CellGroupData[{
Cell[1804566, 43294, 290, 6, 31, "Input",ExpressionUUID->"dc25f569-eb5e-499b-bebe-125934a037bf",
 CellID->243657202],
Cell[1804859, 43302, 781, 23, 68, "Output",ExpressionUUID->"943e1ed3-12a6-48f6-85be-afbe8a879b04",
 CellID->1029560372]
}, Open  ]],
Cell[CellGroupData[{
Cell[1805677, 43330, 284, 6, 31, "Input",ExpressionUUID->"dda1ac8a-ba4f-4f7c-a523-bdba60148ca3",
 CellID->1297720644],
Cell[1805964, 43338, 324, 7, 45, "Output",ExpressionUUID->"469e2a19-d225-4479-9eb0-d41abd56511d",
 CellID->1269715108]
}, Open  ]],
Cell[1806303, 43348, 181, 2, 45, "Text",ExpressionUUID->"bb7a761c-ae3e-410b-b724-c73df3f809ed",
 CellID->556819917],
Cell[CellGroupData[{
Cell[1806509, 43354, 413, 11, 31, "Input",ExpressionUUID->"d32b1815-b9d5-4942-b7a4-01bd3b3b837d",
 CellID->593223913],
Cell[1806925, 43367, 323, 7, 45, "Output",ExpressionUUID->"a367ccaf-d74b-4498-aae4-ce27b8d10ee1",
 CellID->1016860]
}, Open  ]],
Cell[1807263, 43377, 190, 2, 45, "Text",ExpressionUUID->"8c1d6545-7b78-4852-8159-dc49fe95eda6",
 CellID->2057980491],
Cell[CellGroupData[{
Cell[1807478, 43383, 414, 11, 31, "Input",ExpressionUUID->"5869808c-8cea-48b5-a618-e3f4f2c044f8",
 CellID->1777960212],
Cell[1807895, 43396, 304, 7, 45, "Output",ExpressionUUID->"327ffeb9-9439-40bd-b786-7b1f81fb295e",
 CellID->899399935]
}, Open  ]],
Cell[CellGroupData[{
Cell[1808236, 43408, 410, 11, 31, "Input",ExpressionUUID->"a12f07d3-b52d-4e8f-a2f8-596b79c213c2",
 CellID->1643702812],
Cell[1808649, 43421, 241, 5, 45, "Output",ExpressionUUID->"1501ddb2-80f7-4951-9edb-28bf08835992",
 CellID->977389912]
}, Open  ]],
Cell[1808905, 43429, 203, 2, 45, "Text",ExpressionUUID->"3aadc9a8-20ae-41f1-b2f8-7c6465a0fb20",
 CellID->1889423061],
Cell[CellGroupData[{
Cell[1809133, 43435, 420, 11, 31, "Input",ExpressionUUID->"8e09ee9d-14f4-4a74-9f96-432e988fbcb8",
 CellID->667074279],
Cell[1809556, 43448, 228, 5, 45, "Output",ExpressionUUID->"a27bc809-811a-4755-8600-bcd0e84b8537",
 CellID->857792909]
}, Open  ]],
Cell[1809799, 43456, 190, 2, 45, "Text",ExpressionUUID->"cc3ca929-8ea6-4dff-b800-89c2f04eef5b",
 CellID->2007365234],
Cell[1809992, 43460, 603, 16, 54, "Input",ExpressionUUID->"545c0263-afdf-4468-afe9-60698091674a",
 CellID->1880872112],
Cell[1810598, 43478, 397, 6, 104, "Text",ExpressionUUID->"a8ebf1ce-fbb6-4e95-98ba-7f9c1b82249f",
 CellID->1430856298]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1811044, 43490, 161, 2, 68, "Subsection",ExpressionUUID->"c5a4ccbc-0a19-4c43-85f4-c94a3d7fd188",
 CellID->139763556],
Cell[CellGroupData[{
Cell[1811230, 43496, 149, 2, 66, "Subsubsection",ExpressionUUID->"be6055e3-630d-4d33-848c-9cdeee1e53ba",
 CellID->853604117],
Cell[1811382, 43500, 168, 2, 38, "ItemNumbered",ExpressionUUID->"88221874-32df-404c-bf3b-509b8f2e4756",
 CellID->1333632459],
Cell[1811553, 43504, 352, 6, 104, "Text",ExpressionUUID->"245f0da3-c965-47b1-b4be-bb047e2a64cc",
 CellID->1073914674],
Cell[1811908, 43512, 314, 7, 31, "Input",ExpressionUUID->"64c77dfe-ef4c-4025-b0d6-71d41cddcce3",
 CellID->1873570906],
Cell[1812225, 43521, 171, 2, 45, "Text",ExpressionUUID->"c35d0eb3-6d43-44c5-8300-053fc1e497e0",
 CellID->1734325516],
Cell[CellGroupData[{
Cell[1812421, 43527, 462, 12, 54, "Input",ExpressionUUID->"51acd30e-c03f-4675-b677-13cffa226dd6",
 CellID->1831471585],
Cell[1812886, 43541, 317, 8, 45, "Output",ExpressionUUID->"02cf5ee1-b9af-49a9-9702-4eb41c22f8f6",
 CellID->182620933]
}, Open  ]],
Cell[1813218, 43552, 157, 2, 38, "ItemNumbered",ExpressionUUID->"ed78f25b-e259-4918-82e4-ce4d11e74bdf",
 CellID->555889368],
Cell[1813378, 43556, 186, 2, 45, "Text",ExpressionUUID->"22c65f81-d440-4ca7-abd2-daa5da27dabf",
 CellID->1278743526],
Cell[CellGroupData[{
Cell[1813589, 43562, 306, 7, 31, "Input",ExpressionUUID->"98abac14-cad5-40b7-98b0-5ac08ae5ef94",
 CellID->26700509],
Cell[1813898, 43571, 250, 6, 45, "Output",ExpressionUUID->"6e9037e4-f131-47a7-bf46-d35319da902f",
 CellID->3025097]
}, Open  ]],
Cell[1814163, 43580, 171, 2, 45, "Text",ExpressionUUID->"f484c42e-58f7-4595-8abc-128f349a8923",
 CellID->1450681398],
Cell[CellGroupData[{
Cell[1814359, 43586, 321, 8, 31, "Input",ExpressionUUID->"1ab56249-1652-4f97-8574-5f63b6c35154",
 CellID->844726068],
Cell[1814683, 43596, 317, 8, 45, "Output",ExpressionUUID->"ae3a1a98-cb75-4e6b-85b8-5fa18e73554b",
 CellID->872762766]
}, Open  ]],
Cell[1815015, 43607, 160, 2, 38, "ItemNumbered",ExpressionUUID->"1c8547cf-6b4b-42c4-8e82-09b9c2e5160a",
 CellID->1210499152],
Cell[1815178, 43611, 186, 2, 45, "Text",ExpressionUUID->"c9dc2e31-f9da-4b1c-b97a-31b161d9a03b",
 CellID->1746659633],
Cell[CellGroupData[{
Cell[1815389, 43617, 312, 7, 31, "Input",ExpressionUUID->"dea8e040-8fe4-4c69-abfd-07e645a941fd",
 CellID->1640193249],
Cell[1815704, 43626, 275, 7, 67, "Output",ExpressionUUID->"e7dd2c74-9f86-47fc-b3d2-9346fd9ff141",
 CellID->1504652436]
}, Open  ]],
Cell[1815994, 43636, 310, 5, 75, "Text",ExpressionUUID->"a59d221c-74ab-4271-b340-4685c2e4e4b3",
 CellID->2073548427],
Cell[CellGroupData[{
Cell[1816329, 43645, 254, 5, 31, "Input",ExpressionUUID->"f28015c8-a954-442d-bf16-b51c1d6fe647",
 CellID->580549302],
Cell[1816586, 43652, 450, 14, 60, "Output",ExpressionUUID->"62992511-21a6-487a-8a21-3cae7f4adfbb",
 CellID->720521366]
}, Open  ]],
Cell[1817051, 43669, 250, 5, 75, "Text",ExpressionUUID->"80f6d7ce-c3b7-4466-8690-467711b9eec7",
 CellID->142312929],
Cell[CellGroupData[{
Cell[1817326, 43678, 516, 14, 31, "Input",ExpressionUUID->"003e5707-8362-4bf2-9fb4-307fb9daa721",
 CellID->1943119352],
Cell[1817845, 43694, 199, 4, 45, "Output",ExpressionUUID->"1eb251de-d395-4505-acb2-a4773c57142d",
 CellID->1573914106]
}, Open  ]],
Cell[1818059, 43701, 185, 2, 45, "Text",ExpressionUUID->"b2d981b4-443d-446b-84bf-1e6e1cb1c60f",
 CellID->70815796],
Cell[1818247, 43705, 286, 6, 75, "Text",ExpressionUUID->"dbf4d3d8-5bcf-4277-85dc-6934ca822189",
 CellID->495142934],
Cell[1818536, 43713, 227, 4, 38, "ItemNumbered",ExpressionUUID->"b61a5346-a03b-480c-a69b-237399cc1320",
 CellID->368159613],
Cell[1818766, 43719, 204, 4, 45, "Text",ExpressionUUID->"0039ecc8-8493-4826-ac59-3c98d5d75465",
 CellID->758228684],
Cell[1818973, 43725, 514, 13, 54, "Input",ExpressionUUID->"9ee4dd55-54a1-43cb-ac4f-312cdc651477",
 CellID->136888],
Cell[1819490, 43740, 240, 5, 75, "Text",ExpressionUUID->"7aac8b64-a37a-4c93-96bc-c8cdc651ad60",
 CellID->1186803625],
Cell[1819733, 43747, 348, 9, 31, "Input",ExpressionUUID->"80dccd97-537d-4159-b8d3-b2bd33e111d2",
 CellID->1702507244],
Cell[1820084, 43758, 267, 5, 75, "Text",ExpressionUUID->"4ba17003-071e-4fb6-a806-10e8179e4994",
 CellID->1041967495],
Cell[1820354, 43765, 586, 9, 163, "Text",ExpressionUUID->"bfafbf27-8db7-4e8b-a138-c9c579d98828",
 CellID->1666934087],
Cell[1820943, 43776, 457, 9, 104, "Text",ExpressionUUID->"3a015b5e-7039-4630-84c7-02a73649956f",
 CellID->1068925091],
Cell[1821403, 43787, 436, 11, 54, "Input",ExpressionUUID->"050689de-bc36-4d48-a26f-16be8df0e2f2",
 CellID->1765600124],
Cell[1821842, 43800, 165, 2, 45, "Text",ExpressionUUID->"64b210d8-6d70-4ab2-b5c3-01e59fd439d6",
 CellID->289653159],
Cell[CellGroupData[{
Cell[1822032, 43806, 273, 6, 31, "Input",ExpressionUUID->"06e4ea55-079b-4744-8f83-3e86e97c87cf",
 CellID->489627524],
Cell[1822308, 43814, 233, 5, 45, "Output",ExpressionUUID->"8bf7e9df-4e57-40f8-a274-2266d26990d0",
 CellID->1833639775]
}, Open  ]],
Cell[CellGroupData[{
Cell[1822578, 43824, 276, 6, 31, "Input",ExpressionUUID->"404c1fd5-2ba2-47fc-87e4-981dc6b73b3d",
 CellID->547249735],
Cell[1822857, 43832, 235, 5, 45, "Output",ExpressionUUID->"8951451c-0147-482d-9615-15a18829146f",
 CellID->580827289]
}, Open  ]],
Cell[1823107, 43840, 326, 6, 75, "Text",ExpressionUUID->"ba5830ff-883d-423c-afd3-a837e81d69e8",
 CellID->1651070608],
Cell[CellGroupData[{
Cell[1823458, 43850, 295, 6, 31, "Input",ExpressionUUID->"3fd634bf-180a-4bc1-81f5-471aee0bb289",
 CellID->1928237204],
Cell[1823756, 43858, 307, 7, 45, "Output",ExpressionUUID->"37e0b978-13c2-4531-bbe0-71e1a0a90ebb",
 CellID->1989292464]
}, Open  ]],
Cell[1824078, 43868, 233, 5, 45, "Text",ExpressionUUID->"65238582-b76b-42e0-b642-54a6b633fdbc",
 CellID->2013025952],
Cell[CellGroupData[{
Cell[1824336, 43877, 299, 6, 31, "Input",ExpressionUUID->"3f4afa6f-fcba-4ee3-b01c-58b4c9c72345",
 CellID->431368341],
Cell[1824638, 43885, 616, 17, 45, "Output",ExpressionUUID->"b893be3e-0803-4346-ac25-5632234e7f21",
 CellID->1035657736]
}, Open  ]],
Cell[1825269, 43905, 294, 5, 75, "Text",ExpressionUUID->"ed382676-dba0-45c9-946f-22e37518f794",
 CellID->631486169],
Cell[CellGroupData[{
Cell[1825588, 43914, 259, 5, 31, "Input",ExpressionUUID->"2d392032-3163-4b41-8283-b9dd2e986ca4",
 CellID->1961214510],
Cell[1825850, 43921, 732, 20, 68, "Output",ExpressionUUID->"e4d28fe4-3366-4774-b8b2-3a42702bc791",
 CellID->352810424]
}, Open  ]],
Cell[1826597, 43944, 330, 6, 75, "Text",ExpressionUUID->"8b7c736d-66f4-4fe7-997b-cd9220f1eba9",
 CellID->1098584083],
Cell[CellGroupData[{
Cell[1826952, 43954, 245, 5, 31, "Input",ExpressionUUID->"9c5eef24-7965-4b05-9070-e994f499ede3",
 CellID->2072088108],
Cell[1827200, 43961, 188, 3, 45, "Output",ExpressionUUID->"0b79bf57-533c-4eb8-8285-641491a1786d",
 CellID->940551237]
}, Open  ]],
Cell[1827403, 43967, 153, 2, 45, "Text",ExpressionUUID->"cc5fffb0-75f5-4814-93cd-a15ea20a7563",
 CellID->217514692],
Cell[CellGroupData[{
Cell[1827581, 43973, 290, 6, 31, "Input",ExpressionUUID->"31d2943c-cc56-49d8-9e9c-5234fb5bb52a",
 CellID->1018598861],
Cell[1827874, 43981, 284, 7, 45, "Output",ExpressionUUID->"bb9810c9-fd03-4234-b71c-ff0ca5f00025",
 CellID->139891839]
}, Open  ]],
Cell[1828173, 43991, 189, 2, 45, "Text",ExpressionUUID->"23bce26c-ddae-4c51-86df-8f1222a49c3a",
 CellID->1815028255],
Cell[CellGroupData[{
Cell[1828387, 43997, 285, 6, 31, "Input",ExpressionUUID->"aba20a3c-fcbf-4f79-b412-dcb71bcd81c6",
 CellID->171907601],
Cell[1828675, 44005, 216, 5, 45, "Output",ExpressionUUID->"2edba0e6-c2e9-4f57-a017-682afdf52f5f",
 CellID->2007330511]
}, Open  ]],
Cell[1828906, 44013, 207, 4, 45, "Text",ExpressionUUID->"4c16796b-9d94-46ca-bd5e-0bc84dbba4d2",
 CellID->235804007],
Cell[CellGroupData[{
Cell[1829138, 44021, 287, 6, 31, "Input",ExpressionUUID->"4a7a8874-419c-4ace-b1f0-0a119023b71d",
 CellID->1108264104],
Cell[1829428, 44029, 171, 3, 45, "Output",ExpressionUUID->"5c32d815-b666-42bf-a1ca-a99edf630949",
 CellID->1537286608]
}, Open  ]],
Cell[1829614, 44035, 219, 4, 45, "Text",ExpressionUUID->"32be52e8-2550-448e-8cb5-c947db443c35",
 CellID->340227232],
Cell[1829836, 44041, 1221, 33, 171, "Input",ExpressionUUID->"6487b054-6aff-4f2e-8c0a-c93933cc5700",
 CellID->1209788929],
Cell[1831060, 44076, 171, 2, 45, "Text",ExpressionUUID->"6b3df7e9-76b2-4562-81d0-17683e781b50",
 CellID->1802219902],
Cell[CellGroupData[{
Cell[1831256, 44082, 256, 5, 31, "Input",ExpressionUUID->"6623bf7d-66da-4564-a397-f2661ffe1a2b",
 CellID->856914430],
Cell[1831515, 44089, 172, 3, 45, "Output",ExpressionUUID->"8ba1f62e-b213-43a8-8fab-10e50fea3834",
 CellID->521174157]
}, Open  ]],
Cell[CellGroupData[{
Cell[1831724, 44097, 338, 8, 31, "Input",ExpressionUUID->"18c7b989-a19d-45ca-9637-04e53f90e5a1",
 CellID->1823555628],
Cell[1832065, 44107, 303, 7, 45, "Output",ExpressionUUID->"b0bf6c45-2fd1-42b7-a51e-d9b259b89205",
 CellID->1718258442]
}, Open  ]],
Cell[1832383, 44117, 164, 2, 45, "Text",ExpressionUUID->"bad731ad-b403-4c67-b738-3fe19a346a28",
 CellID->1557033485],
Cell[1832550, 44121, 393, 10, 31, "Input",ExpressionUUID->"4e6810a1-a281-40a3-902a-bfc466cca12f",
 CellID->1464037985],
Cell[1832946, 44133, 173, 2, 45, "Text",ExpressionUUID->"8df3735c-e3a0-4f3f-8007-dae1e51a0616",
 CellID->2097950043],
Cell[CellGroupData[{
Cell[1833144, 44139, 194, 3, 31, "Input",ExpressionUUID->"836c1d4a-4b33-42f3-9d1f-cc88df514bf3",
 CellID->408234093],
Cell[1833341, 44144, 281, 7, 45, "Output",ExpressionUUID->"a8708877-4c58-43b8-b326-95dcaf3ca429",
 CellID->495754840]
}, Open  ]],
Cell[1833637, 44154, 196, 2, 45, "Text",ExpressionUUID->"09f9b96e-e65e-4063-8a12-bfabf08ef3c6",
 CellID->2062529167],
Cell[CellGroupData[{
Cell[1833858, 44160, 391, 10, 31, "Input",ExpressionUUID->"2d39d1da-3ee9-47e8-9257-44d4e4928fc4",
 CellID->1305556555],
Cell[1834252, 44172, 296, 6, 45, "Output",ExpressionUUID->"fb3aa72c-24b6-4c72-9f43-6bab1451fb1f",
 CellID->1075514350]
}, Open  ]],
Cell[1834563, 44181, 209, 4, 45, "Text",ExpressionUUID->"ef3c5454-d101-4d52-a706-5b5f46cdcdce",
 CellID->1780097527]
}, Open  ]],
Cell[CellGroupData[{
Cell[1834809, 44190, 152, 2, 66, "Subsubsection",ExpressionUUID->"8c407f87-e059-41b5-9201-fc76c03fac1d",
 CellID->1504449932],
Cell[1834964, 44194, 301, 5, 75, "Text",ExpressionUUID->"235d3a88-81c6-463c-aaa8-dacf241f2404",
 CellID->817547346],
Cell[CellGroupData[{
Cell[1835290, 44203, 432, 11, 54, "Input",ExpressionUUID->"0bfdf922-5c17-4791-81a6-4c066d7aae5d",
 CellID->1683679383],
Cell[1835725, 44216, 249, 6, 45, "Output",ExpressionUUID->"f8193f84-a73a-4f7f-9895-464996929919",
 CellID->1416199003]
}, Open  ]],
Cell[1835989, 44225, 210, 4, 45, "Text",ExpressionUUID->"62a3e1f1-89ab-4c9e-92bb-edb1f63439ee",
 CellID->1495383720],
Cell[CellGroupData[{
Cell[1836224, 44233, 384, 9, 54, "Input",ExpressionUUID->"9b494b2e-9742-4278-99ab-523fb5d62310",
 CellID->2048913778],
Cell[1836611, 44244, 199, 4, 45, "Output",ExpressionUUID->"cf4e9738-6031-4aef-a24d-0d31839eebfc",
 CellID->513199596]
}, Open  ]],
Cell[1836825, 44251, 744, 11, 222, "Text",ExpressionUUID->"7973b7c5-6eea-47b2-ba7f-443feba95566",
 CellID->1051283620]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1837618, 44268, 146, 2, 68, "Subsection",ExpressionUUID->"1959fe3a-b2eb-44e2-b48e-b47d89550ca8",
 CellID->114876702],
Cell[1837767, 44272, 346, 6, 104, "Text",ExpressionUUID->"1d5d7d43-ac45-4465-b970-49a7811873fa",
 CellID->144931861],
Cell[1838116, 44280, 414, 7, 104, "Text",ExpressionUUID->"af26b73d-4e1c-4b8f-a262-df5b6b02c09f",
 CellID->1872999789],
Cell[1838533, 44289, 516, 8, 163, "Text",ExpressionUUID->"8d5edca1-ba95-4538-9099-dd17305f3fd3",
 CellID->681702962],
Cell[1839052, 44299, 508, 8, 134, "Text",ExpressionUUID->"e78311a7-fabd-44b7-aedc-8bc4892d7068",
 CellID->320322634],
Cell[1839563, 44309, 566, 9, 163, "Text",ExpressionUUID->"4d19b5e3-d7b1-4cd5-90d6-8a4d4f0a0008",
 CellID->1254987601]
}, Open  ]]
}, Open  ]]
}
]
*)

